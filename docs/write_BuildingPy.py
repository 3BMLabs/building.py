import glob, sys
from glob import glob
import re
from os import path

def find_ext(dr, ext):
	return glob(path.join(dr,"*.{}".format(ext)))

def generate_single_file(output_filename, include_files=None):
	pythonfiles = [
		"abstract/serializable.py",
		"packages/helper.py",
		"packages/svg/path/parser.py",
		"packages/svg/path/path.py",
		"geometry/coords.py",
		"abstract/vector.py",
		"geometry/point.py",
		"project/fileformat.py",
		"abstract/coordinatesystem.py",
		"abstract/matrix.py",
		"geometry/curve.py",
		"abstract/node.py",
		"abstract/color.py",
		"abstract/image.py",
		"abstract/interval.py",
		"abstract/plane.py",
		"abstract/text.py",
		"geometry/bmesh.py",
		"geometry/geometry2d.py",
		"abstract/intersect.py",
		"abstract/intersect2d.py",
		"geometry/linestyle.py",
		"geometry/pointcloud.py",
		"geometry/solid.py",
		"geometry/surface.py",
		"objects/panel.py",
		"abstract/boundingbox.py",
		"geometry/systemsimple.py",
		"library/material.py",
		"library/profile.py",
		"objects/analytical.py",
		"objects/annotation.py",
		"objects/datum.py",
		"objects/frame.py",
		"objects/shape.py",
		"objects/shape3d.py",
		"objects/view.py",
		"exchange/pat.py",
	]

	# Add the specified files if include_files is provided
	if include_files:
		for file in include_files:
			pythonfiles.append(f"{file}")

	BuildingPySingleFileStr = ""
	Includedstr = "# [included in BP singlefile]"

	for i in pythonfiles:
		with open(i) as f:
			content = f.read()
			if i == "packages/svg/path/parser.py":
				content = content.replace("path.", "")
			if Includedstr in content:
				BuildingPySingleFileStr = BuildingPySingleFileStr + content

	start = '# [!not included in BP singlefile - start]'
	end = '# [!not included in BP singlefile - end]'
	s = BuildingPySingleFileStr

	try:
		test2 = ((s.split(start))[1].split(end)[0])
	except IndexError:
		test2 = ""

	i = 0
	max = BuildingPySingleFileStr.count(start)

	for j in range(max):
		try:
			substringtoremove = (BuildingPySingleFileStr.split(start))[1].split(end)[0]
			BuildingPySingleFileStr = BuildingPySingleFileStr.replace(substringtoremove, "")
			BuildingPySingleFileStr = BuildingPySingleFileStr.replace(start, "", 1)
			BuildingPySingleFileStr = BuildingPySingleFileStr.replace(end, "", 1)
		except:
			print("out of range")

	BuildingPySingleFileStr = BuildingPySingleFileStr.replace(Includedstr, "")

	BuildingPySingleFileStr_NoImports = ""

	for line in BuildingPySingleFileStr.split("\n"):
		if "from " in line and "#" not in line and len(line) < 20:
			pass
		elif "import " in line and "#" not in line:
			pass
		else:
			BuildingPySingleFileStr_NoImports = BuildingPySingleFileStr_NoImports + "\n" + line
	BuildingPySingleFileStr = BuildingPySingleFileStr_NoImports

	startstr = """#[BuildingPy] DO NOT EDIT THIS FILE. IT IS GENERATED FROM THE SOURCE CODE
import importlib, math
from math import sqrt, cos, sin, acos, degrees, radians, log, pi
import sys
import re
import json
import bisect
from abc import *
from collections import defaultdict
from collections.abc import MutableSequence
import urllib
import urllib.request
import string
import random
from typing import List, Tuple, Union
import xml.etree.ElementTree as ET
from pathlib import Path
import copy
import pickle
from functools import reduce
import struct
#import ezdxf"""

	BuildingPySingleFileStr = startstr + BuildingPySingleFileStr

	with open(output_filename, 'w+') as fh:
		fh.write(BuildingPySingleFileStr)


generate_single_file('BuildingPy.py')

generate_single_file('BuildingPy-struct4u.py', include_files=['exchange/struct4U.py'])

generate_single_file('BuildingPy-gis2bim.py', include_files=['exchange/GIS2BIM.py', "packages/GIS2BIM/GIS2BIM.py", "packages/GIS2BIM/GIS2BIM_NL.py", 	"packages/GIS2BIM/GIS2BIM_NL_helpers.py", "packages/GIS2BIM/GIS2BIM_CityJSON.py", "packages/GIS2BIM/GIS2BIM_CRS.py"])

generate_single_file('BuildingPy-revit.py', include_files=['exchange/revit.py'])