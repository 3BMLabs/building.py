#[GIS2BIM] DO NOT EDIT THIS FILE. IT IS GENERATED FROM THE SOURCE CODE
import urllib
import urllib.request
from urllib.request import urlopen
import xml.etree.ElementTree as ET
import json
import math
import re
from zipfile import ZipFile
import time
import ijson
import sys
import urllib
#[BuildingPy] DO NOT EDIT THIS FILE. IT IS GENERATED FROM THE SOURCE CODE

import math
from math import sqrt, cos, sin, acos, degrees, radians, log, pi
import sys
import os
import re
import json
import bisect
from abc import *
from collections import defaultdict
from collections.abc import MutableSequence
import subprocess
import urllib
import time
import urllib.request
import string
import random
from typing import List, Tuple, Union
import xml.etree.ElementTree as ET
from pathlib import Path
import copy
import pickle
from functools import reduce
import struct
#import ezdxf





def find_in_list_of_list(mylist, char):
    for sub_list in mylist:
        if char in sub_list:
            return (mylist.index(sub_list))
    raise ValueError("'{char}' is not in list".format(char=char))

class generateID:
    def __init__(self) -> None:
        self.id = None
        self.object = None
        self.name = None
        self.generateID()

    def generateID(self) -> None:
        id = ""
        lengthID = 12
        random_source = string.ascii_uppercase + string.digits
        for x in range(lengthID):
            id += random.choice(random_source)

        id_list = list(id)
        self.id = f"#"+"".join(id_list)
        return f"test {self.__class__.__name__}"

    def __repr__(self) -> str:
        return f"{self.id}"


def findjson(id, json_string):
    #faster way to search in json
    results = []

    def _decode_dict(a_dict):
        try:
            results.append(a_dict[id])
        except KeyError:
            pass
        return a_dict

    json.loads(json_string, object_hook=_decode_dict) # Return value ignored.
    return results

def list_transpose(lst):
    #list of lists, transpose columns/rows
    newlist = list(map(list, zip(*lst)))
    return newlist

def is_null(lst):
    return all(el is None for el in lst)

def clean_list(input_list, preserve_indices=True):
    if not input_list:
        return input_list
    
    culled_list = []

    if preserve_indices:
        if is_null(input_list):
            return None
        
        j = len(input_list) - 1
        while j >= 0 and input_list[j] is None:
            j -= 1

        for i in range(j + 1):
            sublist = input_list[i]

            if isinstance(sublist, list):
                val = clean_list(sublist, preserve_indices)
                culled_list.append(val)
            else:
                culled_list.append(input_list[i])
    else:
        if is_null(input_list):
            return []
        
        for el in input_list:
            if isinstance(el, list):
                if not is_null(el):
                    val = clean_list(el, preserve_indices=False)
                    if val:
                        culled_list.append(val)
            elif el is not None:
                culled_list.append(el)
            
    return culled_list

def flatten(lst):
    if type(lst) != list:
        lst = [lst]
    flat_list = []
    for sublist in lst:
        try:
            for item in sublist:
                flat_list.append(item)
        except:
            flat_list.append(sublist)
    return flat_list

def all_true(lst):
    for element in lst:
        if not element:
            return False
    return True

def replace_at_index(object, index, new_object):
    if index < 0 or index >= len(object):
        raise IndexError("Index out of range")
    return object[:index] + new_object + object[index+1:]

def xmldata(myurl, xPathStrings):
    urlFile = urllib.request.urlopen(myurl)
    tree = ET.parse(urlFile)
    xPathResults = []
    for xPathString in xPathStrings:
        a = tree.findall(xPathString)
        xPathResulttemp2 = []
        for xPathResult in a:
            xPathResulttemp2.append(xPathResult.text)
        xPathResults.append(xPathResulttemp2)
    return xPathResults


COMMANDS = set("MmZzLlHhVvCcSsQqTtAa")
UPPERCASE = set("MZLHVCSQTA")

COMMAND_RE = re.compile(r"([MmZzLlHhVvCcSsQqTtAa])")
FLOAT_RE = re.compile(rb"^[-+]?\d*\.?\d*(?:[eE][-+]?\d+)?")


class InvalidPathError(ValueError):
    pass


# The argument sequences from the grammar, made sane.
# u: Non-negative number
# s: Signed number or coordinate
# c: coordinate-pair, which is two coordinates/numbers, separated by whitespace
# f: A one character flag, doesn't need whitespace, 1 or 0
ARGUMENT_SEQUENCE = {
    "M": "c",
    "Z": "",
    "L": "c",
    "H": "s",
    "V": "s",
    "C": "ccc",
    "S": "cc",
    "Q": "cc",
    "T": "c",
    "A": "uusffc",
}


def strip_array(arg_array):
    """Strips whitespace and commas"""
    # EBNF wsp:(#x20 | #x9 | #xD | #xA) + comma: 0x2C
    while arg_array and arg_array[0] in (0x20, 0x9, 0xD, 0xA, 0x2C):
        arg_array[0:1] = b""


def pop_number(arg_array):
    res = FLOAT_RE.search(arg_array)
    if not res or not res.group():
        raise InvalidPathError(f"Expected a number, got '{arg_array}'.")
    number = float(res.group())
    start = res.start()
    end = res.end()
    arg_array[start:end] = b""
    strip_array(arg_array)

    return number


def pop_unsigned_number(arg_array):
    number = pop_number(arg_array)
    if number < 0:
        raise InvalidPathError(f"Expected a non-negative number, got '{number}'.")
    return number


def pop_coordinate_pair(arg_array):
    x = pop_number(arg_array)
    y = pop_number(arg_array)
    return complex(x, y)


def pop_flag(arg_array):
    flag = arg_array[0]
    arg_array[0:1] = b""
    strip_array(arg_array)
    if flag == 48:  # ASCII 0
        return False
    if flag == 49:  # ASCII 1
        return True


FIELD_POPPERS = {
    "u": pop_unsigned_number,
    "s": pop_number,
    "c": pop_coordinate_pair,
    "f": pop_flag,
}


def _commandify_path(pathdef):
    """Splits path into commands and arguments"""
    token = None
    for x in COMMAND_RE.split(pathdef):
        x = x.strip()
        if x in COMMANDS:
            if token is not None:
                yield token
            if x in ("z", "Z"):
                # The end command takes no arguments, so add a blank one
                token = (x, "")
            else:
                token = (x,)
        elif x:
            if token is None:
                raise InvalidPathError(f"Path does not start with a command: {pathdef}")
            token += (x,)
    yield token


def _tokenize_path(pathdef):
    for command, args in _commandify_path(pathdef):
        # Shortcut this for the close command, that doesn't have arguments:
        if command in ("z", "Z"):
            yield (command,)
            continue

        # For the rest of the commands, we parse the arguments and
        # yield one command per full set of arguments
        arg_sequence = ARGUMENT_SEQUENCE[command.upper()]
        arguments = bytearray(args, "ascii")
        implicit = False
        while arguments:
            command_arguments = []
            for i, arg in enumerate(arg_sequence):
                try:
                    command_arguments.append(FIELD_POPPERS[arg](arguments))
                except InvalidPathError as e:
                    if i == 0 and implicit:
                        return  # Invalid character in path, treat like a comment
                    raise InvalidPathError(
                        f"Invalid path element {command} {args}"
                    ) from e

            yield (command,) + tuple(command_arguments)
            implicit = True

            # Implicit Moveto commands should be treated as Lineto commands.
            if command == "m":
                command = "l"
            elif command == "M":
                command = "L"


def parse_path(pathdef):
    segments = path.Path()
    start_pos = None
    last_command = None
    current_pos = 0

    for token in _tokenize_path(pathdef):
        command = token[0]
        relative = command.islower()
        command = command.upper()
        if command == "M":
            pos = token[1]
            if relative:
                current_pos += pos
            else:
                current_pos = pos
            segments.append(path.Move(current_pos, relative=relative))
            start_pos = current_pos

        elif command == "Z":
            # For Close commands the "relative" argument just preserves case,
            # it has no different in behavior.
            segments.append(path.Close(current_pos, start_pos, relative=relative))
            current_pos = start_pos

        elif command == "L":
            pos = token[1]
            if relative:
                pos += current_pos
            segments.append(path.Line(current_pos, pos, relative=relative))
            current_pos = pos

        elif command == "H":
            hpos = token[1]
            if relative:
                hpos += current_pos.real
            pos = complex(hpos, current_pos.imag)
            segments.append(
                path.Line(current_pos, pos, relative=relative, horizontal=True)
            )
            current_pos = pos

        elif command == "V":
            vpos = token[1]
            if relative:
                vpos += current_pos.imag
            pos = complex(current_pos.real, vpos)
            segments.append(
                path.Line(current_pos, pos, relative=relative, vertical=True)
            )
            current_pos = pos

        elif command == "C":
            control1 = token[1]
            control2 = token[2]
            end = token[3]

            if relative:
                control1 += current_pos
                control2 += current_pos
                end += current_pos

            segments.append(
                path.CubicBezier(
                    current_pos, control1, control2, end, relative=relative
                )
            )
            current_pos = end

        elif command == "S":
            # Smooth curve. First control point is the "reflection" of
            # the second control point in the previous path.
            control2 = token[1]
            end = token[2]

            if relative:
                control2 += current_pos
                end += current_pos

            if last_command in "CS":
                # The first control point is assumed to be the reflection of
                # the second control point on the previous command relative
                # to the current point.
                control1 = current_pos + current_pos - segments[-1].control2
            else:
                # If there is no previous command or if the previous command
                # was not an C, c, S or s, assume the first control point is
                # coincident with the current point.
                control1 = current_pos

            segments.append(
                path.CubicBezier(
                    current_pos, control1, control2, end, relative=relative, smooth=True
                )
            )
            current_pos = end

        elif command == "Q":
            control = token[1]
            end = token[2]

            if relative:
                control += current_pos
                end += current_pos

            segments.append(
                path.QuadraticBezier(current_pos, control, end, relative=relative)
            )
            current_pos = end

        elif command == "T":
            # Smooth curve. Control point is the "reflection" of
            # the second control point in the previous path.
            end = token[1]

            if relative:
                end += current_pos

            if last_command in "QT":
                # The control point is assumed to be the reflection of
                # the control point on the previous command relative
                # to the current point.
                control = current_pos + current_pos - segments[-1].control
            else:
                # If there is no previous command or if the previous command
                # was not an Q, q, T or t, assume the first control point is
                # coincident with the current point.
                control = current_pos

            segments.append(
                path.QuadraticBezier(
                    current_pos, control, end, smooth=True, relative=relative
                )
            )
            current_pos = end

        elif command == "A":
            # For some reason I implemented the Arc with a complex radius.
            # That doesn't really make much sense, but... *shrugs*
            radius = complex(token[1], token[2])
            rotation = token[3]
            arc = token[4]
            sweep = token[5]
            end = token[6]

            if relative:
                end += current_pos

            segments.append(
                path.Arc(
                    current_pos, radius, rotation, arc, sweep, end, relative=relative
                )
            )
            current_pos = end

        # Finish up the loop in preparation for next command
        last_command = command

    return segments



MIN_DEPTH = 5
ERROR = 1e-12


def segment_length(curve, start, end, start_point, end_point, error, min_depth, depth):
    """Recursively approximates the length by straight lines"""
    mid = (start + end) / 2
    mid_point = curve.point(mid)
    length = abs(end_point - start_point)
    first_half = abs(mid_point - start_point)
    second_half = abs(end_point - mid_point)

    length2 = first_half + second_half
    if (length2 - length > error) or (depth < min_depth):
        # Calculate the length of each segment:
        depth += 1
        return segment_length(
            curve, start, mid, start_point, mid_point, error, min_depth, depth
        ) + segment_length(
            curve, mid, end, mid_point, end_point, error, min_depth, depth
        )
    # This is accurate enough.
    return length2


class PathSegment(ABC):
    @abstractmethod
    def point(self, pos):
        """Returns the coordinate point (as a complex number) of a point on the path,
        as expressed as a floating point number between 0 (start) and 1 (end).
        """

    @abstractmethod
    def tangent(self, pos):
        """Returns a vector (as a complex number) representing the tangent of a point
        on the path as expressed as a floating point number between 0 (start) and 1 (end).
        """

    @abstractmethod
    def length(self, error=ERROR, min_depth=MIN_DEPTH):
        """Returns the length of a path.

        The CubicBezier and Arc lengths are non-exact and iterative and you can select to
        either do the calculations until a maximum error has been achieved, or a minimum
        number of iterations.
        """


class NonLinear(PathSegment):
    """A line that is not straight

    The base of Arc, QuadraticBezier and CubicBezier
    """


class Linear(PathSegment):
    """A straight line

    The base for Line() and Close().
    """

    def __init__(self, start, end, relative=False):
        self.start = start
        self.end = end
        self.relative = relative

    def __ne__(self, other):
        if not isinstance(other, Line):
            return NotImplemented
        return not self == other

    def point(self, pos):
        distance = self.end - self.start
        return self.start + distance * pos

    def tangent(self, pos):
        return self.end - self.start

    def length(self, error=None, min_depth=None):
        distance = self.end - self.start
        return sqrt(distance.real**2 + distance.imag**2)


class Line(Linear):
    def __init__(self, start, end, relative=False, vertical=False, horizontal=False):
        self.start = start
        self.end = end
        self.relative = relative
        self.vertical = vertical
        self.horizontal = horizontal

    def __repr__(self):
        return f"Line(start={self.start}, end={self.end})"

    def __eq__(self, other):
        if not isinstance(other, Line):
            return NotImplemented
        return self.start == other.start and self.end == other.end

    def _d(self, previous):
        x = self.end.real
        y = self.end.imag
        if self.relative:
            x -= previous.end.real
            y -= previous.end.imag

        if self.horizontal and self.is_horizontal_from(previous):
            cmd = "h" if self.relative else "H"
            return f"{cmd} {x:G},{y:G}"

        if self.vertical and self.is_vertical_from(previous):
            cmd = "v" if self.relative else "V"
            return f"{cmd} {y:G}"

        cmd = "l" if self.relative else "L"
        return f"{cmd} {x:G},{y:G}"

    def is_vertical_from(self, previous):
        return self.start == previous.end and self.start.real == self.end.real

    def is_horizontal_from(self, previous):
        return self.start == previous.end and self.start.imag == self.end.imag


class CubicBezier(NonLinear):
    def __init__(self, start, control1, control2, end, relative=False, smooth=False):
        self.start = start
        self.control1 = control1
        self.control2 = control2
        self.end = end
        self.relative = relative
        self.smooth = smooth

    def __repr__(self):
        return (
            f"CubicBezier(start={self.start}, control1={self.control1}, "
            f"control2={self.control2}, end={self.end}, smooth={self.smooth})"
        )

    def __eq__(self, other):
        if not isinstance(other, CubicBezier):
            return NotImplemented
        return (
            self.start == other.start
            and self.end == other.end
            and self.control1 == other.control1
            and self.control2 == other.control2
        )

    def __ne__(self, other):
        if not isinstance(other, CubicBezier):
            return NotImplemented
        return not self == other

    def _d(self, previous):
        c1 = self.control1
        c2 = self.control2
        end = self.end

        if self.relative and previous:
            c1 -= previous.end
            c2 -= previous.end
            end -= previous.end

        if self.smooth and self.is_smooth_from(previous):
            cmd = "s" if self.relative else "S"
            return f"{cmd} {c2.real:G},{c2.imag:G} {end.real:G},{end.imag:G}"

        cmd = "c" if self.relative else "C"
        return f"{cmd} {c1.real:G},{c1.imag:G} {c2.real:G},{c2.imag:G} {end.real:G},{end.imag:G}"

    def is_smooth_from(self, previous):
        """Checks if this segment would be a smooth segment following the previous"""
        if isinstance(previous, CubicBezier):
            return self.start == previous.end and (self.control1 - self.start) == (
                previous.end - previous.control2
            )
        else:
            return self.control1 == self.start

    def set_smooth_from(self, previous):
        assert isinstance(previous, CubicBezier)
        self.start = previous.end
        self.control1 = previous.end - previous.control2 + self.start
        self.smooth = True

    def point(self, pos):
        """Calculate the x,y position at a certain position of the path"""
        return (
            ((1 - pos) ** 3 * self.start)
            + (3 * (1 - pos) ** 2 * pos * self.control1)
            + (3 * (1 - pos) * pos**2 * self.control2)
            + (pos**3 * self.end)
        )

    def tangent(self, pos):
        return (
            -3 * (1 - pos) ** 2 * self.start
            + 3 * (1 - pos) ** 2 * self.control1
            - 6 * pos * (1 - pos) * self.control1
            - 3 * pos**2 * self.control2
            + 6 * pos * (1 - pos) * self.control2
            + 3 * pos**2 * self.end
        )

    def length(self, error=ERROR, min_depth=MIN_DEPTH):
        """Calculate the length of the path up to a certain position"""
        start_point = self.point(0)
        end_point = self.point(1)
        return segment_length(self, 0, 1, start_point, end_point, error, min_depth, 0)


class QuadraticBezier(NonLinear):
    def __init__(self, start, control, end, relative=False, smooth=False):
        self.start = start
        self.end = end
        self.control = control
        self.relative = relative
        self.smooth = smooth

    def __repr__(self):
        return (
            f"QuadraticBezier(start={self.start}, control={self.control}, "
            f"end={self.end}, smooth={self.smooth})"
        )

    def __eq__(self, other):
        if not isinstance(other, QuadraticBezier):
            return NotImplemented
        return (
            self.start == other.start
            and self.end == other.end
            and self.control == other.control
        )

    def __ne__(self, other):
        if not isinstance(other, QuadraticBezier):
            return NotImplemented
        return not self == other

    def _d(self, previous):
        control = self.control
        end = self.end
        if self.relative and previous:
            control -= previous.end
            end -= previous.end

        if self.smooth and self.is_smooth_from(previous):
            cmd = "t" if self.relative else "T"
            return f"{cmd} {end.real:G},{end.imag:G}"

        cmd = "q" if self.relative else "Q"
        return f"{cmd} {control.real:G},{control.imag:G} {end.real:G},{end.imag:G}"

    def is_smooth_from(self, previous):
        """Checks if this segment would be a smooth segment following the previous"""
        if isinstance(previous, QuadraticBezier):
            return self.start == previous.end and (self.control - self.start) == (
                previous.end - previous.control
            )
        else:
            return self.control == self.start

    def set_smooth_from(self, previous):
        assert isinstance(previous, QuadraticBezier)
        self.start = previous.end
        self.control = previous.end - previous.control + self.start
        self.smooth = True

    def point(self, pos):
        return (
            (1 - pos) ** 2 * self.start
            + 2 * (1 - pos) * pos * self.control
            + pos**2 * self.end
        )

    def tangent(self, pos):
        return (
            self.start * (2 * pos - 2)
            + (2 * self.end - 4 * self.control) * pos
            + 2 * self.control
        )

    def length(self, error=None, min_depth=None):
        a = self.start - 2 * self.control + self.end
        b = 2 * (self.control - self.start)

        try:
            # For an explanation of this case, see
            # http://www.malczak.info/blog/quadratic-bezier-curve-length/
            A = 4 * (a.real**2 + a.imag**2)
            B = 4 * (a.real * b.real + a.imag * b.imag)
            C = b.real**2 + b.imag**2

            Sabc = 2 * sqrt(A + B + C)
            A2 = sqrt(A)
            A32 = 2 * A * A2
            C2 = 2 * sqrt(C)
            BA = B / A2

            s = (
                A32 * Sabc
                + A2 * B * (Sabc - C2)
                + (4 * C * A - B**2) * log((2 * A2 + BA + Sabc) / (BA + C2))
            ) / (4 * A32)
        except (ZeroDivisionError, ValueError):
            if abs(a) < 1e-10:
                s = abs(b)
            else:
                k = abs(b) / abs(a)
                if k >= 2:
                    s = abs(b) - abs(a)
                else:
                    s = abs(a) * (k**2 / 2 - k + 1)
        return s


class Arc(NonLinear):
    def __init__(self, start, radius, rotation, arc, sweep, end, relative=False):
        """radius is complex, rotation is in degrees,
        large and sweep are 1 or 0 (True/False also work)"""

        self.start = start
        self.radius = radius
        self.rotation = rotation
        self.arc = bool(arc)
        self.sweep = bool(sweep)
        self.end = end
        self.relative = relative

        self._parameterize()

    def __repr__(self):
        return (
            f"Arc(start={self.start}, radius={self.radius}, rotation={self.rotation}, "
            f"arc={self.arc}, sweep={self.sweep}, end={self.end})"
        )

    def __eq__(self, other):
        if not isinstance(other, Arc):
            return NotImplemented
        return (
            self.start == other.start
            and self.end == other.end
            and self.radius == other.radius
            and self.rotation == other.rotation
            and self.arc == other.arc
            and self.sweep == other.sweep
        )

    def __ne__(self, other):
        if not isinstance(other, Arc):
            return NotImplemented
        return not self == other

    def _d(self, previous):
        end = self.end
        cmd = "a" if self.relative else "A"
        if self.relative:
            end -= previous.end

        return (
            f"{cmd} {self.radius.real:G},{self.radius.imag:G} {self.rotation:G} "
            f"{int(self.arc):d},{int(self.sweep):d} {end.real:G},{end.imag:G}"
        )

    def _parameterize(self):
        # Conversion from endpoint to center parameterization
        # http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes
        if self.start == self.end:
            # This is equivalent of omitting the segment, so do nothing
            return

        if self.radius.real == 0 or self.radius.imag == 0:
            # This should be treated as a straight line
            return

        cosr = cos(radians(self.rotation))
        sinr = sin(radians(self.rotation))
        dx = (self.start.real - self.end.real) / 2
        dy = (self.start.imag - self.end.imag) / 2
        x1prim = cosr * dx + sinr * dy
        x1prim_sq = x1prim * x1prim
        y1prim = -sinr * dx + cosr * dy
        y1prim_sq = y1prim * y1prim

        rx = self.radius.real
        rx_sq = rx * rx
        ry = self.radius.imag
        ry_sq = ry * ry

        # Correct out of range radii
        radius_scale = (x1prim_sq / rx_sq) + (y1prim_sq / ry_sq)
        if radius_scale > 1:
            radius_scale = sqrt(radius_scale)
            rx *= radius_scale
            ry *= radius_scale
            rx_sq = rx * rx
            ry_sq = ry * ry
            self.radius_scale = radius_scale
        else:
            # SVG spec only scales UP
            self.radius_scale = 1

        t1 = rx_sq * y1prim_sq
        t2 = ry_sq * x1prim_sq
        c = sqrt(abs((rx_sq * ry_sq - t1 - t2) / (t1 + t2)))

        if self.arc == self.sweep:
            c = -c
        cxprim = c * rx * y1prim / ry
        cyprim = -c * ry * x1prim / rx

        self.center = complex(
            (cosr * cxprim - sinr * cyprim) + ((self.start.real + self.end.real) / 2),
            (sinr * cxprim + cosr * cyprim) + ((self.start.imag + self.end.imag) / 2),
        )

        ux = (x1prim - cxprim) / rx
        uy = (y1prim - cyprim) / ry
        vx = (-x1prim - cxprim) / rx
        vy = (-y1prim - cyprim) / ry
        n = sqrt(ux * ux + uy * uy)
        p = ux
        theta = degrees(acos(p / n))
        if uy < 0:
            theta = -theta
        self.theta = theta % 360

        n = sqrt((ux * ux + uy * uy) * (vx * vx + vy * vy))
        p = ux * vx + uy * vy
        d = p / n
        # In certain cases the above calculation can through inaccuracies
        # become just slightly out of range, f ex -1.0000000000000002.
        if d > 1.0:
            d = 1.0
        elif d < -1.0:
            d = -1.0
        delta = degrees(acos(d))
        if (ux * vy - uy * vx) < 0:
            delta = -delta
        self.delta = delta % 360
        if not self.sweep:
            self.delta -= 360

    def point(self, pos):
        if self.start == self.end:
            # This is equivalent of omitting the segment
            return self.start

        if self.radius.real == 0 or self.radius.imag == 0:
            # This should be treated as a straight line
            distance = self.end - self.start
            return self.start + distance * pos

        angle = radians(self.theta + (self.delta * pos))
        cosr = cos(radians(self.rotation))
        sinr = sin(radians(self.rotation))
        radius = self.radius * self.radius_scale

        x = (
            cosr * cos(angle) * radius.real
            - sinr * sin(angle) * radius.imag
            + self.center.real
        )
        y = (
            sinr * cos(angle) * radius.real
            + cosr * sin(angle) * radius.imag
            + self.center.imag
        )
        return complex(x, y)

    def tangent(self, pos):
        angle = radians(self.theta + (self.delta * pos))
        cosr = cos(radians(self.rotation))
        sinr = sin(radians(self.rotation))
        radius = self.radius * self.radius_scale

        x = cosr * cos(angle) * radius.real - sinr * sin(angle) * radius.imag
        y = sinr * cos(angle) * radius.real + cosr * sin(angle) * radius.imag
        return complex(x, y) * complex(0, 1)

    def length(self, error=ERROR, min_depth=MIN_DEPTH):
        """The length of an elliptical arc segment requires numerical
        integration, and in that case it's simpler to just do a geometric
        approximation, as for cubic bezier curves.
        """
        if self.start == self.end:
            # This is equivalent of omitting the segment
            return 0

        if self.radius.real == 0 or self.radius.imag == 0:
            # This should be treated as a straight line
            distance = self.end - self.start
            return sqrt(distance.real**2 + distance.imag**2)

        if self.radius.real == self.radius.imag:
            # It's a circle, which simplifies this a LOT.
            radius = self.radius.real * self.radius_scale
            return abs(radius * self.delta * pi / 180)

        start_point = self.point(0)
        end_point = self.point(1)
        return segment_length(self, 0, 1, start_point, end_point, error, min_depth, 0)


class Move:
    """Represents move commands. Does nothing, but is there to handle
    paths that consist of only move commands, which is valid, but pointless.
    """

    def __init__(self, to, relative=False):
        self.start = self.end = to
        self.relative = relative

    def __repr__(self):
        return "Move(to=%s)" % self.start

    def __eq__(self, other):
        if not isinstance(other, Move):
            return NotImplemented
        return self.start == other.start

    def __ne__(self, other):
        if not isinstance(other, Move):
            return NotImplemented
        return not self == other

    def _d(self, previous):
        cmd = "M"
        x = self.end.real
        y = self.end.imag
        if self.relative:
            cmd = "m"
            if previous:
                x -= previous.end.real
                y -= previous.end.imag
        return f"{cmd} {x:G},{y:G}"

    def point(self, pos):
        return self.start

    def tangent(self, pos):
        return 0

    def length(self, error=ERROR, min_depth=MIN_DEPTH):
        return 0


class Close(Linear):
    """Represents the closepath command"""

    def __eq__(self, other):
        if not isinstance(other, Close):
            return NotImplemented
        return self.start == other.start and self.end == other.end

    def __repr__(self):
        return f"Close(start={self.start}, end={self.end})"

    def _d(self, previous):
        return "z" if self.relative else "Z"


class Path(MutableSequence):
    """A Path is a sequence of path segments"""

    def __init__(self, *segments):
        self._segments = list(segments)
        self._length = None
        self._lengths = None
        # Fractional distance from starting point through the end of each segment.
        self._fractions = []

    def __getitem__(self, index):
        return self._segments[index]

    def __setitem__(self, index, value):
        self._segments[index] = value
        self._length = None

    def __delitem__(self, index):
        del self._segments[index]
        self._length = None

    def insert(self, index, value):
        self._segments.insert(index, value)
        self._length = None

    def reverse(self):
        # Reversing the order of a path would require reversing each element
        # as well. That's not implemented.
        raise NotImplementedError

    def __len__(self):
        return len(self._segments)

    def __repr__(self):
        return "Path(%s)" % (", ".join(repr(x) for x in self._segments))

    def __eq__(self, other):

        if not isinstance(other, Path):
            return NotImplemented
        if len(self) != len(other):
            return False
        for s, o in zip(self._segments, other._segments):
            if not s == o:
                return False
        return True

    def __ne__(self, other):
        if not isinstance(other, Path):
            return NotImplemented
        return not self == other

    def _calc_lengths(self, error=ERROR, min_depth=MIN_DEPTH):
        if self._length is not None:
            return

        lengths = [
            each.length(error=error, min_depth=min_depth) for each in self._segments
        ]
        self._length = sum(lengths)
        if self._length == 0:
            self._lengths = lengths
        else:
            self._lengths = [each / self._length for each in lengths]
        # Calculate the fractional distance for each segment to use in point()
        fraction = 0
        for each in self._lengths:
            fraction += each
            self._fractions.append(fraction)

    def _find_segment(self, pos, error=ERROR):
        # Shortcuts
        if pos == 0.0:
            return self._segments[0], pos
        if pos == 1.0:
            return self._segments[-1], pos

        self._calc_lengths(error=error)

        # Fix for paths of length 0 (i.e. points)
        if self._length == 0:
            return self._segments[0], 0.0

        # Find which segment the point we search for is located on:
        i = bisect(self._fractions, pos)
        if i == 0:
            segment_pos = pos / self._fractions[0]
        else:
            segment_pos = (pos - self._fractions[i - 1]) / (
                self._fractions[i] - self._fractions[i - 1]
            )
        return self._segments[i], segment_pos

    def point(self, pos, error=ERROR):
        segment, pos = self._find_segment(pos, error)
        return segment.point(pos)

    def tangent(self, pos, error=ERROR):
        segment, pos = self._find_segment(pos, error)
        return segment.tangent(pos)

    def length(self, error=ERROR, min_depth=MIN_DEPTH):
        self._calc_lengths(error, min_depth)
        return self._length

    def d(self):
        parts = []
        previous_segment = None

        for segment in self:
            parts.append(segment._d(previous_segment))
            previous_segment = segment

        return " ".join(parts)




class Vector3:
    """Represents a 3D vector with x, y, and z coordinates."""
    def __init__(self, x: float, y: float, z: float) -> 'Vector3':
        """Initializes a new Vector3 instance with the given x, y, and z coordinates.

        - `x` (float): X-coordinate of the vector.
        - `y` (float): Y-coordinate of the vector.
        - `z` (float): Z-coordinate of the vector.
        """
        self.id = generateID()
        self.type = __class__.__name__
        self.x: float = 0.0
        self.y: float = 0.0
        self.z: float = 0.0

        self.x = x
        self.y = y
        self.z = z

    def serialize(self) -> dict:
        """Serializes the Vector3 object into a dictionary.

        #### Returns:
        `dict`: A dictionary containing the serialized data of the Vector3 object.

        #### Example usage:
        ```python
        vector = Vector3(1, 2, 3)
        serialized_data = vector.serialize()
        # {'id': None, 'type': None, 'x': 1, 'y': 2, 'z': 3}
        ```
        """
        id_value = str(self.id) if not isinstance(
            self.id, (str, int, float)) else self.id
        return {
            'id': id_value,
            'type': self.type,
            'x': self.x,
            'y': self.y,
            'z': self.z
        }

    @staticmethod
    def deserialize(data):
        """Converts a dictionary representation of a vector into a Vector3 object.
        This method takes a dictionary containing 'x', 'y', and 'z' keys with numeric values and creates a new Vector3 instance representing the vector described by these values. It's particularly useful for converting serialized vector data back into Vector3 objects, for instance, when loading vectors from a file or a database.

        #### Parameters:
        - `data` (dict): A dictionary with keys 'x', 'y', and 'z', corresponding to the components of the vector. Each key's value should be a number (int or float).

        #### Returns:
        Vector3: A new Vector3 object initialized with the x, y, and z values from the input dictionary.

        #### Example usage:
        ```python
        data = {'x': 1.0, 'y': 2.0, 'z': 3.0}
        vector = Vector3.deserialize(data)
        # Vector3 object with x=1.0, y=2.0, z=3.0
        ```
        """
        return Vector3(data['x'], data['y'], data['z'])

    @staticmethod
    def sum(vector_1: 'Vector3', vector_2: 'Vector3') -> 'Vector3':
        """Adds two vectors element-wise.        
        
        #### Parameters:
        - `vector_1` (Vector3): First vector.
        - `vector_2` (Vector3): Second vector.

        Returns:
        `Vector3`: Sum of the two input vectors.

        #### Example usage:

        ```python
        vector_1 = Vector3(19, 18, 17)
        vector_2 = Vector3(8, 17, 1)
        output = Vector3.sum(vector_1, vector_2)
        # Vector3(X = 27.000, Y = 35.000, Z = 18.000)
        ```
        """
        return Vector3(
            vector_1.x + vector_2.x,
            vector_1.y + vector_2.y,
            vector_1.z + vector_2.z
        )

    @staticmethod
    def sum3(vector_1: 'Vector3', vector_2: 'Vector3', vector_3: 'Vector3') -> 'Vector3':
        """Calculates the sum of three Vector3 objects.
        This method returns a new Vector3 object whose components are the sum of the corresponding components of the three input vectors.

        #### Parameters:
        - `vector_1`, `vector_2`, `vector_3` (`Vector3`): The vectors to be summed.

        #### Returns:
        `Vector3`: A new Vector3 object resulting from the component-wise sum of the input vectors.

        #### Example usage:
        ```python
        vector1 = Vector3(1, 2, 3)
        vector2 = Vector3(4, 5, 6)
        vector3 = Vector3(-1, -2, -3)
        result = Vector3.sum3(vector1, vector2, vector3)
        # Vector3(X = 4.000, Y = 5.000, Z = 6.000)
        ```
        """
        return Vector3(
            vector_1.x + vector_2.x + vector_3.x,
            vector_1.y + vector_2.y + vector_3.y,
            vector_1.z + vector_2.z + vector_3.z
        )

    @staticmethod
    def diff(vector_1: 'Vector3', vector_2: 'Vector3') -> 'Vector3':
        """Calculates the difference between two Vector3 objects.
        This method returns a new Vector3 object that is the result of subtracting the components of `vector_2` from `vector_1`.

        #### Parameters:
        - `vector_1` (`Vector3`): The minuend vector.
        - `vector_2` (`Vector3`): The subtrahend vector.

        #### Returns:
        `Vector3`: A new Vector3 object resulting from the component-wise subtraction of `vector_2` from `vector_1`.

        #### Example usage:
        ```python
        vector1 = Vector3(5, 7, 9)
        vector2 = Vector3(1, 2, 3)
        result = Vector3.diff(vector1, vector2)
        # Vector3(X = 4.000, Y = 5.000, Z = 6.000)
        ```
        """
        return Vector3(
            vector_1.x - vector_2.x,
            vector_1.y - vector_2.y,
            vector_1.z - vector_2.z
        )

    @staticmethod
    def subtract(vector_1: 'Vector3', vector_2: 'Vector3') -> 'Vector3':
        """Subtracts the components of the second vector from the first.
        This method is synonymous with `diff` and serves the same purpose, providing an alternative naming convention.

        #### Parameters:
        - `vector_1` (`Vector3`): The vector from which to subtract.
        - `vector_2` (`Vector3`): The vector to be subtracted.

        #### Returns:
        `Vector3`: The result of the component-wise subtraction.

        #### Example usage:
        ```python
        vector1 = Vector3(10, 20, 30)
        vector2 = Vector3(1, 2, 3)
        result = Vector3.subtract(vector1, vector2)
        # Vector3(X = 9.000, Y = 18.000, Z = 27.000)
        ```
        """
        return Vector3(
            vector_1.x - vector_2.x,
            vector_1.y - vector_2.y,
            vector_1.z - vector_2.z
        )

    @staticmethod
    def divide(vector_1: 'Vector3', vector_2: 'Vector3') -> 'Vector3':
        """Divides the components of the first vector by the corresponding components of the second vector.
        This method performs component-wise division. If any component of `vector_2` is 0, the result for that component will be undefined.

        #### Parameters:
        - `vector_1` (`Vector3`): The numerator vector.
        - `vector_2` (`Vector3`): The denominator vector.

        #### Returns:
        `Vector3`: A new Vector3 object resulting from the component-wise division.

        #### Example usage:
        ```python
        vector1 = Vector3(10, 20, 30)
        vector2 = Vector3(2, 4, 5)
        result = Vector3.divide(vector1, vector2)
        # Vector3(X = 5.000, Y = 5.000, Z = 6.000)
        ```
        """
        return Vector3(
            vector_1.x / vector_2.x,
            vector_1.y / vector_2.y,
            vector_1.z / vector_2.z
        )

    @staticmethod
    def square(vector_1: 'Vector3') -> 'Vector3':
        """
        Computes the square of each component of the input vector.

        #### Parameters:
        - `vector_1` (`Vector3`): The input vector.

        #### Returns:
        `Vector3`: A new Vector3 object representing the square of each component of the input vector.

        #### Example usage:
        ```python
        vector = Vector3(2, 3, 4)
        squared_vector = Vector3.square(vector)
        # Vector3(X = 4, Y = 9, Z = 16)
        ```
        """
        return Vector3(
            vector_1.x ** 2,
            vector_1.y ** 2,
            vector_1.z ** 2
        )

    @staticmethod
    def to_point(vector_1: 'Vector3') -> 'Vector3':
        """Converts the vector to a Point object.

        #### Parameters:
        - `vector_1` (`Vector3`): The vector to be converted to a Point object.

        #### Returns:
        `Point`: A Point object with coordinates same as the vector.

        #### Example usage:
        ```python
        vector1 = Vector3(10, 20, 30)
        point = Vector3.to_point(vector1)
        # Point(X = 10.000, Y = 20.000, Z = 30.000)
        ```
        """
        return Point(x=vector_1.x, y=vector_1.y, z=vector_1.z)

    @staticmethod
    def to_line(vector_1: 'Vector3', vector_2: 'Vector3') -> 'Vector3':
        """Creates a Line object from two vectors.

        #### Parameters:
        - `vector_1` (`Vector3`): The start vector of the line.
        - `vector_2` (`Vector3`): The end vector of the line.

        #### Returns:
        `Line`: A Line object connecting the two vectors.

        #### Example usage:
        ```python
        vector1 = Vector3(10, 20, 30)
        vector2 = Vector3(2, 4, 5)
        line = Vector3.to_line(vector1, vector2)
        # Line(start=Point(X = 10.000, Y = 20.000, Z = 30.000), end=Point(X = 2.000, Y = 4.000, Z = 5.000))
        ```
        """
        return Line(start=Point(x=vector_1.x, y=vector_1.y, z=vector_1.z), end=Point(x=vector_2.x, y=vector_2.y, z=vector_2.z))

    @staticmethod
    def by_line(line_1) -> 'Vector3':
        """Computes a vector representing the direction of a given line.
        This method takes a Line object and returns a Vector3 representing the direction of the line.

        #### Parameters:
        - `line_1` (`Line`): The Line object from which to extract the direction.

        #### Returns:
        `Vector3`: A Vector3 representing the direction of the line.

        #### Example usage:
        ```python
        line = Line(start=Point(0, 0, 0), end=Point(1, 1, 1))
        direction_vector = Vector3.by_line(line)
        # Vector3(X = 1, Y = 1, Z = 1)
        ```
        """
        return Vector3(line_1.dx, line_1.dy, line_1.dz)

    @staticmethod
    def cross_product(vector_1: 'Vector3', vector_2: 'Vector3') -> 'Vector3':
        """Computes the cross product of two vectors.
        The cross product of two vectors in three-dimensional space is a vector that is perpendicular to both original vectors. It is used to find a vector that is normal to a plane defined by the input vectors.

        #### Parameters:
        - `vector_1` (`Vector3`): The first vector.
        - `vector_2` (`Vector3`): The second vector.

        #### Returns:
        `Vector3`: A new Vector3 object representing the cross product of the input vectors.

        #### Example usage:
        ```python
        vector1 = Vector3(1, 2, 3)
        vector2 = Vector3(4, 5, 6)
        cross_product = Vector3.cross_product(vector1, vector2)
        # Vector3(X = -3, Y = 6, Z = -3)
        ```
        """
        return Vector3(
            vector_1.y*vector_2.z - vector_1.z*vector_2.y,
            vector_1.z*vector_2.x - vector_1.x*vector_2.z,
            vector_1.x*vector_2.y - vector_1.y*vector_2.x
        )

    @staticmethod
    def dot_product(vector_1: 'Vector3', vector_2: 'Vector3') -> 'Vector3':
        """Computes the dot product of two vectors.
        The dot product of two vectors is a scalar quantity equal to the sum of the products of their corresponding components. It gives insight into the angle between the vectors.

        #### Parameters:
        - `vector_1` (`Vector3`): The first vector.
        - `vector_2` (`Vector3`): The second vector.

        #### Returns:
        `float`: The dot product of the input vectors.

        #### Example usage:
        ```python
        vector1 = Vector3(1, 2, 3)
        vector2 = Vector3(4, 5, 6)
        dot_product = Vector3.dot_product(vector1, vector2)
        # 32
        ```
        """
        return vector_1.x*vector_2.x+vector_1.y*vector_2.y+vector_1.z*vector_2.z

    @staticmethod
    def product(number: float, vector_1: 'Vector3') -> 'Vector3':
        """Scales a vector by a scalar value.
        This method multiplies each component of the vector by the given scalar value.

        #### Parameters:
        - `number` (float): The scalar value to scale the vector by.
        - `vector_1` (`Vector3`): The vector to be scaled.

        #### Returns:
        `Vector3`: A new Vector3 object representing the scaled vector.

        #### Example usage:
        ```python
        vector1 = Vector3(1, 2, 3)
        scaled_vector = Vector3.product(2, vector1)
        # Vector3(X = 2, Y = 4, Z = 6)
        ```
        """
        return Vector3(
            vector_1.x*number,
            vector_1.y*number,
            vector_1.z*number
        )

    @staticmethod
    def length(vector_1: 'Vector3') -> float:
        """Computes the length (magnitude) of a vector.
        The length of a vector is the Euclidean norm or magnitude of the vector, which is calculated as the square root of the sum of the squares of its components.

        #### Parameters:
        - `vector_1` (`Vector3`): The vector whose length is to be computed.

        #### Returns:
        `float`: The length of the input vector.

        #### Example usage:
        ```python
        vector1 = Vector3(1, 2, 3)
        length = Vector3.length(vector1)
        # 3.7416573867739413
        ```
        """
        return math.sqrt(vector_1.x*vector_1.x+vector_1.y*vector_1.y+vector_1.z*vector_1.z)

    @staticmethod
    def pitch(vector_1: 'Vector3', angle: float) -> 'Vector3':
        """Rotates a vector around the X-axis (pitch).
        This method rotates the vector around the X-axis (pitch) by the specified angle.

        #### Parameters:
        - `vector_1` (`Vector3`): The vector to be rotated.
        - `angle` (float): The angle of rotation in radians.

        #### Returns:
        `Vector3`: A new Vector3 object representing the rotated vector.

        #### Example usage:
        ```python
        vector1 = Vector3(1, 2, 3)
        rotated_vector = Vector3.pitch(vector1, math.pi/2)
        # Vector3(X = 1.000, Y = -3.000, Z = 2.000)
        ```
        """
        return Vector3(
            vector_1.x,
            vector_1.y*math.cos(angle) - vector_1.z*math.sin(angle),
            vector_1.y*math.sin(angle) + vector_1.z*math.cos(angle)
        )

    @staticmethod
    def angle_between(vector_1: 'Vector3', vector_2: 'Vector3') -> float:
        """Computes the angle in degrees between two vectors.
        The angle between two vectors is the angle required to rotate one vector onto the other, measured in degrees.

        #### Parameters:
        - `vector_1` (`Vector3`): The first vector.
        - `vector_2` (`Vector3`): The second vector.

        #### Returns:
        `float`: The angle in degrees between the input vectors.

        #### Example usage:
        ```python
        vector1 = Vector3(1, 0, 0)
        vector2 = Vector3(0, 1, 0)
        angle = Vector3.angle_between(vector1, vector2)
        # 90
        ```
        """
        proj_vector_1 = Vector3.to_matrix(vector_1)
        proj_vector_2 = Vector3.to_matrix(vector_2)
        dot_product = Vector3.dot_product(vector_1, vector_2)
        length_vector_1 = Vector3.length(vector_1)
        length_vector_2 = Vector3.length(vector_2)

        if length_vector_1 == 0 or length_vector_2 == 0:
            return 0

        cos_angle = dot_product / (length_vector_1 * length_vector_2)
        cos_angle = max(-1.0, min(cos_angle, 1.0))
        angle = math.acos(cos_angle)
        return math.degrees(angle)

    @staticmethod
    def angle_radian_between(vector_1: 'Vector3', vector_2: 'Vector3') -> float:
        """Computes the angle in radians between two vectors.
        The angle between two vectors is the angle required to rotate one vector onto the other, measured in radians.

        #### Parameters:
        - `vector_1` (`Vector3`): The first vector.
        - `vector_2` (`Vector3`): The second vector.

        #### Returns:
        `float`: The angle in radians between the input vectors.

        #### Example usage:
        ```python
        vector1 = Vector3(1, 0, 0)
        vector2 = Vector3(0, 1, 0)
        angle = Vector3.angle_radian_between(vector1, vector2)
        # 1.5707963267948966
        ```
        """
        return math.acos((Vector3.dot_product(vector_1, vector_2)/(Vector3.length(vector_1)*Vector3.length(vector_2))))

    @staticmethod
    def angle_between_YZ(vector_1: 'Vector3', vector_2: 'Vector3') -> float:
        """Computes the angle in degrees between two vectors projected onto the YZ plane (X-axis rotation).

        #### Parameters:
        - `vector_1` (`Vector3`): The first vector.
        - `vector_2` (`Vector3`): The second vector.

        #### Returns:
        `float`: The angle in degrees between the input vectors projected onto the YZ plane (X-axis rotation).

        #### Example usage:
        ```python
        vector1 = Vector3(1, 1, 0)
        vector2 = Vector3(1, 0, 1)
        angle = Vector3.angle_between_YZ(vector1, vector2)
        # 90
        ```
        """
        dot_product = Vector3.dot_product(vector_1, vector_2)
        length_vector_1 = Vector3.length(Vector3(0, vector_1.y, vector_1.z))
        length_vector_2 = Vector3.length(Vector3(0, vector_2.y, vector_2.z))
        if length_vector_1 == 0 or length_vector_2 == 0:
            return 0

        cos_angle = dot_product / (length_vector_1 * length_vector_2)
        cos_angle = max(-1.0, min(cos_angle, 1.0))
        angle = math.acos(cos_angle)
        return math.degrees(angle)

    @staticmethod
    def angle_between_XZ(vector_1: 'Vector3', vector_2: 'Vector3') -> float:
        """Computes the angle in degrees between two vectors projected onto the XZ plane (Y-axis rotation).

        #### Parameters:
        - `vector_1` (`Vector3`): The first vector.
        - `vector_2` (`Vector3`): The second vector.

        #### Returns:
        `float`: The angle in degrees between the input vectors projected onto the XZ plane (Y-axis rotation).

        #### Example usage:
        ```python
        vector1 = Vector3(1, 0, 1)
        vector2 = Vector3(0, 1, 1)
        angle = Vector3.angle_between_XZ(vector1, vector2)
        # 90
        ```
        """
        dot_product = Vector3.dot_product(vector_1, vector_2)
        length_vector_1 = Vector3.length(Vector3(vector_1.x, 0, vector_1.z))
        length_vector_2 = Vector3.length(Vector3(vector_2.x, 0, vector_2.z))

        if length_vector_1 == 0 or length_vector_2 == 0:
            return 0

        cos_angle = dot_product / (length_vector_1 * length_vector_2)
        cos_angle = max(-1.0, min(cos_angle, 1.0))
        angle = math.acos(cos_angle)
        return math.degrees(angle)

    @staticmethod
    def angle_between_XY(vector_1: 'Vector3', vector_2: 'Vector3') -> float:
        """Computes the angle in degrees between two vectors projected onto the XY plane (Z-axis rotation).

        #### Parameters:
        - `vector_1` (`Vector3`): The first vector.
        - `vector_2` (`Vector3`): The second vector.

        #### Returns:
        `float`: The angle in degrees between the input vectors projected onto the XY plane (Z-axis rotation).

        #### Example usage:
        ```python
        vector1 = Vector3(1, 0, 1)
        vector2 = Vector3(0, 1, 1)
        angle = Vector3.angle_between_XY(vector1, vector2)
        # 45
        ```
        """
        dot_product = Vector3.dot_product(vector_1, vector_2)
        length_vector_1 = Vector3.length(Vector3(vector_1.x, vector_1.y, 0))
        length_vector_2 = Vector3.length(Vector3(vector_2.x, vector_2.y, 0))

        if length_vector_1 == 0 or length_vector_2 == 0:
            return 0

        cos_angle = dot_product / (length_vector_1 * length_vector_2)
        cos_angle = max(-1.0, min(cos_angle, 1.0))
        angle = math.acos(cos_angle)
        return math.degrees(angle)

    @staticmethod
    def value(vector_1: 'Vector3') -> tuple:
        """Returns the rounded values of the vector's components.

        #### Parameters:
        - `vector_1` (`Vector3`): The vector.

        #### Returns:
        `tuple`: A tuple containing the rounded values of the vector's components.

        #### Example usage:
        ```python
        vector1 = Vector3(1.123456, 2.345678, 3.987654)
        rounded_values = Vector3.value(vector1)
        # (1.1235, 2.3457, 3.9877)
        ```
        """
        roundValue = 4
        return (round(vector_1.x, roundValue), round(vector_1.y, roundValue), round(vector_1.z, roundValue))

    @staticmethod
    def reverse(vector_1: 'Vector3') -> 'Vector3':
        """Returns the reverse (negation) of the vector.

        #### Parameters:
        - `vector_1` (`Vector3`): The vector.

        #### Returns:
        `Vector3`: The reverse (negation) of the input vector.

        #### Example usage:
        ```python
        vector1 = Vector3(1, 2, 3)
        reversed_vector = Vector3.reverse(vector1)
        # Vector3(X = -1, Y = -2, Z = -3)
        ```
        """
        return Vector3(
            vector_1.x*-1,
            vector_1.y*-1,
            vector_1.z*-1
        )

    @staticmethod
    def perpendicular(vector_1: 'Vector3') -> tuple:
        """Computes two vectors perpendicular to the input vector.

        #### Parameters:
        - `vector_1` (`Vector3`): The input vector.

        #### Returns:
        `tuple`: A tuple containing two vectors perpendicular to the input vector.

        #### Example usage:
        ```python
        vector1 = Vector3(1, 2, 3)
        perpendicular_vectors = Vector3.perpendicular(vector1)
        # (Vector3(X = 2, Y = -1, Z = 0), Vector3(X = -3, Y = 0, Z = 1))
        ```
        """
        lokX = Vector3(vector_1.y, -vector_1.x, 0)
        lokZ = Vector3.cross_product(vector_1, lokX)
        if lokZ.z < 0:
            lokZ = Vector3.reverse(lokZ)
        return lokX, lokZ

    @staticmethod
    def normalize(vector_1: 'Vector3') -> 'Vector3':
        """Returns the normalized form of the input vector.
        The normalized form of a vector is a vector with the same direction but with a length (magnitude) of 1.

        #### Parameters:
        - `vector_1` (`Vector3`): The vector to be normalized.

        #### Returns:
        `Vector3`: A new Vector3 object representing the normalized form of the input vector.

        #### Example usage:
        ```python
        vector1 = Vector3(3, 0, 4)
        normalized_vector = Vector3.normalize(vector1)
        # Vector3(X = 0.600, Y = 0.000, Z = 0.800)
        ```
        """
        length = Vector3.length(vector_1)
        if length == 0:
            return Vector3(0, 0, 0)

        normalized_vector = Vector3(
            vector_1.x / length,
            vector_1.y / length,
            vector_1.z / length
        )

        return normalized_vector

    @staticmethod
    def by_two_points(point_1: 'Point', point_2: 'Point') -> 'Vector3':
        """Computes the vector between two points.

        #### Parameters:
        - `point_1` (`Point`): The starting point.
        - `point_2` (`Point`): The ending point.

        #### Returns:
        `Vector3`: A new Vector3 object representing the vector between the two points.

        #### Example usage:
        ```python
        point1 = Point(1, 2, 3)
        point2 = Point(4, 6, 8)
        vector = Vector3.by_two_points(point1, point2)
        # Vector3(X = 3, Y = 4, Z = 5)
        ```
        """
        return Vector3(
            point_2.x-point_1.x,
            point_2.y-point_1.y,
            point_2.z-point_1.z
        )

    @staticmethod
    def rotate_XY(vector: 'Vector3', Beta: float) -> 'Vector3':
        """Rotates the vector in the XY plane by the specified angle.

        #### Parameters:
        - `vector` (`Vector3`): The vector to be rotated.
        - `Beta` (float): The angle of rotation in radians.

        #### Returns:
        `Vector3`: A new Vector3 object representing the rotated vector.

        #### Example usage:
        ```python
        vector = Vector3(1, 0, 0)
        rotated_vector = Vector3.rotate_XY(vector, math.pi/2)
        # Vector3(X = 0, Y = 1, Z = 0)
        ```
        """
        return Vector3(
            math.cos(Beta)*vector.x - math.sin(Beta)*vector.y,
            math.sin(Beta)*vector.x + math.cos(Beta)*vector.y,
            vector.z
        )

    @staticmethod
    def scale(vector: 'Vector3', scalefactor: float) -> 'Vector3':
        """Scales the vector by the specified scale factor.

        #### Parameters:
        - `vector` (`Vector3`): The vector to be scaled.
        - `scalefactor` (float): The scale factor.

        #### Returns:
        `Vector3`: A new Vector3 object representing the scaled vector.

        #### Example usage:
        ```python
        vector = Vector3(1, 2, 3)
        scaled_vector = Vector3.scale(vector, 2)
        # Vector3(X = 2, Y = 4, Z = 6)
        ```
        """
        return Vector3(
            vector.x * scalefactor,
            vector.y * scalefactor,
            vector.z * scalefactor
        )

    @staticmethod
    def new_length(vector_1: 'Vector3', newlength: float) -> 'Vector3':
        """Rescales the vector to have the specified length.

        #### Parameters:
        - `vector_1` (`Vector3`): The vector to be rescaled.
        - `newlength` (float): The desired length of the vector.

        #### Returns:
        `Vector3`: A new Vector3 object representing the rescaled vector.

        #### Example usage:
        ```python
        vector = Vector3(3, 4, 0)
        new_vector = Vector3.new_length(vector, 5)
        # Vector3(X = 3.000, Y = 4.000, Z = 0.000)
        ```
        """
        scale = newlength / Vector3.length(vector_1)

        return Vector3.scale(vector_1, scale)

    @staticmethod
    def to_matrix(vector: 'Vector3') -> list:
        """Converts the vector to a list representation.

        #### Parameters:
        - `vector` (`Vector3`): The vector to be converted.

        #### Returns:
        `list`: A list representation of the vector.

        #### Example usage:
        ```python
        vector = Vector3(1, 2, 3)
        vector_list = Vector3.to_matrix(vector)
        # [1, 2, 3]
        ```
        """
        return [vector.x, vector.y, vector.z]

    @staticmethod
    def from_matrix(vector_list: list) -> 'Vector3':
        """Creates a Vector3 object from a list representation.

        #### Parameters:
        - `vector_list` (list): The list representing the vector.

        #### Returns:
        `Vector3`: A Vector3 object created from the list representation.

        #### Example usage:
        ```python
        vector_list = [1, 2, 3]
        vector = Vector3.from_matrix(vector_list)
        # Vector3(X = 1, Y = 2, Z = 3)
        ```
        """
        return Vector3(
            vector_list[0],
            vector_list[1],
            vector_list[2]
        )

    def __str__(self):
        """Returns a string representation of the vector.

        #### Returns:
        `str`: A string representation of the vector.

        #### Example usage:
        ```python
        vector = Vector3(1.234, 2.345, 3.456)
        print(vector)
        # Vector3(X = 1.234, Y = 2.345, Z = 3.456)
        ```
        """
        return f"{__class__.__name__}(" + f"X = {self.x:.3f}, Y = {self.y:.3f}, Z = {self.z:.3f})"


X_axis = Vector3(1, 0, 0)

Y_Axis = Vector3(0, 1, 0)

Z_Axis = Vector3(0, 0, 1)



# from project.fileformat import project


class Point:
    """Represents a point in 3D space with x, y, and z coordinates."""
    def __init__(self, x: float, y: float, z: float) -> 'Point':
        """Initializes a new Point instance with the given x, y, and z coordinates.

        - `x` (float): X-coordinate of the point.
        - `y` (float): Y-coordinate of the point.
        - `z` (float): Z-coordinate of the point.
        """
        self.id = generateID()
        self.type = __class__.__name__
        self.x: float = 0.0
        self.y: float = 0.0
        self.z: float = 0.0
        self.x = float(x)
        self.y = float(y)
        self.z = float(z)
        self.value = self.x, self.y, self.z
        self.units = "mm"

    def __str__(self) -> str:
        """Converts the point to its string representation."""
        return f"{__class__.__name__}(X = {self.x:.3f}, Y = {self.y:.3f}, Z = {self.z:.3f})"

    def serialize(self):
        """Serializes the point object."""
        id_value = str(self.id) if not isinstance(
            self.id, (str, int, float)) else self.id
        return {
            'id': id_value,
            'type': self.type,
            'x': self.x,
            'y': self.y,
            'z': self.z,
            'value': self.value,
            'units': self.units
        }

    @staticmethod
    def deserialize(data):
        """Deserializes the point object from the provided data."""
        return Point(data['x'], data['y'], data['z'])

    @staticmethod
    def distance(point_1: 'Point', point_2: 'Point') -> float:
        """Computes the Euclidean distance between two 3D points.

        #### Parameters:
        - `point_1` (Point): The first point.
        - `point_2` (Point): The second point.

        #### Returns:
        `float`: The Euclidean distance between `point_1` and `point_2`.

        #### Example usage:
    	```python
        point_1 = Point(100.23, 182, 19)
        point_2 = Point(81, 0.1, -901)
        output = Point.distance(point_1, point_2) 
        # 938.0071443757771
        ```
        """
        
        return math.sqrt((point_1.x - point_2.x)**2 + (point_1.y - point_2.y)**2 + (point_1.z - point_2.z)**2)

    @staticmethod
    def distance_list(points: list['Point']) -> float:
        """Calculates distances between points in a list.
        
        #### Parameters:
        - `points` (list): List of points.

        #### Returns:
        `float`: Total distance calculated between all the points in the list.

        #### Example usage:
    	```python
        point_1 = Point(231, 13, 76)
        point_2 = Point(71, 12.3, -232)
        point_3 = Point(2, 71, -102)
        output = Point.distance_list([point_1, point_2, point_3])
        # [(<geometry.point.Point object at 0x00000226BD9CAB90>, <geometry.point.Point object at 0x00000226BA3BCFD0>, 158.45090722365714), (<geometry.point.Point object at 0x00000226BF20F710>, <geometry.point.Point object at 0x00000226BA3BCFD0>, 295.78539517697624), (<geometry.point.Point object at 0x00000226BF20F710>, <geometry.point.Point object at 0x00000226BD9CAB90>, 347.07994756251765)]
        ```
        """
        distances = []
        for i in range(len(points)):
            for j in range(i+1, len(points)):
                distances.append(
                    (points[i], points[j], Point.distance(points[i], points[j])))
        distances.sort(key=lambda x: x[2])
        return distances

    @staticmethod
    def difference(point_1: 'Point', point_2: 'Point'):
        """Computes the difference between two points as a Vector3 object.
                
        #### Parameters:
        - `point_1` (Point): First point.
        - `point_2` (Point): Second point.

        #### Returns:
        `Vector3`: Difference between the two input points as a Vector3 object.

        #### Example usage:
    	```python
        point_1 = Point(23, 1, 23)
        point_2 = Point(93, 0, -19)
        output = Point.difference(point_1, point_2)
        # Vector3(X = 70.000, Y = -1.000, Z = -42.000)
        ```
        """
        return Vector3(
            point_2.x - point_1.x,
            point_2.y - point_1.y,
            point_2.z - point_1.z
        )

    @staticmethod
    def translate(point: 'Point', vector) -> 'Point':
        """Translates the point by a given vector.        
        
        #### Parameters:
        - `point` (Point): The point to be translated.
        - `vector` (Vector3): The translation vector.

        #### Returns:
        `Point`: Translated point.

        #### Example usage:
    	```python
        point = Point(23, 1, 23)
        vector = Vector3(93, 0, -19)
        output = Point.translate(point, vector)
        # Point(X = 116.000, Y = 1.000, Z = 4.000)
        ```
        """

        ar1 = Point.to_matrix(point)
        ar2 = Vector3.to_matrix(vector)
        if len(ar1) == len(ar2):
            c = [ar1[i] + ar2[i] for i in range(len(ar1))]
        else:
            c = [0, 0, 0]
            raise ValueError("Arrays must have the same size")
        return Point(c[0], c[1], c[2])

    @staticmethod
    def origin(point_1: 'Point', point_2: 'Point') -> 'Point':
        """Computes the midpoint between two points.        
        
        #### Parameters:
        - `point_1` (Point): First point.
        - `point_2` (Point): Second point.
        
        #### Returns:
        `Point`: Midpoint between the two input points.

        #### Example usage:
    	```python
        point_1 = Point(100.23, 182, 19)
        point_2 = Point(81, 0.1, -901)
        output = Point.origin(point_1, point_2)
        # Point(X = 90.615, Y = 91.050, Z = -441.000)
        ```
        """
        return Point(
            (point_1.x + point_2.x) / 2,
            (point_1.y + point_2.y) / 2,
            (point_1.z + point_2.z) / 2
        )

    @staticmethod
    def point_2D_to_3D(point_2D) -> 'Point':
        """Converts a 2D point to a 3D point with zero z-coordinate.        
        
        #### Parameters:
        - `point2D` (Point): 2D point to be converted.

        #### Returns:
        `Point`: 3D point with zero z-coordinate.

        #### Example usage:
    	```python
        point_1 = Point2D(19, 30)
        output = Point.point_2D_to_3D(point_1)
        # Point(X = 19.000, Y = 30.000, Z = 0.000)
        ```
        """
        return Point(
            point_2D.x,
            point_2D.y,
            0
        )

    @staticmethod
    def to_vector(point: 'Point'):
        """Converts the point to a Vector3 object.        
        
        #### Parameters:
        - `point` (Point): Point to be converted.

        #### Returns:
        `Vector3`: Vector representation of the point.

        #### Example usage:
    	```python
        point_1 = Point(9, 20, 10)
        output = Point.to_vector(point_1)
        # Vector3(X = 9.000, Y = 20.000, Z = 10.000)
        ```
        """
        return Vector3(
            point.x,
            point.y,
            point.z
        )

    @staticmethod
    def sum(point_1: 'Point', point_2: 'Point') -> 'Point':
        """Computes the sum of two points.        
        
        #### Parameters:
        - `point_1` (Point): First point.
        - `point_2` (Point): Second point.

        #### Returns:
        `Point`: Sum of the two input points.

        #### Example usage:
    	```python
        point_1 = Point(23, 1, 23)
        point_2 = Point(93, 0, -19)
        output = Point.sum(point_1, point_2)
        # Point(X = 116.000, Y = 1.000, Z = 4.000)
        ```
        """
        return Point(
            point_1.x + point_2.x,
            point_1.y + point_2.y,
            point_1.z + point_2.z
        )

    @staticmethod
    def diff(point_1: 'Point', point_2: 'Point') -> 'Point':
        """Computes the difference between two points.        
        
        #### Parameters:
        - `point_1` (Point): First point.
        - `point_2` (Point): Second point.

        #### Returns:
        `Point`: Difference between the two input points.

        #### Example usage:
    	```python
        point_1 = Point(100.23, 182, 19)
        point_2 = Point(81, 0.1, -901)
        output = Point.diff(point_1, point_2)
        # Point(X = 19.230, Y = 181.900, Z = 920.000)
        ```
        """
        return Point(
            point_1.x - point_2.x,
            point_1.y - point_2.y,
            point_1.z - point_2.z
        )

    @staticmethod
    def rotate_XY(point: 'Point', beta: float, dz: float) -> 'Point':
        """Rotates the point about the Z-axis by a given angle.        
        
        #### Parameters:
        - `point` (Point): Point to be rotated.
        - `beta` (float): Angle of rotation in degrees.
        - `dz` (float): Offset in the z-coordinate.

        #### Returns:
        `Point`: Rotated point.

        #### Example usage:
    	```python
        point_1 = Point(19, 30, 12.3)
        output = Point.rotate_XY(point_1, 90, 12)
        # Point(X = -30.000, Y = 19.000, Z = 24.300)
        ```
        """
        return Point(
            math.cos(math.radians(beta))*point.x -
            math.sin(math.radians(beta))*point.y,
            math.sin(math.radians(beta))*point.x +
            math.cos(math.radians(beta))*point.y,
            point.z + dz
        )

    @staticmethod
    def product(number: float, point: 'Point') -> 'Point':
        """Scales the point by a given factor.        
        
        #### Parameters:
        - `number` (float): Scaling factor.
        - `point` (Point): Point to be scaled.

        #### Returns:
        `Point`: Scaled point.

        #### Example usage:
    	```python
        point_1 = Point(9, 20, 10)
        output = Point.product(12, point_1)
        # Point(X = 108.000, Y = 240.000, Z = 120.000)
        ```
        """
        return Point(
            point.x*number,
            point.y*number,
            point.z*number
        )

    @staticmethod
    def intersect(point_1: 'Point', point_2: 'Point') -> 'Point':
        """Checks if two points intersect.        
        
        #### Parameters:
        - `point_1` (Point): First point.
        - `point_2` (Point): Second point.

        #### Returns:
        `boolean`: True if points intersect, False otherwise.

        #### Example usage:
    	```python
        point_1 = Point(23, 1, 23)
        point_2 = Point(93, 0, -19)
        output = Point.intersect(point_1, point_2)
        # False
        ```
        """
        if point_1.x == point_2.x and point_1.y == point_2.y and point_1.z == point_2.z:
            return True
        else:
            return False

    @staticmethod
    def to_matrix(point: 'Point') -> 'Point':
        """Converts the point to a list.        
        
        #### Parameters:
        Converts the point to a list.

        #### Returns:
        `list`: List representation of the point.

        #### Example usage:
    	```python
        point_1 = Point(23, 1, 23)
        output = Point.to_matrix(point_1)
        # [23.0, 1.0, 23.0]
        ```
        """
        return [point.x, point.y, point.z]

    @staticmethod
    def from_matrix(list: list) -> 'Point':
        """Converts a list to a Point object.        
        
        #### Parameters:
        Converts a list to a Point object.

        #### Returns:
        `Point`: Point object created from the list.

        #### Example usage:
    	```python
        point_1 = [19, 30, 12.3]
        output = Point.from_matrix(point_1)
        # Point(X = 19.000, Y = 30.000, Z = 12.300)
        ```
        """
        return Point(
            list[0],
            list[1],
            list[2]
        )


class CoordinateSystem:
    """Represents a coordinate system in 3D space defined by an origin point and normalized x, y, and z axis vectors."""
    def __init__(self, origin: Point, x_axis, y_axis, z_axis) -> 'CoordinateSystem':
        """Initializes a new CoordinateSystem instance with the given origin and axis vectors.
        The axis vectors are normalized to ensure they each have a length of 1, providing a standard basis for the coordinate system.

        - `origin` (Point): The origin point of the coordinate system.
        - `x_axis` (Vector3): The initial vector representing the X-axis before normalization.
        - `y_axis` (Vector3): The initial vector representing the Y-axis before normalization.
        - `z_axis` (Vector3): The initial vector representing the Z-axis before normalization.
        """
        self.id = generateID()
        self.type = __class__.__name__
        self.Origin = origin
        self.Xaxis = Vector3.normalize(x_axis)
        self.Y_axis = Vector3.normalize(y_axis)
        self.Z_axis = Vector3.normalize(z_axis)

    @classmethod
    def by_origin(coordinate_system, origin: Point) -> 'CoordinateSystem':
        """Creates a CoordinateSystem with a specified origin.

        #### Parameters:
        - `origin` (`Point`): The origin point of the new coordinate system.

        #### Returns:
        `CoordinateSystem`: A new CoordinateSystem object with the specified origin.

        #### Example usage:
        ```python

        ```
        """
        return coordinate_system(origin, x_axis=X_axis, y_axis=Y_Axis, z_axis=Z_Axis)

    @staticmethod
    def translate(cs_old, direction):
        """Translates a CoordinateSystem by a given direction vector.

        #### Parameters:
        - `cs_old` (CoordinateSystem): The original coordinate system to be translated.
        - `direction` (Vector3): The direction vector along which the coordinate system is to be translated.

        #### Returns:
        `CoordinateSystem`: A new CoordinateSystem object translated from the original one.

        #### Example usage:
        ```python

        ```
        """

        new_origin = Point.translate(cs_old.Origin, direction)

        X_axis = Vector3(1, 0, 0)

        Y_Axis = Vector3(0, 1, 0)

        Z_Axis = Vector3(0, 0, 1)

        CSNew = CoordinateSystem(
            new_origin, x_axis=X_axis, y_axis=Y_Axis, z_axis=Z_Axis)

        CSNew.Origin = new_origin
        return CSNew

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y and self.z == other.z

    def __str__(self):
        return f"{__class__.__name__}(Origin = " + f"{self.Origin}, X_axis = {self.Xaxis}, Y_Axis = {self.Y_axis}, Z_Axis = {self.Z_axis})"

    @staticmethod
    def by_point_main_vector(self, new_origin_coordinatesystem: Point, DirectionVectorZ):
        """Creates a new CoordinateSystem at a given point, oriented along a specified direction vector.
        This method establishes a new coordinate system by defining its origin and its Z-axis direction. The X and Y axes are determined based on the given Z-axis to form a right-handed coordinate system. If the calculated X or Y axis has a zero length (in cases of alignment with the global Z-axis), default axes are used.

        #### Parameters:
        - `new_origin_coordinatesystem` (`Point`): The origin point of the new coordinate system.
        - `DirectionVectorZ` (Vector3): The direction vector that defines the Z-axis of the new coordinate system.

        #### Returns:
        `CoordinateSystem`: A new CoordinateSystem object oriented along the specified direction vector with its origin at the given point.

        #### Example usage:
        ```python

        ```
        """
        vz = DirectionVectorZ
        vz = Vector3.normalize(vz)
        vx = Vector3.perpendicular(vz)[0]
        try:
            vx = Vector3.normalize(vx)
        except:
            vx = Vector3(1, 0, 0)
        vy = Vector3.perpendicular(vz)[1]
        try:
            vy = Vector3.normalize(vy)
        except:
            vy = Vector3(0, 1, 0)
        CSNew = CoordinateSystem(new_origin_coordinatesystem, vx, vy, vz)
        return CSNew

    @staticmethod
    def move_local(cs_old, x: float, y: float, z: float):
        """Moves a CoordinateSystem in its local coordinate space by specified displacements.

        #### Parameters:
        - `cs_old` (CoordinateSystem): The original coordinate system to be moved.
        - `x` (float): The displacement along the local X-axis.
        - `y` (float): The displacement along the local Y-axis.
        - `z` (float): The displacement along the local Z-axis.

        #### Returns:
        `CoordinateSystem`: A new CoordinateSystem object moved in its local coordinate space.

        #### Example usage:
        ```python

        ```
        """
        

        xloc_vect_norm = cs_old.Xaxis
        xdisp = Vector3.scale(xloc_vect_norm, x)
        yloc_vect_norm = cs_old.Xaxis
        ydisp = Vector3.scale(yloc_vect_norm, y)
        zloc_vect_norm = cs_old.Xaxis
        zdisp = Vector3.scale(zloc_vect_norm, z)
        disp = Vector3.sum3(xdisp, ydisp, zdisp)
        CS = CoordinateSystem.translate(cs_old, disp)
        return CS

    @staticmethod
    def translate_origin(origin1, origin2):
        """Calculates the translation needed to move from one origin to another.

        #### Parameters:
        - `origin1` (Point): The starting origin point.
        - `origin2` (Point): The ending origin point.

        #### Returns:
        `Point`: A new Point object representing the translated origin.

        #### Example usage:
        ```python
        
        ```
        """
        origin1_n = Point.to_matrix(origin1)
        origin2_n = Point.to_matrix(origin2)

        new_origin_n = origin1_n + (origin2_n - origin1_n)
        return Point(new_origin_n[0], new_origin_n[1], new_origin_n[2])

    @staticmethod
    def calculate_rotation_matrix(xaxis_1, yaxis_1, zaxis_1, xaxis_2, yaxis_2, zaxis_2):
        """Calculates the rotation matrix needed to align one coordinate system with another.

        #### Parameters:
        - `xaxis_1`, `yaxis_1`, `zaxis_1` (Vector3): The axes of the initial coordinate system.
        - `xaxis_2`, `yaxis_2`, `zaxis_2` (Vector3): The axes of the target coordinate system.

        #### Returns:
        Rotation Matrix (list of lists): A matrix representing the rotation needed to align the first coordinate system with the second.

        #### Example usage:
        ```python
        
        ```
        """

        R1 = [Vector3.to_matrix(xaxis_1), Vector3.to_matrix(
            yaxis_1), Vector3.to_matrix(zaxis_1)]

        R2 = [Vector3.to_matrix(xaxis_2), Vector3.to_matrix(
            yaxis_2), Vector3.to_matrix(zaxis_2)]

        R1_transposed = list(map(list, zip(*R1)))
        R2_transposed = list(map(list, zip(*R2)))

        rotation_matrix = Vector3.dot_product(Vector3.from_matrix(
            R2_transposed), Vector3.length(Vector3.from_matrix(R1_transposed)))
        return rotation_matrix

    @staticmethod
    def normalize(point: Point) -> list:
        """Normalizes a vector to have a length of 1.
        This method calculates the normalized (unit) version of a given vector, making its length equal to 1 while preserving its direction. If the input vector has a length of 0 (i.e., it is a zero vector), the method returns the original vector.

        #### Parameters:
        - `point` (list of float): A vector represented as a list of three floats, corresponding to its x, y, and z components, respectively.

        #### Returns:
        list of float: The normalized vector as a list of three floats. If the original vector is a zero vector, returns the original vector.

        #### Example usage:
        ```python
        
        ```
        """
        norm = (point[0]**2 + point[1]**2 + point[2]**2)**0.5
        return [point[0] / norm, point[1] / norm, point[2] / norm] if norm > 0 else point


def transform_point(point_local: Point, coordinate_system_old: CoordinateSystem, new_origin: Point, direction_vector) -> Point:
    """Transforms a point from one coordinate system to another based on a new origin and a direction vector.
    This function calculates the new position of a point when the coordinate system is changed. The new coordinate system is defined by a new origin point and a direction vector that specifies the orientation of the Z-axis. The X and Y axes are computed to form a right-handed coordinate system. This method takes into account the original position of the point in the old coordinate system to accurately calculate its position in the new coordinate system.

    #### Parameters:
    - `point_local` (Point): The point to be transformed, given in the local coordinate system.
    - `coordinate_system_old` (CoordinateSystem): The original coordinate system the point is in.
    - `new_origin` (Point): The origin of the new coordinate system.
    - `direction_vector` (Vector3): The direction vector defining the new Z-axis of the coordinate system.

    #### Returns:
    Point: The transformed point in the new coordinate system.

    #### Example usage:
    ```python
    
    ```
    """

    direction_vector = Vector3.to_matrix(direction_vector)
    new_origin = Point.to_matrix(new_origin)
    vz_norm = Vector3.length(Vector3(*direction_vector))
    vz = [direction_vector[0] / vz_norm, direction_vector[1] /
          vz_norm, direction_vector[2] / vz_norm]

    vx = [-vz[1], vz[0], 0]
    vx_norm = Vector3.length(Vector3(*vx))

    if vx_norm == 0:
        vx = [1, 0, 0]
    else:
        vx = [vx[0] / vx_norm, vx[1] / vx_norm, vx[2] / vx_norm]

    vy = Vector3.cross_product(Vector3(*vz), Vector3(*vx))
    vy_norm = Vector3.length(vy)
    if vy_norm != 0:
        vy = [vy.x / vy_norm, vy.y / vy_norm, vy.z / vy_norm]
    else:
        vy = [0, 1, 0]

    point_1 = point_local
    CSNew = CoordinateSystem(Point.from_matrix(new_origin), Vector3.from_matrix(
        vx), Vector3.from_matrix(vy), Vector3.from_matrix(vz))
    vector_1 = Point.difference(coordinate_system_old.Origin, CSNew.Origin)

    vector_2 = Vector3.product(point_1.x, CSNew.Xaxis)
    vector_3 = Vector3.product(point_1.y, CSNew.Y_axis)
    vector_4 = Vector3.product(point_1.z, CSNew.Z_axis)
    vtot = Vector3(vector_1.x + vector_2.x + vector_3.x + vector_4.x, vector_1.y + vector_2.y +
                   vector_3.y + vector_4.y, vector_1.z + vector_2.z + vector_3.z + vector_4.z)
    pointNew = Point.translate(Point(0, 0, 0), vtot)

    return pointNew


def transform_point_2(PointLocal: Point, CoordinateSystemNew: CoordinateSystem) -> Point:
    """Transforms a point from its local coordinate system to a new coordinate system.
    This function translates a point based on its local coordinates (x, y, z) within its current coordinate system to a new position in a specified coordinate system. The transformation involves scaling the local coordinates by the axes vectors of the new coordinate system and sequentially translating the point along these axes vectors starting from the new origin.

    #### Parameters:
    - `PointLocal` (`Point`): The point in its local coordinate system to be transformed.
    - `CoordinateSystemNew` (`CoordinateSystem`): The new coordinate system to which the point is to be transformed.

    #### Returns:
    `Point`: The point transformed into the new coordinate system.

    #### Example usage:
    ```python
    
    ```
    """
    pn = Point.translate(CoordinateSystemNew.Origin, Vector3.scale(
        CoordinateSystemNew.Xaxis, PointLocal.x))
    pn2 = Point.translate(pn, Vector3.scale(
        CoordinateSystemNew.Y_axis, PointLocal.y))
    pn3 = Point.translate(pn2, Vector3.scale(
        CoordinateSystemNew.Z_axis, PointLocal.z))
    return pn3

class BuildingPy:
    def __init__(self, name=None, number=None):
        self.name: str = name
        self.number: str = number
        self.debug: bool = True
        self.objects = []
        self.units = "mm"
        self.decimals = 3 #not fully implemented yet
        self.origin = Point(0,0,0)
        self.default_font = "calibri"
        self.scale = 1000
        self.font_height = 500
        self.repr_round = 3
        #prefix objects (name)
        #Geometry settings

        #export selection info
        self.domain = None
        self.applicationId = "OPEN-AEC BuildingPy"

        #different settings for company's?

        #rename this to autoclose?
        self.closed: bool = True #auto close polygons? By default true, else overwrite
        self.round: bool = False #If True then arcs will be segmented. Can be used in Speckle.

        #functie polycurve of iets van een class/def
        self.autoclose: bool = True #new self.closed

        #nodes
        self.node_merge = True #False not yet created
        self.node_diameter = 250
        self.node_threshold = 50
        
        #text
        self.createdTxt = "has been created"

        #structural elements
        self.structural_fallback_element = "HEA100"

        #Speckle settings
        self.speckleserver = "speckle.xyz"
        self.specklestream = None

        #FreeCAD settings

        X_axis = Vector3(1, 0, 0)
        Y_Axis = Vector3(0, 1, 0)
        Z_Axis = Vector3(0, 0, 1)
        self.CSGlobal = CoordinateSystem(Point(0, 0, 0), X_axis, Y_Axis, Z_Axis)
        
    def save(self):
        # print(self.objects)
        serialized_objects = []
        for obj in self.objects:
            try:
                # print(obj)
                serialized_objects.append(json.dumps(obj.serialize()))
            except:
                print(obj)

        serialized_data = json.dumps(serialized_objects)
        file_name = 'project/data.json'
        with open(file_name, 'w') as file:
            file.write(serialized_data)


        type_count = defaultdict(int)
        for serialized_item in serialized_objects:
            item = json.loads(serialized_item)
            item_type = item.get("type")
            if item_type:
                type_count[item_type] += 1

        total_items = len(serialized_objects)

        print(f"\nTotal saved items to '{file_name}': {total_items}")
        print("Type counts:")
        for item_type, count in type_count.items():
            print(f"{item_type}: {count}")

    def open(self):
        pass  # open data.json objects in here

    def toSpeckle(self, streamid, commitstring=None):
        self.specklestream = streamid
        speckleobj = translateObjectsToSpeckleObjects(self.objects)
        TransportToSpeckle(self.speckleserver, streamid, speckleobj, commitstring)

    def toFreeCAD(self):
        translateObjectsToFreeCAD(self.objects)

    def toIFC(self, name):
        ifc_project = CreateIFC()
        ifc_project.add_project(name)
        ifc_project.add_site("My Site")
        ifc_project.add_building("Building A")
        ifc_project.add_storey("Ground Floor")
        ifc_project.add_storey("G2Floor")     
        translateObjectsToIFC(self.objects, ifc_project)
        ifc_project.export(f"{name}.ifc")



project = BuildingPy("Project", "0")




class CoordinateSystem:
    # UNITY VECTORS REQUIRED #TOdo organize resic
    """The `CoordinateSystem` class represents a coordinate system in 3D space, defined by an origin point and three orthogonal unit vectors along the X, Y, and Z axes."""
    def __init__(self, origin: Point, x_axis, y_axis, z_axis):
        """Initializes a new CoordinateSystem instance.

        #### Parameters:
        - `origin` (Point): The origin point of the coordinate system.
        - `x_axis` (Vector3): The X-axis direction vector.
        - `y_axis` (Vector3): The Y-axis direction vector.
        - `z_axis` (Vector3): The Z-axis direction vector.

        #### Example usage:
        ```python
        origin = Point(0, 0, 0)
        x_axis = Vector3(1, 0, 0)
        y_axis = Vector3(0, 1, 0)
        z_axis = Vector3(0, 0, 1)
        coordinate_system = CoordinateSystem(origin, x_axis, y_axis, z_axis)
        ```
        """

        self.id = generateID()
        self.type = __class__.__name__
        self.Origin = origin
        self.Xaxis = Vector3.normalize(x_axis)
        self.Y_axis = Vector3.normalize(y_axis)
        self.Z_axis = Vector3.normalize(z_axis)

    def serialize(self) -> dict:
        """Serializes the coordinate system's attributes into a dictionary.

        #### Returns:
        `dict`: A dictionary containing the serialized attributes of the coordinate system.

        #### Example usage:
        ```python
        coordinate_system = CoordinateSystem(...)
        serialized_cs = coordinate_system.serialize()
        ```
        """
        id_value = str(self.id) if not isinstance(
            self.id, (str, int, float)) else self.id
        return {
            'id': id_value,
            'type': self.type,
            'Origin': self.Origin.serialize(),
            'Xaxis': self.Xaxis.serialize(),
            'Y_axis': self.Y_axis.serialize(),
            'Z_axis': self.Z_axis.serialize()
        }

    @staticmethod
    def deserialize(data: dict):
        """Recreates a CoordinateSystem object from serialized data.

        #### Parameters:
        - `data` (dict): The dictionary containing the serialized data of a CoordinateSystem object.

        #### Returns:
        `CoordinateSystem`: A new CoordinateSystem object initialized with the data from the dictionary.

        #### Example usage:
        ```python
        data = {...}
        coordinate_system = CoordinateSystem.deserialize(data)
        ```
        """
        origin = Point.deserialize(data['Origin'])
        x_axis = Vector3.deserialize(data['Xaxis'])
        y_axis = Vector3.deserialize(data['Y_axis'])
        z_axis = Vector3.deserialize(data['Z_axis'])
        return CoordinateSystem(origin, x_axis, y_axis, z_axis)

    # @classmethod
    # def by_origin(self, origin: Point):
    #     self.Origin = origin
    #     self.Xaxis = X_axis
    #     self.Y_axis = Y_Axis
    #     self.Z_axis = Z_Axis
    #     return self

    @classmethod
    def by_origin(self, origin: Point) -> 'CoordinateSystem':
        """Creates a CoordinateSystem with a new origin while keeping the standard orientation.

        #### Parameters:
        - `origin` (Point): The new origin point of the coordinate system.

        #### Returns:
        `CoordinateSystem`: A CoordinateSystem instance with the specified origin and standard axes orientation.

        #### Example usage:
        ```python
        new_origin = Point(10, 10, 10)
        coordinate_system = CoordinateSystem.by_origin(new_origin)
        ```
        """
        return self(origin, x_axis=X_axis, y_axis=Y_Axis, z_axis=Z_Axis)

    # @staticmethod
    # def translate(cs_old, direction):
    #     CSNew = CoordinateSystem(cs_old.Origin, cs_old.Xaxis, cs_old.Y_axis, cs_old.Z_axis)
    #     new_origin = Point.translate(CSNew.Origin, direction)
    #     CSNew.Origin = new_origin
    #     return CSNew

    @staticmethod
    def translate(cs_old, direction: Vector3):
        """Translates an existing CoordinateSystem by a given direction vector.

        #### Parameters:
        - `cs_old` (CoordinateSystem): The original CoordinateSystem to be translated.
        - `direction` (Vector3): The direction vector by which to translate the coordinate system.

        #### Returns:
        `CoordinateSystem`: A new CoordinateSystem instance translated according to the direction vector.

        #### Example usage:
        ```python
        original_cs = CoordinateSystem(...)
        direction_vector = Vector3(5, 5, 0)
        translated_cs = CoordinateSystem.translate(original_cs, direction_vector)
        ```
        """
        pt = cs_old.Origin
        new_origin = Point.translate(pt, direction)

        X_axis = Vector3(1, 0, 0)

        Y_Axis = Vector3(0, 1, 0)

        Z_Axis = Vector3(0, 0, 1)

        CSNew = CoordinateSystem(
            new_origin, x_axis=X_axis, y_axis=Y_Axis, z_axis=Z_Axis)

        CSNew.Origin = new_origin
        return CSNew

    @staticmethod
    def transform(CS1, CS2):
        """Transforms one coordinate system (CS1) to align with another (CS2).

        This method calculates the transformation required to align CS1's axes with those of CS2, including translation and rotation.

        #### Parameters:
        - `CS1` (CoordinateSystem): The original coordinate system to be transformed.
        - `CS2` (CoordinateSystem): The target coordinate system to align with.

        #### Returns:
        `CoordinateSystem`: A new CoordinateSystem instance that has been transformed to align with CS2.

        #### Example usage:
        ```python
        CS1 = CoordinateSystem(...)
        CS2 = CoordinateSystem(...)
        transformed_CS = CoordinateSystem.transform(CS1, CS2)
        ```
        """

        translation_vector = Vector3.subtract(CS2.Origin, CS1.Origin)

        rotation_matrix = CoordinateSystem.calculate_rotation_matrix(
            CS1.Xaxis, CS1.Y_axis, CS1.Z_axis, CS2.Xaxis, CS2.Y_axis, CS2.Z_axis)

        xaxis_transformed = Vector3.dot_product(rotation_matrix, CS1.Xaxis)
        yaxis_transformed = Vector3.dot_product(rotation_matrix, CS1.Y_axis)
        zaxis_transformed = Vector3.dot_product(rotation_matrix, CS1.Z_axis)

        xaxis_normalized = Vector3.normalize(
            Vector3.from_matrix(xaxis_transformed))
        yaxis_normalized = Vector3.normalize(
            Vector3.from_matrix(yaxis_transformed))
        zaxis_normalized = Vector3.normalize(
            Vector3.from_matrix(zaxis_transformed))

        new_origin = Point.translate(CS1.Origin, translation_vector)
        new_CS = CoordinateSystem(
            new_origin, xaxis_normalized, yaxis_normalized, zaxis_normalized)

        return new_CS

    @staticmethod
    def translate_origin(origin1: Point, origin2: Point):
        """Translates the origin of a coordinate system from one point to another.

        #### Parameters:
        - `origin1` (Point): The original origin point.
        - `origin2` (Point): The new origin point to translate to.

        #### Returns:
        `Point`: The new origin point after translation.

        #### Example usage:
        ```python
        origin1 = Point(0, 0, 0)
        origin2 = Point(5, 5, 5)
        new_origin = CoordinateSystem.translate_origin(origin1, origin2)
        ```
        """
        origin1_n = Point.to_matrix(origin1)
        origin2_n = Point.to_matrix(origin2)

        new_origin_n = origin1_n + (origin2_n - origin1_n)
        return Point(new_origin_n[0], new_origin_n[1], new_origin_n[2])

    @staticmethod
    def calculate_rotation_matrix(xaxis1: Vector3, yaxis1: Vector3, zaxis1: Vector3, xaxis2: Vector3, yaxis2: Vector3, zaxis2: Vector3):
        """Calculates the rotation matrix needed to align one set of axes with another.

        #### Parameters:
        - `xaxis1`, `yaxis1`, `zaxis1`: The original axes vectors.
        - `xaxis2`, `yaxis2`, `zaxis2`: The target axes vectors to align with.

        #### Returns:
        A matrix representing the rotation required to align the first set of axes with the second.

        #### Example usage:
        ```python
        xaxis1 = Vector3(1, 0, 0)
        yaxis1 = Vector3(0, 1, 0)
        zaxis1 = Vector3(0, 0, 1)
        xaxis2 = Vector3(0, 1, 0)
        yaxis2 = Vector3(-1, 0, 0)
        zaxis2 = Vector3(0, 0, 1)
        rotation_matrix = CoordinateSystem.calculate_rotation_matrix(xaxis1, yaxis1, zaxis1, xaxis2, yaxis2, zaxis2)
        ```
        """

        def transpose(matrix):
            return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]

        def matrix_multiply(matrix1, matrix2):
            result = []
            for i in range(len(matrix1)):
                row = []
                for j in range(len(matrix2[0])):
                    sum = 0
                    for k in range(len(matrix2)):
                        sum += matrix1[i][k] * matrix2[k][j]
                    row.append(sum)
                result.append(row)
            return result

        def matrix_inverse(matrix):
            determinant = matrix[0][0] * (matrix[1][1] * matrix[2][2] - matrix[1][2] * matrix[2][1]) - \
                matrix[0][1] * (matrix[1][0] * matrix[2][2] - matrix[1][2] * matrix[2][0]) + \
                matrix[0][2] * (matrix[1][0] * matrix[2][1] -
                                matrix[1][1] * matrix[2][0])
            if determinant == 0:
                raise ValueError("Matrix is not invertible")
            inv_det = 1.0 / determinant
            result = [[0] * 3 for _ in range(3)]
            result[0][0] = (matrix[1][1] * matrix[2][2] -
                            matrix[1][2] * matrix[2][1]) * inv_det
            result[0][1] = (matrix[0][2] * matrix[2][1] -
                            matrix[0][1] * matrix[2][2]) * inv_det
            result[0][2] = (matrix[0][1] * matrix[1][2] -
                            matrix[0][2] * matrix[1][1]) * inv_det
            result[1][0] = (matrix[1][2] * matrix[2][0] -
                            matrix[1][0] * matrix[2][2]) * inv_det
            result[1][1] = (matrix[0][0] * matrix[2][2] -
                            matrix[0][2] * matrix[2][0]) * inv_det
            result[1][2] = (matrix[0][2] * matrix[1][0] -
                            matrix[0][0] * matrix[1][2]) * inv_det
            result[2][0] = (matrix[1][0] * matrix[2][1] -
                            matrix[1][1] * matrix[2][0]) * inv_det
            result[2][1] = (matrix[0][1] * matrix[2][0] -
                            matrix[0][0] * matrix[2][1]) * inv_det
            result[2][2] = (matrix[0][0] * matrix[1][1] -
                            matrix[0][1] * matrix[1][0]) * inv_det
            return result

        R1_transpose = transpose([Vector3.to_matrix(
            xaxis1), Vector3.to_matrix(yaxis1), Vector3.to_matrix(zaxis1)])
        R2_transpose = transpose([Vector3.to_matrix(
            xaxis2), Vector3.to_matrix(yaxis2), Vector3.to_matrix(zaxis2)])

        return matrix_multiply(R2_transpose, matrix_inverse(R1_transpose))

    @staticmethod
    def normalize(self):
        """Normalizes the axes vectors of a given CoordinateSystem to unit vectors.

        This method ensures that the X, Y, and Z axes of the coordinate system are unit vectors (vectors of length 1), which is essential for many calculations involving directions and orientations in 3D space.

        #### Parameters:
        - `self` (CoordinateSystem): The coordinate system whose axes vectors are to be normalized.

        #### Returns:
        `CoordinateSystem`: A new CoordinateSystem instance with normalized axes vectors.

        #### Example usage:
        ```python
        CS_before_normalization = CoordinateSystem(
            origin=Point(0, 0, 0),
            x_axis=Vector3(10, 0, 0),
            y_axis=Vector3(0, 10, 0),
            z_axis=Vector3(0, 0, 10)
        )
        CS_after_normalization = CoordinateSystem.normalize(CS_before_normalization)
        # Now, CS_after_normalization's X, Y, and Z axes are unit vectors.
        ```
        """
        self.Xaxis = Vector3.normalize(self.Xaxis)
        self.Y_axis = Vector3.normalize(self.Y_axis)
        self.Z_axis = Vector3.normalize(self.Z_axis)

    @staticmethod
    def move_local(cs_old, x: float, y: float, z: float):
        """Moves a CoordinateSystem locally along its own axes.

        #### Parameters:
        - `cs_old` (CoordinateSystem): The coordinate system to move.
        - `x` (float): The distance to move along the local X-axis.
        - `y` (float): The distance to move along the local Y-axis.
        - `z` (float): The distance to move along the local Z-axis.

        #### Returns:
        `CoordinateSystem`: A new CoordinateSystem instance that has been moved according to the specified distances.

        #### Example usage:
        ```python
        cs_old = CoordinateSystem(...)
        moved_cs = CoordinateSystem.move_local(cs_old, 10, 0, 5)
        # The returned CoordinateSystem is moved 10 units along its X-axis and 5 units along its Z-axis.
        ```
        """
        # move coordinatesystem by y in local coordinates(not global)
        xloc_vect_norm = cs_old.Xaxis
        xdisp = Vector3.scale(xloc_vect_norm, x)
        yloc_vect_norm = cs_old.Xaxis
        ydisp = Vector3.scale(yloc_vect_norm, y)
        zloc_vect_norm = cs_old.Xaxis
        zdisp = Vector3.scale(zloc_vect_norm, z)
        disp = Vector3.sum3(xdisp, ydisp, zdisp)
        CS = CoordinateSystem.translate(cs_old, disp)
        return CS

    @staticmethod
    def by_point_main_vector(NewOriginCoordinateSystem: Point, DirectionVectorZ: Vector3) -> 'CoordinateSystem':
        """Creates a CoordinateSystem with a specified origin and a main direction vector for the Z-axis.

        #### Parameters:
        - `NewOriginCoordinateSystem` (Point): The origin point of the new CoordinateSystem.
        - `DirectionVectorZ` (Vector3): The main direction vector to define the new Z-axis.

        #### Returns:
        `CoordinateSystem`: A CoordinateSystem instance with the specified origin and Z-axis orientation.

        #### Example usage:
        ```python
        new_origin = Point(0, 0, 0)
        main_direction = Vector3(0, 0, 1)
        coordinate_system = CoordinateSystem.by_point_main_vector(new_origin, main_direction)
        ```
        """
        vz = DirectionVectorZ  # LineVector and new Z-axis
        vz = Vector3.normalize(vz)  # NewZAxis
        vx = Vector3.perpendicular(vz)[0]  # NewXAxis
        try:
            vx = Vector3.normalize(vx)  # NewXAxisnormalized
        except:
            # In case of vertical element the length is zero
            vx = Vector3(1, 0, 0)
        vy = Vector3.perpendicular(vz)[1]  # NewYAxis
        try:
            vy = Vector3.normalize(vy)  # NewYAxisnormalized
        except:
            # In case of vertical element the length is zero
            vy = Vector3(0, 1, 0)
        CSNew = CoordinateSystem(NewOriginCoordinateSystem, vx, vy, vz)
        return CSNew

    def __str__(self):
        return f"{__class__.__name__}(Origin = " + f"{self.Origin}, X_axis = {self.Xaxis}, Y_Axis = {self.Y_axis}, Z_Axis = {self.Z_axis})"


X_axis = Vector3(1, 0, 0)
Vector3(0, 1, 0)
Vector3(0, 0, 1)
CSGlobal = CoordinateSystem(Point(0, 0, 0), X_axis, Y_Axis, Z_Axis)



class Matrix:
    def __init__(self, matrix=None):
        if matrix is None:
            self.matrix = [[0 for _ in range(4)] for _ in range(4)]
        else:
            self.matrix = matrix

    def add(self, other):
        if self.shape() != other.shape():
            raise ValueError("Matrices must have the same dimensions")
        return Matrix([[self.matrix[i][j] + other.matrix[i][j] for j in range(len(self.matrix[0]))] for i in range(len(self.matrix))])

    def all(self, axis=None):
        if axis is None:
            return all(all(row) for row in self.matrix)
        elif axis == 0:
            return [all(self.matrix[row][col] for row in range(len(self.matrix))) for col in range(len(self.matrix[0]))]
        elif axis == 1:
            return [all(col) for col in self.matrix]
        else:
            raise ValueError("Axis must be None, 0, or 1")

    def any(self, axis=None):
        if axis is None:
            return any(any(row) for row in self.matrix)
        elif axis == 0:
            return [any(self.matrix[row][col] for row in range(len(self.matrix))) for col in range(len(self.matrix[0]))]
        elif axis == 1:
            return [any(col) for col in self.matrix]
        else:
            raise ValueError("Axis must be None, 0, or 1")

    def argmax(self, axis=None):
        if axis is None:
            flat_list = [item for sublist in self.matrix for item in sublist]
            return flat_list.index(max(flat_list))
        elif axis == 0:
            return [max(range(len(self.matrix)), key=lambda row: self.matrix[row][col]) for col in range(len(self.matrix[0]))]
        elif axis == 1:
            return [max(range(len(row)), key=lambda col: row[col]) for row in self.matrix]
        else:
            raise ValueError("Axis must be None, 0, or 1")

    def argmin(self, axis=None):
        if axis is None:
            flat_list = [item for sublist in self.matrix for item in sublist]
            return flat_list.index(min(flat_list))
        elif axis == 0:
            return [min(range(len(self.matrix)), key=lambda row: self.matrix[row][col]) for col in range(len(self.matrix[0]))]
        elif axis == 1:
            return [min(range(len(row)), key=lambda col: row[col]) for row in self.matrix]
        else:
            raise ValueError("Axis must be None, 0, or 1")

    def argpartition(self, kth, axis=0):
        def partition(arr, kth):
            pivot = arr[kth]
            less = [i for i in range(len(arr)) if arr[i] < pivot]
            equal = [i for i in range(len(arr)) if arr[i] == pivot]
            greater = [i for i in range(len(arr)) if arr[i] > pivot]
            return less + equal + greater

        if axis == 0:
            return [partition([self.matrix[row][col] for row in range(len(self.matrix))], kth) for col in range(len(self.matrix[0]))]
        elif axis == 1:
            return [partition(row, kth) for row in self.matrix]

    def argsort(self, axis=0):
        if axis == 0:
            return [[row for row, val in sorted(enumerate(col), key=lambda x: x[1])] for col in zip(*self.matrix)]
        elif axis == 1:
            return [list(range(len(self.matrix[0]))) for _ in self.matrix]

    def astype(self, dtype):
        cast_matrix = [[dtype(item) for item in row] for row in self.matrix]
        return Matrix(cast_matrix)

    def byteswap(self, inplace=False):
        if inplace:
            for i in range(len(self.matrix)):
                for j in range(len(self.matrix[i])):
                    self.matrix[i][j] = ~self.matrix[i][j]
            return self
        else:
            new_matrix = [[~item for item in row] for row in self.matrix]
            return Matrix(new_matrix)

    def choose(self, choices, mode='raise'):
        if mode != 'raise':
            raise NotImplementedError("Only 'raise' mode is implemented")

        chosen = [[choices[item] for item in row] for row in self.matrix]
        return Matrix(chosen)

    def compress(self, condition, axis=None):
        if axis == 0:
            compressed = [row for row, cond in zip(
                self.matrix, condition) if cond]
            return Matrix(compressed)
        else:
            raise NotImplementedError("Axis other than 0 is not implemented")

    def clip(self, min=None, max=None):
        clipped_matrix = []
        for row in self.matrix:
            clipped_row = [max if max is not None and val >
                           max else min if min is not None and val < min else val for val in row]
            clipped_matrix.append(clipped_row)
        return Matrix(clipped_matrix)

    def conj(self):
        conjugated_matrix = [[complex(item).conjugate()
                              for item in row] for row in self.matrix]
        return Matrix(conjugated_matrix)

    def conjugate(self):
        return self.conj()

    def copy(self):
        copied_matrix = copy.deepcopy(self.matrix)
        return Matrix(copied_matrix)

    def cumprod(self, axis=None):
        if axis is None:
            flat_list = self.flatten()
            cumprod_list = []
            cumprod = 1
            for item in flat_list:
                cumprod *= item
                cumprod_list.append(cumprod)
            return Matrix([cumprod_list])
        else:
            raise NotImplementedError(
                "Axis handling not implemented in this example")

    def cumsum(self, axis=None):
        if axis is None:
            flat_list = self.flatten()
            cumsum_list = []
            cumsum = 0
            for item in flat_list:
                cumsum += item
                cumsum_list.append(cumsum)
            return Matrix([cumsum_list])
        else:
            raise NotImplementedError(
                "Axis handling not implemented in this example")

    def diagonal(self, offset=0):
        return [self.matrix[i][i + offset] for i in range(len(self.matrix)) if 0 <= i + offset < len(self.matrix[i])]

    def dump(self, file):
        with open(file, 'wb') as f:
            pickle.dump(self.matrix, f)

    def dumps(self):
        return pickle.dumps(self.matrix)

    def fill(self, value):
        for i in range(len(self.matrix)):
            for j in range(len(self.matrix[i])):
                self.matrix[i][j] = value

    @staticmethod
    def from_points(from_point: Point, to_point: Point):
        Vz = Vector3.by_two_points(from_point, to_point)
        Vz = Vector3.normalize(Vz)
        Vzglob = Vector3(0, 0, 1)
        Vx = Vector3.cross_product(Vz, Vzglob)
        if Vector3.length(Vx) == 0:
            Vx = Vector3(1, 0, 0) if Vz.x != 1 else Vector3(0, 1, 0)
        Vx = Vector3.normalize(Vx)
        Vy = Vector3.cross_product(Vx, Vz)

        return Matrix([
            [Vx.x, Vy.x, Vz.x, from_point.x],
            [Vx.y, Vy.y, Vz.y, from_point.y],
            [Vx.z, Vy.z, Vz.z, from_point.z],
            [0, 0, 0, 1]
        ])

    def flatten(self):
        return [item for sublist in self.matrix for item in sublist]

    def getA(self):
        return self.matrix

    def getA1(self):
        return [item for sublist in self.matrix for item in sublist]

    def getH(self):
        conjugate_transposed = [[complex(self.matrix[j][i]).conjugate() for j in range(
            len(self.matrix))] for i in range(len(self.matrix[0]))]
        return Matrix(conjugate_transposed)

    def getI(self):
        raise NotImplementedError(
            "Matrix inversion is a complex operation not covered in this simple implementation.")

    def getT(self):
        return self.transpose()

    def getfield(self, dtype, offset=0):
        raise NotImplementedError(
            "This method is conceptual and depends on structured data support within the Matrix.")

    def item(self, *args):
        if len(args) == 1:
            index = args[0]
            rows, cols = len(self.matrix), len(self.matrix[0])
            return self.matrix[index // cols][index % cols]
        elif len(args) == 2:
            return self.matrix[args[0]][args[1]]
        else:
            raise ValueError("Invalid number of indices.")

    def itemset(self, *args):
        if len(args) == 2:
            index, value = args
            rows, cols = len(self.matrix), len(self.matrix[0])
            self.matrix[index // cols][index % cols] = value
        elif len(args) == 3:
            row, col, value = args
            self.matrix[row][col] = value
        else:
            raise ValueError("Invalid number of arguments.")

    def max(self, axis=None):
        if axis is None:
            return max(item for sublist in self.matrix for item in sublist)
        elif axis == 0:
            return [max(self.matrix[row][col] for row in range(len(self.matrix))) for col in range(len(self.matrix[0]))]
        elif axis == 1:
            return [max(row) for row in self.matrix]
        else:
            raise ValueError("Invalid axis.")

    def mean(self, axis=None):
        if axis is None:
            flat_list = self.flatten()
            return sum(flat_list) / len(flat_list)
        elif axis == 0:
            return [sum(self.matrix[row][col] for row in range(len(self.matrix))) / len(self.matrix) for col in range(len(self.matrix[0]))]
        elif axis == 1:
            return [sum(row) / len(row) for row in self.matrix]
        else:
            raise ValueError("Axis must be None, 0, or 1")

    def min(self, axis=None):
        if axis is None:
            return min(item for sublist in self.matrix for item in sublist)
        elif axis == 0:
            return [min(self.matrix[row][col] for row in range(len(self.matrix))) for col in range(len(self.matrix[0]))]
        elif axis == 1:
            return [min(row) for row in self.matrix]
        else:
            raise ValueError("Invalid axis.")

    @staticmethod
    def zeros(rows, cols):
        return Matrix([[0 for _ in range(cols)] for _ in range(rows)])

    @staticmethod
    def participation(self):
        pass

    def prod(self, axis=None):
        if axis is None:
            return reduce(lambda x, y: x * y, [item for sublist in self.matrix for item in sublist], 1)
        elif axis == 0:
            return [reduce(lambda x, y: x * y, [self.matrix[row][col] for row in range(len(self.matrix))], 1) for col in range(len(self.matrix[0]))]
        elif axis == 1:
            return [reduce(lambda x, y: x * y, row, 1) for row in self.matrix]
        else:
            raise ValueError("Invalid axis.")

    def ptp(self, axis=None):
        if axis is None:
            flat_list = [item for sublist in self.matrix for item in sublist]
            return max(flat_list) - min(flat_list)
        elif axis == 0:
            return [max([self.matrix[row][col] for row in range(len(self.matrix))]) - min([self.matrix[row][col] for row in range(len(self.matrix))]) for col in range(len(self.matrix[0]))]
        elif axis == 1:
            return [max(row) - min(row) for row in self.matrix]
        else:
            raise ValueError("Invalid axis.")

    def put(self, indices, values):
        if len(indices) != len(values):
            raise ValueError("Length of indices and values must match.")
        flat_list = self.ravel()
        for index, value in zip(indices, values):
            flat_list[index] = value

    @staticmethod
    def random(rows, cols):
        return Matrix([[random.random() for _ in range(cols)] for _ in range(rows)])

    def ravel(self):
        return [item for sublist in self.matrix for item in sublist]

    def repeat(self, repeats, axis=None):
        if axis is None:
            flat_list = self.ravel()
            repeated = [item for item in flat_list for _ in range(repeats)]
            return Matrix([repeated])
        elif axis == 0:
            repeated_matrix = [
                row for row in self.matrix for _ in range(repeats)]
        elif axis == 1:
            repeated_matrix = [
                [item for item in row for _ in range(repeats)] for row in self.matrix]
        else:
            raise ValueError("Invalid axis.")
        return Matrix(repeated_matrix)

    def reshape(self, rows, cols):
        flat_list = self.flatten()
        if len(flat_list) != rows * cols:
            raise ValueError(
                "The total size of the new array must be unchanged.")
        reshaped = [flat_list[i * cols:(i + 1) * cols] for i in range(rows)]
        return Matrix(reshaped)

    def resize(self, new_shape):
        new_rows, new_cols = new_shape
        current_rows, current_cols = len(self.matrix), len(
            self.matrix[0]) if self.matrix else 0
        if new_rows < current_rows:
            self.matrix = self.matrix[:new_rows]
        else:
            for _ in range(new_rows - current_rows):
                self.matrix.append([0] * current_cols)
        for row in self.matrix:
            if new_cols < current_cols:
                row[:] = row[:new_cols]
            else:
                row.extend([0] * (new_cols - current_cols))

    def round(self, decimals=0):
        rounded_matrix = [[round(item, decimals)
                           for item in row] for row in self.matrix]
        return Matrix(rounded_matrix)

    def searchsorted(self, v, side='left'):
        flat_list = self.flatten()
        i = 0
        if side == 'left':
            while i < len(flat_list) and flat_list[i] < v:
                i += 1
        elif side == 'right':
            while i < len(flat_list) and flat_list[i] <= v:
                i += 1
        else:
            raise ValueError("side must be 'left' or 'right'")
        return i

    def setfield(self, val, dtype, offset=0):
        raise NotImplementedError(
            "Structured data operations are not supported in this Matrix class.")

    def setflags(self, write=None, align=None, uic=None):
        print("This Matrix class does not support setting flags directly.")

    def shape(self):
        return len(self.matrix), len(self.matrix[0])

    def sort(self, axis=-1):
        if axis == -1 or axis == 1:
            for row in self.matrix:
                row.sort()
        elif axis == 0:
            transposed = [[self.matrix[j][i] for j in range(
                len(self.matrix))] for i in range(len(self.matrix[0]))]
            for row in transposed:
                row.sort()
            self.matrix = [[transposed[j][i] for j in range(
                len(transposed))] for i in range(len(transposed[0]))]
        else:
            raise ValueError("Axis out of range.")

    def squeeze(self):
        squeezed_matrix = [row for row in self.matrix if any(row)]
        return Matrix(squeezed_matrix)

    def std(self, axis=None, ddof=0):
        var = self.var(axis=axis, ddof=ddof)
        if isinstance(var, list):
            return [x ** 0.5 for x in var]
        else:
            return var ** 0.5

    def subtract(self, other):
        if self.shape() != other.shape():
            raise ValueError("Matrices must have the same dimensions")
        return Matrix([[self.matrix[i][j] - other.matrix[i][j] for j in range(len(self.matrix[0]))] for i in range(len(self.matrix))])

    def sum(self, axis=None):
        if axis is None:
            return sum(sum(row) for row in self.matrix)
        elif axis == 0:
            return [sum(self.matrix[row][col] for row in range(len(self.matrix))) for col in range(len(self.matrix[0]))]
        elif axis == 1:
            return [sum(row) for row in self.matrix]
        else:
            raise ValueError("Axis must be None, 0, or 1")

    def swapaxes(self, axis1, axis2):
        if axis1 == 0 and axis2 == 1 or axis1 == 1 and axis2 == 0:
            return Matrix([[self.matrix[j][i] for j in range(len(self.matrix))] for i in range(len(self.matrix[0]))])
        else:
            raise ValueError("Axis values out of range for a 2D matrix.")

    def take(self, indices, axis=None):
        if axis is None:
            flat_list = [item for sublist in self.matrix for item in sublist]
            return Matrix([flat_list[i] for i in indices])
        elif axis == 0:
            return Matrix([self.matrix[i] for i in indices])
        else:
            raise ValueError(
                "Axis not supported or out of range for a 2D matrix.")

    def tobytes(self):
        byte_array = bytearray()
        for row in self.matrix:
            for item in row:
                byte_array.extend(struct.pack('i', item))
        return bytes(byte_array)

    def tofile(self, fid, sep="", format="%s"):
        if isinstance(fid, str):
            with open(fid, 'wb' if sep == "" else 'w') as f:
                self._write_to_file(f, sep, format)
        else:
            self._write_to_file(fid, sep, format)

    def _write_to_file(self, file, sep, format):
        if sep == "":
            file.write(self.tobytes())
        else:
            for row in self.matrix:
                line = sep.join(format % item for item in row) + "\n"
                file.write(line)

    def tostring(self):
        for row in self.matrix:
            print(' '.join(map(str, row)))

    def trace(self, offset=0):
        rows, cols = len(self.matrix), len(self.matrix[0])
        return sum(self.matrix[i][i + offset] for i in range(min(rows, cols - offset)) if 0 <= i + offset < cols)

    def transpose(self):
        transposed = [[self.matrix[j][i] for j in range(
            len(self.matrix))] for i in range(len(self.matrix[0]))]
        return Matrix(transposed)

    def var(self, axis=None, ddof=0):
        if axis is None:
            flat_list = self.flatten()
            mean = sum(flat_list) / len(flat_list)
            return sum((x - mean) ** 2 for x in flat_list) / (len(flat_list) - ddof)
        elif axis == 0 or axis == 1:
            means = self.mean(axis=axis)
            if axis == 0:
                return [sum((self.matrix[row][col] - means[col]) ** 2 for row in range(len(self.matrix))) / (len(self.matrix) - ddof) for col in range(len(self.matrix[0]))]
            else:
                return [sum((row[col] - means[idx]) ** 2 for col in range(len(row))) / (len(row) - ddof) for idx, row in enumerate(self.matrix)]
        else:
            raise ValueError("Axis must be None, 0, or 1")

    def _validate(self):
        rows = len(self.matrix)
        cols = len(self.matrix[0]) if rows > 0 else 0
        return rows, cols


class Line:
    def __init__(self, start: 'Point', end: 'Point') -> 'Line':
        """Initializes a Line object with the specified start and end points.

        - `start` (Point): The starting point of the line segment.
        - `end` (Point): The ending point of the line segment.
        """
        self.id = generateID()
        self.type = __class__.__name__
        self.start: Point = start
        self.end: Point = end
        self.x = [self.start.x, self.end.x]
        self.y = [self.start.y, self.end.y]
        try:
            self.z = [self.start.z, self.end.z]
        except:
            self.z = 0

        self.dx = self.end.x-self.start.x
        self.dy = self.end.y-self.start.y
        try:
            self.dz = self.end.z-self.start.z
        except:
            self.dz = 0
        self.length = self.length()
        self.vector: Vector3 = Vector3.by_two_points(start, end)
        self.vector_normalised = Vector3.normalize(self.vector)

    def serialize(self) -> 'dict':
        """Serializes the Line object into a dictionary.

        #### Returns:
        `dict`: A dictionary containing the serialized data of the Line object.

        #### Example usage:
        ```python

        ```         
        """
        id_value = str(self.id) if not isinstance(
            self.id, (str, int, float)) else self.id
        start_serialized = self.start.serialize() if hasattr(
            self.start, 'serialize') else str(self.start)
        end_serialized = self.end.serialize() if hasattr(
            self.end, 'serialize') else str(self.end)

        # Serialize vector if it has a serialize method, otherwise convert to string representation
        vector_serialized = self.vector.serialize() if hasattr(
            self.vector, 'serialize') else str(self.vector)
        vector_normalized_serialized = self.vector_normalised.serialize() if hasattr(
            self.vector_normalised, 'serialize') else str(self.vector_normalised)

        return {
            'id': id_value,
            'type': self.type,
            'start': start_serialized,
            'end': end_serialized,
            'x': self.x,
            'y': self.y,
            'z': self.z,
            'dx': self.dx,
            'dy': self.dy,
            'dz': self.dz,
            'length': self.length,
            'vector': vector_serialized,
            'vector_normalised': vector_normalized_serialized
        }

    @staticmethod
    def deserialize(data: 'dict'):
        """Deserializes the data dictionary into a Line object.

        #### Parameters:
        - `data` (dict): The dictionary containing the serialized data of the Line object.

        #### Returns:
        `Line`: A Line object reconstructed from the serialized data.

        #### Example usage:
        ```python

        ```          
        """
        start_point = Point.deserialize(data['start'])
        end_point = Point.deserialize(data['end'])

        instance = Line(start_point, end_point)

        instance.id = data.get('id')
        instance.type = data.get('type')
        instance.x = data.get('x')
        instance.y = data.get('y')
        instance.z = data.get('z')
        instance.dx = data.get('dx')
        instance.dy = data.get('dy')
        instance.dz = data.get('dz')
        instance.length = data.get('length')

        if 'vector' in data and hasattr(Vector3, 'deserialize'):
            instance.vector = Vector3.deserialize(data['vector'])
        else:
            instance.vector = data['vector']

        if 'vector_normalised' in data and hasattr(Vector3, 'deserialize'):
            instance.vector_normalised = Vector3.deserialize(
                data['vector_normalised'])
        else:
            instance.vector_normalised = data['vector_normalised']

        return instance

    @staticmethod
    def by_startpoint_direction_length(start: 'Point', direction: 'Vector3', length: 'float') -> 'Line':
        """Creates a line segment starting from a given point in the direction of a given vector with a specified length.

        #### Parameters:
        - `start` (Point): The starting point of the line segment.
        - `direction` (Vector3): The direction vector of the line segment.
        - `length` (float): The length of the line segment.

        #### Returns:
        `Line`: A new Line object representing the line segment.

        #### Example usage:
        ```python

        ```          
        """
        norm = math.sqrt(direction.x ** 2 + direction.y **
                         2 + direction.z ** 2)
        normalized_direction = Vector3(
            direction.x / norm, direction.y / norm, direction.z / norm)

        end_x = start.x + normalized_direction.x * length
        end_y = start.y + normalized_direction.y * length
        end_z = start.z + normalized_direction.z * length
        end_point = Point(end_x, end_y, end_z)

        return Line(start, end_point)

    def translate(self, direction: 'Vector3') -> 'Line':
        """Translates the Line object by a given direction vector.

        #### Parameters:
        - `direction` (Vector3): The direction vector by which the line segment will be translated.

        #### Returns:
        `Line`: The translated Line object.

        #### Example usage:
        ```python

        ```          
        """
        self.start = Point.translate(self.start, direction)
        self.end = Point.translate(self.end, direction)
        return self

    @staticmethod
    def translate_2(line: 'Line', direction: 'Vector3') -> 'Line':
        """Translates the specified Line object by a given direction vector.

        #### Parameters:
        - `line` (Line): The Line object to be translated.
        - `direction` (Vector3): The direction vector by which the line segment will be translated.

        #### Returns:
        `Line`: The translated Line object.

        #### Example usage:
        ```python

        ```          
        """
        line.start = Point.translate(line.start, direction)
        line.end = Point.translate(line.end, direction)
        return line

    @staticmethod
    def transform(line: 'Line', cs_new: 'CoordinateSystem') -> 'Line':
        """Transforms the Line object to a new coordinate system.

        #### Parameters:
        - `line` (Line): The Line object to be transformed.
        - `cs_new` (CoordinateSystem): The new coordinate system to which the Line object will be transformed.

        #### Returns:
        `Line`: The transformed Line object.

        #### Example usage:
        ```python

        ```          
        """
        ln = Line(start=line.start, end=line.end)
        ln.start = transform_point_2(ln.start, cs_new)
        ln.end = transform_point_2(ln.end, cs_new)
        return ln

    def offset(line: 'Line', vector: 'Vector3') -> 'Line':
        """Offsets the Line object by a given vector.

        #### Parameters:
        - `line` (Line): The Line object to be offset.
        - `vector` (Vector3): The vector by which the Line object will be offset.

        #### Returns:
        `Line`: The offset Line object.

        #### Example usage:
        ```python

        ```          
        """
        start = Point(line.start.x + vector.x, line.start.y +
                      vector.y, line.start.z + vector.z)
        end = Point(line.end.x + vector.x, line.end.y +
                    vector.y, line.end.z + vector.z)
        return Line(start=start, end=end)

    # @classmethod
    def point_at_parameter(self, interval: 'float' = None) -> 'Point':
        """Computes the point on the Line object at a specified parameter value.

        #### Parameters:
        - `interval` (float): The parameter value determining the point on the line. Default is None, which corresponds to the midpoint.

        #### Returns:
        `Point`: The point on the Line object corresponding to the specified parameter value.

        #### Example usage:
        ```python

        ```          
        """
        if interval == None:
            interval = 0.0
        x1, y1, z1 = self.start.x, self.start.y, self.start.z
        x2, y2, z2 = self.end.x, self.end.y, self.end.z
        if float(interval) == 0.0:
            return self.start
        else:
            devBy = 1/interval
            return Point((x1 + x2) / devBy, (y1 + y2) / devBy, (z1 + z2) / devBy)

    def mid_point(self) -> 'Point':
        """Computes the midpoint of the Line object.

        #### Returns:
        `Point`: The midpoint of the Line object.

        #### Example usage:
        ```python

        ```          
        """
        vect = Vector3.scale(self.vector, 0.5)
        mid = Point.translate(self.start, vect)
        return mid

    def split(self, points: 'Union[Point, list[Point]]') -> 'list[Line]':
        """Splits the Line object at the specified point(s).

        #### Parameters:
        - `points` (Point or List[Point]): The point(s) at which the Line object will be split.

        #### Returns:
        `List[Line]`: A list of Line objects resulting from the split operation.

        #### Example usage:
        ```python

        ```          
        """
        lines = []
        if isinstance(points, list):
            points.extend([self.start, self.end])
            sorted_points = sorted(
                points, key=lambda p: p.distance(p, self.end))
            lines = create_lines(sorted_points)
            return lines
        elif isinstance(points, Point):
            point = points
            lines.append(Line(start=self.start, end=point))
            lines.append(Line(start=point, end=self.end))
            return lines

    def length(self) -> 'float':
        """Computes the length of the Line object.

        #### Returns:
        `float`: The length of the Line object.

        #### Example usage:
        ```python

        ```          
        """
        return math.sqrt(math.sqrt(self.dx * self.dx + self.dy * self.dy) * math.sqrt(self.dx * self.dx + self.dy * self.dy) + self.dz * self.dz)

    def __str__(self) -> 'str':
        """Returns a string representation of the Line object.

        #### Returns:
        `str`: A string representation of the Line object.

        #### Example usage:
        ```python

        ```          
        """
        return f"{__class__.__name__}(" + f"{self.start}, {self.end})"


def create_lines(points: 'list[Point]') -> 'list[Line]':
    """Creates a list of Line objects from a list of points.
    This function generates line segments connecting consecutive points in the list.

    #### Parameters:
    - `points` (List[Point]): A list of points.

    #### Returns:
    `List[Line]`: A list of Line objects representing the line segments connecting the points.

    #### Example usage:
    ```python

    ```      
    """
    lines = []
    for i in range(len(points)-1):
        line = Line(points[i], points[i+1])
        lines.append(line)
    return lines


class PolyCurve:
    def __init__(self):
        """Initializes a PolyCurve object.
        
        - `id` (int): The unique identifier of the arc.
        - `type` (str): The type of the arc.
        - `start` (Point): The start point of the arc.
        - `mid` (Point): The mid point of the arc.
        - `end` (Point): The end point of the arc.
        - `origin` (Point): The origin point of the arc.
        - `plane` (Plane): The plane containing the arc.
        - `radius` (float): The radius of the arc.
        - `startAngle` (float): The start angle of the arc in radians.
        - `endAngle` (float): The end angle of the arc in radians.
        - `angle_radian` (float): The total angle of the arc in radians.
        - `area` (float): The area of the arc.
        - `length` (float): The length of the arc.
        - `units` (str): The units used for measurement.
        - `coordinatesystem` (CoordinateSystem): The coordinate system of the arc.

        """
        self.id = generateID()
        self.type = __class__.__name__
        self.curves = []
        self.points = []
        self.segmentcurves = None
        self.width = None
        self.height = None
        # Methods ()
        # self.close
        # pointonperimeter
        # Properties
        self.approximateLength = None
        self.graphicsStyleId = None
        self.isClosed = None
        self.isCyclic = None
        self.isElementGeometry = None
        self.isReadOnly = None
        self.length = self.length()
        self.period = None
        self.reference = None
        self.visibility = None

    def serialize(self) -> 'dict':
        """Serializes the PolyCurve object.

        #### Returns:
        `dict`: Serialized data of the PolyCurve object.

        #### Example usage:
        ```python

        ```        
        """
        curves_serialized = [curve.serialize() if hasattr(
            curve, 'serialize') else str(curve) for curve in self.curves]
        points_serialized = [point.serialize() if hasattr(
            point, 'serialize') else str(point) for point in self.points]

        return {
            'type': self.type,
            'curves': curves_serialized,
            'points': points_serialized,
            'segmentcurves': self.segmentcurves,
            'width': self.width,
            'height': self.height,
            'approximateLength': self.approximateLength,
            'graphicsStyleId': self.graphicsStyleId,
            'id': self.id,
            'isClosed': self.isClosed,
            'isCyclic': self.isCyclic,
            'isElementGeometry': self.isElementGeometry,
            'isReadOnly': self.isReadOnly,
            'period': self.period,
            'reference': self.reference,
            'visibility': self.visibility
        }

    @staticmethod
    def deserialize(data):
        """Deserializes the PolyCurve object.

        #### Parameters:
        - `data` (dict): Serialized data of the PolyCurve object.

        #### Returns:
        `PolyCurve`: Deserialized PolyCurve object.

        #### Example usage:
        ```python

        ```        
        """
        polycurve = PolyCurve()
        polycurve.segmentcurves = data.get('segmentcurves')
        polycurve.width = data.get('width')
        polycurve.height = data.get('height')
        polycurve.approximateLength = data.get('approximateLength')
        polycurve.graphicsStyleId = data.get('graphicsStyleId')
        polycurve.id = data.get('id')
        polycurve.isClosed = data.get('isClosed')
        polycurve.isCyclic = data.get('isCyclic')
        polycurve.isElementGeometry = data.get('isElementGeometry')
        polycurve.isReadOnly = data.get('isReadOnly')
        polycurve.period = data.get('period')
        polycurve.reference = data.get('reference')
        polycurve.visibility = data.get('visibility')

        # Deserialize curves and points
        if 'curves' in data:
            for curve_data in data['curves']:
                # Assuming a deserialize method exists for curve objects
                curve = Line.deserialize(curve_data)
                polycurve.curves.append(curve)

        if 'points' in data:
            for point_data in data['points']:
                # Assuming a deserialize method exists for point objects
                point = Point.deserialize(point_data)
                polycurve.points.append(point)

        return polycurve

    def scale(self, scale_factor: 'float') -> 'PolyCurve':
        """Scales the PolyCurve object by the given factor.

        #### Parameters:
        - `scale_factor`: The scaling factor.

        #### Returns:
        `PolyCurve`: Scaled PolyCurve object.

        #### Example usage:
        ```python

        ```        
        """
        crvs = []
        for i in self.curves:
            if i.__class__.__name__ == "Arc":
                arcie = Arc(Point.product(scale_factor, i.start),
                            Point.product(scale_factor, i.end))
                arcie.mid = Point.product(scale_factor, i.mid)
                crvs.append(arcie)
            elif i.__class__.__name__ == "Line":
                crvs.append(Line(Point.product(scale_factor, i.start),
                            Point.product(scale_factor, i.end)))
            else:
                print("Curvetype not found")
        crv = PolyCurve.by_joined_curves(crvs)
        return crv

    def get_width(self) -> 'float':
        """Calculates the width of the PolyCurve.

        #### Returns:
        `float`: The width of the PolyCurve.

        #### Example usage:
        ```python

        ```        
        """
        x_values = [point.x for point in self.points]
        y_values = [point.y for point in self.points]

        min_x = min(x_values)
        max_x = max(x_values)
        min_y = min(y_values)
        max_y = max(y_values)

        left_top = Point(x=min_x, y=max_y, z=self.z)
        left_bottom = Point(x=min_x, y=min_y, z=self.z)
        right_top = Point(x=max_x, y=max_y, z=self.z)
        right_bottom = Point(x=max_x, y=min_y, z=self.z)
        self.width = abs(Point.distance(left_top, right_top))
        self.height = abs(Point.distance(left_top, left_bottom))
        return self.width

    def centroid(self) -> 'Point':
        """Calculates the centroid of the PolyCurve.

        #### Returns:
        `Point`: The centroid point of the PolyCurve.

        #### Example usage:
        ```python

        ```        
        """
        if self.isClosed:
            num_points = len(self.points)
            if num_points < 3:
                return "Polygon has less than 3 points!"

            A = 0.0
            for i in range(num_points):
                x0, y0 = self.points[i].x, self.points[i].y
                x1, y1 = self.points[(
                    i + 1) % num_points].x, self.points[(i + 1) % num_points].y
                A += x0 * y1 - x1 * y0
            A *= 0.5

            Cx, Cy = 0.0, 0.0
            for i in range(num_points):
                x0, y0 = self.points[i].x, self.points[i].y
                x1, y1 = self.points[(
                    i + 1) % num_points].x, self.points[(i + 1) % num_points].y
                factor = (x0 * y1 - x1 * y0)
                Cx += (x0 + x1) * factor
                Cy += (y0 + y1) * factor

            Cx /= (6.0 * A)
            Cy /= (6.0 * A)

            return Point(x=round(Cx, project.decimals), y=round(Cy, project.decimals), z=self.points[0].z)
        else:
            return None

    def area(self) -> 'float':  # shoelace formula
        """Calculates the area enclosed by the PolyCurve using the shoelace formula.

        #### Returns:
        `float`: The area enclosed by the PolyCurve.

        #### Example usage:
        ```python

        ```        
        """
        if self.isClosed:
            if len(self.points) < 3:
                return "Polygon has less than 3 points!"

            num_points = len(self.points)
            S1, S2 = 0, 0

            for i in range(num_points):
                x, y = self.points[i].x, self.points[i].y
                if i == num_points - 1:
                    x_next, y_next = self.points[0].x, self.points[0].y
                else:
                    x_next, y_next = self.points[i + 1].x, self.points[i + 1].y

                S1 += x * y_next
                S2 += y * x_next

            area = 0.5 * abs(S1 - S2)
            return area
        else:
            print("Polycurve is not closed, no area!")
            return None

    def length(self) -> 'float':
        """Calculates the total length of the PolyCurve.

        #### Returns:
        `float`: The total length of the PolyCurve.

        #### Example usage:
        ```python

        ```        
        """
        lst = []
        for line in self.curves:
            lst.append(line.length)

        return sum(i.length for i in self.curves)

    def close(self) -> 'bool':
        """Closes the PolyCurve by connecting the last point to the first point.

        #### Returns:
        `bool`: True if the PolyCurve is successfully closed, False otherwise.

        #### Example usage:
        ```python

        ```        
        """
        if self.curves[0] == self.curves[-1]:
            return self
        else:
            self.curves.append(self.curves[0])
            plycrv = PolyCurve()
            for curve in self.curves:
                plycrv.curves.append(curve)
        return plycrv

    @classmethod
    def by_joined_curves(self, curvelst: 'list[Line]') -> 'PolyCurve':
        """Creates a PolyCurve from a list of joined Line curves.

        #### Parameters:
        - `curvelst` (list[Line]): The list of Line curves to join.

        #### Returns:
        `PolyCurve`: The created PolyCurve object.

        #### Example usage:
        ```python

        ```        
        """
        for crv in curvelst:
            if crv.length == 0:
                curvelst.remove(crv)
                # print("Error: Curve length cannot be zero.")
                # sys.exit()

        projectClosed = project.closed
        plycrv = PolyCurve()
        for index, curve in enumerate(curvelst):
            if index == 0:
                plycrv.curves.append(curve)
                plycrv.points.append(curve.start)
                plycrv.points.append(curve.end)
            else:
                plycrv.curves.append(curve)
                plycrv.points.append(curve.end)
        if projectClosed:
            if plycrv.points[0].value == plycrv.points[-1].value:
                plycrv.isClosed = True
            else:
                # plycrv.points.append(curvelst[0].start)
                plycrv.curves.append(curve)
                plycrv.isClosed = True
        elif projectClosed == False:
            if plycrv.points[0].value == plycrv.points[-1].value:
                plycrv.isClosed = True
            else:
                plycrv.isClosed = False
        if plycrv.points[-2].value == plycrv.points[0].value:
            plycrv.curves = plycrv.curves.pop(-1)

        return plycrv

    @classmethod
    def by_points(self, points: 'list[Point]') -> 'PolyCurve':
        """Creates a PolyCurve from a list of points.

        #### Parameters:
        - `points` (list[Point]): The list of points defining the PolyCurve.

        #### Returns:
        `PolyCurve`: The created PolyCurve object.

        #### Example usage:
        ```python

        ```        
        """
        seen = set()
        unique_points = []

        for point in points:
            if point in seen:
                points.remove(point)
                print("Error: Polycurve cannot have multiple identical points.")
                sys.exit()

            seen.add(point)
            unique_points.append(point)

        plycrv = PolyCurve()
        for index, point in enumerate(points):
            plycrv.points.append(point)
            try:
                nextpoint = points[index+1]
                plycrv.curves.append(Line(start=point, end=nextpoint))
            except:
                firstpoint = points[0]
                plycrv.curves.append(Line(start=point, end=firstpoint))

        if project.closed:
            if plycrv.points[0].value == plycrv.points[-1].value:
                plycrv.isClosed = True
            else:
                plycrv.isClosed = True
                plycrv.points.append(points[0])

        elif project.closed == False:
            if plycrv.points[0].value == plycrv.points[-1].value:
                plycrv.isClosed = True
            else:
                plycrv.isClosed = False
                plycrv.points.append(points[0])

        return plycrv

    @classmethod
    def unclosed_by_points(cls, points: 'list[Point]') -> 'PolyCurve':
        """Creates an unclosed PolyCurve from a list of points.

        #### Parameters:
        - `points` (list[Point]): The list of points defining the PolyCurve.

        #### Returns:
        `PolyCurve`: The created unclosed PolyCurve object.

        #### Example usage:
        ```python

        ```        
        """
        plycrv = PolyCurve()
        for index, point in enumerate(points):
            plycrv.points.append(point)
            try:
                nextpoint = points[index + 1]
                plycrv.curves.append(Line(start=point, end=nextpoint))
            except:
                pass
        return plycrv

    @staticmethod
    # Create segmented polycurve. Arcs, elips will be translated to straight lines
    def segment(self, count: 'int') -> 'PolyCurve':
        """Segments the PolyCurve into straight lines.

        #### Parameters:
        - `count` (int): The number of segments.

        #### Returns:
        `PolyCurve`: The segmented PolyCurve object.

        #### Example usage:
        ```python

        ```        
        """
        crvs = []  # add isClosed
        for i in self.curves:
            if i.__class__.__name__ == "Arc":
                crvs.append(Arc.segmented_arc(i, count))
            elif i.__class__.__name__ == "Line":
                crvs.append(i)
        crv = flatten(crvs)
        pc = PolyCurve.by_joined_curves(crv)
        return pc

    @staticmethod
    def by_polycurve_2D(PolyCurve2D) -> 'PolyCurve':
        """Creates a 3D PolyCurve from a 2D PolyCurve.

        #### Parameters:
        - `PolyCurve2D`: The 2D PolyCurve object.

        #### Returns:
        `PolyCurve`: The created 3D PolyCurve object.

        #### Example usage:
        ```python

        ```        
        """
        plycrv = PolyCurve()
        curves = []
        for i in PolyCurve2D.curves:
            if i.__class__.__name__ == "Arc2D":
                curves.append(Arc(Point(i.start.x, i.start.y, 0), Point(
                    i.mid.x, i.mid.y, 0), Point(i.end.x, i.end.y, 0)))
            elif i.__class__.__name__ == "Line2D":
                curves.append(Line(Point(i.start.x, i.start.y, 0),
                              Point(i.end.x, i.end.y, 0)))
            else:
                print("Curvetype not found")
        pnts = []
        for i in curves:
            pnts.append(i.start)
        pnts.append(curves[0].start)
        plycrv.points = pnts
        plycrv.curves = curves
        return plycrv

    # make sure that the lines start/stop already on the edge of the polycurve
    def split(self, line: 'Line', returnlines=None) -> 'list[PolyCurve]':
        """Splits the PolyCurve by a line and returns the split parts.

        #### Parameters:
        - `line` (Line): The line to split the PolyCurve.
        - `returnlines` (bool, optional): Whether to return the split PolyCurves as objects or add them to the project. Defaults to None.

        #### Returns:
        `list[PolyCurve]`: If `returnlines` is True, returns a list of split PolyCurves. Otherwise, None.

        #### Example usage:
        ```python

        ```        
        """

        allLines = self.curves.copy()

        insect = get_intersect_polycurve_lines(
            self, line, split=True, stretch=False)
        for pt in insect["IntersectGridPoints"]:
            for index, line in enumerate(allLines):
                if is_point_on_line_segment(pt, line) == True:
                    cuttedLines = line.split([pt])
                    allLines = replace_at_index(allLines, index, cuttedLines)

        if len(insect["IntersectGridPoints"]) == 2:
            part1 = []
            part2 = []

            for j in allLines:
                # part1
                if j.start == insect["IntersectGridPoints"][1]:
                    part1LineEnd = j.end
                    part1.append(j.start)
                if j.end == insect["IntersectGridPoints"][0]:
                    part1LineStart = j.start
                    part1.append(j.end)
                # part2
                if j.start == insect["IntersectGridPoints"][0]:
                    part2LineEnd = j.end
                    part2.append(j.start)
                if j.end == insect["IntersectGridPoints"][1]:
                    part2LineStart = j.start
                    part2.append(j.end)

            s2 = self.points.index(part1LineStart)
            s1 = self.points.index(part1LineEnd)
            completelist = list(range(len(self.points)))
            partlist1 = flatten(completelist[s2:s1+1])
            partlist2 = flatten([completelist[s1+1:]] + [completelist[:s2]])

            SplittedPolyCurves = []
            # part1
            if part1LineStart != None and part1LineEnd != None:
                for i, index in enumerate(partlist1):
                    pts = self.points[index]
                    part1.insert(i+1, pts)
                if returnlines:
                    SplittedPolyCurves.append(PolyCurve.by_points(part1))
                else:
                    project.objects.append(PolyCurve.by_points(part1))

            # part2 -> BUGG?
            if part2LineStart != None and part2LineEnd != None:
                for index in partlist2:
                    pts = self.points[index]
                    part2.insert(index, pts)
                if returnlines:
                    SplittedPolyCurves.append(PolyCurve.by_points(part2))
                else:
                    project.objects.append(PolyCurve.by_points(part2))

            if returnlines:  # return lines while using multi_split
                return SplittedPolyCurves

        else:
            print(
                f"Must need 2 points to split PolyCurve into PolyCurves, got now {len(insect['IntersectGridPoints'])} points.")

    def multi_split(self, lines: 'Line') -> 'list[PolyCurve]':  # SLOW, MUST INCREASE SPEAD
        """Splits the PolyCurve by multiple lines.
        This method splits the PolyCurve by multiple lines and adds the resulting PolyCurves to the project.

        #### Parameters:
        - `lines` (List[Line]): The list of lines to split the PolyCurve.

        #### Returns:
        `List[PolyCurve]`: The list of split PolyCurves.

        #### Example usage:
        ```python

        ```        
        """
        lines = flatten(lines)
        new_polygons = []
        for index, line in enumerate(lines):
            if index == 0:
                n_p = self.split(line, returnlines=True)
                if n_p != None:
                    for nxp in n_p:
                        if nxp != None:
                            new_polygons.append(n_p)
            else:
                for new_poly in flatten(new_polygons):
                    n_p = new_poly.split(line, returnlines=True)
                    if n_p != None:
                        for nxp in n_p:
                            if nxp != None:
                                new_polygons.append(n_p)
        project.objects.append(flatten(new_polygons))
        return flatten(new_polygons)

    def translate(self, vector_3d: 'Vector3') -> 'PolyCurve':
        """Translates the PolyCurve by a 3D vector.

        #### Parameters:
        - `vector_3d` (Vector3): The 3D vector by which to translate the PolyCurve.

        #### Returns:
        `PolyCurve`: The translated PolyCurve.

        #### Example usage:
        ```python

        ```        
        """
        crvs = []
        vector_1 = vector_3d
        for i in self.curves:
            if i.__class__.__name__ == "Arc":
                crvs.append(Arc(Point.translate(i.start, vector_1), Point.translate(
                    i.middle, vector_1), Point.translate(i.end, vector_1)))
            elif i.__class__.__name__ == "Line":
                crvs.append(Line(Point.translate(i.start, vector_1),
                            Point.translate(i.end, vector_1)))
            else:
                print("Curvetype not found")
        pc = PolyCurve()
        pc.curves = crvs
        return pc

    @staticmethod
    def copy_translate(pc: 'PolyCurve', vector_3d: 'Vector3') -> 'PolyCurve':
        """Creates a copy of a PolyCurve and translates it by a 3D vector.

        #### Parameters:
        - `pc` (PolyCurve): The PolyCurve to copy and translate.
        - `vector_3d` (Vector3): The 3D vector by which to translate the PolyCurve.

        #### Returns:
        `PolyCurve`: The translated copy of the PolyCurve.

        #### Example usage:
        ```python

        ```        
        """
        crvs = []
        vector_1 = vector_3d
        for i in pc.curves:
            # if i.__class__.__name__ == "Arc":
            #    crvs.append(Arc(Point.translate(i.start, vector_1), Point.translate(i.middle, vector_1), Point.translate(i.end, vector_1)))
            if i.__class__.__name__ == "Line":
                crvs.append(Line(Point.translate(i.start, vector_1),
                            Point.translate(i.end, vector_1)))
            else:
                print("Curvetype not found")

        PCnew = PolyCurve.by_joined_curves(crvs)
        return PCnew

    def rotate(self, angle: 'float', dz: 'float') -> 'PolyCurve':
        """Rotates the PolyCurve by a given angle around the Z-axis and displaces it in the Z-direction.

        #### Parameters:
        - `angle` (float): The angle of rotation in degrees.
        - `dz` (float): The displacement in the Z-direction.

        #### Returns:
        `PolyCurve`: The rotated and displaced PolyCurve.

        #### Example usage:
        ```python

        ```        
        """
        # angle in degrees
        # dz = displacement in z-direction
        crvs = []
        for i in self.curves:
            if i.__class__.__name__ == "Arc":
                crvs.append(Arc(Point.rotate_XY(i.start, angle, dz), Point.rotate_XY(
                    i.middle, angle, dz), Point.rotate_XY(i.end, angle, dz)))
            elif i.__class__.__name__ == "Line":
                crvs.append(Line(Point.rotate_XY(i.start, angle, dz),
                            Point.rotate_XY(i.end, angle, dz)))
            else:
                print("Curvetype not found")
        crv = PolyCurve.by_joined_curves(crvs)
        return crv

    def to_polycurve_2D(self):
        """Converts the PolyCurve to a PolyCurve2D.

        #### Returns:
        `PolyCurve2D`: The converted PolyCurve2D.

        #### Example usage:
        ```python

        ```        
        """
        # by points,

        point_1 = PolyCurve2D()
        count = 0
        curves = []
        for i in self.curves:
            if i.__class__.__name__ == "Arc":
                curves.append(Arc2D(Point2D(i.start.x, i.start.y), Point2D(i.middle.x, i.middle.y),
                                    Point2D(i.end.x, i.end.y)))
            elif i.__class__.__name__ == "Line":
                curves.append(
                    Line2D(Point2D(i.start.x, i.start.y), Point2D(i.end.x, i.end.y)))
            else:
                print("Curvetype not found")
        pnts = []
        for i in curves:
            pnts.append(i.start)
        pnts.append(curves[0].start)
        point_1.points = pnts
        point_1.curves = curves
        return point_1

    @staticmethod
    def transform_from_origin(polycurve: 'PolyCurve', startpoint: 'Point', directionvector: 'Vector3') -> 'PolyCurve':
        """Transforms a PolyCurve from a given origin point and direction vector.

        #### Parameters:
        - `polycurve` (PolyCurve): The PolyCurve to transform.
        - `startpoint` (Point): The origin point for the transformation.
        - `directionvector` (Vector3): The direction vector for the transformation.

        #### Returns:
        `PolyCurve`: The transformed PolyCurve.

        #### Example usage:
        ```python

        ```        
        """

        if polycurve.type == "PolyCurve2D":
            crvs = []
            pnts = []            
            for i in polycurve.curves:
                if i.__class__.__name__ == "Arc" or i.__class__.__name__ == "Arc2D":
                    start_transformed = transform_point(Point.point_2D_to_3D(i.start) if i.__class__.__name__ == "Arc2D" else i.start, CSGlobal, startpoint, directionvector)
                    mid_transformed = transform_point(Point.point_2D_to_3D(i.mid) if i.__class__.__name__ == "Arc2D" else i.mid, CSGlobal, startpoint, directionvector)
                    end_transformed = transform_point(Point.point_2D_to_3D(i.end) if i.__class__.__name__ == "Arc2D" else i.end, CSGlobal, startpoint, directionvector)
                    
                    crvs.append(Arc(start_transformed, mid_transformed, end_transformed))
                    pnts.extend([start_transformed, mid_transformed, end_transformed])

                elif i.__class__.__name__ == "Line" or i.__class__.__name__ == "Line2D":
                    start_transformed = transform_point(Point.point_2D_to_3D(i.start) if i.__class__.__name__ == "Line2D" else i.start, CSGlobal, startpoint, directionvector)
                    end_transformed = transform_point(Point.point_2D_to_3D(i.end) if i.__class__.__name__ == "Line2D" else i.end, CSGlobal, startpoint, directionvector)

                    crvs.append(Line(start_transformed, end_transformed))
                    pnts.extend([start_transformed, end_transformed])

                else:
                    print(i.__class__.__name__ + " Curvetype not found")

                # if i.__class__.__name__ == "Arc":
                #     crvs.append(Arc(transform_point(i.start, CSGlobal, startpoint, directionvector),
                #                     transform_point(
                #                         i.mid, CSGlobal, startpoint, directionvector),
                #                     transform_point(
                #                         i.end, CSGlobal, startpoint, directionvector)
                #                     ))
                # elif i.__class__.__name__ == "Line":
                #     crvs.append(Line(start=transform_point(i.start, CSGlobal, startpoint, directionvector),
                #                      end=transform_point(
                #                          i.end, CSGlobal, startpoint, directionvector)
                #                      ))
                # elif i.__class__.__name__ == "Arc2D":
                #     # print(Point.point_2D_to_3D(i.start),CSGlobal, startpoint, directionvector)
                #     crvs.append(Arc(transform_point(Point.point_2D_to_3D(i.start), CSGlobal, startpoint, directionvector),
                #                     transform_point(Point.point_2D_to_3D(
                #                         i.mid), CSGlobal, startpoint, directionvector),
                #                     transform_point(Point.point_2D_to_3D(
                #                         i.end), CSGlobal, startpoint, directionvector)
                #                     ))
                # elif i.__class__.__name__ == "Line2D":
                #     crvs.append(Line(start=transform_point(Point.point_2D_to_3D(i.start), CSGlobal, startpoint, directionvector),
                #                      end=transform_point(Point.point_2D_to_3D(
                #                          i.end), CSGlobal, startpoint, directionvector)
                #                      ))
                # else:
                #     print(i.__class__.__name__ + "Curvetype not found")
                
            new_polycurve = PolyCurve()
            new_polycurve.curves = crvs
            new_polycurve.points = pnts
            return new_polycurve

        elif polycurve.type == "PolyCurve":
            for i in polycurve.curves:
                if i.__class__.__name__ == "Arc":
                    crvs.append(Arc(transform_point(i.start, CSGlobal, startpoint, directionvector),
                                    transform_point(
                                        i.mid, CSGlobal, startpoint, directionvector),
                                    transform_point(
                                        i.end, CSGlobal, startpoint, directionvector)
                                    ))
                elif i.__class__.__name__ == "Line":
                    crvs.append(Line(start=transform_point(i.start, CSGlobal, startpoint, directionvector),
                                     end=transform_point(
                                         i.end, CSGlobal, startpoint, directionvector)
                                     ))
                elif i.__class__.__name__ == "Arc2D":
                    # print(Point.point_2D_to_3D(i.start),CSGlobal, startpoint, directionvector)
                    crvs.append(Arc(transform_point(Point.point_2D_to_3D(i.start), CSGlobal, startpoint, directionvector),
                                    transform_point(Point.point_2D_to_3D(
                                        i.mid), CSGlobal, startpoint, directionvector),
                                    transform_point(Point.point_2D_to_3D(
                                        i.end), CSGlobal, startpoint, directionvector)
                                    ))
                elif i.__class__.__name__ == "Line2D":
                    crvs.append(Line(start=transform_point(Point.point_2D_to_3D(i.start), CSGlobal, startpoint, directionvector),
                                     end=transform_point(Point.point_2D_to_3D(
                                         i.end), CSGlobal, startpoint, directionvector)
                                     ))
                else:
                    print(i.__class__.__name__ + "Curvetype not found")

        pc = PolyCurve()
        pc.curves = crvs
        return pc

    def __str__(self) -> 'str':
        """Returns a string representation of the PolyCurve.

        #### Returns:
        `str`: The string representation of the PolyCurve.

        #### Example usage:
        ```python

        ```        
        """
        length = len(self.points)
        return f"{__class__.__name__}, ({length} points)"

# 2D PolyCurve to 3D Polygon


def Rect(vector: 'Vector3', width: 'float', height: 'float') -> 'PolyCurve':
    """Creates a rectangle in the XY-plane with a translation of vector.

    #### Parameters:
    - `vector` (Vector3): The translation vector.
    - `width` (float): The width of the rectangle.
    - `height` (float): The height of the rectangle.

    #### Returns:
    `PolyCurve`: The rectangle PolyCurve.

    #### Example usage:
    ```python

    ```    
    """
    point_1 = Point(0, 0, 0).translate(Point(0, 0, 0), vector)
    point_2 = Point(0, 0, 0).translate(Point(width, 0, 0), vector)
    point_3 = Point(0, 0, 0).translate(Point(width, height, 0), vector)
    point_4 = Point(0, 0, 0).translate(Point(0, height, 0), vector)
    crv = PolyCurve.by_points([point_1, point_2, point_3, point_4, point_1])
    return crv


def Rect_XY(vector: 'Vector3', width: 'float', height: 'float') -> 'PolyCurve':
    """Creates a rectangle in the XY-plane.

    #### Parameters:
    - `vector` (Vector3): The base vector of the rectangle.
    - `width` (float): The width of the rectangle.
    - `height` (float): The height of the rectangle.

    #### Returns:
    `PolyCurve`: The rectangle PolyCurve.

    #### Example usage:
    ```python

    ```        
    """
    point_1 = Point(0, 0, 0).translate(Point(0, 0, 0), vector)
    point_2 = Point(0, 0, 0).translate(Point(width, 0, 0), vector)
    point_3 = Point(0, 0, 0).translate(Point(width, 0, height), vector)
    point_4 = Point(0, 0, 0).translate(Point(0, 0, height), vector)
    crv = PolyCurve.by_points([point_1, point_2, point_3, point_4])
    return crv


def Rect_YZ(vector: 'Vector3', width: 'float', height: 'float') -> 'PolyCurve':
    """Creates a rectangle in the YZ-plane.

    #### Parameters:
    - `vector` (Vector3): The base vector of the rectangle.
    - `width` (float): The width of the rectangle.
    - `height` (float): The height of the rectangle.

    #### Returns:
    `PolyCurve`: The rectangle PolyCurve.

    #### Example usage:
    ```python

    ```        
    """
    point_1 = Point(0, 0, 0).translate(Point(0, 0, 0), vector)
    point_2 = Point(0, 0, 0).translate(Point(0, width, 0), vector)
    point_3 = Point(0, 0, 0).translate(Point(0, width, height), vector)
    point_4 = Point(0, 0, 0).translate(Point(0, 0, height), vector)
    crv = PolyCurve.by_points([point_1, point_2, point_3, point_4, point_1])
    return crv


class Polygon:
    def __init__(self) -> 'Polygon':
        """Represents a polygon composed of lines.

        - `lines` (list[Line]): List of lines composing the polygon.
        """
        self.id = generateID()
        self.type = __class__.__name__
        self.curves = []
        self.points = []
        self.lines = []
        self.isClosed = True

    @classmethod
    def by_points(self, points: 'list[Point]') -> 'PolyCurve':
        """Creates a Polygon from a list of points.

        #### Parameters:
        - `points` (list[Point]): The list of points defining the Polygon.

        #### Returns:
        `Polygon`: The created Polygon object.

        #### Example usage:
        ```python

        ```        
        """
        if len(points) < 3:
            print("Error: Polygon must have at least 3 unique points.")
            return None

        _points = []

        for point in points: #Convert all to Point
            if point.type == "Point2D":
                _points.append(Point(point.x, point.y, 0))
            else:
                _points.append(point)

        if Point.to_matrix(_points[0]) == Point.to_matrix(_points[-1]):
            _points.pop()

        seen = set()
        unique_points = [p for p in _points if not (p in seen or seen.add(p))]

        polygon = Polygon()
        polygon.points = unique_points

        num_points = len(unique_points)
        for i in range(num_points):
            next_index = (i + 1) % num_points
            polygon.curves.append(Line(start=unique_points[i], end=unique_points[next_index]))

        return polygon


    @classmethod
    def by_joined_curves(cls, curves: 'list[Line]') -> 'Polygon':
        if not curves:
            print("Error: At least one curve is required to form a Polygon.")
            sys.exit()

        for i in range(len(curves) - 1):
            if curves[i].end != curves[i+1].start:
                print("Error: Curves must be contiguous to form a Polygon.")
                sys.exit()

        if Point.to_matrix(curves[0].start) != Point.to_matrix(curves[-1].end):
            curves.append(Line(curves[-1].end, curves[0].start))

        polygon = cls()
        polygon.curves = curves

        for crv in polygon.curves:
            if Point.to_matrix(crv.start) not in polygon.points:
                polygon.points.append(crv.start)
            elif Point.to_matrix(crv.end) not in polygon.points:
                polygon.points.append(crv.end)

        return polygon


    def area(self) -> 'float':  # shoelace formula
        """Calculates the area enclosed by the Polygon using the shoelace formula.

        #### Returns:
        `float`: The area enclosed by the Polygon.

        #### Example usage:
        ```python

        ```        
        """
        if len(self.points) < 3:
            return "Polygon has less than 3 points!"

        num_points = len(self.points)
        S1, S2 = 0, 0

        for i in range(num_points):
            x, y = self.points[i].x, self.points[i].y
            if i == num_points - 1:
                x_next, y_next = self.points[0].x, self.points[0].y
            else:
                x_next, y_next = self.points[i + 1].x, self.points[i + 1].y

            S1 += x * y_next
            S2 += y * x_next

        area = 0.5 * abs(S1 - S2)
        return area

    def length(self) -> 'float':
        """Calculates the total length of the Polygon.

        #### Returns:
        `float`: The total length of the Polygon.

        #### Example usage:
        ```python

        ```
        """
        lst = []
        for line in self.curves:
            lst.append(line.length)

        return sum(i.length for i in self.curves)


    def translate(self, vector_3d: 'Vector3') -> 'Polygon':
        """Translates the Polygon by a 3D vector.

        #### Parameters:
        - `vector_3d` (Vector3): The 3D vector by which to translate the Polygon.

        #### Returns:
        `Polygon`: The translated Polygon.

        #### Example usage:
        ```python

        ```        
        """
        # Create a new Polygon instance to hold the translated polygon
        translated_polygon = Polygon()
        translated_curves = []
        translated_points = []

        # Translate all curves
        for curve in self.curves:
            if curve.__class__.__name__ == "Arc":
                # Translate the start, middle, and end points of the arc
                new_start = Point.translate(curve.start, vector_3d)
                new_middle = Point.translate(curve.middle, vector_3d)
                new_end = Point.translate(curve.end, vector_3d)
                translated_curves.append(Arc(new_start, new_middle, new_end))
            elif curve.__class__.__name__ == "Line":
                # Translate the start and end points of the line
                new_start = Point.translate(curve.start, vector_3d)
                new_end = Point.translate(curve.end, vector_3d)
                translated_curves.append(Line(new_start, new_end))
            else:
                print("Curve type not found")

        # Ensure that translated_curves are assigned back to the translated_polygon
        translated_polygon.curves = translated_curves

        # Translate all points
        for point in self.points:
            translated_points.append(Point.translate(point, vector_3d))

        # Ensure that translated_points are assigned back to the translated_polygon
        translated_polygon.points = translated_points

        return translated_polygon


    def __str__(self) -> str:
        return f"{self.type}"


class Arc:
    def __init__(self, startPoint: 'Point', midPoint: 'Point', endPoint: 'Point') -> 'Arc':
        """Initializes an Arc object with start, mid, and end points.
        This constructor calculates and assigns the arc's origin, plane, radius, start angle, end angle, angle in radians, area, length, units, and coordinate system based on the input points.

        - `startPoint` (Point): The starting point of the arc.
        - `midPoint` (Point): The mid point of the arc which defines its curvature.
        - `endPoint` (Point): The ending point of the arc.
        """
        self.id = generateID()
        self.type = __class__.__name__
        self.start = startPoint
        self.mid = midPoint
        self.end = endPoint
        self.origin = self.origin_arc()
        vector_1 = Vector3(x=1, y=0, z=0)
        vector_2 = Vector3(x=0, y=1, z=0)
        self.plane = Plane.by_two_vectors_origin(
            vector_1,
            vector_2,
            self.origin
        )
        self.radius = self.radius_arc()
        self.startAngle = 0
        self.endAngle = 0
        self.angle_radian = self.angle_radian()
        self.area = 0
        self.length = self.length()
        self.units = project.units
        self.coordinatesystem = self.coordinatesystem_arc()

    def distance(self, point_1: 'Point', point_2: 'Point') -> float:
        """Calculates the Euclidean distance between two points in 3D space.

        #### Parameters:
        - `point_1` (Point): The first point.
        - `point_2` (Point): The second point.

        #### Returns:
        `float`: The Euclidean distance between `point_1` and `point_2`.

        #### Example usage:
        ```python
        point1 = Point(1, 2, 3)
        point2 = Point(4, 5, 6)
        distance = arc.distance(point1, point2)
        # distance will be the Euclidean distance between point1 and point2
        ```
        """
        return math.sqrt((point_2.x - point_1.x) ** 2 + (point_2.y - point_1.y) ** 2 + (point_2.z - point_1.z) ** 2)

    def coordinatesystem_arc(self) -> 'CoordinateSystem':
        """Calculates and returns the coordinate system of the arc.
        The coordinate system is defined by the origin of the arc and the normalized vectors along the local X, Y, and Z axes.

        #### Returns:
        `CoordinateSystem`: The coordinate system of the arc.

        #### Example usage:
        ```python
        coordinatesystem = arc.coordinatesystem_arc()
        # coordinatesystem will be an instance of CoordinateSystem representing the arc's local coordinate system
        ```
        """
        vx = Vector3.by_two_points(self.origin, self.start)  # Local X-axe
        vector_2 = Vector3.by_two_points(self.end, self.origin)
        vz = Vector3.cross_product(vx, vector_2)  # Local Z-axe
        vy = Vector3.cross_product(vx, vz)  # Local Y-axe
        self.coordinatesystem = CoordinateSystem(self.origin, Vector3.normalize(vx), Vector3.normalize(vy),
                                                 Vector3.normalize(vz))
        return self.coordinatesystem

    def radius_arc(self) -> 'float':
        """Calculates and returns the radius of the arc.
        The radius is computed based on the distances between the start, mid, and end points of the arc.

        #### Returns:
        `float`: The radius of the arc.

        #### Example usage:
        ```python
        radius = arc.radius_arc()
        # radius will be the calculated radius of the arc
        ```
        """
        a = self.distance(self.start, self.mid)
        b = self.distance(self.mid, self.end)
        c = self.distance(self.end, self.start)
        s = (a + b + c) / 2
        A = math.sqrt(max(s * (s - a) * (s - b) * (s - c), 0))
        
        if abs(A) < 1e-6:
            return float('inf')
        else:
            R = (a * b * c) / (4 * A)
            return R

    def origin_arc(self) -> 'Point':
        """Calculates and returns the origin of the arc.
        The origin is calculated based on the geometric properties of the arc defined by its start, mid, and end points.

        #### Returns:
        `Point`: The calculated origin point of the arc.

        #### Example usage:
        ```python
        origin = arc.origin_arc()
        # origin will be the calculated origin point of the arc
        ```
        """
        Vstartend = Vector3.by_two_points(self.start, self.end)
        halfVstartend = Vector3.scale(Vstartend, 0.5)
        b = 0.5 * Vector3.length(Vstartend)
        x = math.sqrt(Arc.radius_arc(self) * Arc.radius_arc(self) - b * b)
        mid = Point.translate(self.start, halfVstartend)
        vector_2 = Vector3.by_two_points(self.mid, mid)
        vector_3 = Vector3.normalize(vector_2)
        tocenter = Vector3.scale(vector_3, x)
        center = Point.translate(mid, tocenter)
        return center

    def angle_radian(self) -> 'float':
        """Calculates and returns the total angle of the arc in radians.
        The angle is determined based on the vectors defined by the start, mid, and end points with respect to the arc's origin.

        #### Returns:
        `float`: The total angle of the arc in radians.

        #### Example usage:
        ```python
        angle = arc.angle_radian()
        # angle will be the total angle of the arc in radians
        ```
        """
        vector_1 = Vector3.by_two_points(self.origin, self.end)
        vector_2 = Vector3.by_two_points(self.origin, self.start)
        vector_3 = Vector3.by_two_points(self.origin, self.mid)
        vector_4 = Vector3.sum(vector_1, vector_2)
        try:
            v4b = Vector3.new_length(vector_4, self.radius)
            if Vector3.value(vector_3) == Vector3.value(v4b):
                angle = Vector3.angle_radian_between(vector_1, vector_2)
            else:
                angle = 2*math.pi-Vector3.angle_radian_between(vector_1, vector_2)
            return angle
        except:
            angle = 2*math.pi-Vector3.angle_radian_between(vector_1, vector_2)
            return angle

    def length(self) -> 'float':
        """Calculates and returns the length of the arc.
        The length is calculated using the geometric properties of the arc defined by its start, mid, and end points.

        #### Returns:
        `float`: The length of the arc.

        #### Example usage:
        ```python
        length = arc.length()
        # length will be the calculated length of the arc
        ```
        """
        try:
            x1, y1, z1 = self.start.x, self.start.y, self.start.z
            x2, y2, z2 = self.mid.x, self.mid.y, self.mid.z
            x3, y3, z3 = self.end.x, self.end.y, self.end.z

            r1 = ((x2 - x1) ** 2 + (y2 - y1) ** 2 + (z2 - z1) ** 2) ** 0.5 / 2
            a = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2 + (z2 - z1) ** 2)
            b = math.sqrt((x3 - x2) ** 2 + (y3 - y2) ** 2 + (z3 - z2) ** 2)
            c = math.sqrt((x3 - x1) ** 2 + (y3 - y1) ** 2 + (z3 - z1) ** 2)
            cos_angle = (a ** 2 + b ** 2 - c ** 2) / (2 * a * b)
            m1 = math.acos(cos_angle)
            arc_length = r1 * m1

            return arc_length
        except:
            return 0
    
    @staticmethod
    def points_at_parameter(arc: 'Arc', count: 'int') -> 'list':
        """Generates a list of points along the arc at specified intervals.
        This method divides the arc into segments based on the `count` parameter and calculates points at these intervals along the arc.

        #### Parameters:
        - `arc` (Arc): The arc object.
        - `count` (int): The number of points to generate along the arc.

        #### Returns:
        `list`: A list of points (`Point` objects) along the arc.

        #### Example usage:
        ```python
        arc = Arc(startPoint, midPoint, endPoint)
        points = Arc.points_at_parameter(arc, 5)
        # points will be a list of 5 points along the arc
        ```
        """
        # Create points at parameter on an arc based on an interval
        d_alpha = arc.angle_radian / (count - 1)
        alpha = 0
        pnts = []
        for i in range(count):
            pnts.append(Point(arc.radius * math.cos(alpha),
                        arc.radius * math.sin(alpha), 0))
            alpha = alpha + d_alpha
        cs_new = arc.coordinatesystem
        pnts2 = []  # transformed points
        for i in pnts:
            pnts2.append(transform_point_2(i, cs_new))
        return pnts2

    @staticmethod
    def segmented_arc(arc: 'Arc', count: 'int') -> 'list':
        """Divides the arc into segments and returns a list of line segments.
        This method uses the `points_at_parameter` method to generate points along the arc at specified intervals and then creates line segments between these consecutive points.

        #### Parameters:
        - `arc` (Arc): The arc object.
        - `count` (int): The number of segments (and thus the number of points - 1) to create.

        #### Returns:
        `list`: A list of line segments (`Line` objects) representing the divided arc.

        #### Example usage:
        ```python
        arc = Arc(startPoint, midPoint, endPoint)
        segments = Arc.segmented_arc(arc, 3)
        # segments will be a list of 2 lines dividing the arc into 3 segments
        ```
        """
        pnts = Arc.points_at_parameter(arc, count)
        i = 0
        lines = []
        for j in range(len(pnts) - 1):
            lines.append(Line(pnts[i], pnts[i + 1]))
            i = i + 1
        return lines

    def __str__(self) -> 'str':
        """Generates a string representation of the Arc object.

        #### Returns:
        `str`: A string that represents the Arc object.

        #### Example usage:
        ```python
        arc = Arc(startPoint, midPoint, endPoint)
        print(arc)
        # Output: Arc()
        ```
        """
        return f"{__class__.__name__}()"


def transform_arc(arc_old, cs_new: 'CoordinateSystem') -> 'Arc':
    """Transforms an Arc object to a new coordinate system.

    This function takes an existing Arc object and a new CoordinateSystem object. It transforms the start, mid, and end points of the Arc to the new coordinate system, creating a new Arc object in the process.

    #### Parameters:
    - `arc_old` (Arc): The original Arc object to be transformed.
    - `cs_new` (CoordinateSystem): The new coordinate system to transform the Arc into.

    #### Returns:
    `Arc`: A new Arc object with its points transformed to the new coordinate system.

    #### Example usage:
    ```python
    arc_old = Arc(startPoint, midPoint, endPoint)
    cs_new = CoordinateSystem(...)  # Defined elsewhere
    arc_new = transform_arc(arc_old, cs_new)
    # arc_new is the transformed Arc object
    ```
    """
    start = transform_point_2(arc_old.start, cs_new)
    mid = transform_point_2(arc_old.mid, cs_new)
    end = transform_point_2(arc_old.end, cs_new)
    arc_new = Arc(startPoint=start, midPoint=mid, endPoint=end)

    return arc_new


class Circle:
    """Represents a circle with a specific radius, plane, and length.
    """
    def __init__(self, radius: 'float', plane: 'Plane', length: 'float') -> 'Circle':
        """The Circle class defines a circle by its radius, the plane it lies in, and its calculated length (circumference).

        - `radius` (float): The radius of the circle.
        - `plane` (Plane): The plane in which the circle lies.
        - `length` (float): The length (circumference) of the circle. Automatically calculated during initialization.
        """
        self.type = __class__.__name__
        self.radius = radius
        self.plane = plane
        self.length = length
        self.id = generateID()
        pass  # Curve

    def __id__(self):
        """Returns the ID of the Circle.

        #### Returns:
        `str`: The ID of the Circle in the format "id:{self.id}".
        """

    def __str__(self) -> 'str':
        """Generates a string representation of the Circle object.

        #### Returns:
        `str`: A string that represents the Circle object.

        #### Example usage:
        ```python
        circle = Circle(radius, plane, length)
        print(circle)
        # Output: Circle(...)
        ```
        """


class Ellipse:
    """Represents an ellipse defined by its two radii and the plane it lies in."""
    def __init__(self, firstRadius: 'float', secondRadius: 'float', plane: 'Plane') -> 'Ellipse':
        """The Ellipse class describes an ellipse through its major and minor radii and the plane it occupies.
            
        - `firstRadius` (float): The first (major) radius of the ellipse.
        - `secondRadius` (float): The second (minor) radius of the ellipse.
        - `plane` (Plane): The plane in which the ellipse lies.
        """
        self.type = __class__.__name__
        self.firstRadius = firstRadius
        self.secondRadius = secondRadius
        self.plane = plane
        self.id = generateID()
        pass  # Curve

    def __id__(self):
        """Returns the ID of the Ellipse.

        #### Returns:
        `str`: The ID of the Ellipse in the format "id:{self.id}".
        """
        return f"id:{self.id}"

    def __str__(self) -> 'str':
        """Generates a string representation of the Ellipse object.

        #### Returns:
        `str`: A string that represents the Ellipse object.

        #### Example usage:
        ```python
        ellipse = Ellipse(firstRadius, secondRadius, plane)
        print(ellipse)
        # Output: Ellipse(...)
        ```
        """
        return f"{__class__.__name__}({self})"




class Node:
    """The `Node` class represents a geometric or structural node within a system, defined by a point in space, along with optional attributes like a direction vector, identifying number, and other characteristics."""
    def __init__(self, point=None, vector=None, number=None, distance=0.0, diameter=None, comments=None):
        """"Initializes a new Node instance.
        
        - `id` (str): A unique identifier for the node.
        - `type` (str): The class name, "Node".
        - `point` (Point, optional): The location of the node in 3D space.
        - `vector` (Vector3, optional): A vector indicating the orientation or direction associated with the node.
        - `number` (any, optional): An identifying number or label for the node.
        - `distance` (float): A scalar attribute, potentially representing distance from a reference point or another node.
        - `diameter` (any, optional): A diameter associated with the node, useful in structural applications.
        - `comments` (str, optional): Additional comments or notes about the node.
        """
        self.id = generateID()
        self.type = __class__.__name__
        self.point = point if isinstance(point, Point) else None
        self.vector = vector if isinstance(vector, Vector3) else None
        self.number = number
        self.distance = distance
        self.diameter = diameter
        self.comments = comments

    def serialize(self) -> dict:
        """Serializes the node's attributes into a dictionary.

        This method allows for the node's properties to be easily stored or transmitted in a dictionary format.

        #### Returns:
        `dict`: A dictionary containing the serialized attributes of the node.
        """
        id_value = str(self.id) if not isinstance(
            self.id, (str, int, float)) else self.id
        return {
            'id': id_value,
            'type': self.type,
            'point': self.point.serialize() if self.point else None,
            'vector': self.vector.serialize() if self.vector else None,
            'number': self.number,
            'distance': self.distance,
            'diameter': self.diameter,
            'comments': self.comments
        }

    @staticmethod
    def deserialize(data: dict) -> 'Node':
        """Recreates a Node object from a dictionary of serialized data.

        #### Parameters:
        - data (dict): The dictionary containing the node's serialized data.

        #### Returns:
        `Node`: A new Node object initialized with the data from the dictionary.
        """
        node = Node()
        node.id = data.get('id')
        node.type = data.get('type')
        node.point = Point.deserialize(
            data['point']) if data.get('point') else None
        node.vector = Vector3.deserialize(
            data['vector']) if data.get('vector') else None
        node.number = data.get('number')
        node.distance = data.get('distance')
        node.diameter = data.get('diameter')
        node.comments = data.get('comments')

        return node

    # merge
    def merge(self):
        """Merges this node with others in a project according to defined rules.

        The actual implementation of this method should consider merging nodes based on proximity or other criteria within the project context.
        """
        if project.node_merge == True:
            pass
        else:
            pass

    # snap
    def snap(self):
        """Adjusts the node's position based on snapping criteria.

        This could involve aligning the node to a grid, other nodes, or specific geometric entities.
        """
        pass

    def __str__(self) -> str:
        """Generates a string representation of the Node.

        #### Returns:
        `str`: A string that represents the Node, including its type and potentially other identifying information.
        """

        return f"{self.type}"




class Color:
    """Documentation: output returns [r, g, b]"""

    def __init__(self, colorInput=None):
        self.colorInput = colorInput

    red = [255, 0, 0]
    green = [0, 255, 0]
    blue = [0, 0, 255]

    def Components(self, colorInput=None):
        """1"""
        if colorInput is None:
            return f"Error: Example usage Color().{sys._getframe(0).f_code.co_name}('green')"
        else:
            try:
                JSONfile = "library/color/colorComponents.json"
                with open(JSONfile, 'r') as file:
                    components_dict = json.load(file)
                    checkExist = components_dict.get(str(colorInput))
                    if checkExist is not None:
                        r, g, b, a = components_dict[colorInput]
                        return [r, g, b]
                    else:
                        return f"Invalid {sys._getframe(0).f_code.co_name}-color, check '{JSONfile}' for available {sys._getframe(0).f_code.co_name}-colors."
            except:
                return f"Error: Color {sys._getframe(0).f_code.co_name} attribute usage is incorrect. Documentation: Color().{sys._getframe(0).f_code.co_name}.__doc__"

    def Hex(self, colorInput=None):
        """NAN"""
        if colorInput is None:
            return f"Error: Example usage Color().{sys._getframe(0).f_code.co_name}('#2ba4ff')"
        else:
            # validate if value is correct/found
            try:
                colorInput = colorInput.split("#")[1]
                rgb_color = list(int(colorInput[i:i+2], 16) for i in (1, 3, 5))
                return [rgb_color[0], rgb_color[1], rgb_color[2], 255]

                # colorInput = colorInput.lstrip('#')
                # return list(int(colorInput[i:i+2], 16) for i in (0, 2, 4))
            except:
                return f"Error: Color {sys._getframe(0).f_code.co_name} attribute usage is incorrect. Documentation: Color().{sys._getframe(0).f_code.co_name}.__doc__"

    def rgba_to_hex(self, colorInput=None):
        """NAN"""
        if colorInput is None:
            return f"Error: Example usage Color().{sys._getframe(0).f_code.co_name}('#2ba4ff')"
        else:
            # validate if value is correct/found
            try:
                red_i = int(colorInput[0] * 255)
                green_i = int(colorInput[1] * 255)
                blue_i = int(colorInput[2] * 255)
                alpha_i = int(colorInput[3] * 255)

                red_hex = hex(red_i)[2:].zfill(2)
                green_hex = hex(green_i)[2:].zfill(2)
                blue_hex = hex(blue_i)[2:].zfill(2)
                alpha_hex = hex(alpha_i)[2:].zfill(2)

                colorInput = "#" + red_hex + green_hex + blue_hex + alpha_hex

                return colorInput.upper()

            except:
                return f"Error: Color {sys._getframe(0).f_code.co_name} attribute usage is incorrect. Documentation: Color().{sys._getframe(0).f_code.co_name}.__doc__"

    def hex_to_rgba(self, colorInput=None):
        """NAN"""
        if colorInput is None:
            return f"Error: Example usage Color().{sys._getframe(0).f_code.co_name}('#2ba4ff')"
        else:
            # validate if value is correct/found
            try:
                colorInput = colorInput.lstrip('#')
                red_int = int(colorInput[0:2], 16)
                green_int = int(colorInput[2:4], 16)
                blue_int = int(colorInput[4:6], 16)

                if len(colorInput) == 8:
                    alpha_int = int(colorInput[6:8], 16)
                    alpha = round(alpha_int / 255, 2)
                else:
                    alpha = 1.0

                red = round(red_int / 255, 2)
                green = round(green_int / 255, 2)
                blue = round(blue_int / 255, 2)

                return [red, green, blue, alpha]

            except:
                return f"Error: Color {sys._getframe(0).f_code.co_name} attribute usage is incorrect. Documentation: Color().{sys._getframe(0).f_code.co_name}.__doc__"

    def CMYK(self, colorInput=None):
        """NAN"""
        if colorInput is None:
            return f"Error: Example usage Color().CMYK([0.5, 0.25, 0, 0.2])"
        else:
            try:
                c, m, y, k = colorInput
                r = int((1-c) * (1-k) * 255)
                g = int((1-m) * (1-k) * 255)
                b = int((1-y) * (1-k) * 255)
                return [r, g, b]
            except:
                # add check help attribute
                return f"Error: Color {sys._getframe(0).f_code.co_name} attribute usage is incorrect. Documentation: Color().{sys._getframe(0).f_code.co_name}.__doc__"

    def Alpha(self, colorInput=None):
        """NAN"""
        if colorInput is None:
            return f"Error: Example usage Color().{sys._getframe(0).f_code.co_name}([255, 0, 0, 128])"
        else:
            try:
                r, g, b, a = colorInput
                return [r, g, b]
            except:
                return f"Error: Color {sys._getframe(0).f_code.co_name} attribute usage is incorrect. Documentation: Color().{sys._getframe(0).f_code.co_name}.__doc__"

    def Brightness(self, colorInput=None):
        """Expected value is int(0) - int(1)"""
        if colorInput is None:
            return f"Error: Example usage Color().{sys._getframe(0).f_code.co_name}([255, 0, 0, 128])"
        else:
            try:
                if colorInput >= 0 and colorInput <= 1:
                    r = g = b = int(255 * colorInput)
                    return [r, g, b]
                else:
                    return f"Error: Color {sys._getframe(0).f_code.co_name} attribute usage is incorrect. Documentation: Color().{sys._getframe(0).f_code.co_name}.__doc__"
            except:
                return f"Error: Color {sys._getframe(0).f_code.co_name} attribute usage is incorrect. Documentation: Color().{sys._getframe(0).f_code.co_name}.__doc__"

    def RGB(self, colorInput=None):
        """NAN"""
        if colorInput is None:
            return f"Error: Example usage Color().{sys._getframe(0).f_code.co_name}([255, 0, 0])"
        else:
            try:
                r, g, b = colorInput
                return [r, g, b]
            except:
                return f"Error: Color {sys._getframe(0).f_code.co_name} attribute usage is incorrect. Documentation: Color().{sys._getframe(0).f_code.co_name}.__doc__"

    def HSV(self, colorInput=None):
        """NAN"""
        if colorInput is None:
            return f"Error: Example usage Color().{sys._getframe(0).f_code.co_name}()"
        else:
            try:
                h, s, v = colorInput
                h /= 60.0
                c = v * s
                x = c * (1 - abs(h % 2 - 1))
                m = v - c
                if 0 <= h < 1:
                    r, g, b = c, x, 0
                elif 1 <= h < 2:
                    r, g, b = x, c, 0
                elif 2 <= h < 3:
                    r, g, b = 0, c, x
                elif 3 <= h < 4:
                    r, g, b = 0, x, c
                elif 4 <= h < 5:
                    r, g, b = x, 0, c
                else:
                    r, g, b = c, 0, x
                return [int((r + m) * 255), int((g + m) * 255), int((b + m) * 255)]
            except:
                return f"Error: Color {sys._getframe(0).f_code.co_name} attribute usage is incorrect. Documentation: Color().{sys._getframe(0).f_code.co_name}.__doc__"

    def HSL(self, colorInput=None):
        """NAN"""
        if colorInput is None:
            return f"Error: Example usage Color().{sys._getframe(0).f_code.co_name}()"
        else:
            try:
                h, s, l = colorInput
                c = (1 - abs(2 * l - 1)) * s
                x = c * (1 - abs(h / 60 % 2 - 1))
                m = l - c / 2
                if h < 60:
                    r, g, b = c, x, 0
                elif h < 120:
                    r, g, b = x, c, 0
                elif h < 180:
                    r, g, b = 0, c, x
                elif h < 240:
                    r, g, b = 0, x, c
                elif h < 300:
                    r, g, b = x, 0, c
                else:
                    r, g, b = c, 0, x
                r, g, b = int((r + m) * 255), int((g + m)
                                                  * 255), int((b + m) * 255)
                return [r, g, b]
            except:
                return f"Error: Color {sys._getframe(0).f_code.co_name} attribute usage is incorrect. Documentation: Color().{sys._getframe(0).f_code.co_name}.__doc__"

    def RAL(self, colorInput=None):
        """NAN"""
        if colorInput is None:
            return f"Error: Example usage Color().{sys._getframe(0).f_code.co_name}(1000)"
        else:
            try:
                # validate if value is correct/found
                JSONfile = "library/color/colorRAL.json"
                with open(JSONfile, 'r') as file:
                    ral_dict = json.load(file)
                    checkExist = ral_dict.get(str(colorInput))
                    if checkExist is not None:
                        r, g, b = ral_dict[str(colorInput)]["rgb"].split("-")
                        return [int(r), int(g), int(b), 100]
                    else:
                        return f"Invalid {sys._getframe(0).f_code.co_name}-color, check '{JSONfile}' for available {sys._getframe(0).f_code.co_name}-colors."
            except:
                return f"Error: Color {sys._getframe(0).f_code.co_name} attribute usage is incorrect. Documentation: Color().{sys._getframe(0).f_code.co_name}.__doc__"

    def Pantone(self, colorInput=None):
        """NAN"""
        if colorInput is None:
            return f"Error: Example usage Color().{sys._getframe(0).f_code.co_name}()"
        else:
            try:
                JSONfile = "library/color/colorPantone.json"
                with open(JSONfile, 'r') as file:
                    pantone_dict = json.load(file)
                    checkExist = pantone_dict.get(str(colorInput))
                    if checkExist is not None:
                        PantoneHex = pantone_dict[str(colorInput)]['hex']
                        return Color().Hex(PantoneHex)
                    else:
                        return f"Invalid {sys._getframe(0).f_code.co_name}-color, check '{JSONfile}' for available {sys._getframe(0).f_code.co_name}-colors."
            except:
                return f"Error: Color {sys._getframe(0).f_code.co_name} attribute usage is incorrect. Documentation: Color().{sys._getframe(0).f_code.co_name}.__doc__"

    def LRV(self, colorInput=None):
        """NAN"""
        if colorInput is None:
            return f"Error: Example usage Color().{sys._getframe(0).f_code.co_name}()"
        else:
            try:
                b = (colorInput - 0.2126 * 255 - 0.7152 * 255) / 0.0722
                b = int(max(0, min(255, b)))
                return [255, 255, b]
            except:
                return f"Error: Color {sys._getframe(0).f_code.co_name} attribute usage is incorrect. Documentation: Color().{sys._getframe(0).f_code.co_name}.__doc__"

    def rgb_to_int(rgb):
        r, g, b = [max(0, min(255, c)) for c in rgb]
        return (255 << 24) | (r << 16) | (g << 8) | b

    def __str__(self, colorInput=None):
        colorattributes = ["Components", "Hex", "rgba_to_hex", "hex_to_rgba", "CMYK",
                           "Alpha", "Brightness", "RGB", "HSV", "HSL", "RAL", "Pantone", "LRV"]
        if colorInput is None:
            header = "Available attributes: \n"
            footer = "\nColor().red | Color().green | Color().blue"
            return header + '\n'.join([f"Color().{func}()" for func in colorattributes]) + footer
        return f"Color().{colorInput}"

    def Info(self, colorInput=None):
        pass




class Interval:
    """The `Interval` class is designed to represent a mathematical interval, providing a start and end value along with functionalities to handle intervals more comprehensively in various applications."""
    def __init__(self, start: float, end: float):
        """Initializes a new Interval instance.
        
        - `start` (float): The starting value of the interval.
        - `end` (float): The ending value of the interval.
        - `interval` (list, optional): A list that may represent subdivided intervals or specific points within the start and end bounds, depending on the context or method of subdivision.

        """
        self.start = start
        self.end = end
        self.interval = None

    def serialize(self) -> dict:
        """Serializes the interval's attributes into a dictionary.

        This method facilitates converting the interval's properties into a format that can be easily stored or transmitted.

        #### Returns:
            dict: A dictionary containing the serialized attributes of the interval.
        
        #### Example usage:
    	```python

        ```
        """

        return {
            'start': self.start,
            'end': self.end,
            'interval': self.interval
        }

    @staticmethod
    def deserialize(data: dict) -> 'Interval':
        """Reconstructs an Interval object from serialized data contained in a dictionary.

        #### Parameters:
            data (dict): The dictionary containing serialized data of an Interval object.

        #### Returns:
            Interval: A new Interval object initialized with the data from the dictionary.
        
        #### Example usage:
    	```python

        ```
        """

        start = data.get('start')
        end = data.get('end')
        interval = Interval(start, end)
        interval.interval = data.get('interval')
        return interval

    @classmethod
    def by_start_end_count(self, start: float, end: float, count: int) -> 'Interval':
        """Generates a list of equidistant points within the interval.

        This method divides the interval between the start and end values into (count - 1) segments, returning an Interval object containing these points.

        #### Parameters:
            start (float): The starting value of the interval.
            end (float): The ending value of the interval.
            count (int): The total number of points to generate, including the start and end values.

        #### Returns:
            Interval: An Interval instance with its `interval` attribute populated with the generated points.
        
        #### Example usage:
    	```python

        ```
        """
        intval = []
        numb = start
        delta = end-start
        for i in range(count):
            intval.append(numb)
            numb = numb + (delta / (count - 1))
        self.interval = intval
        return self

    def __str__(self) -> str:
        """Generates a string representation of the Interval.

        #### Returns:
            str: A string representation of the Interval, primarily indicating its class name.
        
        #### Example usage:
    	```python

        ```
        """
        return f"{__class__.__name__}"




class Plane:
    # Plane is an infinite element in space defined by a point and a normal
    """The `Plane` class represents an infinite plane in 3D space, defined uniquely by an origin point and a normal vector, along with two other vectors lying on the plane, providing a complete basis for defining plane orientation and position."""
    def __init__(self):
        """"Initializes a new Plane instance.

        - `Origin` (Point): The origin point of the plane, which also lies on the plane.
        - `Normal` (Vector3): A vector perpendicular to the plane, defining its orientation.
        - `v1` (Vector3): A vector lying on the plane, typically representing the "x" direction on the plane.
        - `v2` (Vector3): Another vector on the plane, perpendicular to `v1` and typically representing the "y" direction on the plane.
        """
        self.Origin = Point(0, 0, 0)
        self.Normal = Vector3(x=0, y=0, z=1)
        self.vector_1 = Vector3(x=1, y=0, z=0)
        self.vector_2 = Vector3(x=0, y=1, z=0)

    def serialize(self) -> dict:
        """Serializes the plane's attributes into a dictionary.
        This method facilitates the conversion of the plane's properties into a format that can be easily stored or transmitted.

        #### Returns:
            dict: A dictionary containing the serialized attributes of the plane.
        
        #### Example usage:
        ```python

        ```
        """
        return {
            'Origin': self.Origin.serialize(),
            'Normal': self.Normal.serialize(),
            'vector_1': self.vector_1.serialize(),
            'vector_2': self.vector_2.serialize()
        }

    @staticmethod
    def deserialize(data: dict) -> 'Plane':
        """Creates a Plane object from a serialized data dictionary.
        This method allows for the reconstruction of a Plane instance from data previously serialized into a dictionary format, typically after storage or transmission.

        #### Parameters:
            data (dict): The dictionary containing the serialized data of a Plane object.

        #### Returns:
            Plane: A new Plane object initialized with the data from the dictionary.
        
        #### Example usage:
    	```python

        ```
        """
        plane = Plane()
        plane.Origin = Point.deserialize(data['Origin'])
        plane.Normal = Vector3.deserialize(data['Normal'])
        plane.vector_1 = Vector3.deserialize(data['vector_1'])
        plane.vector_2 = Vector3.deserialize(data['vector_2'])

        return plane

    @classmethod
    def by_two_vectors_origin(cls, vector_1: Vector3, vector_2: Vector3, origin: Point) -> 'Plane':
        """Creates a Plane defined by two vectors and an origin point.
        This method establishes a plane using two vectors that lie on the plane and an origin point. The normal is calculated as the cross product of the two vectors, ensuring it is perpendicular to the plane.

        #### Parameters:
            vector_1 (Vector3): The first vector on the plane.
            vector_2 (Vector3): The second vector on the plane, should not be parallel to vector_1.
            origin (Point): The origin point of the plane, lying on the plane.

        #### Returns:
            Plane: A Plane instance defined by the given vectors and origin.
        
        #### Example usage:
        ```python

        ```
        """
        p1 = Plane()
        p1.Normal = Vector3.normalize(Vector3.cross_product(vector_1, vector_2))
        p1.Origin = origin
        p1.vector_1 = vector_1
        p1.vector_2 = vector_2
        return p1

    def __str__(self) -> str:
        """Generates a string representation of the Plane.

        #### Returns:
            str: A string describing the Plane with its origin, normal, and basis vectors.
         
        #### Example usage:
        ```python

        ```
        """

        return f"{__class__.__name__}(" + f"{self.Origin}, {self.Normal}, {self.vector_1}, {self.vector_2})"

    # TODO
    # byLineAndPoint
    # byOriginNormal
    # byThreePoints




class Text:
    """The `Text` class is designed to represent and manipulate text within a coordinate system, allowing for the creation of text objects with specific fonts, sizes, and positions. It is capable of generating and translating text into a series of geometric representations."""
    def __init__(self, text: str = None, font_family: 'str' = None, cs='CoordinateSystem', height=None) -> "Text":
        """Initializes a new Text instance
        
        - `id` (str): A unique identifier for the text object.
        - `type` (str): The class name, "Text".
        - `text` (str, optional): The text string to be represented.
        - `font_family` (str, optional): The font family of the text, defaulting to "Arial".
        - `xyz` (Vector3): The origin point of the text in the coordinate system.
        - `csglobal` (CoordinateSystem): The global coordinate system applied to the text.
        - `x`, `y`, `z` (float): The position offsets for the text within its coordinate system.
        - `scale` (float, optional): The scale factor applied to the text size.
        - `height` (float, optional): The height of the text characters.
        - `bbHeight` (float, optional): The bounding box height of the text.
        - `width` (float, optional): The calculated width of the text string.
        - `character_offset` (int): The offset between characters.
        - `space` (int): The space between words.
        - `curves` (list): A list of curves representing the text geometry.
        - `points` (list): A list of points derived from the text geometry.
        - `path_list` (list): A list containing the path data for each character.
        """
        self.id = generateID()
        self.type = __class__.__name__
        self.text = text
        self.font_family = font_family or "arial"
        self.xyz = cs.Origin
        self.csglobal = cs
        self.x, self.y, self.z = 0, 0, 0
        self.scale = None
        self.height = height or project.font_height
        self.bbHeight = None
        self.width = None
        self.character_offset = 150
        self.space = 850
        self.curves = []
        self.points = []
        self.path_list = self.load_path()
        self.load_o_example = self.load_o()

    def serialize(self) -> 'dict':
        """Serializes the text object's attributes into a dictionary.
        This method is useful for exporting the text object's properties, making it easier to save or transmit as JSON.

        #### Returns:
            dict: A dictionary containing the serialized attributes of the text object.
        
        #### Example usage:
        ```python

        ```
        """
        id_value = str(self.id) if not isinstance(
            self.id, (str, int, float)) else self.id
        return {
            'id': id_value,
            'type': self.type,
            'text': self.text,
            'font_family': self.font_family,
            'xyz': self.xyz,
            'csglobal': self.csglobal.serialize(),
            'x': self.x,
            'y': self.y,
            'z': self.z,
            'scale': self.scale,
            'height': self.height,
            'bbHeight': self.bbHeight,
            'width': self.width,
            'character_offset': self.character_offset,
            'space': self.space,
            'curves': [curve.serialize() for curve in self.curves],
            'points': self.points,
            'path_list': self.path_list,
        }

    def load_path(self) -> 'str':
        """Loads the glyph paths for the specified text from a JSON file.
        This method fetches the glyph paths for each character in the text attribute, using a predefined font JSON file.

        #### Returns:
            str: A string representation of the glyph paths for the text.
    
        #### Example usage:
        ```python

        ```
        """
        with open('library/text/json/Calibri.json', 'r', encoding='utf-8') as file:
            response = file.read()
        glyph_data = json.loads(response)        
        output = []
        for letter in self.text:
            if letter in glyph_data:
                output.append(glyph_data[letter]["glyph-path"])
            elif letter == " ":
                output.append("space")
        return output

    def load_o(self) -> 'str':
        """Loads the glyph paths for the specified text from a JSON file.
        This method fetches the glyph paths for each character in the text attribute, using a predefined font JSON file.

        #### Returns:
            str: A string representation of the glyph paths for the text.
        
        #### Example usage:
        ```python

        ```
        """
        with open('library/text/json/Calibri.json', 'r', encoding='utf-8') as file:
            response = file.read()
        glyph_data = json.loads(response)
        load_o = []
        letter = "o"
        if letter in glyph_data:
            load_o.append(glyph_data[letter]["glyph-path"])
        return load_o

    def write(self) -> 'List[List[PolyCurve]]':
        """Generates a list of PolyCurve objects representing the text.
        Transforms the text into geometric representations based on the specified font, scale, and position.

        #### Returns:
            List[List[PolyCurve]]: A list of lists containing PolyCurve objects representing the text geometry.
        
        #### Example usage:
        ```python

        ```
        """
        # start ref_symbol
        path = self.load_o_example
        ref_points = []
        ref_allPoints = []
        for segment in path:
            pathx = parse_path(segment)
            for segment in pathx:
                segment_type = segment.__class__.__name__
                if segment_type == 'Line':
                    ref_points.extend(
                        [(segment.start.real, segment.start.imag), (segment.end.real, segment.end.imag)])
                    ref_allPoints.extend(
                        [(segment.start.real, segment.start.imag), (segment.end.real, segment.end.imag)])
                elif segment_type == 'CubicBezier':
                    ref_points.extend(segment.sample(10))
                    ref_allPoints.extend(segment.sample(10))
                elif segment_type == 'QuadraticBezier':
                    for i in range(11):
                        t = i / 10.0
                        point = segment.point(t)
                        ref_points.append((point.real, point.imag))
                        ref_allPoints.append((point.real, point.imag))
                elif segment_type == 'Arc':
                    ref_points.extend(segment.sample(10))
                    ref_allPoints.extend(segment.sample(10))
        height = self.calculate_bounding_box(ref_allPoints)[2]
        self.scale = self.height / height
        # end ref_symbol

        output_list = []
        for letter_path in self.path_list:
            points = []
            allPoints = []
            if letter_path == "space":
                self.x += self.space + self.character_offset
                pass
            else:
                path = parse_path(letter_path)
                for segment in path:
                    segment_type = segment.__class__.__name__
                    if segment_type == 'Move':
                        if len(points) > 0:
                            points = []
                            allPoints.append("M")
                        subpath_started = True
                    elif subpath_started:
                        if segment_type == 'Line':
                            points.extend(
                                [(segment.start.real, segment.start.imag), (segment.end.real, segment.end.imag)])
                            allPoints.extend(
                                [(segment.start.real, segment.start.imag), (segment.end.real, segment.end.imag)])
                        elif segment_type == 'CubicBezier':
                            points.extend(segment.sample(10))
                            allPoints.extend(segment.sample(10))
                        elif segment_type == 'QuadraticBezier':
                            for i in range(11):
                                t = i / 10.0
                                point = segment.point(t)
                                points.append((point.real, point.imag))
                                allPoints.append((point.real, point.imag))
                        elif segment_type == 'Arc':
                            points.extend(segment.sample(10))
                            allPoints.extend(segment.sample(10))
                if points:
                    output_list.append(
                        self.convert_points_to_polyline(allPoints))
                    width = self.calculate_bounding_box(allPoints)[1]
                    self.x += width + self.character_offset

                height = self.calculate_bounding_box(allPoints)[2]
                self.bbHeight = height
        pList = []
        for ply in flatten(output_list):
            translated = self.translate(ply)
            pList.append(translated)

        for pl in pList:
            for pt in pl.points:
                self.points.append(pt)

        # print(f'Object text naar objects gestuurd.')
        return pList

    def translate(self, polyCurve: 'PolyCurve') -> 'PolyCurve':
        """Translates a PolyCurve according to the text object's global coordinate system and scale.

        #### Parameters:
            polyCurve (PolyCurve): The PolyCurve to be translated.

        #### Returns:
            PolyCurve: The translated PolyCurve.
        
        #### Example usage:
        ```python

        ```
        """
        trans = []
        for pt in polyCurve.points:
            pscale = Point.product(self.scale, pt)
            pNew = transform_point_2(pscale, self.csglobal)
            trans.append(pNew)
        return polyCurve.by_points(trans)

    def calculate_bounding_box(self, points: 'list[Point]') -> tuple:
        """Calculates the bounding box for a given set of points.

        #### Parameters:
            points (list): A list of points to calculate the bounding box for.

        #### Returns:
            tuple: A tuple containing the bounding box, its width, and its height.
       
        #### Example usage:
        ```python

        ```
        """

        points = [elem for elem in points if elem != 'M']
        ptList = [Point2D(pt[0], pt[1]) for pt in points]
        bounding_box_polyline = BoundingBox2d().by_points(ptList)
        return bounding_box_polyline, bounding_box_polyline.width, bounding_box_polyline.length

    def convert_points_to_polyline(self, points: 'list[Point]') -> 'PolyCurve':
        """Converts a list of points into a PolyCurve.
        This method is used to generate a PolyCurve from a series of points, typically derived from text path data.

        #### Parameters:
            points (list): A list of points to be converted into a PolyCurve.

        #### Returns:
            PolyCurve: A PolyCurve object representing the points.
        
        #### Example usage:
        ```python

        ```
        """
        output_list = []
        sub_lists = [[]]
        tempPoints = [elem for elem in points if elem != 'M']
        x_values = [point[0] for point in tempPoints]
        y_values = [point[1] for point in tempPoints]

        xmin = min(x_values)
        ymin = min(y_values)

        for item in points:
            if item == 'M':
                sub_lists.append([])
            else:
                x = item[0] + self.x - xmin
                y = item[1] + self.y - ymin
                z = self.xyz.z
                eput = x, y, z
                sub_lists[-1].append(eput)
        output_list = [[Point(point[0], point[1], self.xyz.z)
                        for point in element] for element in sub_lists]

        polyline_list = [
            PolyCurve.by_points(
                [Point(coord.x, coord.y, self.xyz.z) for coord in pts])
            for pts in output_list
        ]
        return polyline_list




class Vector2:
    def __init__(self, x, y) -> None:
        self.id = generateID()
        self.type = __class__.__name__
        self.x: float = 0.0
        self.y: float = 0.0
        self.x = x
        self.y = y

    def serialize(self):
        id_value = str(self.id) if not isinstance(
            self.id, (str, int, float)) else self.id
        return {
            'id': id_value,
            'type': self.type,
            'x': self.x,
            'y': self.y
        }

    @staticmethod
    def deserialize(data):
        x = data['x']
        y = data['y']
        return Vector2(x, y)

    @staticmethod
    def by_two_points(p1, p2):
        return Vector2(
            p2.x-p1.x,
            p2.y-p1.y
        )

    @staticmethod
    def length(v1):
        return math.sqrt(v1.x * v1.x + v1.y * v1.y)

    @staticmethod
    def scale(v1, scalefactor):
        return Vector2(
            v1.x * scalefactor,
            v1.y * scalefactor
        )

    @staticmethod
    def normalize(v1, axis=-1, order=2):
        v1_mat = Vector2.to_matrix(v1)
        l2_norm = math.sqrt(v1_mat[0]**2 + v1_mat[1]**2)
        if l2_norm == 0:
            l2_norm = 1

        normalized_v = [v1_mat[0] / l2_norm, v1_mat[1] / l2_norm]

        return Vector2(normalized_v[0], normalized_v[1])

    @staticmethod
    def to_matrix(self):
        return [self.x, self.y]

    @staticmethod
    def from_matrix(self):
        return Vector2(self[0], self[1])

    @staticmethod  # inwendig product, if zero, then vectors are perpendicular
    def dot_product(v1, v2):
        return v1.x*v2.x+v1.y*v2.y

    @staticmethod
    def angle_between(v1, v2):
        return math.degrees(math.acos((Vector2.dot_product(v1, v2)/(Vector2.length(v1) * Vector2.length(v2)))))

    @staticmethod
    def angle_radian_between(v1, v2):
        return math.acos((Vector2.dot_product(v1, v2)/(Vector2.length(v1) * Vector2.length(v2))))

    @staticmethod  # Returns vector perpendicular on the two vectors
    def cross_product(v1, v2):
        return Vector3(
            v1.y - v2.y,
            v2.x - v1.x,
            v1.x*v2.y - v1.y*v2.x
        )

    @staticmethod
    def reverse(v1):
        return Vector2(
            v1.x*-1,
            v1.y*-1
        )

    @staticmethod
    def sum(vector_1: 'Vector2', vector_2: 'Vector2') -> 'Vector2':
        """Adds two vectors element-wise.        
        
        #### Parameters:
        - `vector_1` (Vector2): First vector.
        - `vector_2` (Vector2): Second vector.

        Returns:
        `Vector2`: Sum of the two input vectors.

        #### Example usage:

        ```python
        vector_1 = Vector2(19, 18)
        vector_2 = Vector2(8, 17)
        output = Vector2.sum(vector_1, vector_2)
        # Vector3()
        ```
        """
        return Vector2(
            vector_1.x + vector_2.x,
            vector_1.y + vector_2.y
        )

    def __id__(self):
        return f"id:{self.id}"

    def __str__(self) -> str:
        return f"{__class__.__name__}(X = {self.x:.3f}, Y = {self.y:.3f})"


class Point2D:
    def __init__(self, x: float, y: float) -> None:
        self.id = generateID()
        self.type = __class__.__name__
        self.x = x
        self.y = y
        self.x = float(x)
        self.y = float(y)
        self.value = self.x, self.y
        self.units = "mm"

    def serialize(self):
        id_value = str(self.id) if not isinstance(
            self.id, (str, int, float)) else self.id
        return {
            'id': id_value,
            'type': self.type,
            'x': self.x,
            'y': self.y
        }

    @staticmethod
    def deserialize(data):
        x = data['x']
        y = data['y']
        return Point2D(x, y)

    def __id__(self):
        return f"id:{self.id}"

    def translate(self, vector: Vector2):
        x = self.x + vector.x
        y = self.y + vector.y
        p1 = Point2D(x, y)
        return p1

    @staticmethod
    def dot_product(p1, p2):
        return p1.x*p2.x+p1.y*p2.y

    def rotate(self, rotation):
        x = self.x
        y = self.y
        r = math.sqrt(x * x + y * y)
        rotationstart = math.degrees(math.atan2(y, x))
        rotationtot = rotationstart + rotation
        xn = round(math.cos(math.radians(rotationtot)) * r, 3)
        yn = round(math.sin(math.radians(rotationtot)) * r, 3)
        p1 = Point2D(xn, yn)
        return p1

    def __str__(self) -> str:
        return f"{__class__.__name__}(X = {self.x:.3f}, Y = {self.y:.3f})"

    @staticmethod
    def distance(point1, point2):
        return math.sqrt((point1.x - point2.x)**2 + (point1.y - point2.y)**2)

    @staticmethod
    def midpoint(point1, point2):
        return Point2D((point2.x-point1.x)/2, (point2.y-point1.y)/2)

    @staticmethod
    def to_pixel(point1, Xmin, Ymin, TotalWidth, TotalHeight, ImgWidthPix: int, ImgHeightPix: int):
        # Convert Point to pixel on a image given a deltaX, deltaY, Width of the image etc.
        x = point1.x
        y = point1.y
        xpix = math.floor(((x - Xmin) / TotalWidth) * ImgWidthPix)
        # min vanwege coord stelsel Image.Draw
        ypix = ImgHeightPix - \
            math.floor(((y - Ymin) / TotalHeight) * ImgHeightPix)
        return xpix, ypix


def transform_point_2D(PointLocal1: Point2D, CoordinateSystemNew: CoordinateSystem):
    # Transform point from Global Coordinatesystem to a new Coordinatesystem
    # CSold = CSGlobal
    PointLocal = Point(PointLocal1.x, PointLocal1.y, 0)
    # pn = Point.translate(CoordinateSystemNew.Origin, Vector3.scale(CoordinateSystemNew.Xaxis, PointLocal.x))
    # pn2 = Point2D.translate(pn, Vector3.scale(CoordinateSystemNew.Y_axis, PointLocal.y))
    pn3 = Point2D.translate(PointLocal, Vector2(
        CoordinateSystemNew.Origin.x, CoordinateSystemNew.Origin.y))
    # pn3 = Point2D(pn.x,pn.y)
    return pn3


class Line2D:
    def __init__(self, start, end) -> None:
        self.type = __class__.__name__
        self.start: Point2D = start
        self.end: Point2D = end
        self.x = [self.start.x, self.end.x]
        self.y = [self.start.y, self.end.y]
        self.dx = self.start.x-self.end.x
        self.dy = self.start.y-self.end.y
        self.vector2: Vector2 = Vector2.by_two_points(self.start, self.end)
        self.vector2_normalised = Vector2.normalize(self.vector2)
        self.length = self.length()
        self.id = generateID()

    def serialize(self):
        return {
            'type': self.type,
            'start': self.start.serialize(),
            'end': self.end.serialize(),
            'x': self.x,
            'y': self.y,
            'dx': self.dx,
            'dy': self.dy,
            'length': self.length,
            'id': self.id
        }

    @staticmethod
    def deserialize(data):
        start_point = Point2D.deserialize(data['start'])
        end_point = Point2D.deserialize(data['end'])
        return Line2D(start_point, end_point)

    def __id__(self):
        return f"id:{self.id}"

    def mid_point(self):
        vect = Vector2.scale(self.vector2, 0.5)
        mid = Point2D.translate(self.start, vect)
        return mid

    def length(self):
        return math.sqrt(math.sqrt(self.dx * self.dx + self.dy * self.dy) * math.sqrt(self.dx * self.dx + self.dy * self.dy))

    def f_line(self):
        # returns line for Folium(GIS)
        return [[self.start.y, self.start.x], [self.end.y, self.end.x]]

    def __str__(self):
        return f"{__class__.__name__}(" + f"Start: {self.start}, End: {self.end})"


# class Arc2D:
#     def __init__(self, pntxy1, pntxy2, pntxy3) -> None:
#         self.id = generateID()
#         self.type = __class__.__name__
#         self.start: Point2D = pntxy1
#         self.mid: Point2D = pntxy2
#         self.end: Point2D = pntxy3
#         self.origin = self.origin_arc()
#         self.angle_radian = self.angle_radian()
#         self.radius = self.radius_arc()
#         self.normal = Vector3(0, 0, 1)
#         self.xdir = Vector3(1, 0, 0)
#         self.ydir = Vector3(0, 1, 0)
#         self.coordinatesystem = self.coordinatesystem_arc()

#     def serialize(self):
#         id_value = str(self.id) if not isinstance(
#             self.id, (str, int, float)) else self.id
#         return {
#             'id': id_value,
#             'type': self.type,
#             'start': self.start.serialize(),
#             'mid': self.mid.serialize(),
#             'end': self.end.serialize(),
#             'origin': self.origin,
#             'angle_radian': self.angle_radian,
#             'coordinatesystem': self.coordinatesystem
#         }

#     @staticmethod
#     def deserialize(data):
#         start_point = Point2D.deserialize(data['start'])
#         mid_point = Point2D.deserialize(data['mid'])
#         end_point = Point2D.deserialize(data['end'])
#         arc = Arc2D(start_point, mid_point, end_point)

#         arc.origin = data.get('origin')
#         arc.angle_radian = data.get('angle_radian')
#         arc.coordinatesystem = data.get('coordinatesystem')

#         return arc

#     def __id__(self):
#         return f"id:{self.id}"

#     def points(self):
#         # returns point on the curve
#         return (self.start, self.mid, self.end)

#     def coordinatesystem_arc(self):
#         vx2d = Vector2.by_two_points(self.origin, self.start)  # Local X-axe
#         vx = Vector3(vx2d.x, vx2d.y, 0)
#         vy = Vector3(vx.y, vx.x * -1, 0)
#         vz = Vector3(0, 0, 1)
#         self.coordinatesystem = CoordinateSystem(self.origin, Vector3.normalize(
#             vx), Vector3.normalize(vy), Vector3.normalize(vz))
#         return self.coordinatesystem

#     def angle_radian(self):
#         v1 = Vector2.by_two_points(self.origin, self.end)
#         v2 = Vector2.by_two_points(self.origin, self.start)
#         angle = Vector2.angle_radian_between(v1, v2)
#         return angle

#     def origin_arc(self):
#         # calculation of origin of arc #Todo can be simplified for sure
#         Vstartend = Vector2.by_two_points(self.start, self.end)
#         halfVstartend = Vector2.scale(Vstartend, 0.5)
#         # half distance between start and end
#         b = 0.5 * Vector2.length(Vstartend)
#         try:
#             # distance from start-end line to origin
#             x = math.sqrt(Arc2D.radius_arc(self) *
#                           Arc2D.radius_arc(self) - b * b)
#         except:
#             x = 0
#         mid = Point2D.translate(self.start, halfVstartend)
#         v2 = Vector2.by_two_points(self.mid, mid)
#         v3 = Vector2.normalize(v2)
#         tocenter = Vector2.scale(v3, x)
#         center = Point2D.translate(mid, tocenter)
#         self.origin = center
#         return center

#     def radius_arc(self):
#         a = Vector2.length(Vector2.by_two_points(self.start, self.mid))
#         b = Vector2.length(Vector2.by_two_points(self.mid, self.end))
#         c = Vector2.length(Vector2.by_two_points(self.end, self.start))
#         s = (a + b + c) / 2
#         A = math.sqrt(s * (s-a) * (s-b) * (s-c))
#         R = (a * b * c) / (4 * A)
#         return R

#     @staticmethod
#     def points_at_parameter(arc, count: int):
#         # ToDo can be simplified. Now based on the 3D variant
#         d_alpha = arc.angle_radian / (count - 1)
#         alpha = 0
#         pnts = []
#         for i in range(count):
#             pnts.append(Point2D(arc.radius * math.cos(alpha),
#                         arc.radius * math.sin(alpha)))
#             alpha = alpha + d_alpha
#         CSNew = arc.coordinatesystem
#         pnts2 = []
#         for i in pnts:
#             pnts2.append(transform_point_2D(i, CSNew))
#         return pnts2

#     @staticmethod
#     def segmented_arc(arc, count):
#         pnts = Arc2D.points_at_parameter(arc, count)
#         i = 0
#         lines = []
#         for j in range(len(pnts)-1):
#             lines.append(Line2D(pnts[i], pnts[i+1]))
#             i = i + 1
#         return lines

#     def __str__(self):
#         return f"{__class__.__name__}({self.start},{self.mid},{self.end})"


class Arc2D:
    def __init__(self, startPoint: 'Point2D', midPoint: 'Point2D', endPoint: 'Point2D') -> 'Arc2D':
        """Initializes an Arc object with start, mid, and end points.
        This constructor calculates and assigns the arc's origin, plane, radius, start angle, end angle, angle in radians, area, length, units, and coordinate system based on the input points.

        - `startPoint` (Point2D): The starting point of the arc.
        - `midPoint` (Point2D): The mid point of the arc which defines its curvature.
        - `endPoint` (Point2D): The ending point of the arc.
        """
        self.id = generateID()
        self.type = __class__.__name__
        self.start = startPoint
        self.mid = midPoint
        self.end = endPoint
        self.origin = self.origin_arc()
        vector_1 = Vector3(x=1, y=0, z=0)
        vector_2 = Vector3(x=0, y=1, z=0)
        self.plane = Plane.by_two_vectors_origin(
            vector_1,
            vector_2,
            self.origin
        )
        self.radius = self.radius_arc()
        self.startAngle = 0
        self.endAngle = 0
        self.angle_radian = self.angle_radian()
        self.area = 0
        self.length = self.length()
        self.units = project.units
        self.coordinatesystem = None #self.coordinatesystem_arc()

    def distance(self, point_1: 'Point2D', point_2: 'Point2D') -> float:
        """Calculates the Euclidean distance between two points in 3D space.

        #### Parameters:
        - `point_1` (Point2D): The first point.
        - `point_2` (Point2D): The second point.

        #### Returns:
        `float`: The Euclidean distance between `point_1` and `point_2`.

        #### Example usage:
        ```python
        point1 = Point2D(1, 2)
        point2 = Point2D(4, 5)
        distance = arc.distance(point1, point2)
        # distance will be the Euclidean distance between point1 and point2
        ```
        """
        return math.sqrt((point_2.x - point_1.x) ** 2 + (point_2.y - point_1.y) ** 2)

    def coordinatesystem_arc(self) -> 'CoordinateSystem':
        """Calculates and returns the coordinate system of the arc.
        The coordinate system is defined by the origin of the arc and the normalized vectors along the local X, Y, and Z axes.

        #### Returns:
        `CoordinateSystem`: The coordinate system of the arc.

        #### Example usage:
        ```python
        coordinatesystem = arc.coordinatesystem_arc()
        # coordinatesystem will be an instance of CoordinateSystem representing the arc's local coordinate system
        ```
        """
        vx = Vector2.by_two_points(self.origin, self.start)  # Local X-axe
        vector_2 = Vector2.by_two_points(self.end, self.origin)
        vz = Vector2.cross_product(vx, vector_2)  # Local Z-axe
        vy = Vector2.cross_product(vx, vz)  # Local Y-axe
        self.coordinatesystem = CoordinateSystem(self.origin, Vector2.normalize(vx), Vector2.normalize(vy),
                                                 Vector2.normalize(vz))
        return self.coordinatesystem

    def radius_arc(self) -> 'float':
        """Calculates and returns the radius of the arc.
        The radius is computed based on the distances between the start, mid, and end points of the arc.

        #### Returns:
        `float`: The radius of the arc.

        #### Example usage:
        ```python
        radius = arc.radius_arc()
        # radius will be the calculated radius of the arc
        ```
        """
        a = self.distance(self.start, self.mid)
        b = self.distance(self.mid, self.end)
        c = self.distance(self.end, self.start)
        s = (a + b + c) / 2
        A = math.sqrt(s * (s - a) * (s - b) * (s - c))
        R = (a * b * c) / (4 * A)
        return R

    def origin_arc(self) -> 'Point2D':
        """Calculates and returns the origin of the arc.
        The origin is calculated based on the geometric properties of the arc defined by its start, mid, and end points.

        #### Returns:
        `Point`: The calculated origin point of the arc.

        #### Example usage:
        ```python
        origin = arc.origin_arc()
        # origin will be the calculated origin point of the arc
        ```
        """
        # calculation of origin of arc #Todo can be simplified for sure
        Vstartend = Vector2.by_two_points(self.start, self.end)
        halfVstartend = Vector2.scale(Vstartend, 0.5)
        # half distance between start and end
        b = 0.5 * Vector2.length(Vstartend)
        # distance from start-end line to origin
        # print(Arc2D.radius_arc(self), Arc2D.radius_arc(self), b)
        try:
            x = math.sqrt(Arc2D.radius_arc(self) * Arc2D.radius_arc(self) - b * b)
        except:
            x = 0
        mid = Point2D.translate(self.start, halfVstartend)
        vector_2 = Vector2.by_two_points(self.mid, mid)
        vector_3 = Vector2.normalize(vector_2)
        tocenter = Vector2.scale(vector_3, x)
        center = Point2D.translate(mid, tocenter)
        return center

    def angle_radian(self) -> 'float':
        """Calculates and returns the total angle of the arc in radians.
        The angle is determined based on the vectors defined by the start, mid, and end points with respect to the arc's origin.

        #### Returns:
        `float`: The total angle of the arc in radians.

        #### Example usage:
        ```python
        angle = arc.angle_radian()
        # angle will be the total angle of the arc in radians
        ```
        """
        vector_1 = Vector2.by_two_points(self.origin, self.end)
        vector_2 = Vector2.by_two_points(self.origin, self.start)
        vector_3 = Vector2.by_two_points(self.origin, self.mid)
        vector_4 = Vector2.sum(vector_1, vector_2)
        try:
            v4b = Vector2.new_length(vector_4, self.radius)
            if Vector2.value(vector_3) == Vector2.value(v4b):
                angle = Vector2.angle_radian_between(vector_1, vector_2)
            else:
                angle = 2*math.pi-Vector2.angle_radian_between(vector_1, vector_2)
            return angle
        except:
            angle = 2*math.pi-Vector2.angle_radian_between(vector_1, vector_2)
            return angle

    def length(self) -> 'float':
        """Calculates and returns the length of the arc.
        The length is calculated using the geometric properties of the arc defined by its start, mid, and end points.

        #### Returns:
        `float`: The length of the arc.

        #### Example usage:
        ```python
        length = arc.length()
        # length will be the calculated length of the arc
        ```
        """
        x1, y1, z1 = self.start.x, self.start.y, 0
        x2, y2, z2 = self.mid.x, self.mid.y, 0
        x3, y3, z3 = self.end.x, self.end.y, 0

        r1 = ((x2 - x1) ** 2 + (y2 - y1) ** 2 + (z2 - z1) ** 2) ** 0.5 / 2
        a = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2 + (z2 - z1) ** 2)
        b = math.sqrt((x3 - x2) ** 2 + (y3 - y2) ** 2 + (z3 - z2) ** 2)
        c = math.sqrt((x3 - x1) ** 2 + (y3 - y1) ** 2 + (z3 - z1) ** 2)
        cos_angle = (a ** 2 + b ** 2 - c ** 2) / (2 * a * b)
        m1 = math.acos(cos_angle)
        arc_length = r1 * m1

        return arc_length

    @staticmethod
    def points_at_parameter(arc: 'Arc2D', count: 'int') -> 'list':
        """Generates a list of points along the arc at specified intervals.
        This method divides the arc into segments based on the `count` parameter and calculates points at these intervals along the arc.

        #### Parameters:
        - `arc` (Arc2D): The arc object.
        - `count` (int): The number of points to generate along the arc.

        #### Returns:
        `list`: A list of points (`Point2D` objects) along the arc.

        #### Example usage:
        ```python
        arc = Arc2D(startPoint, midPoint, endPoint)
        points = Arc2D.points_at_parameter(arc, 5)
        # points will be a list of 5 points along the arc
        ```
        """
        # Create points at parameter on an arc based on an interval
        d_alpha = arc.angle_radian / (count - 1)
        alpha = 0
        pnts = []
        for i in range(count):
            pnts.append(Point2D(arc.radius * math.cos(alpha),
                        arc.radius * math.sin(alpha), 0))
            alpha = alpha + d_alpha
        cs_new = arc.coordinatesystem
        pnts2 = []  # transformed points
        for i in pnts:
            pnts2.append(transform_point_2(i, cs_new))
        return pnts2

    @staticmethod
    def segmented_arc(arc: 'Arc2D', count: 'int') -> 'list':
        """Divides the arc into segments and returns a list of line segments.
        This method uses the `points_at_parameter` method to generate points along the arc at specified intervals and then creates line segments between these consecutive points.

        #### Parameters:
        - `arc` (Arc2D): The arc object.
        - `count` (int): The number of segments (and thus the number of points - 1) to create.

        #### Returns:
        `list`: A list of line segments (`Line` objects) representing the divided arc.

        #### Example usage:
        ```python
        arc = Arc2D(startPoint, midPoint, endPoint)
        segments = Arc2D.segmented_arc(arc, 3)
        # segments will be a list of 2 lines dividing the arc into 3 segments
        ```
        """
        pnts = Arc2D.points_at_parameter(arc, count)
        i = 0
        lines = []
        for j in range(len(pnts) - 1):
            lines.append(Line2D(pnts[i], pnts[i + 1]))
            i = i + 1
        return lines

    def draw_arc_point(cx: 'float', cy: 'float', radius: 'float', angle_degrees: 'float') -> 'Point2D':
        """
        Calculates a point on the arc given its center, radius, and an angle in degrees.

        Parameters:
        - cx (float): The x-coordinate of the arc's center.
        - cy (float): The y-coordinate of the arc's center.
        - radius (float): The radius of the arc.
        - angle_degrees (float): The angle in degrees from the start point of the arc, 
        measured clockwise from the positive x-axis.

        Returns:
        Point2D: The calculated point on the arc represented as a `Point2D` object with the calculated x and y coordinates.
        """
        angle_radians = math.radians(angle_degrees)
        x = cx + radius * math.cos(angle_radians)
        y = cy + radius * math.sin(angle_radians)
        return Point2D(x, y)


    def __str__(self) -> 'str':
        """Generates a string representation of the Arc2D object.

        #### Returns:
        `str`: A string that represents the Arc2D object.

        #### Example usage:
        ```python
        arc = Arc2D(startPoint, midPoint, endPoint)
        print(arc)
        # Output: Arc2D()
        ```
        """
        return f"{__class__.__name__}()"


class PolyCurve2D:
    def __init__(self) -> None:
        self.id = generateID()
        self.type = __class__.__name__
        self.curves = []
        self.points2D = []
        self.segmentcurves = None
        self.width = None
        self.height = None
        self.approximateLength = None
        self.graphicsStyleId = None
        self.isClosed = None
        self.isCyclic = None
        self.isElementGeometry = None
        self.isReadOnly = None
        self.length = self.length()
        self.period = None
        self.reference = None
        self.visibility = None

    def serialize(self):
        curves_serialized = [curve.serialize() if hasattr(
            curve, 'serialize') else str(curve) for curve in self.curves]
        points_serialized = [point.serialize() if hasattr(
            point, 'serialize') else str(point) for point in self.points2D]

        return {
            'type': self.type,
            'curves': curves_serialized,
            'points2D': points_serialized,
            'segmentcurves': self.segmentcurves,
            'width': self.width,
            'height': self.height,
            'approximateLength': self.approximateLength,
            'graphicsStyleId': self.graphicsStyleId,
            'id': self.id,
            'isClosed': self.isClosed,
            'isCyclic': self.isCyclic,
            'isElementGeometry': self.isElementGeometry,
            'isReadOnly': self.isReadOnly,
            'period': self.period,
            'reference': self.reference,
            'visibility': self.visibility
        }

    @staticmethod
    def deserialize(data):
        polycurve = PolyCurve2D()
        polycurve.segmentcurves = data.get('segmentcurves')
        polycurve.width = data.get('width')
        polycurve.height = data.get('height')
        polycurve.approximateLength = data.get('approximateLength')
        polycurve.graphicsStyleId = data.get('graphicsStyleId')
        polycurve.id = data.get('id')
        polycurve.isClosed = data.get('isClosed')
        polycurve.isCyclic = data.get('isCyclic')
        polycurve.isElementGeometry = data.get('isElementGeometry')
        polycurve.isReadOnly = data.get('isReadOnly')
        polycurve.period = data.get('period')
        polycurve.reference = data.get('reference')
        polycurve.visibility = data.get('visibility')

        if 'curves' in data:
            for curve_data in data['curves']:
                curve = Line2D.deserialize(curve_data)
                polycurve.curves.append(curve)

        if 'points2D' in data:
            for point_data in data['points2D']:
                point = Point2D.deserialize(point_data)
                polycurve.points2D.append(point)

        return polycurve

    def __id__(self):
        return f"id:{self.id}"

    @classmethod  # curves or curves?
    def by_joined_curves(cls, curves):
        if not curves or len(curves) < 1:
            raise ValueError(
                "At least one curve is required to create a PolyCurve2D.")

        polycurve = cls()
        for curve in curves:
            if not polycurve.points2D or polycurve.points2D[-1] != curve.start:
                polycurve.points2D.append(curve.start)
            polycurve.curves.append(curve)
            polycurve.points2D.append(curve.end)

        polycurve.isClosed = polycurve.points2D[0].value == polycurve.points2D[-1].value
        if project.autoclose == True and polycurve.isClosed == False:
            polycurve.curves.append(
                Line2D(start=curves[-1].end, end=curves[0].start))
            polycurve.points2D.append(curves[0].start)
            polycurve.isClosed = True
        return polycurve

    def points(self):
        for i in self.curves:
            self.points2D.append(i.start)
            self.points2D.append(i.end)
        return self.points2D

    def centroid(self) -> Point2D:
        if not self.isClosed or len(self.points2D) < 3:
            return "Polygon has less than 3 points or is not closed!"

        num_points = len(self.points2D)
        signed_area = 0
        centroid_x = 0
        centroid_y = 0

        for i in range(num_points):
            x0, y0 = self.points2D[i].x, self.points2D[i].y
            if i == num_points - 1:
                x1, y1 = self.points2D[0].x, self.points2D[0].y
            else:
                x1, y1 = self.points2D[i + 1].x, self.points2D[i + 1].y

            cross = x0 * y1 - x1 * y0
            signed_area += cross
            centroid_x += (x0 + x1) * cross
            centroid_y += (y0 + y1) * cross

        signed_area *= 0.5
        centroid_x /= (6.0 * signed_area)
        centroid_y /= (6.0 * signed_area)

        return Point2D(x=round(centroid_x, project.decimals), y=round(centroid_y, project.decimals))

    @staticmethod
    def from_polycurve_3D(PolyCurve):
        points = []
        for pt in PolyCurve.points:
            points.append(Point2D(pt.x, pt.y))
        plycrv = PolyCurve2D.by_points(points)
        return plycrv

    def area(self) -> float:  # shoelace formula
        if not self.isClosed or len(self.points2D) < 3:
            return "Polygon has less than 3 points or is not closed!"

        num_points = len(self.points2D)
        area = 0

        for i in range(num_points):
            x0, y0 = self.points2D[i].x, self.points2D[i].y
            if i == num_points - 1:
                x1, y1 = self.points2D[0].x, self.points2D[0].y
            else:
                x1, y1 = self.points2D[i + 1].x, self.points2D[i + 1].y

            area += x0 * y1 - x1 * y0

        area = abs(area) / 2.0
        return area

    def close(self) -> bool:
        if self.curves[0] == self.curves[-1]:
            return self
        else:
            self.curves.append(self.curves[0])
            plycrv = PolyCurve2D()
            for curve in self.curves:
                plycrv.curves.append(curve)
        return plycrv

    def scale(self, scalefactor):
        crvs = []
        for i in self.curves:
            if i.__class__.__name__ == "Arc":
                arcie = Arc2D(Point2D.product(scalefactor, i.start),
                              Point2D.product(scalefactor, i.end))
                arcie.mid = Point2D.product(scalefactor, i.mid)
                crvs.append(arcie)
            elif i.__class__.__name__ == "Line":
                crvs.append(Line2D(Point2D.product(
                    scalefactor, i.start), Point2D.product(scalefactor, i.end)))
            else:
                print("Curvetype not found")
        crv = PolyCurve2D.by_joined_curves(crvs)
        return crv

    @classmethod
    def by_points(cls, points):
        if not points or len(points) < 2:
            pass

        polycurve = cls()
        for i in range(len(points)):
            polycurve.points2D.append(points[i])
            if i < len(points) - 1:
                polycurve.curves.append(
                    Line2D(start=points[i], end=points[i+1]))

        polycurve.isClosed = points[0] == points[-1]
        if project.autoclose == True:
            polycurve.curves.append(Line2D(start=points[-1], end=points[0]))
            polycurve.points2D.append(points[0])
            polycurve.isClosed = True
        return polycurve

    def get_width(self) -> float:
        x_values = [point.x for point in self.points2D]
        y_values = [point.y for point in self.points2D]

        min_x = min(x_values)
        max_x = max(x_values)
        min_y = min(y_values)
        max_y = max(y_values)

        left_top = Point2D(x=min_x, y=max_y)
        left_bottom = Point2D(x=min_x, y=min_y)
        right_top = Point2D(x=max_x, y=max_y)
        right_bottom = Point2D(x=max_x, y=min_y)
        self.width = abs(Point2D.distance(left_top, right_top))
        self.height = abs(Point2D.distance(left_top, left_bottom))
        return self.width

    def length(self) -> float:
        lst = []
        for line in self.curves:
            lst.append(line.length)

        return sum(i.length for i in self.curves)

    @staticmethod
    def by_polycurve_2D(PolyCurve2D):
        plycrv = PolyCurve2D()
        curves = []
        for i in PolyCurve2D.curves:
            if i.__class__.__name__ == "Arc2D":
                curves.append(Arc2D(Point2D(i.start.x, i.start.y), Point2D(
                    i.mid.x, i.mid.y), Point2D(i.end.x, i.end.y)))
            elif i.__class__.__name__ == "Line2D":
                curves.append(
                    Line2D(Point2D(i.start.x, i.start.y), Point2D(i.end.x, i.end.y)))
            else:
                print("Curvetype not found")
        pnts = []
        for i in curves:
            pnts.append(i.start)
        pnts.append(curves[0].start)
        plycrv.points = pnts
        plycrv.curves = curves
        return plycrv

    def multi_split(self, lines: Line2D):
        lines = flatten(lines)
        new_polygons = []
        for index, line in enumerate(lines):
            if index == 0:
                n_p = self.split(line, returnlines=True)
                if n_p != None:
                    for nxp in n_p:
                        if nxp != None:
                            new_polygons.append(n_p)
            else:
                for new_poly in flatten(new_polygons):
                    n_p = new_poly.split(line, returnlines=True)
                    if n_p != None:
                        for nxp in n_p:
                            if nxp != None:
                                new_polygons.append(n_p)
        project.objects.append(flatten(new_polygons))
        return flatten(new_polygons)

    def translate(self, vector2d: Vector2):
        crvs = []
        v1 = vector2d
        for i in self.curves:
            if i.__class__.__name__ == "Arc2D":
                crvs.append(Arc2D(i.start.translate(v1),
                            i.mid.translate(v1), i.end.translate(v1)))
            elif i.__class__.__name__ == "Line2D":
                crvs.append(Line2D(i.start.translate(v1), i.end.translate(v1)))
            else:
                print("Curvetype not found")
        crv = PolyCurve2D.by_joined_curves(crvs)
        return crv

    @staticmethod
    def copy_translate(pc, vector3d: Vector3):
        crvs = []
        v1 = vector3d
        for i in pc.curves:
            if i.__class__.__name__ == "Line":
                crvs.append(Line2D(Point2D.translate(i.start, v1),
                            Point2D.translate(i.end, v1)))
            else:
                print("Curvetype not found")

        PCnew = PolyCurve2D.by_joined_curves(crvs)
        return PCnew

    def rotate(self, rotation):
        crvs = []
        for i in self.curves:
            if i.__class__.__name__ == "Arc2D":
                crvs.append(Arc2D(i.start.rotate(rotation),
                            i.mid.rotate(rotation), i.end.rotate(rotation)))
            elif i.__class__.__name__ == "Line2D":
                crvs.append(Line2D(i.start.rotate(
                    rotation), i.end.rotate(rotation)))
            else:
                print("Curvetype not found")
        crv = PolyCurve2D.by_joined_curves(crvs)
        return crv

    @staticmethod
    def boundingbox_global_CS(PC):
        x = []
        y = []
        for i in PC.curves():
            x.append(i.start.x)
            y.append(i.start.y)
        xmin = min(x)
        xmax = max(x)
        ymin = min(y)
        ymax = max(y)
        bbox = PolyCurve2D.by_points([Point2D(xmin, ymin), Point2D(
            xmax, ymin), Point2D(xmax, ymax), Point2D(xmin, ymax), Point2D(xmin, ymin)])
        return bbox

    @staticmethod
    def bounds(PC):
        # returns xmin,xmax,ymin,ymax,width,height of polycurve 2D
        x = []
        y = []
        for i in PC.curves:
            x.append(i.start.x)
            y.append(i.start.y)
        xmin = min(x)
        xmax = max(x)
        ymin = min(y)
        ymax = max(y)
        width = xmax-xmin
        height = ymax-ymin
        return xmin, xmax, ymin, ymax, width, height

    @classmethod
    def unclosed_by_points(self, points: Point2D):
        plycrv = PolyCurve2D()
        for index, point in enumerate(points):
            plycrv.points2D.append(point)
            try:
                nextpoint = points[index + 1]
                plycrv.curves.append(Line2D(start=point, end=nextpoint))
            except:
                pass
        return plycrv

    @staticmethod
    def polygon(self):
        points = []
        for i in self.curves:
            if i == Arc2D:
                points.append(i.start, i.mid)
            else:
                points.append(i.start)
        points.append(points[0])
        return points

    @staticmethod
    def segment(self, count):
        crvs = []
        for i in self.curves:
            if i.__class__.__name__ == "Arc2D":
                crvs.append(Arc2D.segmented_arc(i, count))
            elif i.__class__.__name__ == "Line2D":
                crvs.append(i)
        crv = flatten(crvs)
        pc = PolyCurve2D.by_joined_curves(crv)
        return pc

    def to_polycurve_3D(self):

        p1 = PolyCurve2D()
        curves = []
        for i in self.curves:
            if i.__class__.__name__ == "Arc":
                curves.append(Arc2D(Point2D(i.start.x, i.start.y), Point2D(i.middle.x, i.middle.y),
                                    Point2D(i.end.x, i.end.y)))
            elif i.__class__.__name__ == "Line":
                curves.append(
                    Line2D(Point2D(i.start.x, i.start.y), Point2D(i.end.x, i.end.y)))
            else:
                print("Curvetype not found")
        pnts = []
        for i in curves:
            pnts.append(i.start)
        pnts.append(curves[0].start)
        p1.points2D = pnts
        p1.curves = curves
        return p1

    @staticmethod
    def transform_from_origin(polycurve, startpoint: Point2D, directionvector: Vector3):
        crvs = []
        for i in polycurve.curves:
            if i.__class__.__name__ == "Arc2D":
                crvs.append(Arc2D(transform_point_2D(i.start, project.CSGlobal, startpoint, directionvector),
                                  transform_point_2D(
                                      i.mid, project.CSGlobal, startpoint, directionvector),
                                  transform_point_2D(
                                      i.end, project.CSGlobal, startpoint, directionvector)
                                  ))
            elif i.__class__.__name__ == "Line2D":
                crvs.append(Line2D(start=transform_point_2D(i.start, project.CSGlobal, startpoint, directionvector),
                                   end=transform_point_2D(
                                       i.end, project.CSGlobal, startpoint, directionvector)
                                   ))
            else:
                print(i.__class__.__name__ + "Curvetype not found")
        pc = PolyCurve2D()
        pc.curves = crvs
        return pc

    def __str__(self):
        l = len(self.points2D)
        return f"{__class__.__name__}, ({l} points)"


class Surface2D:
    def __init__(self) -> None:
        pass  # PolyCurve2D
        self.id = generateID()
        self.type = __class__.__name__

    def __id__(self):
        return f"id:{self.id}"

    def __str__(self) -> str:
        return f"{__class__.__name__}({self})"


class Profile2D:
    def __init__(self) -> None:
        self.id = generateID()
        self.type = __class__.__name__

    def __id__(self):
        return f"id:{self.id}"

    def __str__(self) -> str:
        return f"{__class__.__name__}({self})"


class ParametricProfile2D:
    def __init__(self) -> None:
        self.type = __class__.__name__
        self.id = generateID()

    def __id__(self):
        return f"id:{self.id}"

    def __str__(self) -> str:
        return f"{__class__.__name__}({self})"




class Intersect:
    def __init__(self):
        pass

    def get_line_intersect(line1: Line, line2: Line) -> Point:
        p1, p2 = line1.start, line1.end
        p1X, p1Y, P1Z = p1.x, p1.y, p1.z
        p2X, p2Y, P2Z = p2.x, p2.y, p2.z

        p3, p4 = line2.start, line2.end
        p3X, p3Y, P3Z = p3.x, p3.y, p3.z
        p4X, p4Y, P4Z = p4.x, p4.y, p4.z

        print(p1X, p1Y, P1Z)



#intersect class?
def perp(a):
    """Calculates a perpendicular vector to the given vector `a`.
    This function calculates a vector that is perpendicular to the given 2D vector `a`. The returned vector is in the 2D plane and rotated 90 degrees counterclockwise.

    #### Parameters:
    - `a` (list[float]): A 2D vector represented as a list of two floats, `[x, y]`.

    #### Returns:
    `list[float]`: A new 2D vector that is perpendicular to `a`.

    #### Example usage:
    ```python
    vector_a = [1, 0]
    perp_vector = perp(vector_a)
    # Expected output: [0, 1], representing a vector perpendicular to `vector_a`.
    ```
    """
    b = [None] * len(a)
    b[0] = -a[1]
    b[1] = a[0]
    return b


def get_line_intersect(line_1: 'Line2D', line_2: 'Line2D') -> 'Point2D':
    """Calculates the intersection point of two lines if they intersect.
    This function computes the intersection point of two lines defined by `line_1` and `line_2`. If the lines are parallel or coincide, the function returns `None`.

    #### Parameters:
    - `line_1` (Line2D): The first line, represented by its start and end points.
    - `line_2` (Line2D): The second line, represented by its start and end points.

    #### Returns:
    `Point2D` or `None`: The intersection point of `line_1` and `line_2` if they intersect; otherwise, `None`.

    #### Example usage:
    ```python
    line_1 = Line2D(Point2D(0, 0), Point2D(1, 1))
    line_2 = Line2D(Point2D(1, 0), Point2D(0, 1))
    intersection = get_line_intersect(line_1, line_2)
    # Expected output: Point2D(0.5, 0.5), the intersection point.
    ```
    """

    if line_1.start == line_1.end or line_2.start == line_2.end:
        return None

    p1, p2 = line_1.start, line_1.end
    p1X, p1Y = p1.x, p1.y
    p2X, p2Y = p2.x, p2.y

    p3, p4 = line_2.start, line_2.end
    p3X, p3Y = p3.x, p3.y
    p4X, p4Y = p4.x, p4.y

    da = [p2X - p1X, p2Y - p1Y]
    db = [p4X - p3X, p4Y - p3Y]
    dp = [p1X - p3X, p1Y - p3Y]
    dap = perp(da)
    denom = dap[0] * db[0] + dap[1] * db[1]
    if abs(denom) < 1e-6:
        return None
    num = dap[0] * dp[0] + dap[1] * dp[1]
    t = num / denom
    nX, nY = p3X + t * db[0], p3Y + t * db[1]

    return Point2D(nX, nY)


def get_multi_lines_intersect(lines: list[Line2D]) -> list[Point2D]:
    """Finds intersection points between multiple Line2D objects.
    This function iterates through a list of Line2D objects, calculates intersections between each pair of lines, and returns a list of unique intersection points. If a line does not intersect or the intersection point is not on the line segment, it is ignored.

    #### Parameters:
    - `lines` (list[Line2D]): A list of Line2D objects.

    #### Returns:
    `list[Point2D]`: A list of Point2D objects representing the intersection points.

    #### Example usage:
    ```python
    line1 = Line2D(Point2D(0, 0), Point2D(10, 10))
    line2 = Line2D(Point2D(0, 10), Point2D(10, 0))
    lines = [line1, line2]
    intersections = get_multi_lines_intersect(lines)
    # Expected output: [Point2D(5, 5)], the intersection point of the two lines.
    ```
    """

    pts = []
    for i in range(len(lines)):
        line1 = lines[i]
        for j in range(i+1, len(lines)):
            line2 = lines[j]
            intersection = get_line_intersect(line1, line2)
            if intersection not in pts and intersection != None and is_point_on_line_segment(intersection, line2) == True:
                pts.append(intersection)
    return pts


def get_intersect_polycurve_lines(polycurve: PolyCurve2D, lines: list[Line2D], split: bool = False, stretch: bool = False):
    """Calculates intersections between a PolyCurve2D and multiple Line2D objects, with options to split and stretch lines.
    This function identifies intersection points between a PolyCurve2D and a list of Line2D objects. It supports stretching lines to intersect across the entire polycurve and splitting lines at intersection points. The function returns a dictionary containing intersection points, split lines, and categorized lines as either inner or outer grid lines based on their location relative to the polycurve.

    #### Parameters:
    - `polycurve` (PolyCurve2D): The PolyCurve2D object to test for intersections.
    - `lines` (list[Line2D]): A list of Line2D objects to test for intersections with the polycurve.
    - `split` (bool): If True, splits lines at their intersection points. Defaults to False.
    - `stretch` (bool): If True, extends lines to calculate intersections across the entire polycurve. Defaults to False.

    #### Returns:
    `dict`: A dictionary containing:
    - `IntersectGridPoints`: A list of intersection points.
    - `SplittedLines`: A list of Line2D objects, split at intersection points if `split` is True.
    - `InnerGridLines`: Lines fully contained within the polycurve.
    - `OuterGridLines`: Lines extending outside the polycurve.

    #### Example usage:
    ```python
    polycurve = PolyCurve2D.by_points([Point2D(0, 0), Point2D(10, 0), Point2D(10, 10), Point2D(0, 10)])
    line = Line2D(Point2D(5, -5), Point2D(5, 15))
    results = get_intersect_polycurve_lines(polycurve, [line], split=True)
    # Expected output: A dictionary with lists of intersection points, split lines, inner and outer grid lines.
    ```
    """
    dict = {}
    intersectionsPointsList = []
    splitedLinesList = []
    InnerGridLines = []
    OuterGridLines = []
    if isinstance(lines, Line2D):
        lines = [lines]
    elif lines.type == "Line":
        print("Convert Line(s) to Line2D")
        sys.exit()
    else:
        print(f"Incorrect input: {lines}")
    for line in lines:
        IntersectGridPoints = []
        for i in range(len(polycurve.points2D) - 1):
            genLine = Line2D(polycurve.points2D[i], polycurve.points2D[i+1])
            checkIntersect = get_line_intersect(genLine, line)
            if stretch == False:
                if checkIntersect != None:
                    if is_point_on_line_segment(checkIntersect, line) == False:
                        checkIntersect = None
                    else:
                        minX = min(
                            polycurve.points2D[i].x, polycurve.points2D[i+1].x)
                        maxX = max(
                            polycurve.points2D[i].x, polycurve.points2D[i+1].x)
                        minY = min(
                            polycurve.points2D[i].y, polycurve.points2D[i+1].y)
                        maxY = max(
                            polycurve.points2D[i].y, polycurve.points2D[i+1].y)
                    if checkIntersect != None:
                        if minX <= checkIntersect.x <= maxX and minY <= checkIntersect.y <= maxY:
                            intersectionsPointsList.append(checkIntersect)
                            IntersectGridPoints.append(checkIntersect)

            elif stretch == True:
                minX = min(polycurve.points2D[i].x, polycurve.points2D[i+1].x)
                maxX = max(polycurve.points2D[i].x, polycurve.points2D[i+1].x)
                minY = min(polycurve.points2D[i].y, polycurve.points2D[i+1].y)
                maxY = max(polycurve.points2D[i].y, polycurve.points2D[i+1].y)
                if checkIntersect != None:
                    if minX <= checkIntersect.x <= maxX and minY <= checkIntersect.y <= maxY:
                        intersectionsPointsList.append(checkIntersect)
                        IntersectGridPoints.append(checkIntersect)

        if split == True:
            if len(IntersectGridPoints) > 0:
                splitedLinesList.append(line.split(IntersectGridPoints))

    for splittedLines in splitedLinesList:
        for line in splittedLines:
            centerLinePoint = line.point_at_parameter(0.5)
            if is_point_in_polycurve(centerLinePoint, polycurve) == True:
                InnerGridLines.append(line)
            else:
                OuterGridLines.append(line)

    dict["IntersectGridPoints"] = intersectionsPointsList
    dict["SplittedLines"] = flatten(splitedLinesList)
    dict["InnerGridLines"] = InnerGridLines
    dict["OuterGridLines"] = OuterGridLines

    return dict


def is_point_on_line_segment(point: 'Point2D', line: 'Line2D') -> 'bool':
    """Checks if a Point2D is on a Line2D segment.
    This function determines whether a given Point2D lies on a specified Line2D segment. It checks if the point is within the line segment's bounding box and calculates its distance from the line to verify its presence on the line.

    #### Parameters:
    - `point` (Point2D): The Point2D object to check.
    - `line` (Line2D): The Line2D object on which the point's presence is to be checked.

    #### Returns:
    `bool`: True if the point lies on the line segment; otherwise, False.

    #### Example usage:
    ```python
    point = Point2D(5, 5)
    line = Line2D(Point2D(0, 0), Point2D(10, 10))
    is_on_segment = is_point_on_line_segment(point, line)
    # Expected output: True, since the point lies on the line segment.
    ```
    """
    x_min = min(line.start.x, line.end.x)
    x_max = max(line.start.x, line.end.x)
    y_min = min(line.start.y, line.end.y)
    y_max = max(line.start.y, line.end.y)

    if x_min <= point.x <= x_max and y_min <= point.y <= y_max:
        try:
            distance = abs((line.end.y - line.start.y) * point.x
                           - (line.end.x - line.start.x) * point.y
                           + line.end.x * line.start.y
                           - line.end.y * line.start.x) \
                / line.length
            return distance < 1e-9
        except:
            return False
    return False


def get_intersection_polycurve_polycurve(polycurve_1: 'PolyCurve2D', polycurve_2: 'PolyCurve2D') -> 'list[Point2D]':
    """Finds intersection points between two PolyCurve2D objects.
    This function calculates the intersection points between all line segments of two PolyCurve2D objects. It iterates through each line segment of the first polycurve and checks for intersections with each line segment of the second polycurve. Intersection points that lie on both line segments are added to the result list.

    #### Parameters:
    - `polycurve_1` (PolyCurve2D): The first polycurve.
    - `polycurve_2` (PolyCurve2D): The second polycurve to intersect with the first one.

    #### Returns:
    `list[Point2D]`: A list of Point2D objects representing the intersection points between the two polycurves.

    #### Example usage:
    ```python
    polycurve1 = PolyCurve2D.by_points([Point2D(0, 0), Point2D(10, 10)])
    polycurve2 = PolyCurve2D.by_points([Point2D(0, 10), Point2D(10, 0)])
    intersections = get_intersection_polycurve_polycurve(polycurve1, polycurve2)
    # Expected output: [Point2D(5, 5)], the intersection point of the two polycurves.
    ```
    """
    points = []
    for i in range(len(polycurve_1.points2D) - 1):
        line1 = Line2D(polycurve_1.points2D[i], polycurve_1.points2D[i+1])
        for j in range(len(polycurve_2.points2D) - 1):
            line2 = Line2D(polycurve_2.points2D[j], polycurve_2.points2D[j+1])
            intersection = get_line_intersect(line1, line2)
            if intersection and is_point_on_line_segment(intersection, line1) and is_point_on_line_segment(intersection, line2):
                points.append(intersection)
    return points


def split_polycurve_at_intersections(polycurve: 'PolyCurve2D', points: 'list[Point2D]') -> 'list[PolyCurve2D]':
    """Splits a PolyCurve2D at specified points and returns the resulting segments as new polycurves.
    This function sorts the given intersection points along the direction of the polycurve. Then it iterates through each segment of the polycurve, checking for intersections with the provided points and splitting the polycurve accordingly. Each segment between intersection points becomes a new PolyCurve2D object.

    #### Parameters:
    - `polycurve` (PolyCurve2D): The polycurve to be split.
    - `points` (list[Point2D]): The points at which to split the polycurve.

    #### Returns:
    `list[PolyCurve2D]`: A list of PolyCurve2D objects representing the segments of the original polycurve after splitting.

    #### Example usage:
    ```python
    polycurve = PolyCurve2D.by_points([Point2D(0, 0), Point2D(5, 5), Point2D(10, 0)])
    points = [Point2D(5, 5)]
    split_polycurves = split_polycurve_at_intersections(polycurve, points)
    # Expected output: 2 new polycurves, one from (0,0) to (5,5) and another from (5,5) to (10,0).
    ```
    """
    points.sort(key=lambda pt: Point2D.distance(polycurve.points2D[0], pt))

    current_polycurve_points = [polycurve.points2D[0]]
    created_polycurves = []

    for i in range(1, len(polycurve.points2D)):
        segment_start = polycurve.points2D[i - 1]
        segment_end = polycurve.points2D[i]

        segment_intersections = [pt for pt in points if is_point_on_line_segment(
            pt, Line2D(segment_start, segment_end))]

        segment_intersections.sort(
            key=lambda pt: Point2D.distance(segment_start, pt))

        for intersect in segment_intersections:
            current_polycurve_points.append(intersect)
            created_polycurves.append(
                polycurve.by_points(current_polycurve_points))
            current_polycurve_points = [intersect]
            points.remove(intersect)

        current_polycurve_points.append(segment_end)

    if len(current_polycurve_points) > 1:
        created_polycurves.append(
            polycurve.by_points(current_polycurve_points))

    ptlist = []
    for index, pc in enumerate(created_polycurves):
        if index == 0:
            for pt in pc.points2D:
                ptlist.append(pt)
        elif index == 2:
            for pt in pc.points2D:
                ptlist.append(pt)
                ptlist.append(ptlist[1])

    pcurve = polycurve().by_points(ptlist)

    try:
        return [created_polycurves[1], pcurve]
    except:
        return [created_polycurves[0]]


# extend to if on edge, then accept
def is_point_in_polycurve(point: 'Point2D', polycurve: 'PolyCurve2D') -> 'bool':
    """Determines if a point is located inside a closed PolyCurve2D.
    The function uses a ray-casting algorithm to count the number of times a horizontal ray starting from the given point intersects the polycurve. If the count is odd, the point is inside; if even, the point is outside.

    #### Parameters:
    - `point` (Point2D): The point to check.
    - `polycurve` (PolyCurve2D): The polycurve to check against.

    #### Returns:
    `bool`: True if the point is inside the polycurve, False otherwise.

    #### Example usage:
    ```python
    polycurve = PolyCurve2D.by_points([Point2D(0, 0), Point2D(10, 0), Point2D(10, 10), Point2D(0, 10)])
    point = Point2D(5, 5)
    inside = is_point_in_polycurve(point, polycurve)
    # Expected output: True, since the point is inside the polycurve.
    ```
    """
    x, y = point.x, point.y
    intersections = 0
    for curve in polycurve.curves:
        p1, p2 = curve.start, curve.end
        if (y > min(p1.y, p2.y)) and (y <= max(p1.y, p2.y)) and (x <= max(p1.x, p2.x)):
            if p1.y != p2.y:
                x_inters = (y - p1.y) * (p2.x - p1.x) / (p2.y - p1.y) + p1.x
                if (p1.x == p2.x) or (x <= x_inters):
                    intersections += 1
    return intersections % 2 != 0


def is_polycurve_in_polycurve(polycurve_1: 'PolyCurve2D', polycurve_2: 'PolyCurve2D') -> 'bool':
    """Checks if all points of one polycurve are inside another polycurve.
    Iterates through each point of `polycurve_1` and checks if it is inside `polycurve_2` using the `is_point_in_polycurve` function. If all points of `polycurve_1` are inside `polycurve_2`, the function returns True; otherwise, it returns False.

    #### Parameters:
    - `polycurve_1` (PolyCurve2D): The polycurve to check if it is inside `polycurve_2`.
    - `polycurve_2` (PolyCurve2D): The polycurve that may contain `polycurve_1`.

    #### Returns:
    `bool`: True if all points of `polycurve_1` are inside `polycurve_2`, False otherwise.

    #### Example usage:
    ```python
    polycurve1 = PolyCurve2D.by_points([Point2D(1, 1), Point2D(2, 2)])
    polycurve2 = PolyCurve2D.by_points([Point2D(0, 0), Point2D(3, 0), Point2D(3, 3), Point2D(0, 3)])
    result = is_polycurve_in_polycurve(polycurve1, polycurve2)
    # Expected output: True, since `polycurve1` is entirely within `polycurve2`.
    ```
    """
    colList = []
    for pt in polycurve_1.points2D:
        if is_point_in_polycurve(pt, polycurve_2):
            colList.append(True)
        else:
            colList.append(False)

    if all_true(colList):
        return True
    else:
        return False


def plane_line_intersection():
    """Calculates the intersection point between a plane and a line in 3D space.
    Given a line defined by a direction and a point on the line, and a plane defined by a normal vector and a point on the plane, this function calculates the intersection point between the line and the plane, if it exists.

    #### Example usage:
    ```python
    line_dir = [1, 2, 3]  # Direction vector of the line
    line_pt = [0, 0, 0]  # A point on the line
    plane_norm = [4, 5, 6]  # Normal vector of the plane
    plane_pt = [1, 1, 1]  # A point on the plane
    intersection_point = plane_line_intersection(line_dir, line_pt, plane_norm, plane_pt)
    print("The intersection point is:", intersection_point)
    # Output: The intersection point coordinates, if an intersection exists.
    ```
    """
    line_dir = [1, 2, 3]
    line_pt = [0, 0, 0]

    plane_norm = [4, 5, 6]
    plane_pt = [1, 1, 1]

    dot_prod = sum([a*b for a, b in zip(line_dir, plane_norm)])

    if dot_prod == 0:
        print("The line is parallel to the plane. No intersection point.")
    else:
        t = sum([(a-b)*c for a, b, c in zip(plane_pt,
                line_pt, plane_norm)]) / dot_prod

        inter_pt = [a + b*t for a, b in zip(line_pt, line_dir)]

        print("The intersection point is", inter_pt)


def split_polycurve_by_points(polycurve: 'PolyCurve2D', points: 'list[Point2D]') -> 'list[PolyCurve2D]':
    """Splits a PolyCurve2D at specified points.
    Given a list of points, this function splits the input polycurve at these points if they lie on the polycurve. Each segment of the polycurve defined by these points is returned as a new PolyCurve2D.

    #### Parameters:
    - `polycurve` (PolyCurve2D): The polycurve to split.
    - `points` (list[Point2D]): A list of points at which the polycurve is to be split.

    #### Returns:
    `list[PolyCurve2D]`: A list of PolyCurve2D objects representing segments of the original polycurve.

    #### Example usage:
    ```python
    polycurve = PolyCurve2D.by_points([Point2D(0, 0), Point2D(5, 5), Point2D(10, 0)])
    split_points = [Point2D(5, 5)]
    split_polycurves = split_polycurve_by_points(polycurve, split_points)
    # Expected output: Two polycurves, one from (0,0) to (5,5) and another from (5,5) to (10,0).
    ```
    Note: The provided code snippet for the function does not include an implementation that matches its description. The implementation details need to be adjusted accordingly.
    """

    def splitCurveAtPoint(curve, point):
        if is_point_on_line_segment(point, curve):
            return curve.split([point])
        return [curve]

    split_curves = []
    for curve in polycurve.curves:
        current_curves = [curve]
        for point in points:
            new_curves = []
            for c in current_curves:
                new_curves.extend(splitCurveAtPoint(c, point))
            current_curves = new_curves
        split_curves.extend(current_curves)

    return split_curves


def is_on_line(line: 'Line2D', point: 'Point2D') -> 'bool':
    """Determines if a given point is on a specified line.
    Checks if the given point is exactly at the start or the end point of the line. It does not check if the point lies anywhere else on the line.

    #### Parameters:
    - `line` (Line2D): The line to check against.
    - `point` (Point2D): The point to check.

    #### Returns:
    `bool`: True if the point is exactly at the start or end of the line, False otherwise.

    #### Example usage:
    ```python
    line = Line2D(Point2D(0, 0), Point2D(10, 10))
    point = Point2D(0, 0)
    result = is_on_line(line, point)
    # Expected output: True
    ```
    Note: This function's implementation appears to contain an error in its condition check. The comparison should directly involve the point with line.start and line.end rather than using `Point2D` class in the condition.
    """

    if line.start == Point2D or line.end == Point2D:
        return True
    return False


def split_polycurve_by_line(polycurve: 'PolyCurve2D', line: 'Line2D') -> 'dict':
    """Splits a PolyCurve2D based on its intersection with a Line2D and categorizes the segments.

    This function finds the intersection points between a PolyCurve2D and a Line2D. If exactly two intersection points are found, it splits the PolyCurve2D at these points. The function returns a dictionary containing the original polycurve, the splitted polycurves (if any), and the intersection points.

    #### Parameters:
    - `polycurve` (PolyCurve2D): The polycurve to be split.
    - `line` (Line2D): The line used to split the polycurve.

    #### Returns:
    `dict`: A dictionary with the following keys:
      - `inputPolycurve`: The original polycurve.
      - `splittedPolycurve`: A list of PolyCurve2D objects representing the splitted segments.
      - `nonsplittedPolycurve`: A list containing the original polycurve if no splitting occurred.
      - `IntersectGridPoints`: The intersection points between the polycurve and the line.

    #### Example usage:
    ```python
    polycurve = PolyCurve2D.by_points([Point2D(0, 0), Point2D(5, 5), Point2D(10, 0)])
    line = Line2D(Point2D(0, 5), Point2D(10, 5))
    result_dict = split_polycurve_by_line(polycurve, line)
    # Expected output: Dictionary containing splitted polycurves (if any) and intersection points.
    ```
    Note: The implementation details provided in the description might not fully align with the actual function code. Adjustments might be needed to ensure the function performs as described.
    """

    dict = {}
    pcList = []
    nonsplitted = []
    intersect = get_intersect_polycurve_lines(
        polycurve, line, split=False, stretch=False)
    intersect_points = intersect["IntersectGridPoints"]
    if len(intersect_points) != 2:
        nonsplitted.append(polycurve)
        dict["inputPolycurve"] = [polycurve]
        dict["splittedPolycurve"] = pcList
        dict["nonsplittedPolycurve"] = nonsplitted
        dict["IntersectGridPoints"] = intersect_points
        return dict

    SegsandPoints = []

    for Line in polycurve.curves:
        for intersect_point in intersect_points:
            if is_point_on_line_segment(intersect_point, Line):
                SegsandPoints.append(intersect_point)
                SegsandPoints.append(intersect_point)

        SegsandPoints.append(Line)

    elementen = []
    for item in SegsandPoints:
        elementen.append(item)

    split_lists = []
    current_list = []

    for element in elementen:
        current_list.append(element)

        if len(current_list) > 1 and current_list[-1].type == current_list[-2].type == 'Point2D':
            split_lists.append(current_list[:-1])
            current_list = [element]

    if current_list:
        split_lists.append(current_list)

    merged_list = split_lists[-1] + split_lists[0]

    lijsten = [merged_list, split_lists[1]]

    for lijst in lijsten:
        q = []
        for i in lijst:
            if i.type == "Line2D":
                q.append(i.end)
            elif i.type == "Point2D":
                q.append(i)
        pc = PolyCurve2D.by_points(q)
        pcList.append(pc)

    dict["inputPolycurve"] = [polycurve]
    dict["splittedPolycurve"] = pcList
    dict["nonsplittedPolycurve"] = nonsplitted
    dict["IntersectGridPoints"] = intersect_points

    return dict



# Rule: line, whitespace, line whitespace etc., scale
HiddenLine1 = ["Hidden Line 1", [1, 1], 100]
# Rule: line, whitespace, line whitespace etc., scale
HiddenLine2 = ["Hidden Line 2", [2, 1], 100]
# Rule: line, whitespace, line whitespace etc., scale
Centerline = ["Center Line 1", [8, 2, 2, 2], 100]


def line_to_pattern(baseline: 'Line', pattern_obj) -> 'list':
    """Converts a baseline (Line object) into a list of line segments based on a specified pattern.
    This function takes a line (defined by its start and end points) and a pattern object. The pattern object defines a repeating sequence of segments to be applied along the baseline. The function calculates the segments according to the pattern and returns a list of Line objects representing these segments.

    #### Parameters:
    - `baseline` (Line): The baseline along which the pattern is to be applied. This line is defined by its start and end points.
    - `pattern_obj` (Pattern): The pattern object defining the sequence of segments. The pattern object should have the following structure:
        - An integer representing the number of repetitions.
        - A list of floats representing the lengths of each segment in the pattern.
        - A float representing the scale factor for the lengths of the segments in the pattern.

    #### Returns:
    `list`: A list of Line objects that represent the line segments created according to the pattern along the baseline.

    #### Example usage:
    ```python
    baseline = Line(Point(0, 0, 0), Point(10, 0, 0))
    pattern_obj = (3, [2, 1], 1)  # 3 repetitions, pattern of lengths 2 and 1, scale factor 1
    patterned_lines = line_to_pattern(baseline, pattern_obj)
    # patterned_lines will be a list of Line objects according to the pattern
    ```

    The function works by calculating the total length of the pattern, the number of whole lengths of the pattern that fit into the baseline, and then generating the line segments according to these calculations. If the end of the baseline is reached before completing a pattern sequence, the last segment is adjusted to end at the baseline's end point.
    """
    # this converts a line to list of lines based on a pattern
    origin = baseline.start
    dir = Vector3.by_two_points(baseline.start, baseline.end)
    unityvect = Vector3.normalize(dir)

    Pattern = pattern_obj
    l = baseline.length
    patternlength = sum(Pattern[1]) * Pattern[2]
    # number of whole lengths of the pattern
    count = math.floor(l / patternlength)
    lines = []

    startpoint = origin
    ll = 0
    rl = 10000
    for i in range(count + 1):
        n = 0
        for i in Pattern[1]:
            deltaV = Vector3.product(i * Pattern[2], unityvect)
            dl = Vector3.length(deltaV)
            if rl < dl:  # this is the last line segment on the line where the pattern is going to be cut into pieces.
                endpoint = baseline.end
            else:
                endpoint = Point.translate(startpoint, deltaV)
            if n % 2:
                a = 1 + 1
            else:
                lines.append(Line(start=startpoint, end=endpoint))
            if rl < dl:
                break  # end of line reached
            startpoint = endpoint
            n = n + 1
            ll = ll + dl  # total length
            rl = l - ll  # remaining length within the pattern
        startpoint = startpoint
    return lines




class Extrusion:
    # Extrude a 2D profile to a 3D mesh or solid
    """The Extrusion class represents the process of extruding a 2D profile into a 3D mesh or solid form. It is designed to handle geometric transformations and properties related to the extrusion process."""
    def __init__(self):
        """The Extrusion class represents the process of extruding a 2D profile into a 3D mesh or solid form. It is designed to handle geometric transformations and properties related to the extrusion process.
        
        - `id` (str): A unique identifier for the extrusion instance.
        - `type` (str): Class name, indicating the object type as "Extrusion".
        - `parameters` (list): A list of parameters associated with the extrusion.
        - `verts` (list): A list of vertices that define the shape of the extruded mesh.
        - `faces` (list): A list of faces, each defined by indices into the `verts` list.
        - `numberFaces` (int): The total number of faces in the extrusion.
        - `countVertsFaces` (int): The total number of vertices per face, distinct from the total vertex count.
        - `name` (str): The name assigned to the extrusion instance.
        - `color` (tuple): The color of the extrusion, defined as an RGB tuple.
        - `colorlst` (list): A list of colors applied to the extrusion, potentially varying per face or vertex.
        - `topface` (PolyCurve): The top face of the extrusion, returned as a polycurve converted to a surface.
        - `bottomface` (PolyCurve): The bottom face of the extrusion, similar to `topface`.
        - `polycurve_3d_translated` (PolyCurve): A polycurve representing the translated 3D profile of the extrusion.
        - `bottomshape` (list): A list representing the shape of the bottom face of the extrusion.
        """
        self.id = generateID()
        self.type = __class__.__name__
        self.parameters = []
        self.verts = []
        self.faces = []
        self.numberFaces = 0
        # total number of verts per face (not the same as total verts)
        self.countVertsFaces = 0
        self.name = None
        self.color = (255, 255, 0)
        self.colorlst = []
        self.topface = None  # return polycurve -> surface
        self.bottomface = None  # return polycurve -> surface
        self.polycurve_3d_translated = None
        self.outercurve = []
        self.bottomshape = []
        self.nested = []

    def serialize(self) -> dict:
        """Serializes the extrusion object into a dictionary.
        This method facilitates the conversion of the Extrusion instance into a dictionary format, suitable for serialization to JSON or other data formats for storage or network transmission.

        #### Returns:
        `dict`: A dictionary representation of the Extrusion instance, including all relevant geometric and property data.
    
        #### Example usage:
        ```python

        ```
        """
        id_value = str(self.id) if not isinstance(
            self.id, (str, int, float)) else self.id
        return {
            'id': id_value,
            'type': self.type,
            'verts': self.verts,
            'faces': self.faces,
            'numberFaces': self.numberFaces,
            'countVertsFaces': self.countVertsFaces,
            'name': self.name,
            'color': self.color,
            'colorlst': self.colorlst,
            'topface': self.topface.serialize() if self.topface else None,
            'bottomface': self.bottomface.serialize() if self.bottomface else None,
            'polycurve_3d_translated': self.polycurve_3d_translated.serialize() if self.polycurve_3d_translated else None
        }

    @staticmethod
    def deserialize(data: dict) -> 'Extrusion':
        """Reconstructs an Extrusion object from a dictionary.
        This static method allows for the creation of an Extrusion instance from serialized data, enabling the loading of extrusion objects from file storage or network data.

        #### Parameters:
        - `data` (dict): A dictionary containing serialized Extrusion data.

        #### Returns:
        `Extrusion`: A newly constructed Extrusion instance based on the provided data.
    
        #### Example usage:
        ```python

        ```
        """
        extrusion = Extrusion()
        extrusion.id = data.get('id')
        extrusion.verts = data.get('verts', [])
        extrusion.faces = data.get('faces', [])
        extrusion.numberFaces = data.get('numberFaces', 0)
        extrusion.countVertsFaces = data.get('countVertsFaces', 0)
        extrusion.name = data.get('name', "none")
        extrusion.color = data.get('color', (255, 255, 0))
        extrusion.colorlst = data.get('colorlst', [])

        if data.get('topface'):
            extrusion.topface = PolyCurve.deserialize(data['topface'])

        if data.get('bottomface'):
            extrusion.bottomface = PolyCurve.deserialize(data['bottomface'])

        if data.get('polycurve_3d_translated'):
            extrusion.polycurve_3d_translated = PolyCurve.deserialize(
                data['polycurve_3d_translated'])

        return extrusion

    def set_parameter(self, data: list) -> 'Extrusion':
        """Sets parameters for the extrusion.
        This method allows for the modification of the Extrusion's parameters, which can influence the extrusion process or define additional properties.

        #### Parameters:
        - `data` (list): A list of parameters to be applied to the extrusion.

        #### Returns:
        `Extrusion`: The Extrusion instance with updated parameters.
    
        #### Example usage:
        ```python

        ```
        """
        self.parameters = data
        return self

    @staticmethod
    def merge(extrusions: list, name: str = None) -> 'Extrusion':
        """Merges multiple Extrusion instances into a single one.
        This class method combines several extrusions into a single Extrusion object, potentially useful for operations requiring unified geometric manipulation.

        #### Parameters:
        - `extrusions` (list): A list of Extrusion instances to be merged.
        - `name` (str, optional): The name for the merged extrusion.

        #### Returns:
        `Extrusion`: A new Extrusion instance resulting from the merger of the provided extrusions.
    
        #### Example usage:
        ```python

        ```
        """
        Outrus = Extrusion()
        if isinstance(extrusions, list):
            Outrus.verts = []
            Outrus.faces = []
            Outrus.colorlst = []
            for ext in extrusions:
                Outrus.verts.append(ext.verts)
                Outrus.faces.append(ext.faces)
                Outrus.colorlst.append(ext.colorlst)
            Outrus.verts = flatten(Outrus.verts)
            Outrus.faces = flatten(Outrus.faces)
            Outrus.colorlst = flatten(Outrus.colorlst)
            return Outrus

        elif isinstance(extrusions, Extrusion):
            return extrusions

    @staticmethod
    def by_polycurve_height_vector(polycurve_2d: PolyCurve2D, height: float, cs_old: CoordinateSystem, start_point: Point, direction_vector: Vector3) -> 'Extrusion':
        """Creates an extrusion from a 2D polycurve profile along a specified vector.
        This method extrudes a 2D polycurve profile into a 3D form by translating it to a specified start point and direction. The extrusion is created perpendicular to the polycurve's plane, extending it to the specified height.

        #### Parameters:
        - `polycurve_2d` (PolyCurve2D): The 2D polycurve to be extruded.
        - `height` (float): The height of the extrusion.
        - `cs_old` (CoordinateSystem): The original coordinate system of the polycurve.
        - `start_point` (Point): The start point for the extrusion in the new coordinate system.
        - `direction_vector` (Vector3): The direction vector along which the polycurve is extruded.

        #### Returns:
        `Extrusion`: An Extrusion object representing the 3D form of the extruded polycurve.

        #### Example usage:
        ```python
        extrusion = Extrusion.by_polycurve_height_vector(polycurve_2d, 10, oldCS, startPoint, directionVec)
        ```
        """
        Extrus = Extrusion()
        # 2D PolyCurve @ Global origin
        count = 0

        Extrus.polycurve_3d_translated = PolyCurve.transform_from_origin(
            polycurve_2d, start_point, direction_vector)

        try:
            for i in polycurve_2d.curves:
                startpointLow = transform_point(
                    Point(i.start.x, i.start.y, 0), cs_old, start_point, direction_vector)
                endpointLow = transform_point(
                    Point(i.end.x, i.end.y, 0), cs_old, start_point, direction_vector)
                endpointHigh = transform_point(
                    Point(i.end.x, i.end.y, height), cs_old, start_point, direction_vector)
                startpointHigh = transform_point(
                    Point(i.start.x, i.start.y, height), cs_old, start_point, direction_vector)

                # Construct faces perpendicular on polycurve
                Extrus.faces.append(4)
                Extrus.verts.append(startpointLow.x)
                Extrus.verts.append(startpointLow.y)
                Extrus.verts.append(startpointLow.z)
                Extrus.faces.append(count)
                count += 1
                Extrus.verts.append(endpointLow.x)
                Extrus.verts.append(endpointLow.y)
                Extrus.verts.append(endpointLow.z)
                Extrus.faces.append(count)
                count += 1
                Extrus.verts.append(endpointHigh.x)
                Extrus.verts.append(endpointHigh.y)
                Extrus.verts.append(endpointHigh.z)
                Extrus.faces.append(count)
                count += 1
                Extrus.verts.append(startpointHigh.x)
                Extrus.verts.append(startpointHigh.y)
                Extrus.verts.append(startpointHigh.z)
                Extrus.faces.append(count)
                count += 1
                Extrus.numberFaces = Extrus.numberFaces + 1

            # bottomface
            Extrus.faces.append(len(polycurve_2d.curves))

            count = 0
            for i in polycurve_2d.curves:
                Extrus.faces.append(count)
                Extrus.bottomshape.append(i)
                count = count + 4

            # topface
            Extrus.faces.append(len(polycurve_2d.curves))
            count = 3
            for i in polycurve_2d.curves:
                Extrus.faces.append(count)
                count = count + 4
        except:
            for i in polycurve_2d.curves:
                startpointLow = transform_point(
                    Point(i.start.x, i.start.y, 0), cs_old, start_point, direction_vector)
                endpointLow = transform_point(
                    Point(i.end.x, i.end.y, 0), cs_old, start_point, direction_vector)
                endpointHigh = transform_point(
                    Point(i.end.x, i.end.y, height), cs_old, start_point, direction_vector)
                startpointHigh = transform_point(
                    Point(i.start.x, i.start.y, height), cs_old, start_point, direction_vector)

                # Construct faces perpendicular on polycurve
                Extrus.faces.append(4)
                Extrus.verts.append(startpointLow.x)
                Extrus.verts.append(startpointLow.y)
                Extrus.verts.append(startpointLow.z)
                Extrus.faces.append(count)
                count += 1
                Extrus.verts.append(endpointLow.x)
                Extrus.verts.append(endpointLow.y)
                Extrus.verts.append(endpointLow.z)
                Extrus.faces.append(count)
                count += 1
                Extrus.verts.append(endpointHigh.x)
                Extrus.verts.append(endpointHigh.y)
                Extrus.verts.append(endpointHigh.z)
                Extrus.faces.append(count)
                count += 1
                Extrus.verts.append(startpointHigh.x)
                Extrus.verts.append(startpointHigh.y)
                Extrus.verts.append(startpointHigh.z)
                Extrus.faces.append(count)
                count += 1
                Extrus.numberFaces = Extrus.numberFaces + 1

            # bottomface
            Extrus.faces.append(len(polycurve_2d.curves))

            count = 0
            for i in polycurve_2d.curves:
                Extrus.faces.append(count)
                Extrus.bottomshape.append(i)
                count = count + 4

            # topface
            Extrus.faces.append(len(polycurve_2d.curves))
            count = 3
            for i in polycurve_2d.curves:
                Extrus.faces.append(count)
                count = count + 4

        Extrus.countVertsFaces = (4 * Extrus.numberFaces)

        Extrus.countVertsFaces = Extrus.countVertsFaces + \
            len(polycurve_2d.curves)*2
        Extrus.numberFaces = Extrus.numberFaces + 2

        Extrus.outercurve = polycurve_2d

        for j in range(int(len(Extrus.verts) / 3)):
            Extrus.colorlst.append(Extrus.color)

        return Extrus

    @staticmethod
    def by_polycurve_height(polycurve: PolyCurve, height: float, dz_loc: float) -> 'Extrusion':
        """Creates an extrusion from a PolyCurve with a specified height and base elevation.
        This method generates a vertical extrusion of a given PolyCurve. The PolyCurve is first translated vertically by `dz_loc`, then extruded to the specified `height`, creating a solid form.

        #### Parameters:
        - `polycurve` (PolyCurve): The PolyCurve to be extruded.
        - `height` (float): The height of the extrusion.
        - `dz_loc` (float): The base elevation offset from the original plane of the PolyCurve.

        #### Returns:
        `Extrusion`: An Extrusion object that represents the 3D extruded form of the input PolyCurve.

        #### Example usage:
        ```python
        extrusion = Extrusion.by_polycurve_height(polycurve, 5, 0)
        ```
        """
        # global len
        Extrus = Extrusion()
        Points = polycurve.points
        V1 = Vector3.by_two_points(Points[0], Points[1])
        V2 = Vector3.by_two_points(Points[-2], Points[-1])

        p1 = Plane.by_two_vectors_origin(
            V1, V2, Points[0])  # Workplane of PolyCurve
        norm = p1.Normal

        pnts = []
        faces = []

        Extrus.polycurve_3d_translated = polycurve

        # allverts
        for pnt in Points:
            # Onderzijde verplaatst met dz_loc
            pnts.append(Point.translate(pnt, Vector3.product(dz_loc, norm)))
        for pnt in Points:
            # Bovenzijde verplaatst met dz_loc
            pnts.append(Point.translate(
                pnt, Vector3.product((dz_loc+height), norm)))

        numPoints = len(Points)

        # Bottomface
        count = 0
        face = []
        for x in range(numPoints):
            face.append(count)
            count = count + 1
        faces.append(face)

        # Topface
        count = 0
        face = []
        for x in range(numPoints):
            face.append(count+numPoints)
            count = count + 1
        faces.append(face)

        # Sides
        count = 0
        length = len(faces[0])
        for i, j in zip(faces[0], faces[1]):
            face = []
            face.append(i)
            face.append(faces[0][count + 1])
            face.append(faces[1][count + 1])
            face.append(j)
            count = count + 1
            if count == length-1:
                face.append(i)
                face.append(faces[0][0])
                face.append(faces[1][0])
                face.append(j)
                faces.append(face)
                break
            else:
                pass
            faces.append(face)

        # toMeshStructure
        for i in pnts:
            Extrus.verts.append(i.x)
            Extrus.verts.append(i.y)
            Extrus.verts.append(i.z)

        for x in faces:
            Extrus.faces.append(len(x))  # Number of verts in face
            for y in x:
                Extrus.faces.append(y)

        Extrus.numberFaces = len(faces)
        Extrus.countVertsFaces = (4 * len(faces))

        for j in range(int(len(Extrus.verts) / 3)):
            Extrus.colorlst.append(Extrus.color)
        return Extrus


# check if there are innercurves inside the outer curve.


class Surface:
    """Represents a surface object created from PolyCurves."""
    def __init__(self) -> 'Surface':
        """This class is designed to manage and manipulate surfaces derived from PolyCurve objects. It supports the generation of mesh representations, serialization/deserialization, and operations like filling and voiding based on PolyCurve inputs.
       
        - `type` (str): The class name, "Surface".
        - `mesh` (list): A list of meshes that represent the surface.
        - `length` (float): The total length of the PolyCurves defining the surface.
        - `area` (float): The area of the surface, excluding any inner PolyCurves.
        - `offset` (float): An offset value for the surface.
        - `name` (str): The name of the surface.
        - `id` (str): A unique identifier for the surface.
        - `PolyCurveList` (list): A list of PolyCurve objects that define the surface.
        - `origincurve` (PolyCurve): The original PolyCurve from which the surface was created.
        - `color` (int): The color of the surface, represented as an integer.
        - `colorlst` (list): A list of color values associated with the surface.
        """       
        self.type = __class__.__name__
        self.mesh = []
        self.offset = 0
        self.name = None
        self.id = generateID()
        self.outer_Polygon = None
        self.inner_Polygon = []
        self.colorlst = []
        self.outer_Surface = None
        self.inner_Surface = []
        # self.byPatch = self.fill(self)
        # if color is None:
        #     self.color = Color.rgb_to_int(Color().Components("gray"))
        # else:
        #     self.color = color



    def serialize(self) -> dict:
        """Serializes the Surface object into a dictionary for storage or transfer.
        This method converts the Surface object's properties into a dictionary format, making it suitable for serialization processes like saving to a file or sending over a network.

        #### Returns:
        `dict`: A dictionary representation of the Surface object, containing all relevant data such as type, mesh, dimensions, name, ID, PolyCurve list, origin curve, color, and color list.

        #### Example usage:
        ```python
        surface = Surface(polyCurves, color)
        serialized_surface = surface.serialize()
        # serialized_surface is now a dictionary representation of the surface object
        ```
        """
        return {
            'type': self.type,
            'mesh': self.mesh,
            'length': self.length,
            'area': self.area,
            'offset': self.offset,
            'name': self.name,
            'id': self.id,
            'PolyCurveList': [polycurve.serialize() for polycurve in self.PolyCurveList],
            'origincurve': self.origincurve.serialize() if self.origincurve else None,
            'color': self.color,
            'colorlst': self.colorlst
        }

    @staticmethod
    def deserialize(data: dict) -> 'Surface':
        """Creates a Surface object from a serialized data dictionary.
        This static method reconstructs a Surface object from a dictionary containing serialized surface data. It is particularly useful for loading surfaces from storage or reconstructing them from data received over a network.

        #### Parameters:
        - `data` (`dict`): The dictionary containing the serialized data of a Surface object.

        #### Returns:
        `Surface`: A new Surface object initialized with the data from the dictionary.

        #### Example usage:
        ```python
        data = { ... }  # Serialized Surface data
        surface = Surface.deserialize(data)
        # surface is now a fully reconstructed Surface object
        ```
        """
        polycurves = [PolyCurve.deserialize(
            pc_data) for pc_data in data.get('PolyCurveList', [])]
        surface = Surface(polycurves, data.get('color'))

        surface.mesh = data.get('mesh', [])
        surface.length = data.get('length', 0)
        surface.area = data.get('area', 0)
        surface.offset = data.get('offset', 0)
        surface.name = data.get('name', "test2")
        surface.id = data.get('id')
        surface.colorlst = data.get('colorlst', [])

        if data.get('origincurve'):
            surface.origincurve = PolyCurve.deserialize(data['origincurve'])

        return surface
    @classmethod
    def by_patch_inner_and_outer(self, Polygons: 'list[Polygon]') -> 'Surface':
        valid_polygons = [p for p in Polygons if p is not None]
        sorted_polygons = sorted(valid_polygons, key=lambda p: p.length(), reverse=True)

        if len(sorted_polygons) == 0:
            raise ValueError("No valid polygons provided")

        outer_Polygon = sorted_polygons[0]

        inner_Polygon = sorted_polygons[1:] if len(sorted_polygons) > 1 else []

        return self.by_patch(outer_Polygon, inner_Polygon)


    @classmethod
    def by_patch(self, outer_Polygon: Polygon, inner_Polygon: 'list[Polygon]' = None) -> 'Surface':
        srf = Surface()
        srf.outer_Polygon = outer_Polygon
        srf.inner_Polygon = inner_Polygon
        srf.outer_Surface = Extrusion.by_polycurve_height(outer_Polygon, 0, 0)
        srf.inner_Surface = []
        if inner_Polygon != None:
            for inner in srf.inner_Polygon:
                srf.inner_Surface.append(Extrusion.by_polycurve_height(inner, 0, 0))

        return srf

    def void(self, polyCurve: PolyCurve):
        """Creates a void in the Surface based on the specified PolyCurve.
        This method identifies and removes a part of the Surface that intersects with the given PolyCurve, effectively creating a void in the Surface. It then updates the surface's mesh and color list to reflect this change.

        #### Parameters:
        - `polyCurve` (`PolyCurve`): The PolyCurve object that defines the area of the Surface to be voided.

        #### Example usage:
        ```python
        surface.void(polyCurve)
        # A void is now created in the surface based on the specified PolyCurve.
        ```
        """
        # Find the index of the extrusion that intersects with the polyCurve
        pass

    def __id__(self):
        """Returns the unique identifier of the Surface.
        This method provides a way to retrieve the unique ID of the Surface, which can be useful for tracking or identifying surfaces within a larger system.

        #### Returns:
        `str`: The unique identifier of the Surface.

        #### Example usage:
        ```python
        id_str = surface.__id__()
        print(id_str)
        # Outputs the ID of the surface.
        ```
        """

    def __str__(self) -> str:
        return f"{self.__class__.__name__}({self.outer_Polygon}, {self.inner_Polygon})"

    

class NurbsSurface:  # based on point data / degreeU&countU / degreeV&countV?
    """Represents a NURBS (Non-Uniform Rational B-Spline) surface."""
    def __init__(self) -> 'NurbsSurface':
        """NurbsSurface is a mathematical model representing a 3D surface in terms of NURBS, a flexible method to represent curves and surfaces. It encompasses properties such as ID and type but is primarily defined by its control points, weights, and degree in the U and V directions.

        - `id` (str): A unique identifier for the NurbsSurface.
        - `type` (str): Class name, "NurbsSurface".
        """
        self.id = generateID()
        self.type = __class__.__name__

    def __id__(self) -> 'str':
        """Returns the unique identifier of the NurbsSurface object.
        This method provides a standardized way to access the unique ID of the NurbsSurface, useful for identification and tracking purposes within a system that handles multiple surfaces.

        #### Returns:
        `str`: The unique identifier of the NurbsSurface, prefixed with "id:".

        #### Example usage:
        ```python
        nurbs_surface = NurbsSurface()
        print(nurbs_surface.__id__())
        # Output format: "id:{unique_id}"
        ```
        """
        return f"id:{self.id}"

    def __str__(self) -> 'str':
        """Generates a string representation of the NurbsSurface object.
        This method creates a string that summarizes the NurbsSurface, typically including its class name and potentially its unique ID, providing a concise overview of the object when printed or logged.

        #### Returns:
        `str`: A string representation of the NurbsSurface object.

        #### Example usage:
        ```python
        nurbs_surface = NurbsSurface()
        print(nurbs_surface)
        # Output: "NurbsSurface({self})"
        ```
        """
        return f"{__class__.__name__}({self})"


class PolySurface:
    """Represents a compound surface consisting of multiple connected surfaces."""
    def __init__(self) -> None:
        """PolySurface is a geometric entity that represents a complex surface made up of several simpler surfaces. These simpler surfaces are typically connected along their edges. Attributes include an ID and type, with functionalities to manipulate and query the composite surface structure.
        
        - `id` (str): A unique identifier for the PolySurface.
        - `type` (str): Class name, "PolySurface".
        """
        self.id = generateID()
        self.type = __class__.__name__

    def __id__(self) -> 'str':
        """Returns the unique identifier of the PolySurface object.
        Similar to the NurbsSurface, this method provides the unique ID of the PolySurface, facilitating its identification and tracking across various operations or within data structures that involve multiple surfaces.

        #### Returns:
        `str`: The unique identifier of the PolySurface, prefixed with "id:".

        #### Example usage:
        ```python
        poly_surface = PolySurface()
        print(poly_surface.__id__())
        # Output format: "id:{unique_id}"
        ```
        """
        return f"id:{self.id}"

    def __str__(self) -> 'str':
        """Generates a string representation of the PolySurface object.
        Provides a simple string that identifies the PolySurface, mainly through its class name. This is helpful for debugging, logging, or any scenario where a quick textual representation of the object is beneficial.

        #### Returns:
        `str`: A string representation of the PolySurface object.

        #### Example usage:
        ```python
        poly_surface = PolySurface()
        print(poly_surface)
        # Output: "PolySurface({self})"
        ```
        """
        return f"{__class__.__name__}({self})"




class Panel:
    # Panel
    def __init__(self):
        self.id = generateID()
        self.type = __class__.__name__
        self.extrusion = None
        self.thickness = 0
        self.name = None
        self.perimeter: float = 0
        self.coordinatesystem: CoordinateSystem = CSGlobal
        self.colorint = None
        self.colorlst = []
        self.origincurve = None

    def serialize(self):
        id_value = str(self.id) if not isinstance(
            self.id, (str, int, float)) else self.id
        return {
            'id': id_value,
            'type': self.type,
            'extrusion': self.extrusion,
            'thickness': self.thickness,
            'name': self.name,
            'perimeter': self.perimeter,
            'coordinatesystem': self.coordinatesystem.serialize(),
            'color': self.color,
            'colorlst': self.colorlst,
            'origincurve': self.origincurve
        }

    @staticmethod
    def deserialize(data):
        panel = Panel()
        panel.id = data.get('id')
        panel.type = data.get('type')
        panel.extrusion = data.get('extrusion')
        panel.thickness = data.get('thickness', 0)
        panel.name = data.get('name', "none")
        panel.perimeter = data.get('perimeter', 0)
        panel.coordinatesystem = CoordinateSystem.deserialize(
            data['coordinatesystem'])
        panel.color = data.get('color')
        panel.colorlst = data.get('colorlst', [])
        panel.origincurve = data.get('origincurve')

        return panel

    @classmethod
    def by_polycurve_thickness(self, polycurve: PolyCurve, thickness: float, offset: float, name: str, colorrgbint):
        # Create panel by polycurve
        p1 = Panel()
        p1.name = name
        p1.thickness = thickness
        p1.extrusion = Extrusion.by_polycurve_height(
            polycurve, thickness, offset)
        p1.origincurve = polycurve
        p1.colorint = colorrgbint
        for j in range(int(len(p1.extrusion.verts) / 3)):
            p1.colorlst.append(colorrgbint)
        return p1

    @classmethod
    def by_baseline_height(self, baseline: Line, height: float, thickness: float, name: str, colorrgbint):
        # place panel vertical from baseline
        p1 = Panel()
        p1.name = name
        p1.thickness = thickness
        polycurve = PolyCurve.by_points(
            [baseline.start,
             baseline.end,
             Point.translate(baseline.end, Vector3(0, 0, height)),
             Point.translate(baseline.start, Vector3(0, 0, height))])
        p1.extrusion = Extrusion.by_polycurve_height(polycurve, thickness, 0)
        p1.origincurve = polycurve
        for j in range(int(len(p1.extrusion.verts) / 3)):
            p1.colorlst.append(colorrgbint)
        return p1



class BoundingBox2d:
    """Represents a two-dimensional bounding box."""
    def __init__(self):
        self.id = generateID()
        self.type = __class__.__name__
        self.points = []
        self.corners = []
        self.isClosed = True
        self.length = 0
        self.width = 0
        self.z = 0

    def serialize(self) -> dict:
        """Serializes the bounding box's attributes into a dictionary.

        #### Returns:
        `dict`: A dictionary containing the serialized attributes of the bounding box.

        #### Example usage:
        ```python
        bbox2d = BoundingBox2d()
        serialized_bbox = bbox2d.serialize()
        ```
        """
        id_value = str(self.id) if not isinstance(
            self.id, (str, int, float)) else self.id
        return {
            'id': id_value,
            'points': self.points,
            'corners': self.corners,
            'isClosed': self.isClosed,
            'length': self.length,
            'width': self.width,
            'z': self.z
        }

    @staticmethod
    def deserialize(data: dict):
        bounding_box = BoundingBox2d()
        bounding_box.id = data.get('id')
        bounding_box.points = data.get('points', [])
        bounding_box.corners = data.get('corners', [])
        bounding_box.isClosed = data.get('isClosed', True)
        bounding_box.length = data.get('length', 0)
        bounding_box.width = data.get('width', 0)
        bounding_box.z = data.get('z', 0)

        return bounding_box

    def _length(self):
        return 0

    def area(self):
        return 0

    def by_points(self, points: list[Point]) -> 'BoundingBox2d':
        """Constructs a 2D bounding box based on a list of points.

        Calculates the minimum and maximum x and y values from the points to define the corners of the bounding box.

        #### Parameters:
        - `points` (list[Point]): A list of Point objects to calculate the bounding box from.

        #### Returns:
        `BoundingBox2d`: The bounding box instance with updated corners based on the provided points.

        #### Example usage:
        ```python
        points = [Point(0, 0, 0), Point(2, 2, 0), Point(2, 0, 0), Point(0, 2, 0)]
        bbox = BoundingBox2d().by_points(points)
        # BoundingBox2d with corners at (0, 0, 0), (2, 2, 0), (2, 0, 0), and (0, 2, 0)
        ```
        """

        self.points = points
        x_values = [point.x for point in self.points]
        y_values = [point.y for point in self.points]

        min_x = min(x_values)
        max_x = max(x_values)
        min_y = min(y_values)
        max_y = max(y_values)

        left_top = Point(x=min_x, y=max_y, z=self.z)
        left_bottom = Point(x=min_x, y=min_y, z=self.z)
        right_top = Point(x=max_x, y=max_y, z=self.z)
        right_bottom = Point(x=max_x, y=min_y, z=self.z)
        self.length = abs(Point.distance(left_top, left_bottom))
        self.width = abs(Point.distance(left_top, right_top))
        self.corners.append(left_top)
        self.corners.append(left_bottom)
        self.corners.append(right_bottom)
        self.corners.append(right_top)
        return self

    def by_dimensions(self, length: float, width: float) -> 'BoundingBox2d':
        """Constructs a 2D bounding box with specified dimensions, centered at the origin.

        #### Parameters:
        - `length` (float): The length of the bounding box.
        - `width` (float): The width of the bounding box.

        #### Returns:
        `BoundingBox2d`: The bounding box instance with dimensions centered at the origin.

        #### Example usage:
        ```python
        bbox = BoundingBox2d().by_dimensions(length=100, width=50)
        # BoundingBox2d centered at origin with specified length and width
        ```
        """

        # startpoint = Point2D(0,0)
        # widthpoint = Point2D(0,width)
        # widthlengthpoint = Point2D(length,width)
        # lengthpoint = Point2D(length,0)

        half_length = length / 2
        half_width = width / 2

        startpoint = Point2D(-half_length, -half_width)
        widthpoint = Point2D(-half_length, half_width)
        widthlengthpoint = Point2D(half_length, half_width)
        lengthpoint = Point2D(half_length, -half_width)

        self.points.append(startpoint)
        self.corners.append(startpoint)
        self.points.append(widthpoint)
        self.corners.append(widthpoint)
        self.points.append(widthlengthpoint)
        self.corners.append(widthlengthpoint)
        self.points.append(lengthpoint)
        self.corners.append(lengthpoint)

        self.length = length
        self.width = width
        return self


class BoundingBox3d:
    def __init__(self, points=Point):
        self.id = generateID()
        self.type = __class__.__name__
        self.points = points
        self.boundingbox2d = None
        self.coordinatesystem = None
        self.height = None

    def serialize(self):
        id_value = str(self.id) if not isinstance(
            self.id, (str, int, float)) else self.id
        return {
            'id': id_value,
            'type': self.type,
            'points': [point.serialize() for point in self.points]
        }

    @staticmethod
    def deserialize(data):
        points = [Point.deserialize(point_data)
                  for point_data in data.get('points', [])]
        return BoundingBox3d(points)

    def corners(self) -> 'list[Point]':
        """Calculates the eight corners of the 3D bounding box based on the contained points.

        #### Returns:
        `list[Point]`: A list of eight Point objects representing the corners of the bounding box.

        #### Example usage:
        ```python
        bbox3d = BoundingBox3d(points=[Point(1, 1, 1), Point(2, 2, 2)])
        corners = bbox3d.corners()
        # Returns a list of eight points representing the corners of the bounding box
        ```
        """

        x_values = [point.x for point in self.points]
        y_values = [point.y for point in self.points]
        z_values = [point.z for point in self.points]

        min_x = min(x_values)
        max_x = max(x_values)
        min_y = min(y_values)
        max_y = max(y_values)
        min_z = min(z_values)
        max_z = max(z_values)

        left_top_bottom = Point(x=min_x, y=max_y, z=min_z)
        left_bottom_bottom = Point(x=min_x, y=min_y, z=min_z)
        right_top_bottom = Point(x=max_x, y=max_y, z=min_z)
        right_bottom_bottom = Point(x=max_x, y=min_y, z=min_z)

        left_top_top = Point(x=min_x, y=max_y, z=max_z)
        left_bottom_top = Point(x=min_x, y=min_y, z=max_z)
        right_top_top = Point(x=max_x, y=max_y, z=max_z)
        right_bottom_top = Point(x=max_x, y=min_y, z=max_z)

        return [left_top_bottom, left_top_top, right_top_top, right_top_bottom, left_top_bottom, left_bottom_bottom, left_bottom_top, left_top_top, left_bottom_top, right_bottom_top, right_bottom_bottom, left_bottom_bottom, right_bottom_bottom, right_top_bottom, right_top_top, right_bottom_top]

    def perimeter(self):
        return PolyCurve.by_points(self.corners(self.points))

    def convert_boundingbox_2d(self, boundingbox2d: 'BoundingBox2d', coordinatesystem: 'CoordinateSystem', height: 'float') -> 'BoundingBox3d':
        """Converts a 2D bounding box into a 3D bounding box using a specified coordinate system and height.

        #### Parameters:
        - `boundingbox2d` (BoundingBox2d): The 2D bounding box to be converted.
        - `coordinatesystem` (CoordinateSystem): The coordinate system for the 3D bounding box.
        - `height` (float): The height of the 3D bounding box.

        #### Returns:
        `BoundingBox3d`: The instance itself, now representing a 3D bounding box.

        #### Example usage:
        ```python
        bbox2d = BoundingBox2d().by_dimensions(length=100, width=50)
        cs = CoordinateSystem()
        bbox3d = BoundingBox3d().convert_boundingbox_2d(bbox2d, cs, height=30)
        # Converts bbox2d into a 3D bounding box with a specified height and coordinate system
        ```
        """
        self.boundingbox2d = boundingbox2d
        self.coordinatesystem = coordinatesystem
        self.height = height
        return self

    def to_cuboid(self) -> 'Extrusion':
        """Generates an extrusion representing a cuboid from the 3D bounding box dimensions.

        #### Returns:
        `Extrusion`: An Extrusion object that represents a cuboid, matching the dimensions and orientation of the bounding box.

        #### Example usage:
        ```python
        bbox2d = BoundingBox2d().by_dimensions(length=100, width=50)
        cs = CoordinateSystem()
        bbox3d = BoundingBox3d().convert_boundingbox_2d(bbox2d, cs, height=30)
        cuboid = bbox3d.to_cuboid()
        # Generates a cuboid extrusion based on the 3D bounding box
        ```
        """
        pts = self.boundingbox2d.corners
        pc = PolyCurve2D.by_points(pts)
        height = self.height
        cs = self.coordinatesystem
        dirXvector = Vector3.angle_between(CSGlobal.Y_axis, cs.Y_axis)
        pcrot = pc.rotate(dirXvector)  # bug multi direction
        cuboid = Extrusion.by_polycurve_height_vector(
            pcrot, height, CSGlobal, cs.Origin, cs.Z_axis)
        return cuboid

    def to_axis(self, length: 'float' = 1000) -> 'list':
        """Generates lines representing the coordinate axes of the bounding box's coordinate system.

        This method creates three Line objects corresponding to the X, Y, and Z axes of the bounding box's coordinate system. Each line extends from the origin of the coordinate system in the direction of the respective axis.

        #### Parameters:
        - `length` (float, optional): The length of each axis line. Defaults to 1000 units.

        #### Returns:
        `list`: A list containing three Line objects representing the X, Y, and Z axes.

        #### Example usage:
        ```python
        # Assuming `bbox3d` is an instance of BoundingBox3d with a defined coordinate system
        axes_lines = bbox3d.to_axis(length=500)
        # This returns a list of three Line objects representing the X, Y, and Z axes of the bounding box's coordinate system, each 500 units long.
        ```
        """
        if length == None:
            length = 1000
        cs = self.coordinatesystem
        lnX = Line.by_startpoint_direction_length(cs.Origin, cs.Xaxis, length)
        lnY = Line.by_startpoint_direction_length(cs.Origin, cs.Y_axis, length)
        lnZ = Line.by_startpoint_direction_length(cs.Origin, cs.Z_axis, length)
        return [lnX, lnY, lnZ]




class System:
    """Represents a generic system with a defined direction."""
    def __init__(self):
        """Initializes a new System instance.
        
        - `type` (str): The class name, indicating the object type as "System".
        - `name` (str, optional): The name of the system.
        - `id` (str): A unique identifier for the system instance.
        - `polycurve` (PolyCurve, optional): An optional PolyCurve associated with the system.
        - `direction` (Vector3): A Vector3 indicating the primary direction of the system.
        """
        self.type = __class__.__name__
        self.name = None
        self.id = generateID()
        self.polycurve = None
        self.direction: Vector3 = Vector3(1, 0, 0)


class DivisionSystem:
    # This class provides divisionsystems. It returns lists with floats based on a length.
    """The `DivisionSystem` class manages division systems, providing functionalities to calculate divisions and spacings based on various criteria."""
    def __init__(self):
        """Initializes a new DivisionSystem instance.

        - `type` (str): The class name, "DivisionSystem".
        - `name` (str): The name of the division system.
        - `id` (str): A unique identifier for the division system instance.
        - `system_length` (float): The total length of the system to be divided.
        - `spacing` (float): The spacing between divisions.
        - `distance_first` (float): The distance of the first division from the start of the system.
        - `width_stud` (float): The width of a stud, applicable in certain division strategies.
        - `fixed_number` (int): A fixed number of divisions.
        - `modifier` (int): A modifier value that adjusts the number of divisions or their placement.
        - `distances` (list): A list containing the cumulative distances of each division from the start.
        - `spaces` (list): A list containing the spaces between each division.
        - `system` (str): A string indicating the current system strategy (e.g., "fixed_distance_unequal_division").
        """
        self.type = __class__.__name__
        self.name = None
        self.id = generateID()
        self.system_length: float = 100
        self.spacing: float = 10
        self.distance_first: float = 5
        self.width_stud: float = 10
        self.fixed_number: int = 2
        self.modifier: int = 0
        self.distances = []  # List with sum of distances
        self.spaces = []  # List with spaces between every divison
        self.system: str = "fixed_distance_unequal_division"

    def __fixed_number_equal_spacing(self):
        """Calculates divisions based on a fixed number with equal spacing.
        This internal method sets up divisions across the system length, ensuring each division is equally spaced. It is triggered by configurations that require a fixed number of divisions, automatically adjusting the spacing to fit the total length.

        #### Effects:
        - Sets the division system name to "fixed_number_equal_spacing".
        - Calculates equal spacing between divisions based on the total system length and the fixed number of divisions.
        - Resets the modifier to 0, as it is not applicable in this configuration.
        - Assigns the calculated spacing to `distance_first` to maintain consistency at the start of the system.
        """
        self.name = "fixed_number_equal_spacing"
        self.distances = Interval.by_start_end_count(
            0, self.system_length, self.fixed_number)
        self.spacing = self.system_length / self.fixed_number
        self.modifier = 0
        self.distance_first = self.spacing

    def __fixed_distance_unequal_division(self):
        """Configures divisions with a fixed starting distance followed by unequal divisions.
        This internal method configures the division system to start with a specified distance for the first division, then continues with divisions spaced according to `spacing`. If the total length cannot be evenly divided, the last division's spacing may differ.

        #### Effects:
        - Sets the division system name to "fixed_distance_unequal_division".
        - Calculates the number of divisions based on the spacing and the total system length minus the first division's distance.
        - Generates a list of distances where each division should occur, considering the initial distance and spacing.
        """
        self.name = "fixed_distance_unequal_division"
        rest_length = self.system_length - self.distance_first
        number_of_studs = int(rest_length / self.spacing)
        number_of_studs = number_of_studs + self.modifier
        distance = self.distance_first
        for i in range(number_of_studs+1):
            if distance < self.system_length:
                self.distances.append(distance)
            else:
                break
            distance = distance + self.spacing

    def __fixed_distance_equal_division(self):
        """Creates divisions with equal spacing across the total system length.
        An internal method that evenly distributes divisions across the system's length. It takes into account the total length and the desired spacing to calculate the number of divisions, ensuring they are equally spaced.

        #### Effects:
        - Sets the division system name to "fixed_distance_equal_division".
        - Calculates the number of divisions based on the desired spacing and total length.
        - Determines the starting distance for the first division to ensure all divisions, including the first and last, are equally spaced within the system length.
        """
        self.name = "fixed_distance_equal_division"
        number_of_studs = int(self.system_length / self.spacing)
        number_of_studs = number_of_studs + self.modifier
        sum_length_studs_x_spacing = (number_of_studs - 1) * self.spacing
        rest_length = self.system_length - sum_length_studs_x_spacing
        distance = rest_length / 2
        for i in range(number_of_studs):
            self.distances.append(distance)
            distance = distance + self.spacing

    def by_fixed_distance_unequal_division(self, length: float, spacing: float, distance_first: float, modifier: int) -> 'DivisionSystem':
        """Configures the division system for unequal divisions with a specified distance first.
        This method sets up the division system to calculate divisions based on a fixed initial distance, followed by unevenly spaced divisions according to the specified parameters.

        #### Parameters:
        - `length` (float): The total length of the system to be divided.
        - `spacing` (float): The target spacing between divisions.
        - `distance_first` (float): The distance of the first division from the system's start.
        - `modifier` (int): An integer modifier to adjust the calculation of divisions.

        #### Returns:
        `DivisionSystem`: The instance itself, updated with the new division configuration.

        #### Example usage:
        ```python
        division_system = DivisionSystem()
        division_system.by_fixed_distance_unequal_division(100, 10, 5, 0)
        ```
        """
        self.system_length = length
        self.modifier = modifier
        self.spacing = spacing
        self.distance_first = distance_first
        self.system = "fixed_distance_unequal_division"
        self.__fixed_distance_unequal_division()
        return self

    def by_fixed_distance_equal_division(self, length: float, spacing: float, modifier: int) -> 'DivisionSystem':
        """Configures the division system for equal divisions with fixed spacing.
        This method sets up the division system to calculate divisions based on a fixed spacing between each division across the total system length. The modifier can adjust the calculation slightly but maintains equal spacing.

        #### Parameters:
        - `length` (float): The total length of the system to be divided.
        - `spacing` (float): The spacing between each division.
        - `modifier` (int): An integer modifier to fine-tune the division process.

        #### Returns:
        `DivisionSystem`: The instance itself, updated with the new division configuration.

        #### Example usage:
        ```python
        division_system = DivisionSystem()
        division_system.by_fixed_distance_equal_division(100, 10, 0)
        ```
        """
        self.system_length = length
        self.modifier = modifier
        self.spacing = spacing
        self.system = "fixed_distance_equal_division"
        self.__fixed_distance_equal_division()
        return self

    def by_fixed_number_equal_spacing(self, length: float, number: int) -> 'DivisionSystem':
        """Establishes the division system for a fixed number of divisions with equal spacing.
        This method arranges for a certain number of divisions to be spaced equally across the system length. It calculates the required spacing based on the total length and desired number of divisions.

        #### Parameters:
        - `length` (float): The total length of the system to be divided.
        - `number` (int): The fixed number of divisions to be created.

        #### Returns:
        `DivisionSystem`: The instance itself, updated with the new division configuration.

        #### Example usage:
        ```python
        division_system = DivisionSystem()
        division_system.by_fixed_number_equal_spacing(100, 5)
        ```
        """
        self.system_length = length
        self.system = "fixed_number_equal_spacing"
        self.spacing = length/number
        self.modifier = 0
        distance = self.spacing
        for i in range(number-1):
            self.distances.append(distance)
            distance = distance + self.spacing
        self.distance_first = self.spacing
        return self

        #  fixed_number_equal_interior_fill
        #  maximum_spacing_equal_division
        #  maximum_spacing_unequal_division
        #  minimum_spacing_equal_division
        #  minimum_spacing_unequal_division


class RectangleSystem:
    # Reclangle Left Bottom is in Local XYZ. Main direction parallel to height direction vector. Top is z=0
    """The `RectangleSystem` class is designed to represent and manipulate rectangular systems, focusing on dimensions, frame types, and panel arrangements within a specified coordinate system."""
    def __init__(self):
        """Initializes a new RectangleSystem instance.
        
        - `type` (str): Class name, indicating the object type as "RectangleSystem".
        - `name` (str, optional): The name of the rectangle system.
        - `id` (str): A unique identifier for the rectangle system instance.
        - `height` (float): The height of the rectangle system.
        - `width` (float): The width of the rectangle system.
        - `bottom_frame_type` (Rectangle): A `Rectangle` instance for the bottom frame type.
        - `top_frame_type` (Rectangle): A `Rectangle` instance for the top frame type.
        - `left_frame_type` (Rectangle): A `Rectangle` instance for the left frame type.
        - `right_frame_type` (Rectangle): A `Rectangle` instance for the right frame type.
        - `inner_frame_type` (Rectangle): A `Rectangle` instance for the inner frame type.
        - `material` (BaseTimber): The material used for the system, pre-defined as `BaseTimber`.
        - `inner_width` (float): The computed inner width of the rectangle system, excluding the width of the left and right frames.
        - `inner_height` (float): The computed inner height of the rectangle system, excluding the height of the top and bottom frames.
        - `coordinatesystem` (CSGlobal): A global coordinate system applied to the rectangle system.
        - `local_coordinate_system` (CSGlobal): A local coordinate system specific to the rectangle system.
        - `division_system` (DivisionSystem, optional): A `DivisionSystem` instance to manage divisions within the rectangle system.
        - `inner_frame_objects` (list): A list of inner frame objects within the rectangle system.
        - `outer_frame_objects` (list): A list of outer frame objects.
        - `panel_objects` (list): A list of panel objects used within the system.
        - `symbolic_inner_mother_surface` (PolyCurve, optional): A symbolic representation of the inner mother surface.
        - `symbolic_inner_panels` (list, optional): Symbolic representations of inner panels.
        - `symbolic_outer_grids` (list): Symbolic representations of outer grids.
        - `symbolic_inner_grids` (list): Symbolic representations of inner grids.
        """
        self.type = __class__.__name__
        self.name = None
        self.id = generateID()
        self.height = 3000
        self.width = 2000
        self.bottom_frame_type = Rectangle("bottom_frame_type", 38, 184)
        self.top_frame_type = Rectangle("top_frame_type", 38, 184)
        self.left_frame_type = Rectangle("left_frame_type", 38, 184)
        self.right_frame_type = Rectangle("left_frame_type", 38, 184)
        self.inner_frame_type = Rectangle("inner_frame_type", 38, 184)

        self.material = BaseTimber
        self.inner_width: float = 0
        self.inner_height: float = 0
        self.coordinatesystem = CSGlobal
        self.local_coordinate_system = CSGlobal
        # self.openings = []
        # self.subsystems = []
        self.division_system = None
        self.inner_frame_objects = []
        self.outer_frame_objects = []
        self.panel_objects = []
        self.symbolic_inner_mother_surface = None
        self.symbolic_inner_panels = None
        self.symbolic_outer_grids = []
        self.symbolic_inner_grids = []

    def __inner_panels(self):
        """Calculates and creates inner panel objects for the RectangleSystem.
        This method iteratively calculates the positions and dimensions of inner panels based on the division system's distances and the inner frame type's width. It populates the `panel_objects` list with created panels.

        #### Effects:
        - Populates `panel_objects` with Panel instances representing the inner panels of the rectangle system.
        """
        # First Inner panel
        i = self.division_system.distances[0]
        point1 = self.mother_surface_origin_point_x_zero
        point2 = Point.translate(self.mother_surface_origin_point_x_zero, Vector3(
            i - self.inner_frame_type.b * 0.5, 0, 0))
        point3 = Point.translate(self.mother_surface_origin_point_x_zero,
                                 Vector3(i - self.inner_frame_type.b * 0.5, self.inner_height, 0))
        point4 = Point.translate(
            self.mother_surface_origin_point_x_zero, Vector3(0, self.inner_height, 0))
        self.panel_objects.append(
            Panel.by_polycurve_thickness(
                PolyCurve.by_points(
                    [point1, point2, point3, point4, point1]), 184, 0, "innerpanel",
                rgb_to_int([255, 240, 160]))
        )
        count = 0
        # In between
        for i in self.division_system.distances:
            try:
                point1 = Point.translate(self.mother_surface_origin_point_x_zero, Vector3(
                    self.division_system.distances[count]+self.inner_frame_type.b*0.5, 0, 0))
                point2 = Point.translate(self.mother_surface_origin_point_x_zero, Vector3(
                    self.division_system.distances[count+1]-self.inner_frame_type.b*0.5, 0, 0))
                point3 = Point.translate(self.mother_surface_origin_point_x_zero, Vector3(
                    self.division_system.distances[count+1]-self.inner_frame_type.b*0.5, self.inner_height, 0))
                point4 = Point.translate(self.mother_surface_origin_point_x_zero, Vector3(
                    self.division_system.distances[count]+self.inner_frame_type.b*0.5, self.inner_height, 0))
                self.panel_objects.append(
                    Panel.by_polycurve_thickness(
                        PolyCurve.by_points([point1, point2, point3, point4, point1]), 184, 0, "innerpanel", rgb_to_int([255, 240, 160]))
                )
                count = count + 1
            except:
                # Last panel
                point1 = Point.translate(self.mother_surface_origin_point_x_zero, Vector3(
                    self.division_system.distances[count]+self.inner_frame_type.b*0.5, 0, 0))
                point2 = Point.translate(self.mother_surface_origin_point_x_zero, Vector3(
                    self.inner_width+self.left_frame_type.b, 0, 0))
                point3 = Point.translate(self.mother_surface_origin_point_x_zero, Vector3(
                    self.inner_width+self.left_frame_type.b, self.inner_height, 0))
                point4 = Point.translate(self.mother_surface_origin_point_x_zero, Vector3(
                    self.division_system.distances[count]+self.inner_frame_type.b*0.5, self.inner_height, 0))
                self.panel_objects.append(
                    Panel.by_polycurve_thickness(
                        PolyCurve.by_points([point1, point2, point3, point4, point1]), 184, 0, "innerpanel", rgb_to_int([255, 240, 160]))
                )
                count = count + 1

    def __inner_mother_surface(self):
        """Determines the inner mother surface dimensions and creates its symbolic representation.
        Calculates the inner width and height by subtracting the frame widths from the total width and height. It then constructs a symbolic PolyCurve representing the mother surface within the rectangle system's frames.

        #### Effects:
        - Updates `inner_width` and `inner_height` attributes based on frame dimensions.
        - Creates a symbolic PolyCurve `symbolic_inner_mother_surface` representing the inner mother surface.
        """
        # Inner mother surface is the surface within the outer frames dependent on the width of the outer frametypes.
        self.inner_width = self.width-self.left_frame_type.b-self.right_frame_type.b
        self.inner_height = self.height-self.top_frame_type.b-self.bottom_frame_type.b
        self.mother_surface_origin_point = Point(
            self.left_frame_type.b, self.bottom_frame_type.b, 0)
        self.mother_surface_origin_point_x_zero = Point(
            0, self.bottom_frame_type.b, 0)
        self.symbolic_inner_mother_surface = PolyCurve.by_points(
            [self.mother_surface_origin_point,
             Point.translate(self.mother_surface_origin_point,
                             Vector3(self.inner_width, 0, 0)),
             Point.translate(self.mother_surface_origin_point, Vector3(
                 self.inner_width, self.inner_height, 0)),
             Point.translate(self.mother_surface_origin_point,
                             Vector3(0, self.inner_height, 0)),
             self.mother_surface_origin_point]
        )

    def __inner_frames(self):
        """Creates inner frame objects based on division distances within the rectangle system.
        Utilizes the division distances to place vertical frames across the inner width of the rectangle system. These frames are represented both as Frame objects within the system and as symbolic lines for visualization.

        #### Effects:
        - Generates Frame objects for each division, placing them vertically within the rectangle system.
        - Populates `inner_frame_objects` with these Frame instances.
        - Adds symbolic representations of these frames to `symbolic_inner_grids`.
        """
        for i in self.division_system.distances:
            start_point = Point.translate(
                self.mother_surface_origin_point_x_zero, Vector3(i, 0, 0))
            end_point = Point.translate(
                self.mother_surface_origin_point_x_zero, Vector3(i, self.inner_height, 0))
            self.inner_frame_objects.append(
                Frame.by_start_point_endpoint_curve_justifiction(
                    start_point, end_point, self.inner_frame_type.curve, "innerframe", "center", "top", 0, self.material)
            )
            self.symbolic_inner_grids.append(
                Line(start=start_point, end=end_point))

    def __outer_frames(self):
        """Generates the outer frame objects for the rectangle system.
        Creates Frame objects for the bottom, top, left, and right boundaries of the rectangle system. Each frame is defined by its start and end points, along with its type and material. Symbolic lines representing these frames are also generated for visualization.

        #### Effects:
        - Creates Frame instances for the outer boundaries of the rectangle system and adds them to `outer_frame_objects`.
        - Generates symbolic Line instances for each outer frame and adds them to `symbolic_outer_grids`.
        """
        bottomframe = Frame.by_start_point_endpoint_curve_justifiction(Point(0, 0, 0), Point(
            self.width, 0, 0), self.bottom_frame_type.curve, "bottomframe", "left", "top", 0, self.material)
        self.symbolic_outer_grids.append(
            Line(start=Point(0, 0, 0), end=Point(self.width, 0, 0)))

        topframe = Frame.by_start_point_endpoint_curve_justifiction(Point(0, self.height, 0), Point(
            self.width, self.height, 0), self.top_frame_type.curve, "bottomframe", "right", "top", 0, self.material)
        self.symbolic_outer_grids.append(
            Line(start=Point(0, self.height, 0), end=Point(self.width, self.height, 0)))

        leftframe = Frame.by_start_point_endpoint_curve_justifiction(Point(0, self.bottom_frame_type.b, 0), Point(
            0, self.height-self.top_frame_type.b, 0), self.left_frame_type.curve, "leftframe", "right", "top", 0, self.material)
        self.symbolic_outer_grids.append(Line(start=Point(
            0, self.bottom_frame_type.b, 0), end=Point(0, self.height-self.top_frame_type.b, 0)))

        rightframe = Frame.by_start_point_endpoint_curve_justifiction(Point(self.width, self.bottom_frame_type.b, 0), Point(
            self.width, self.height-self.top_frame_type.b, 0), self.right_frame_type.curve, "leftframe", "left", "top", 0, self.material)
        self.symbolic_outer_grids.append(Line(start=Point(self.width, self.bottom_frame_type.b, 0), end=Point(
            self.width, self.height-self.top_frame_type.b, 0)))

        self.outer_frame_objects.append(bottomframe)
        self.outer_frame_objects.append(topframe)
        self.outer_frame_objects.append(leftframe)
        self.outer_frame_objects.append(rightframe)

    def by_width_height_divisionsystem_studtype(self, width: float, height: float, frame_width: float, frame_height: float, division_system: DivisionSystem, filling: bool) -> 'RectangleSystem':
        """Configures the rectangle system with specified dimensions, division system, and frame types.
        This method sets the dimensions of the rectangle system, configures the frame types based on the provided dimensions, and applies a division system to generate inner frames. Optionally, it can also fill the system with panels based on the inner divisions.

        #### Parameters:
        - `width` (float): The width of the rectangle system.
        - `height` (float): The height of the rectangle system.
        - `frame_width` (float): The width of the frame elements.
        - `frame_height` (float): The height (thickness) of the frame elements.
        - `division_system` (DivisionSystem): The division system to apply for inner divisions.
        - `filling` (bool): A flag indicating whether to fill the divided areas with panels.

        #### Returns:
        `RectangleSystem`: The instance itself, updated with the new configuration.

        #### Example usage:
        ```python
        rectangle_system = RectangleSystem()
        rectangle_system.by_width_height_divisionsystem_studtype(2000, 3000, 38, 184, divisionSystem, True)
        ```
        """
        self.width = width
        self.height = height
        self.bottom_frame_type = Rectangle(
            "bottom_frame_type", frame_width, frame_height)
        self.top_frame_type = Rectangle(
            "top_frame_type", frame_width, frame_height)
        self.left_frame_type = Rectangle(
            "left_frame_type", frame_width, frame_height)
        self.right_frame_type = Rectangle(
            "left_frame_type", frame_width, frame_height)
        self.inner_frame_type = Rectangle(
            "inner_frame_type", frame_width, frame_height)
        self.division_system = division_system
        self.__inner_mother_surface()
        self.__inner_frames()
        self.__outer_frames()
        if filling:
            self.__inner_panels()
        else:
            pass
        return self


class pattern_system:
    """The `pattern_system` class is designed to define and manipulate patterns for architectural or design applications. It is capable of generating various patterns based on predefined or dynamically generated parameters."""
    def __init__(self):
        """Initializes a new pattern_system instance."""
        self.type = __class__.__name__
        self.name = None
        self.id = generateID()
        self.pattern = None
        self.basepanels = []  # contains a list with basepanels of the system
        # contains a list sublists with Vector3 which represent the repetition of the system
        self.vectors = []

    def stretcher_bond_with_joint(self, name: str, brick_width: float, brick_length: float, brick_height: float, joint_width: float, joint_height: float):
        """Configures a stretcher bond pattern with joints for the pattern_system.
        Establishes the fundamental vectors and base panels for a stretcher bond, taking into account brick dimensions and joint sizes. This pattern alternates bricks in each row, offsetting them by half a brick length.

        #### Parameters:
        - `name` (str): Name of the pattern configuration.
        - `brick_width` (float): Width of the brick.
        - `brick_length` (float): Length of the brick.
        - `brick_height` (float): Height of the brick.
        - `joint_width` (float): Width of the joint between bricks.
        - `joint_height` (float): Height of the joint between brick layers.

        #### Returns:
        The instance itself, updated with the stretcher bond pattern configuration.
    
        #### Example usage:
        ```python

        ```
        """
        self.name = name
        # Vectors of panel 1
        V1 = Vector3(0, (brick_height + joint_height)*2, 0)  # dy
        V2 = Vector3(brick_length+joint_width, 0, 0)  # dx
        self.vectors.append([V1, V2])

        # Vectors of panel 2
        V3 = Vector3(0, (brick_height + joint_height) * 2, 0)  # dy
        V4 = Vector3(brick_length + joint_width, 0, 0)  # dx
        self.vectors.append([V3, V4])

        dx = (brick_length+joint_width)/2
        dy = brick_height+joint_height

        PC1 = PolyCurve().by_points([Point(0, 0, 0), Point(0, brick_height, 0), Point(
            brick_length, brick_height, 0), Point(brick_length, 0, 0), Point(0, 0, 0)])
        PC2 = PolyCurve().by_points([Point(dx, dy, 0), Point(dx, brick_height+dy, 0), Point(
            brick_length+dx, brick_height+dy, 0), Point(brick_length+dx, dy, 0), Point(dx, dy, 0)])
        BasePanel1 = Panel.by_polycurve_thickness(
            PC1, brick_width, 0, "BasePanel1", BaseBrick.colorint)
        BasePanel2 = Panel.by_polycurve_thickness(
            PC2, brick_width, 0, "BasePanel2", BaseBrick.colorint)

        self.basepanels.append(BasePanel1)
        self.basepanels.append(BasePanel2)
        return self

    def tile_bond_with_joint(self, name: str, tile_width: float, tile_height: float, tile_thickness: float, joint_width: float, joint_height: float):
        """Configures a tile bond pattern with specified dimensions and joint sizes for the pattern_system.
        Defines a simple tiling pattern where tiles are laid out in rows and columns, separated by specified joint widths and heights. This method sets up base panels to represent individual tiles and their arrangement vectors.

        #### Parameters:
        - `name` (str): The name of the tile bond pattern configuration.
        - `tile_width` (float): The width of a single tile.
        - `tile_height` (float): The height of a single tile.
        - `tile_thickness` (float): The thickness of the tile.
        - `joint_width` (float): The width of the joint between adjacent tiles.
        - `joint_height` (float): The height of the joint between tile rows.

        #### Returns:
        The instance itself, updated with the tile bond pattern configuration.

        #### Example Usage:
        ```python
        pattern_system = pattern_system()
        pattern_system.tile_bond_with_joint('TilePattern', 200, 300, 10, 5, 5)
        ```
        This configures the `pattern_system` with a tile bond pattern named 'TilePattern', where each tile measures 200x300x10 units, with 5 units of spacing between tiles.
        """
        self.name = name
        # Vectors of panel 1
        V1 = Vector3(0, (tile_height + joint_height), 0)  # dy
        V2 = Vector3(tile_width+joint_width, 0, 0)  # dx
        self.vectors.append([V1, V2])

        PC1 = PolyCurve().by_points([Point(0, 0, 0), Point(0, tile_height, 0), Point(
            tile_width, tile_height, 0), Point(tile_width, 0, 0)])
        BasePanel1 = Panel.by_polycurve_thickness(
            PC1, tile_thickness, 0, "BasePanel1", BaseBrick.colorint)

        self.basepanels.append(BasePanel1)
        return self

    def cross_bond_with_joint(self, name: str, brick_width: float, brick_length: float, brick_height: float, joint_width: float, joint_height: float):
        """Configures a cross bond pattern with joints for the pattern_system.
        Sets up a complex brick laying pattern combining stretcher (lengthwise) and header (widthwise) bricks in alternating rows, creating a cross bond appearance. This method defines the base panels and their positioning vectors to achieve the cross bond pattern.

        #### Parameters:
        - `name` (str): The name of the cross bond pattern configuration.
        - `brick_width` (float): The width of a single brick.
        - `brick_length` (float): The length of the brick.
        - `brick_height` (float): The height of the brick layer.
        - `joint_width` (float): The width of the joint between bricks.
        - `joint_height` (float): The height of the joint between brick layers.

        #### Returns:
        The instance itself, updated with the cross bond pattern configuration.

        #### Example Usage:
        ```python
        pattern_system = pattern_system()
        pattern_system.cross_bond_with_joint('CrossBondPattern', 90, 190, 80, 10, 10)
        ```
        In this configuration, `pattern_system` is set to a cross bond pattern named 'CrossBondPattern', with bricks measuring 90x190x80 units and 10 units of joint spacing in both directions.
        """
        self.name = name
        lagenmaat = brick_height + joint_height
        # Vectors of panel 1 (strek)
        V1 = Vector3(0, (brick_height + joint_height) * 4, 0)  # dy spacing
        V2 = Vector3(brick_length + joint_width, 0, 0)  # dx spacing
        self.vectors.append([V1, V2])

        # Vectors of panel 2 (koppen 1)
        V3 = Vector3(0, (brick_height + joint_height) * 2, 0)  # dy spacing
        V4 = Vector3(brick_length + joint_width, 0, 0)  # dx spacing
        self.vectors.append([V3, V4])

        dx2 = (brick_width + joint_width)/2  # start x offset
        dy2 = lagenmaat  # start y offset

        # Vectors of panel 3 (strekken)
        V5 = Vector3(0, (brick_height + joint_height) * 4, 0)  # dy spacing
        V6 = Vector3(brick_length + joint_width, 0, 0)  # dx spacing
        self.vectors.append([V5, V6])

        dx3 = (brick_length + joint_width)/2  # start x offset
        dy3 = lagenmaat * 2  # start y offset

        # Vectors of panel 4 (koppen 2)
        V7 = Vector3(0, (brick_height + joint_height) * 2, 0)  # dy spacing
        V8 = Vector3(brick_length + joint_width, 0, 0)  # dx spacing
        self.vectors.append([V7, V8])

        dx4 = (brick_width + joint_width)/2 + \
            (brick_width + joint_width)  # start x offset
        dy4 = lagenmaat  # start y offset

        PC1 = PolyCurve().by_points([Point(0, 0, 0), Point(0, brick_height, 0), Point(
            brick_length, brick_height, 0), Point(brick_length, 0, 0), Point(0, 0, 0)])
        PC2 = PolyCurve().by_points([Point(dx2, dy2, 0), Point(dx2, brick_height+dy2, 0), Point(
            brick_width+dx2, brick_height+dy2, 0), Point(brick_width+dx2, dy2, 0), Point(dx2, dy2, 0)])
        PC3 = PolyCurve().by_points([Point(dx3, dy3, 0), Point(dx3, brick_height+dy3, 0), Point(
            brick_length+dx3, brick_height+dy3, 0), Point(brick_length+dx3, dy3, 0), Point(dx3, dy3, 0)])
        PC4 = PolyCurve().by_points([Point(dx4, dy4, 0), Point(dx4, brick_height+dy4, 0), Point(
            brick_width+dx4, brick_height+dy4, 0), Point(brick_width+dx4, dy4, 0), Point(dx4, dy4, 0)])

        BasePanel1 = Panel.by_polycurve_thickness(
            PC1, brick_width, 0, "BasePanel1", BaseBrick.colorint)
        BasePanel2 = Panel.by_polycurve_thickness(
            PC2, brick_width, 0, "BasePanel2", BaseBrick.colorint)
        BasePanel3 = Panel.by_polycurve_thickness(
            PC3, brick_width, 0, "BasePanel3", BaseBrick.colorint)
        BasePanel4 = Panel.by_polycurve_thickness(
            PC4, brick_width, 0, "BasePanel4", BaseBrickYellow.colorint)

        self.basepanels.append(BasePanel1)
        self.basepanels.append(BasePanel2)
        self.basepanels.append(BasePanel3)
        self.basepanels.append(BasePanel4)

        return self


def pattern_geom(pattern_system, width: float, height: float, start_point: Point = None) -> list[Panel]:
    """Generates a geometric pattern based on a pattern_system within a specified area.
    Takes a pattern_system and fills a defined width and height area starting from an optional start point with the pattern described by the system.

    #### Parameters:
    - `pattern_system`: The pattern_system instance defining the pattern.
    - `width` (float): Width of the area to fill with the pattern.
    - `height` (float): Height of the area to fill with the pattern.
    - `start_point` (Point, optional): Starting point for the pattern generation.

    #### Returns:
    `list[Panel]`: A list of Panel instances constituting the generated pattern.
    
    #### Example usage:
    ```python

    ```
    """
    start_point = start_point or Point(0, 0, 0)
    test = pattern_system
    panels = []

    for i, j in zip(test.basepanels, test.vectors):
        ny = int(height / (j[0].y))  # number of panels in y-direction
        nx = int(width / (j[1].x))  # number of panels in x-direction
        PC = i.origincurve
        thickness = i.thickness
        color = i.colorint

        # YX ARRAY
        yvectdisplacement = j[0]
        yvector = Point.to_vector(start_point)
        xvectdisplacement = j[1]
        xvector = Vector3(0, 0, 0)

        ylst = []
        for k in range(ny):
            yvector = Vector3.sum(yvectdisplacement, yvector)
            for l in range(nx):
                # Copy in x-direction
                xvector = Vector3.sum(xvectdisplacement, xvector)
                xyvector = Vector3.sum(yvector, xvector)
                # translate curve in x and y-direction
                PCNew = PolyCurve.copy_translate(PC, xyvector)
                pan = Panel.by_polycurve_thickness(
                    PCNew, thickness, 0, "name", color)
                panels.append(pan)
            xvector = Vector3.sum(
                xvectdisplacement, Vector3(-test.basepanels[0].origincurve.curves[1].length, 0, 0))
    return panels


def fillin(perimeter: PolyCurve2D, pattern: pattern_geom) -> pattern_system:
    """Fills in a given perimeter with a specified pattern.
    Uses a bounding box to define the perimeter within which a pattern is applied, based on a geometric pattern generation function.

    #### Parameters:
    - `perimeter` (PolyCurve2D): The 2D perimeter to fill in.
    - `pattern` (function): The pattern generation function to apply within the perimeter.

    #### Returns:
    `pattern_system`: A pattern_system object that represents the filled-in area.
    
    #### Example usage:
    ```python

    ```
    """

    bb = BoundingBox2d().by_points(perimeter.points)

    for pt in bb.corners:
        project.objects.append(pt)
    bb_perimeter = PolyCurve.by_points(bb.corners)

    return [bb_perimeter]



def rgb_to_int(rgb):
    r, g, b = [max(0, min(255, c)) for c in rgb]

    return (255 << 24) | (r << 16) | (g << 8) | b

class Material:
    def __init__(self):
        self.name = "none"
        self.color = None
        self.colorint = None

    @classmethod
    def byNameColor(cls, name, color):
        M1 = Material()
        M1.name = name
        M1.color = color
        M1.colorint = rgb_to_int(color)
        return M1


#Building Materials
BaseConcrete = Material.byNameColor("Concrete", Color().RGB([192, 192, 192]))
BaseTimber = Material.byNameColor("Timber", Color().RGB([191, 159, 116]))
BaseSteel = Material.byNameColor("Steel", Color().RGB([237, 28, 36]))
BaseOther = Material.byNameColor("Other", Color().RGB([150, 150, 150]))
BaseBrick = Material.byNameColor("Brick", Color().RGB([170, 77, 47]))
BaseBrickYellow = Material.byNameColor("BrickYellow", Color().RGB([208, 187, 147]))

#GIS Materials
BaseBuilding = Material.byNameColor("Building", Color().RGB([150, 28, 36]))
BaseWater = Material.byNameColor("Water", Color().RGB([139, 197, 214]))
BaseGreen = Material.byNameColor("Green", Color().RGB([175, 193, 138]))
BaseInfra = Material.byNameColor("Infra", Color().RGB([234, 234, 234]))
BaseRoads = Material.byNameColor("Infra", Color().RGB([140, 140, 140]))

#class Materialfinish

jsonFile = "https://raw.githubusercontent.com/3BMLabs/Project-Ocondat/master/steelprofile.json"
url = urllib.request.urlopen(jsonFile)
data = json.loads(url.read())


class searchProfile:
    def __init__(self, name):
        self.name = name
        self.shape_coords = None
        self.shape_name = None
        self.synonyms = None
        for item in data:
            for i in item.values():
                synonymList = i[0]["synonyms"]
                #if self.name in synonymList:
                #bools = [self.name.lower() in e for e in [synonym.lower() for synonym in synonymList]]
                #if True in bools:
                if self.name.lower() in [synonym.lower() for synonym in synonymList]:
                    self.shape_coords = i[0]["shape_coords"]
                    self.shape_name = i[0]["shape_name"]
                    self.synonyms = i[0]["synonyms"]


class profiledataToShape:
    def __init__(self, name1, segmented = True):
        profile_data = searchProfile(name1)
        if profile_data == None:
            print(f"profile {name1} not recognised")
        shape_name = profile_data.shape_name
        if shape_name == None:
            profile_data = searchProfile(project.structural_fallback_element)
            err = f"Error, profile '{name1}' not recognised, define in {jsonFile} | fallback: '{project.structural_fallback_element}'"
            print(err)
            shape_name = profile_data.shape_name
        self.profile_data = profile_data
        self.shape_name = shape_name
        name = profile_data.name
        self.d1 = profile_data.shape_coords
        #self.d1.insert(0,name)
        d1 = self.d1
        if shape_name == "C-channel parallel flange":
            prof = CChannelParallelFlange(name,d1[0],d1[1],d1[2],d1[3],d1[4],d1[5])
        elif shape_name == "C-channel sloped flange":
            prof = CChannelSlopedFlange(name,d1[0],d1[1],d1[2],d1[3],d1[4],d1[5],d1[6],d1[7],d1[8])
        elif shape_name == "I-shape parallel flange":
            prof = IShapeParallelFlange(name,d1[0],d1[1],d1[2],d1[3],d1[4])
        elif shape_name == "I-shape sloped flange":
            prof = IShapeParallelFlange(name, d1[0], d1[1], d1[2], d1[3], d1[4])
            #Todo: add sloped flange shape
        elif shape_name == "Rectangle":
            prof = Rectangle(name,d1[0], d1[1])
        elif shape_name == "Round":
            prof = Round(name, d1[1])
        elif shape_name == "Round tube profile":
            prof = Roundtube(name, d1[0], d1[1])
        elif shape_name == "LAngle":
            prof = LAngle(name,d1[0],d1[1],d1[2],d1[3],d1[4],d1[5],d1[6],d1[7])
        elif shape_name == "TProfile":
            prof = TProfile(name, d1[0], d1[1], d1[2], d1[3], d1[4], d1[5], d1[6], d1[7], d1[8])
        elif shape_name == "Rectangle Hollow Section":
            prof = RectangleHollowSection(name,d1[0],d1[1],d1[2],d1[3],d1[4])
        self.prof = prof
        self.data = d1
        pc2d = self.prof.curve  # 2D polycurve
        if segmented == True:
            pc3d = PolyCurve.by_polycurve_2D(pc2d)
            pcsegment = PolyCurve.segment(pc3d, 10)
            pc2d2 = pcsegment.to_polycurve_2D()
        else:
            pc2d2 = pc2d
        self.polycurve2d = pc2d2

def justifictionToVector(plycrv2D: PolyCurve2D, XJustifiction, Yjustification, ey=None, ez=None):
    
    # print(XJustifiction)
    xval = []
    yval = []
    for i in plycrv2D.curves:
        xval.append(i.start.x)
        yval.append(i.start.y)

    #Boundingbox2D
    xmin = min(xval)
    xmax = max(xval)
    ymin = min(yval)
    ymax = max(yval)

    b = xmax-xmin
    h = ymax-ymin

    # print(b, h)

    dxleft = -xmax
    dxright = -xmin
    dxcenter = dxleft - 0.5 * b #CHECK
    dxorigin = 0

    dytop = -ymax
    dybottom = -ymin
    dycenter = dytop - 0.5 * h #CHECK
    dyorigin = 0

    if XJustifiction == "center":
        dx = dxorigin #TODO
    elif XJustifiction == "left":
        dx = dxleft
    elif XJustifiction == "right":  
        dx = dxright
    elif XJustifiction == "origin":
        dx = dxorigin #TODO
    else:
        dx = 0

    if Yjustification == "center":
        dy = dyorigin   #TODO
    elif Yjustification == "top":
        dy = dytop
    elif Yjustification == "bottom":
        dy = dybottom
    elif Yjustification == "origin":
        dy = dyorigin #TODO
    else:
        dy = 0

    # print(dx, dy)
    v1 = Vector2(dx, dy)
    # v1 = Vector2(0, 0)

    return v1



class Support:
    def __init__(self):
        self.Number = None
        self.Point: Point = Point(0, 0, 0)
        self.id = generateID()
        self.type = __class__.__name__
        self.Tx: str = " "  # A, P, N, S
        self.Ty: str = " "  # A, P, N, S
        self.Tz: str = " "  # A, P, N, S
        self.Rx: str = " "  # A, P, N, S
        self.Ry: str = " "  # A, P, N, S
        self.Rz: str = " "  # A, P, N, S
        self.Kx: float = 0  # kN/m
        self.Ky: float = 0  # kN/m
        self.Kz: float = 0  # kN/m
        self.Cx: float = 0  # kNm/rad
        self.Cy: float = 0  # kNm/rad
        self.Cz: float = 0  # kNm/rad
        self.dx: float = 0  # eccentricity in x
        self.dy: float = 0  # eccentricity in y
        self.dz: float = 0  # eccentricity in z

    def serialize(self):
        return {
            'Number': self.Number,
            'Point': self.Point.serialize(),
            'type': self.type,
            'Tx': self.Tx,
            'Ty': self.Ty,
            'Tz': self.Tz,
            'Rx': self.Rx,
            'Ry': self.Ry,
            'Rz': self.Rz,
            'Kx': self.Kx,
            'Ky': self.Ky,
            'Kz': self.Kz,
            'Cx': self.Cx,
            'Cy': self.Cy,
            'Cz': self.Cz,
            'dx': self.dx,
            'dy': self.dy,
            'dz': self.dz
        }

    @staticmethod
    def deserialize(data):
        support = Support()
        support.Number = data.get('Number')
        support.Point = Point.deserialize(data['Point'])
        support.Tx = data.get('Tx', " ")
        support.Ty = data.get('Ty', " ")
        support.Tz = data.get('Tz', " ")
        support.Rx = data.get('Rx', " ")
        support.Ry = data.get('Ry', " ")
        support.Rz = data.get('Rz', " ")
        support.Kx = data.get('Kx', 0)
        support.Ky = data.get('Ky', 0)
        support.Kz = data.get('Kz', 0)
        support.Cx = data.get('Cx', 0)
        support.Cy = data.get('Cy', 0)
        support.Cz = data.get('Cz', 0)
        support.dx = data.get('dx', 0)
        support.dy = data.get('dy', 0)
        support.dz = data.get('dz', 0)

        return support

    @staticmethod
    def pinned(PlacementPoint):
        sup = Support()
        sup.Point = PlacementPoint
        sup.Tx = "A"
        sup.Ty = "A"
        sup.Tz = "A"
        return (sup)

    @staticmethod
    def x_roller(PlacementPoint):
        sup = Support()
        sup.Point = PlacementPoint
        sup.Ty = "A"
        sup.Tz = "A"
        return (sup)

    @staticmethod
    def y_roller(PlacementPoint):
        sup = Support()
        sup.Point = PlacementPoint
        sup.Tx = "A"
        sup.Tz = "A"
        return (sup)

    @staticmethod
    def z_roller(PlacementPoint):
        sup = Support()
        sup.Point = PlacementPoint
        sup.Tx = "A"
        sup.Ty = "A"
        return (sup)

    @staticmethod
    def fixed(PlacementPoint):
        sup = Support()
        sup.Point = PlacementPoint
        sup.Tx = "A"
        sup.Ty = "A"
        sup.Tz = "A"
        sup.Rx = "A"
        sup.Ry = "A"
        sup.Rz = "A"
        return (sup)


class LoadCase:
    def __init__(self):
        self.Number = None
        self.Description: str = ""
        self.psi0 = 1
        self.psi1 = 1
        self.psi2 = 1
        self.Type = 0  # 0 = permanent, 1 = variabel


class SurfaceLoad:
    def __init__(self):
        self.LoadCase = None
        self.PolyCurve: PolyCurve = None
        self.Description: str = ""
        self.crs = "ccaa0435161960d4c7e436cf107a03f61"
        self.direction = "caf2b4ce743de1df30071f9566b1015c6"
        self.LoadBearingDirection = "cfebf3fce7063ab9a89d28a86508c0fb3"
        self.q1 = 0
        self.q2 = 0
        self.q3 = 0
        self.LoadConstantOrLinear = "cb81ae405e988f21166edf06d7fd646fb"
        self.iq1 = -1
        self.iq2 = -1
        self.iq3 = -1

    @staticmethod
    def by_load_case_polycurve_q(LoadCase, PolyCurve, q):
        SL = SurfaceLoad()
        SL.LoadCase = LoadCase
        SL.PolyCurve = PolyCurve
        SL.q1 = q
        SL.q2 = q
        SL.q3 = q
        return SL


class LoadPanel:
    def __init__(self):
        self.PolyCurve: PolyCurve = None
        self.Description: str = ""
        self.LoadBearingDirection = "X"
        # Wall, saddle_roof_positive_pitch #Wall, / Free-standing wall, Flat roof, Shed roof, Saddle roof, Unknown
        self.SurfaceType = ""


def chess_board_surface_loads_rectangle(startx, starty, dx, dy, nx, ny, width, height, LoadCase, q123, description: str):
    SurfaceLoads = []
    x = startx
    y = starty
    for j in range(ny):
        for i in range(nx):
            SL = SurfaceLoad()
            SL.Description = description
            SL.LoadCase = LoadCase
            SL.PolyCurve = PolyCurve.by_points(
                [Point(x, y, 0),
                 Point(x + width, y, 0),
                 Point(x, y + height, 0),
                 Point(x, y, 0)]
            )
            SL.q1 = SL.q2 = SL.q3 = q123  # [kN/m2]
            SurfaceLoads.append(SL)
            x = x + dx
        y = y + dy
    return SurfaceLoads




class TickMark:
    # Dimension Tick Mark
    def __init__(self):
        self.name = None
        self.id = generateID()
        self.curves = []

    @staticmethod
    def by_curves(name, curves):
        TM = TickMark()
        TM.name = name
        TM.curves = curves
        return TM


TMDiagonal = TickMark.by_curves(
    "diagonal", [Line(start=Point(-100, -100, 0), end=Point(100, 100, 0))])


class DimensionType:
    def __init__(self):
        self.name = None
        self.id = generateID()
        self.type = __class__.__name__
        self.font = None
        self.text_height = 2.5
        self.tick_mark: TickMark = TMDiagonal
        self.line_extension = 100

    def serialize(self):
        return {
            'name': self.name,
            'id': self.id,
            'type': self.type,
            'font': self.font,
            'text_height': self.text_height,
            'tick_mark': str(self.tick_mark),
            'line_extension': self.line_extension
        }

    @staticmethod
    def deserialize(data):
        dimension_type = DimensionType()
        dimension_type.name = data.get('name')
        dimension_type.id = data.get('id')
        dimension_type.type = data.get('type')
        dimension_type.font = data.get('font')
        dimension_type.text_height = data.get('text_height', 2.5)

        # Handle TickMark deserialization
        tick_mark_str = data.get('tick_mark')
        # Adjust according to your TickMark implementation
        dimension_type.tick_mark = TickMark(tick_mark_str)

        dimension_type.line_extension = data.get('line_extension', 100)

        return dimension_type

    @staticmethod
    def by_name_font_textheight_tick_mark_extension(name: str, font: str, text_height: float, tick_mark: TickMark, line_extension: float):
        DT = DimensionType()
        DT.name = name
        DT.font = font
        DT.text_height = text_height
        DT.tick_mark = tick_mark
        DT.line_extension = line_extension
        return DT


DT2_5_mm = DimensionType.by_name_font_textheight_tick_mark_extension(
    "2.5 mm", "calibri", 2.5, TMDiagonal, 100)

DT1_8_mm = DimensionType.by_name_font_textheight_tick_mark_extension(
    "1.8 mm", "calibri", 2.5, TMDiagonal, 100)


class Dimension:
    def __init__(self, start: Point, end: Point, dimension_type) -> None:
        self.id = generateID()
        self.type = __class__.__name__
        self.start: Point = start
        self.text_height = 100
        self.end: Point = end
        self.scale = 0.1  # text
        self.dimension_type: DimensionType = dimension_type
        self.curves = []
        self.length: float = Line(start=self.start, end=self.end).length
        self.text = None
        self.geom()

    def serialize(self):
        return {
            'type': self.type,
            'start': self.start.serialize(),
            'end': self.end.serialize(),
            'text_height': self.text_height,
            'id': self.id,
            'scale': self.scale,
            'dimension_type': self.dimension_type.serialize(),
            'curves': [curve.serialize() for curve in self.curves],
            'length': self.length,
            'text': self.text
        }

    @staticmethod
    def deserialize(data):
        start = Point.deserialize(data['start'])
        end = Point.deserialize(data['end'])
        dimension_type = DimensionType.deserialize(data['dimension_type'])
        dimension = Dimension(start, end, dimension_type)

        dimension.text_height = data.get('text_height', 100)
        dimension.id = data.get('id')
        dimension.scale = data.get('scale', 0.1)
        dimension.curves = [Line.deserialize(
            curve_data) for curve_data in data.get('curves', [])]
        dimension.length = data.get('length')
        dimension.text = data.get('text')

        return dimension

    @staticmethod
    def by_startpoint_endpoint_offset(start: Point, end: Point, dimension_type: DimensionType, offset: float):
        DS = Dimension()
        DS.start = start
        DS.end = end
        DS.dimension_type = dimension_type
        DS.geom()
        return DS

    def geom(self):
        # baseline
        baseline = Line(start=self.start, end=self.end)
        midpoint_text = baseline.mid_point()
        direction = Vector3.normalize(baseline.vector)
        tick_mark_extension_point_1 = Point.translate(self.start, Vector3.reverse(
            Vector3.scale(direction, self.dimension_type.line_extension)))
        tick_mark_extension_point_2 = Point.translate(
            self.end, Vector3.scale(direction, self.dimension_type.line_extension))
        x = direction
        y = Vector3.rotate_XY(x, math.radians(90))
        z = Z_Axis
        cs_new_start = CoordinateSystem(self.start, x, y, z)
        cs_new_mid = CoordinateSystem(midpoint_text, x, y, z)
        cs_new_end = CoordinateSystem(self.end, x, y, z)
        self.curves.append(Line(tick_mark_extension_point_1,
                           self.start))  # extention_start
        self.curves.append(
            Line(tick_mark_extension_point_2, self.end))  # extention_end
        self.curves.append(Line(self.start, self.end))  # baseline
        # erg vieze oplossing. #Todo
        crvs = Line(
            start=self.dimension_type.tick_mark.curves[0].start, end=self.dimension_type.tick_mark.curves[0].end)

        self.curves.append(Line.transform(
            self.dimension_type.tick_mark.curves[0], cs_new_start))  # dimension tick start
        self.curves.append(Line.transform(crvs, cs_new_end)
                           )  # dimension tick end
        self.text = Text(text=str(round(self.length)), font_family=self.dimension_type.font,
                         cs=cs_new_mid, height=self.text_height).write()

    def write(self, project):
        for i in self.curves:
            project.objects.append(i)
        for j in self.text:
            project.objects.append(j)


class FrameTag:
    def __init__(self):
        # Dimensions in 1/100 scale
        self.id = generateID()
        self.type = __class__.__name__
        self.scale = 0.1
        self.cs: CoordinateSystem = CSGlobal
        self.offset_x = 500
        self.offset_y = 100
        self.font_family = "calibri"
        self.text: str = "text"
        self.text_curves = None
        self.text_height = 100

    def serialize(self):
        id_value = str(self.id) if not isinstance(
            self.id, (str, int, float)) else self.id
        return {
            'id': id_value,
            'type': self.type,
            'scale': self.scale,
            'cs': self.cs.serialize(),
            'offset_x': self.offset_x,
            'offset_y': self.offset_y,
            'font_family': self.font_family,
            'text': self.text,
            'text_curves': self.text_curves,
            'text_height': self.text_height
        }

    @staticmethod
    def deserialize(data):
        frame_tag = FrameTag()
        frame_tag.scale = data.get('scale', 0.1)
        frame_tag.cs = CoordinateSystem.deserialize(data['cs'])
        frame_tag.offset_x = data.get('offset_x', 500)
        frame_tag.offset_y = data.get('offset_y', 100)
        frame_tag.font_family = data.get('font_family', "calibri")
        frame_tag.text = data.get('text', "text")
        frame_tag.text_curves = data.get('text_curves')
        frame_tag.text_height = data.get('text_height', 100)

        return frame_tag

    def __textobject(self):
        cstext = self.cs
        # cstextnew = cstext.translate(self.textoff_vector_local)
        self.text_curves = Text(
            text=self.text, font_family=self.font_family, height=self.text_height, cs=cstext).write

    def by_cs_text(self, coordinate_system: CoordinateSystem, text):
        self.cs = coordinate_system
        self.text = text
        self.__textobject()
        return self

    def write(self, project):
        for x in self.text_curves():
            project.objects.append(x)
        return self

    @staticmethod
    def by_frame(frame):
        tag = FrameTag()
        frame_vector = frame.vector_normalised
        x = frame_vector
        y = Vector3.rotate_XY(x, math.radians(90))
        z = Z_Axis
        vx = Vector3.scale(frame_vector, tag.offset_x)
        frame_width = PolyCurve2D.bounds(frame.curve)[4]
        vy = Vector3.scale(y, frame_width*0.5+tag.offset_y)
        origintext = Point.translate(frame.start, vx)
        origintext = Point.translate(origintext, vy)
        csnew = CoordinateSystem(origintext, x, y, z)
        tag.cs = csnew
        tag.text = frame.name
        tag.__textobject()
        return tag


class ColumnTag:
    def __init__(self):
        # Dimensions in 1/100 scale
        self.id = generateID()
        self.type = __class__.__name__
        self.width = 700
        self.height = 500
        self.factor = 3  # hellingsfacor leader
        self.scale = 0.1  # voor tekeningverschaling
        self.position = "TL"  # TL, TR, BL, BR Top Left Top Right Bottom Left Bottom Right
        self.cs: CoordinateSystem = CSGlobal

        # self.textoff_vector_local: Vector3 = Vector3(1,1,1)
        self.font_family = "calibri"
        self.curves = []
        # self.leadercurves()
        self.text: str = "text"
        self.text_height = 100
        self.text_offset_factor = 5
        self.textoff_vector_local: Vector3 = Vector3(
            self.height/self.factor, self.height+self.height/self.text_offset_factor, 0)
        self.text_curves = None
        # self.textobject()

    def serialize(self):
        id_value = str(self.id) if not isinstance(
            self.id, (str, int, float)) else self.id
        return {
            'id': id_value,
            'type': self.type,
            'width': self.width,
            'height': self.height,
            'factor': self.factor,
            'scale': self.scale,
            'position': self.position,
            'cs': self.cs.serialize(),
            'font_family': self.font_family,
            'curves': [curve.serialize() for curve in self.curves],
            'text': self.text,
            'text_height': self.text_height,
            'text_offset_factor': self.text_offset_factor,
            'textoff_vector_local': self.textoff_vector_local.serialize(),
            'text_curves': self.text_curves
        }

    @staticmethod
    def deserialize(data):
        column_tag = ColumnTag()
        column_tag.width = data.get('width', 700)
        column_tag.height = data.get('height', 500)
        column_tag.factor = data.get('factor', 3)
        column_tag.scale = data.get('scale', 0.1)
        column_tag.position = data.get('position', "TL")
        column_tag.cs = CoordinateSystem.deserialize(data['cs'])
        column_tag.font_family = data.get('font_family', "calibri")
        column_tag.curves = [Line.deserialize(
            curve_data) for curve_data in data.get('curves', [])]
        column_tag.text = data.get('text', "text")
        column_tag.text_height = data.get('text_height', 100)
        column_tag.text_offset_factor = data.get('text_offset_factor', 5)
        column_tag.textoff_vector_local = Vector3.deserialize(
            data['textoff_vector_local'])
        column_tag.text_curves = data.get('text_curves')

        return column_tag

    def __leadercurves(self):
        self.startpoint = Point(0, 0, 0)
        self.midpoint = Point.translate(self.startpoint, Vector3(
            self.height/self.factor, self.height, 0))
        self.endpoint = Point.translate(
            self.midpoint, Vector3(self.width, 0, 0))
        crves = [Line(start=self.startpoint, end=self.midpoint),
                 Line(start=self.midpoint, end=self.endpoint)]
        for i in crves:
            j = Line.transform(i, self.cs)
            self.curves.append(j)

    def __textobject(self):
        cstext = self.cs

        cstextnew = CoordinateSystem.translate(
            cstext, self.textoff_vector_local)
        self.text_curves = Text(text=self.text, font_family=self.font_family,
                                height=self.text_height, cs=cstextnew).write

    def by_cs_text(self, coordinate_system: CoordinateSystem, text):
        self.cs = coordinate_system
        self.text = text
        self.__leadercurves()
        self.__textobject()
        return self

    def write(self, project):
        for x in self.text_curves():
            project.objects.append(x)
        for y in self.curves:
            project.objects.append(y)

    @staticmethod
    def by_frame(frame, position="TL"):
        tag = ColumnTag()
        csold = CSGlobal
        tag.position = position
        tag.cs = CoordinateSystem.translate(csold, Vector3(
            frame.start.x, frame.start.y, frame.start.z))
        tag.text = frame.name
        tag.__leadercurves()
        tag.__textobject()
        return tag

# class Label:
# class LabelType:
# class TextType:


seqChar = "A B C D E F G H I J K L M N O P Q R S T U V W X Y Z AA AB AC"
seqNumber = "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24"


class GridheadType:
    def __init__(self):
        self.id = generateID()
        self.type = __class__.__name__
        self.name = None
        self.curves = []
        self.diameter = 150
        self.text_height = 200
        self.radius = self.diameter/2
        self.font_family = "calibri"

    def serialize(self):
        id_value = str(self.id) if not isinstance(
            self.id, (str, int, float)) else self.id
        return {
            'id': id_value,
            'type': self.type,
            'name': self.name,
            'curves': [curve.serialize() for curve in self.curves],
            'diameter': self.diameter,
            'text_height': self.text_height,
            'radius': self.radius,
            'font_family': self.font_family
        }

    @staticmethod
    def deserialize(data):
        gridhead_type = GridheadType()
        gridhead_type.id = data.get('id')
        gridhead_type.type = data.get('type')
        gridhead_type.name = data.get('name')
        gridhead_type.curves = [Line.deserialize(curve_data) for curve_data in data.get(
            'curves', [])]  # Adjust for your Curve class
        gridhead_type.diameter = data.get('diameter', 150)
        gridhead_type.text_height = data.get('text_height', 200)
        gridhead_type.radius = data.get('radius', gridhead_type.diameter / 2)
        gridhead_type.font_family = data.get('font_family', "calibri")

        return gridhead_type

    def by_diam(self, name, diameter: float, font_family, text_height):
        self.name = name
        self.diameter = diameter
        self.radius = self.diameter / 2
        self.font_family = font_family
        self.text_height = text_height
        self.geom()
        return self

    def geom(self):
        radius = self.radius
        self.curves.append(Arc(startPoint=Point(-radius, radius, 0),
                           midPoint=Point(0, radius*2, 0), endPoint=Point(radius, radius, 0)))
        self.curves.append(Arc(startPoint=Point(-radius, radius, 0),
                           midPoint=Point(0, 0, 0), endPoint=Point(radius, radius, 0)))
        # origin is at center of circle


GHT30 = GridheadType().by_diam("2.5 mm", 400, "calibri", 200)

GHT50 = GridheadType().by_diam("GHT50", 600, "calibri", 350)


class GridHead:
    def __init__(self):
        self.id = generateID()
        self.type = __class__.__name__
        self.grid_name: str = "A"
        self.grid_head_type = GHT50
        self.radius = GHT50.radius
        self.CS: CoordinateSystem = CSGlobal
        self.x: float = 0.5
        self.y: float = 0
        self.text_curves = []
        self.curves = []
        self.__textobject()
        self.__geom()

    def serialize(self):
        id_value = str(self.id) if not isinstance(
            self.id, (str, int, float)) else self.id
        return {
            'id': id_value,
            'type': self.type,
            'grid_name': self.grid_name,
            'grid_head_type': self.grid_head_type.serialize(),
            'radius': self.radius,
            'CS': self.CS.serialize(),
            'x': self.x,
            'y': self.y,
            'text_curves': [curve.serialize() for curve in self.text_curves],
            'curves': [curve.serialize() for curve in self.curves]
        }

    @staticmethod
    def deserialize(data):
        grid_head = GridHead()
        grid_head.id = data.get('id')
        grid_head.type = data.get('type')
        grid_head.grid_name = data.get('grid_name')
        grid_head.grid_head_type = GridheadType.deserialize(
            data['grid_head_type'])
        grid_head.radius = data.get('radius', GHT50.radius)
        grid_head.CS = CoordinateSystem.deserialize(data['CS'])
        grid_head.x = data.get('x', 0.5)
        grid_head.y = data.get('y', 0)
        grid_head.text_curves = [Line.deserialize(
            curve_data) for curve_data in data.get('text_curves', [])]
        grid_head.curves = [Line.deserialize(
            curve_data) for curve_data in data.get('curves', [])]

        return grid_head

    def __geom(self):
        # CStot = CoordinateSystem.translate(self.CS,Vector3(0,self.grid_head_type.radius,0))
        for i in self.grid_head_type.curves:
            self.curves.append(transform_arc(i, (self.CS)))

    def __textobject(self):
        cs_text = self.CS
        # to change after center text function is implemented
        cs_text_new = CoordinateSystem.move_local(cs_text, -100, 40, 0)
        self.text_curves = Text(text=self.grid_name, font_family=self.grid_head_type.font_family,
                                height=self.grid_head_type.text_height, cs=cs_text_new).write()
        project.objects.append(Text(text=self.grid_name, font_family=self.grid_head_type.font_family,
                                height=self.grid_head_type.text_height, cs=cs_text_new))

    @staticmethod
    def by_name_gridheadtype_y(name, cs: CoordinateSystem, gridhead_type, y: float):
        GH = GridHead()
        GH.grid_name = name
        GH.grid_head_type = gridhead_type
        GH.CS = cs
        GH.x = 0.5
        GH.y = y
        GH.__textobject()
        GH.__geom()
        return GH

    def write(self, project):
        for x in self.text_curves:
            project.objects.append(x)
        for y in self.curves:
            project.objects.append(y)


class Grid:
    def __init__(self):
        self.line = None
        self.start = None
        self.end = None
        self.direction: Vector3 = Vector3(0, 1, 0)
        self.grid_head_type = GHT50
        self.name = None
        self.bulbStart = False
        self.bulbEnd = True
        self.cs_end: CoordinateSystem = CSGlobal
        self.grid_heads = []

    def __cs(self, line):
        self.direction = line.vector_normalised
        vect3 = Vector3.rotate_XY(self.direction, math.radians(-90))
        self.cs_end = CoordinateSystem(line.end, vect3, self.direction, Z_Axis)

    @classmethod
    def by_startpoint_endpoint(cls, line, name):
        # Create panel by polycurve
        g1 = Grid()
        g1.start = line.start
        g1.end = line.start
        g1.name = name
        g1.__cs(line)
        g1.line = line_to_pattern(line, Centerline)
        g1.__grid_heads()
        return g1

    def __grid_heads(self):
        if self.bulbEnd == True:
            self.grid_heads.append(
                GridHead.by_name_gridheadtype_y(self.name, self.cs_end, self.grid_head_type, 0))

    def write(self, project):
        for x in self.line:
            project.objects.append(x)
        for y in self.grid_heads:
            y.write(project)
        return self


def get_grid_distances(Grids):
    # Function to create grids from the format 0, 4x5400, 4000, 4000 to absolute XYZ-values
    GridsNew = []
    GridsNew.append(0)
    distance = 0.0
    # GridsNew.append(distance)
    for i in Grids:
        # del Grids[0]
        if "x" in i:
            spl = i.split("x")
            count = int(spl[0])
            width = float(spl[1])
            for i in range(count):
                distance = distance + width
                GridsNew.append(distance)
        else:
            distance = distance + float(i)
            GridsNew.append(distance)
    return GridsNew


class GridSystem:
    # rectangle Gridsystem
    def __init__(self):
        self.id = generateID()
        self.type = __class__.__name__
        self.gridsX = None
        self.gridsY = None
        self.dimensions = []
        self.name = None

    def serialize(self):
        id_value = str(self.id) if not isinstance(
            self.id, (str, int, float)) else self.id
        return {
            'id': id_value,
            'type': self.type,
            'gridsX': self.gridsX,
            'gridsY': self.gridsY,
            'dimensions': [dimension.serialize() for dimension in self.dimensions],
            'name': self.name
        }

    @staticmethod
    def deserialize(data):
        grid_system = GridSystem()
        grid_system.id = data.get('id')
        grid_system.type = data.get('type')
        grid_system.gridsX = data.get('gridsX')
        grid_system.gridsY = data.get('gridsY')
        grid_system.dimensions = [Dimension.deserialize(dim_data) for dim_data in data.get(
            'dimensions', [])]  # Adjust for your Dimension class
        grid_system.name = data.get('name')

        return grid_system

    @classmethod
    def by_spacing_labels(cls, spacingX, labelsX, spacingY, labelsY, gridExtension):
        gs = GridSystem()
        # Create gridsystem
        # spacingXformat = "0 3000 3000 3000"
        GridEx = gridExtension

        GridsX = spacingX.split()
        GridsX = get_grid_distances(GridsX)
        Xmax = max(GridsX)
        GridsXLable = labelsX.split()
        GridsY = spacingY.split()
        GridsY = get_grid_distances(GridsY)
        Ymax = max(GridsY)
        GridsYLable = labelsY.split()

        gridsX = []
        dimensions = []
        count = 0
        ymaxdim1 = Ymax+GridEx-300
        ymaxdim2 = Ymax+GridEx-0
        xmaxdim1 = Xmax+GridEx-300
        xmaxdim2 = Xmax+GridEx-0
        for i in GridsX:
            gridsX.append(Grid.by_startpoint_endpoint(
                Line(Point(i, -GridEx, 0), Point(i, Ymax+GridEx, 0)), GridsXLable[count]))
            try:
                dim = Dimension(Point(i, ymaxdim1, 0), Point(
                    GridsX[count+1], ymaxdim1, 0), DT2_5_mm)
                gs.dimensions.append(dim)
            except:
                pass
            count = count + 1

        # Totaal maatvoering 1
        dim = Dimension(Point(GridsX[0], ymaxdim2, 0), Point(
            Xmax, ymaxdim2, 0), DT2_5_mm)
        gs.dimensions.append(dim)

        # Totaal maatvoering 2
        dim = Dimension(Point(xmaxdim2, GridsY[0], 0), Point(
            xmaxdim2, Ymax, 0), DT2_5_mm)
        gs.dimensions.append(dim)

        gridsY = []
        count = 0
        for i in GridsY:
            gridsY.append(Grid.by_startpoint_endpoint(
                Line(Point(-GridEx, i, 0), Point(Xmax+GridEx, i, 0)), GridsYLable[count]))
            try:
                dim = Dimension(Point(xmaxdim1, i, 0), Point(
                    xmaxdim1, GridsY[count+1], 0))  # ,DT3_5_mm)
                gs.dimensions.append(dim)
            except:
                pass
            count = count + 1
        gs.gridsX = gridsX
        gs.gridsY = gridsY
        return gs

    def write(self, project):
        for x in self.gridsX:
            project.objects.append(x)
            for i in x.grid_heads:
                i.write(project)
        for y in self.gridsY:
            project.objects.append(y)
            for j in y.grid_heads:
                j.write(project)
        for z in self.dimensions:
            z.write(project)
        return self



def colorlist(extrus, color):
    colorlst = []
    for j in range(int(len(extrus.verts) / 3)):
        colorlst.append(color)
    return (colorlst)


# ToDo Na update van color moet ook de colorlist geupdate worden
class Frame:
    def __init__(self):
        self.id = generateID()
        self.type = __class__.__name__
        self.name = "None"
        self.profileName = "None"
        self.extrusion = None
        self.comments = None
        self.structuralType = None
        self.start = None
        self.end = None
        self.curve = None  # 2D polycurve of the sectionprofile
        self.curve3d = None  # Translated 3D polycurve of the sectionprofile
        self.length = 0
        self.points = []
        self.coordinateSystem: CoordinateSystem = CSGlobal
        self.YJustification = "Origin"  # Top, Center, Origin, Bottom
        self.ZJustification = "Origin"  # Left, Center, Origin, Right
        self.YOffset = 0
        self.ZOffset = 0
        self.rotation = 0
        self.material = None
        self.color = BaseOther.color
        self.profile_data = None
        self.colorlst = []
        self.vector = None
        self.vector_normalised = None
        self.centerbottom = None

    def serialize(self):
        id_value = str(self.id) if not isinstance(
            self.id, (str, int, float)) else self.id
        return {
            'id': id_value,
            'type': self.type,
            'name': self.name,
            'profileName': self.profileName,
            'extrusion': self.extrusion,
            'comments': self.comments,
            'structuralType': self.structuralType,
            'start': self.start,
            'end': self.end,
            'curve': self.curve,
            'curve3d': self.curve3d,
            'length': self.length,
            'coordinateSystem': self.coordinateSystem.serialize(),
            'YJustification': self.YJustification,
            'ZJustification': self.ZJustification,
            'YOffset': self.YOffset,
            'ZOffset': self.ZOffset,
            'rotation': self.rotation,
            'material': self.material,
            'color': self.color,
            'colorlst': self.colorlst,
            'vector': self.vector.serialize() if self.vector else None,
            'vector_normalised': self.vector_normalised.serialize() if self.vector_normalised else None
        }

    @staticmethod
    def deserialize(data):
        frame = Frame()
        frame.id = data.get('id')
        frame.type = data.get('type')
        frame.name = data.get('name', "None")
        frame.profileName = data.get('profileName', "None")
        frame.extrusion = data.get('extrusion')
        frame.comments = data.get('comments')
        frame.structuralType = data.get('structuralType')
        frame.start = data.get('start')
        frame.end = data.get('end')
        frame.curve = data.get('curve')
        frame.curve3d = data.get('curve3d')
        frame.length = data.get('length', 0)
        frame.coordinateSystem = CoordinateSystem.deserialize(
            data['coordinateSystem'])
        frame.YJustification = data.get('YJustification', "Origin")
        frame.ZJustification = data.get('ZJustification', "Origin")
        frame.YOffset = data.get('YOffset', 0)
        frame.ZOffset = data.get('ZOffset', 0)
        frame.rotation = data.get('rotation', 0)
        frame.material = data.get('material')
        frame.color = data.get('color', BaseOther.color)
        frame.colorlst = data.get('colorlst', [])
        frame.vector = Vector3.deserialize(
            data['vector']) if 'vector' in data else None
        frame.vector_normalised = Vector3.deserialize(
            data['vector_normalised']) if 'vector_normalised' in data else None

        return frame

    def props(self):
        self.vector = Vector3(self.end.x-self.start.x,
                              self.end.y-self.start.y, self.end.z-self.start.z)
        self.vector_normalised = Vector3.normalize(self.vector)
        self.length = Vector3.length(self.vector)

    @classmethod
    def by_startpoint_endpoint_profile(cls, start: Union[Point, Node], end: Union[Point, Node], profile: Union[str, PolyCurve2D], name: str, material: None, comments=None):
        
        f1 = Frame()
        f1.comments = comments

        if start.type == 'Point':
            f1.start = start
        elif start.type == 'Node':
            f1.start = start.point
        if end.type == 'Point':
            f1.end = end
        elif end.type == 'Node':
            f1.end = end.point

        if type(profile).__name__ == "PolyCurve2D":
            f1.curve = profile
        elif type(profile).__name__ == "Polygon":
            f1.curve = PolyCurve2D.by_points(profile.points)
        elif type(profile).__name__ == "str":
            f1.curve = profiledataToShape(profile).polycurve2d  # polycurve2d
            f1.points = profiledataToShape(profile).polycurve2d.points
        else:
            print("[by_startpoint_endpoint_profile], input is not correct.")
            sys.exit()

        f1.directionVector = Vector3.by_two_points(f1.start, f1.end)
        f1.length = Vector3.length(f1.directionVector)
        f1.name = name
        f1.extrusion = Extrusion.by_polycurve_height_vector(
            f1.curve, f1.length, CSGlobal, f1.start, f1.directionVector)
        f1.extrusion.name = name
        f1.curve3d = f1.extrusion.polycurve_3d_translated
        f1.profileName = profile
        f1.material = material
        f1.color = material.colorint
        f1.colorlst = colorlist(f1.extrusion, f1.color)
        f1.props()
        return f1

    @classmethod
    def by_startpoint_endpoint_profile_shapevector(cls, start: Union[Point, Node], end: Union[Point, Node], profile_name: str, name: str, vector2d: Vector2, rotation: float, material: None, comments: None):
        f1 = Frame()
        f1.comments = comments

        if start.type == 'Point':
            f1.start = start
        elif start.type == 'Node':
            f1.start = start.point
        if end.type == 'Point':
            f1.end = end
        elif end.type == 'Node':
            f1.end = end.point

        try:
            curv = profiledataToShape(profile_name).polycurve2d
        except Exception as e:
            # Profile does not exist
            print(f"Profile does not exist: {profile_name}\nError: {e}")

        f1.rotation = rotation
        curvrot = curv.rotate(rotation)  # rotation in degrees
        f1.curve = curvrot.translate(vector2d)
        f1.XOffset = vector2d.x
        f1.YOffset = vector2d.y
        f1.directionVector = Vector3.by_two_points(f1.start, f1.end)
        f1.length = Vector3.length(f1.directionVector)
        f1.name = name
        f1.extrusion = Extrusion.by_polycurve_height_vector(
            f1.curve, f1.length, CSGlobal, f1.start, f1.directionVector)
        f1.extrusion.name = name
        f1.curve3d = f1.extrusion.polycurve_3d_translated
        f1.profileName = profile_name
        f1.material = material
        f1.color = material.colorint
        f1.colorlst = colorlist(f1.extrusion, f1.color)
        f1.props()
        return f1

    @classmethod
    def by_startpoint_endpoint_profile_justifiction(cls, start: Union[Point, Node], end: Union[Point, Node], profile: Union[str, PolyCurve2D], name: str, XJustifiction: str, YJustifiction: str, rotation: float, material=None, ey: None = float, ez: None = float, structuralType: None = str, comments=None):
        f1 = Frame()
        f1.comments = comments

        if start.type == 'Point':
            f1.start = start
        elif start.type == 'Node':
            f1.start = start.point
        if end.type == 'Point':
            f1.end = end
        elif end.type == 'Node':
            f1.end = end.point

        f1.structuralType = structuralType
        f1.rotation = rotation

        if type(profile).__name__ == "PolyCurve2D":
            profile_name = "None"
            f1.profile_data = profile
            curve = f1.profile_data
        elif type(profile).__name__ == "Polygon":
            profile_name = "None"
            f1.profile_data = PolyCurve2D.by_points(profile.points)
            curve = f1.profile_data
        elif type(profile).__name__ == "str":
            profile_name = profile
            f1.profile_data = profiledataToShape(profile).polycurve2d  # polycurve2d
            curve = f1.profile_data
        else:
            print("[by_startpoint_endpoint_profile], input is not correct.")
            sys.exit()

        # curve = f1.profile_data.polycurve2d

        v1 = justifictionToVector(curve, XJustifiction, YJustifiction)  # 1
        f1.XOffset = v1.x
        f1.YOffset = v1.y
        curve = curve.translate(v1)
        curve = curve.translate(Vector2(ey, ez))  # 2
        curve = curve.rotate(f1.rotation)  # 3
        f1.curve = curve

        f1.directionVector = Vector3.by_two_points(f1.start, f1.end)
        f1.length = Vector3.length(f1.directionVector)
        f1.name = name
        f1.extrusion = Extrusion.by_polycurve_height_vector(
            f1.curve, f1.length, CSGlobal, f1.start, f1.directionVector)
        f1.extrusion.name = name
        f1.curve3d = f1.extrusion.polycurve_3d_translated

        try:
            pnew = PolyCurve.by_joined_curves(f1.curve3d.curves)
            f1.centerbottom = PolyCurve.centroid(pnew)
        except:
            pass

        f1.profileName = profile_name
        f1.material = material
        f1.color = material.colorint
        f1.colorlst = colorlist(f1.extrusion, f1.color)
        f1.props()
        return f1

    @classmethod
    def by_startpoint_endpoint(cls, start: Union[Point, Node], end: Union[Point, Node], polycurve: PolyCurve2D, name: str, rotation: float, material=None, comments=None):
        # 2D polycurve
        f1 = Frame()
        f1.comments = comments

        if start.type == 'Point':
            f1.start = start
        elif start.type == 'Node':
            f1.start = start.point
        if end.type == 'Point':
            f1.end = end
        elif end.type == 'Node':
            f1.end = end.point

        f1.directionVector = Vector3.by_two_points(f1.start, f1.end)
        f1.length = Vector3.length(f1.directionVector)
        f1.name = name
        curvrot = polycurve.rotate(rotation)
        f1.extrusion = Extrusion.by_polycurve_height_vector(
            curvrot, f1.length, CSGlobal, f1.start, f1.directionVector)
        f1.extrusion.name = name
        f1.curve3d = curvrot
        f1.profileName = name
        f1.material = material
        f1.color = material.colorint
        f1.colorlst = colorlist(f1.extrusion, f1.color)
        f1.props()
        return f1

    @classmethod
    def by_point_height_rotation(cls, start: Union[Point, Node], height: float, polycurve: PolyCurve2D, frame_name: str, rotation: float, material=None, comments=None):
        # 2D polycurve
        f1 = Frame()
        f1.comments = comments

        if start.type == 'Point':
            f1.start = start
        elif start.type == 'Node':
            f1.start = start.point

        f1.end = Point.translate(f1.start, Vector3(0, 0.00001, height))

        # self.curve = Line(start, end)
        f1.directionVector = Vector3.by_two_points(f1.start, f1.end)
        f1.length = Vector3.length(f1.directionVector)
        f1.name = frame_name
        f1.profileName = frame_name
        curvrot = polycurve.rotate(rotation)  # rotation in degrees
        f1.extrusion = Extrusion.by_polycurve_height_vector(
            curvrot, f1.length, CSGlobal, f1.start, f1.directionVector)
        f1.extrusion.name = frame_name
        f1.curve3d = curvrot
        f1.material = material
        f1.color = material.colorint
        f1.colorlst = colorlist(f1.extrusion, f1.color)
        f1.props()
        return f1

    @classmethod
    def by_point_profile_height_rotation(cls, start: Union[Point, Node], height: float, profile_name: str, rotation: float, material=None, comments=None):
        f1 = Frame()
        f1.comments = comments

        if start.type == 'Point':
            f1.start = start
        elif start.type == 'Node':
            f1.start = start.point
        # TODO vertical column not possible
        f1.end = Point.translate(f1.start, Vector3(0, height))

        # self.curve = Line(start, end)
        f1.directionVector = Vector3.by_two_points(f1.start, f1.end)
        f1.length = Vector3.length(f1.directionVector)
        f1.name = profile_name
        f1.profileName = profile_name
        curv = profiledataToShape(profile_name).polycurve2d
        curvrot = curv.rotate(rotation)  # rotation in degrees
        f1.extrusion = Extrusion.by_polycurve_height_vector(
            curvrot.curves, f1.length, CSGlobal, f1.start, f1.directionVector)
        f1.extrusion.name = profile_name
        f1.curve3d = curvrot
        f1.profileName = profile_name
        f1.material = material
        f1.color = material.colorint
        f1.colorlst = colorlist(f1.extrusion, f1.color)
        f1.props()
        return f1

    @classmethod
    def by_startpoint_endpoint_curve_justifiction(cls, start: Union[Point, Node], end: Union[Point, Node], polycurve: PolyCurve2D, name: str, XJustifiction: str, YJustifiction: str, rotation: float, material=None, comments=None):
        f1 = Frame()
        f1.comments = comments

        if start.type == 'Point':
            f1.start = start
        elif start.type == 'Node':
            f1.start = start.point
        if end.type == 'Point':
            f1.end = end
        elif end.type == 'Node':
            f1.end = end.point

        f1.rotation = rotation
        curv = polycurve
        curvrot = curv.rotate(rotation)  # rotation in degrees
        # center, left, right, origin / center, top bottom, origin
        v1 = justifictionToVector(curvrot, XJustifiction, YJustifiction)
        f1.XOffset = v1.x
        f1.YOffset = v1.y
        f1.curve = curv.translate(v1)
        f1.directionVector = Vector3.by_two_points(f1.start, f1.end)
        f1.length = Vector3.length(f1.directionVector)
        f1.name = name
        f1.extrusion = Extrusion.by_polycurve_height_vector(
            f1.curve.curves, f1.length, CSGlobal, f1.start, f1.directionVector)
        f1.extrusion.name = name
        f1.profileName = "none"
        f1.material = material
        f1.color = material.colorint
        f1.colorlst = colorlist(f1.extrusion, f1.color)
        f1.props()
        return f1

    def write(self, project):
        project.objects.append(self)
        return self



sqrt2 = math.sqrt(2)

class Tshape:
    def __init__(self, name, h, b, h1, b1):
        self.Description = "T-shape"
        self.ID = "T"

        # parameters
        self.id = generateID()
        self.type = __class__.__name__
        self.name = name
        self.curve = []
        self.h = h  # height
        self.b = b  # width
        self.h1 = h1
        self.b1 = b1

        # describe points
        p1 = Point2D(b1 / 2, -h / 2)  # right bottom
        p2 = Point2D(b1 / 2, h / 2 - h1)  # right middle 1
        p3 = Point2D(b / 2, h / 2 - h1)  # right middle 2
        p4 = Point2D(b / 2, h / 2)  # right top
        p5 = Point2D(-b / 2, h / 2)  # left top
        p6 = Point2D(-b / 2, h / 2 - h1)  # left middle 2
        p7 = Point2D(-b1 / 2, h / 2 - h1)  # left middle 1
        p8 = Point2D(-b1 / 2, -h / 2)  # left bottom

        # describe curves
        l1 = Line2D(p1, p2)
        l2 = Line2D(p2, p3)
        l3 = Line2D(p3, p4)
        l4 = Line2D(p4, p5)
        l5 = Line2D(p5, p6)
        l6 = Line2D(p6, p7)
        l7 = Line2D(p7, p8)
        l8 = Line2D(p8, p1)

        self.curve = PolyCurve2D().by_joined_curves(
            [l1, l2, l3, l4, l5, l6, l7, l8])

    def serialize(self):
        id_value = str(self.id) if not isinstance(
            self.id, (str, int, float)) else self.id
        return {
            'id': id_value,
            'type': self.type,
            'Description': self.Description,
            'ID': self.ID,
            'name': self.name,
            'h': self.h,
            'b': self.b,
            'h1': self.h1,
            'b1': self.b1,
            'curve': self.curve.serialize() if self.curve else None
        }

    @staticmethod
    def deserialize(data):
        tshape = Tshape(
            name=data.get('name'),
            h=data.get('h'),
            b=data.get('b'),
            h1=data.get('h1'),
            b1=data.get('b1')
        )

        tshape.Description = data.get('Description', "T-shape")
        tshape.ID = data.get('ID', "T")
        tshape.curve = PolyCurve2D.deserialize(
            data['curve']) if 'curve' in data else None

        return tshape

    def __str__(self):
        return "Profile(" + f"{self.name})"


class Lshape:
    def __init__(self, name, h, b, h1, b1):
        self.Description = "L-shape"
        self.ID = "L"

        # parameters
        self.id = generateID()
        self.type = __class__.__name__
        self.name = name
        self.curve = []
        self.h = h  # height
        self.b = b  # width
        self.h1 = h1
        self.b1 = b1

        # describe points
        p1 = Point2D(b / 2, -h / 2)  # right bottom
        p2 = Point2D(b / 2, -h / 2 + h1)  # right middle
        p3 = Point2D(-b / 2 + b1, -h / 2 + h1)  # middle
        p4 = Point2D(-b / 2 + b1, h / 2)  # middle top
        p5 = Point2D(-b / 2, h / 2)  # left top
        p6 = Point2D(-b / 2, -h / 2)  # left bottom

        # describe curves
        l1 = Line2D(p1, p2)
        l2 = Line2D(p2, p3)
        l3 = Line2D(p3, p4)
        l4 = Line2D(p4, p5)
        l5 = Line2D(p5, p6)
        l6 = Line2D(p6, p1)

        self.curve = PolyCurve2D().by_joined_curves([l1, l2, l3, l4, l5, l6])

    def serialize(self):
        return {
            'Description': self.Description,
            'ID': self.ID,
            'id': self.id,
            'type': self.type,
            'name': self.name,
            'h': self.h,
            'b': self.b,
            'h1': self.h1,
            'b1': self.b1,
            'curve': self.curve.serialize() if self.curve else None
        }

    @staticmethod
    def deserialize(data):
        lshape = Lshape(
            name=data.get('name'),
            h=data.get('h'),
            b=data.get('b'),
            h1=data.get('h1'),
            b1=data.get('b1')
        )

        lshape.Description = data.get('Description', "L-shape")
        lshape.ID = data.get('ID', "L")
        lshape.id = data.get('id')
        lshape.type = data.get('type')
        lshape.curve = PolyCurve2D.deserialize(
            data['curve']) if 'curve' in data else None

        return lshape

    def __str__(self):
        return "Profile(" + f"{self.name})"


class Eshape:
    def __init__(self, name, h, b, h1):
        self.Description = "E-shape"
        self.ID = "E"

        # parameters
        self.id = generateID()
        self.type = __class__.__name__
        self.name = name
        self.curve = []
        self.h = h  # height
        self.b = b  # width
        self.h1 = h1

        # describe points
        p1 = Point2D(b / 2, -h / 2)  # right bottom
        p2 = Point2D(b / 2, -h / 2 + h1)
        p3 = Point2D(-b / 2 + h1, -h / 2 + h1)
        p4 = Point2D(-b / 2 + h1, -h1 / 2)
        p5 = Point2D(b / 2, -h1 / 2)
        p6 = Point2D(b / 2, h1 / 2)
        p7 = Point2D(-b / 2 + h1, h1 / 2)
        p8 = Point2D(-b / 2 + h1, h / 2 - h1)
        p9 = Point2D(b / 2, h / 2 - h1)
        p10 = Point2D(b / 2, h / 2)
        p11 = Point2D(-b / 2, h / 2)
        p12 = Point2D(-b / 2, -h / 2)

        # describe curves
        l1 = Line2D(p1, p2)
        l2 = Line2D(p2, p3)
        l3 = Line2D(p3, p4)
        l4 = Line2D(p4, p5)
        l5 = Line2D(p5, p6)
        l6 = Line2D(p6, p7)
        l7 = Line2D(p7, p8)
        l8 = Line2D(p8, p9)
        l9 = Line2D(p9, p10)
        l10 = Line2D(p10, p11)
        l11 = Line2D(p11, p12)
        l12 = Line2D(p12, p1)

        self.curve = PolyCurve2D().by_joined_curves(
            [l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12])

    def serialize(self):
        return {
            'Description': self.Description,
            'ID': self.ID,
            'id': self.id,
            'type': self.type,
            'name': self.name,
            'h': self.h,
            'b': self.b,
            'h1': self.h1,
            'curve': self.curve.serialize() if self.curve else None
        }

    @staticmethod
    def deserialize(data):
        eshape = Eshape(
            name=data.get('name'),
            h=data.get('h'),
            b=data.get('b'),
            h1=data.get('h1')
        )

        eshape.Description = data.get('Description', "E-shape")
        eshape.ID = data.get('ID', "E")
        eshape.id = data.get('id')
        eshape.type = data.get('type')
        eshape.curve = PolyCurve2D.deserialize(
            data['curve']) if 'curve' in data else None

        return eshape

    def __str__(self):
        return "Profile(" + f"{self.name})"


class Nshape:
    def __init__(self, name, h, b, b1):
        self.Description = "N-shape"
        self.ID = "N"

        # parameters
        self.id = generateID()
        self.type = __class__.__name__
        self.name = name
        self.curve = []
        self.h = h  # height
        self.b = b  # width
        self.b1 = b1

        # describe points
        p1 = Point2D(b / 2, -h / 2)  # right bottom
        p2 = Point2D(b / 2, h / 2)
        p3 = Point2D(b / 2 - b1, h / 2)
        p4 = Point2D(b / 2 - b1, -h / 2 + b1 * 2)
        p5 = Point2D(-b / 2 + b1, h / 2)
        p6 = Point2D(-b / 2, h / 2)
        p7 = Point2D(-b / 2, -h / 2)
        p8 = Point2D(-b / 2 + b1, -h / 2)
        p9 = Point2D(-b / 2 + b1, h / 2 - b1 * 2)
        p10 = Point2D(b / 2 - b1, -h / 2)

        # describe curves
        l1 = Line2D(p1, p2)
        l2 = Line2D(p2, p3)
        l3 = Line2D(p3, p4)
        l4 = Line2D(p4, p5)
        l5 = Line2D(p5, p6)
        l6 = Line2D(p6, p7)
        l7 = Line2D(p7, p8)
        l8 = Line2D(p8, p9)
        l9 = Line2D(p9, p10)
        l10 = Line2D(p10, p1)

        self.curve = PolyCurve2D().by_joined_curves(
            [l1, l2, l3, l4, l5, l6, l7, l8, l9, l10])

    def serialize(self):
        return {
            'Description': self.Description,
            'ID': self.ID,
            'id': self.id,
            'type': self.type,
            'name': self.name,
            'h': self.h,
            'b': self.b,
            'b1': self.b1,
            'curve': self.curve.serialize() if self.curve else None
        }

    @staticmethod
    def deserialize(data):
        nshape = Nshape(
            name=data.get('name'),
            h=data.get('h'),
            b=data.get('b'),
            b1=data.get('b1')
        )

        nshape.Description = data.get('Description', "N-shape")
        nshape.ID = data.get('ID', "N")
        nshape.id = data.get('id')
        nshape.type = data.get('type')
        nshape.curve = PolyCurve2D.deserialize(
            data['curve']) if 'curve' in data else None

        return nshape

    def __str__(self):
        return "Profile(" + f"{self.name})"


class Arrowshape:
    def __init__(self, name, l, b, b1, l1):
        self.Description = "Arrow-shape"
        self.ID = "Arrowshape"

        # parameters
        self.id = generateID()
        self.type = __class__.__name__
        self.name = name
        self.curve = []
        self.l = l  # length
        self.b = b  # width
        self.b1 = b1
        self.l1 = l1

        # describe points
        p1 = Point2D(0, l / 2)  # top middle
        p2 = Point2D(b / 2, -l / 2 + l1)
        # p3 = Point2D(b1 / 2, -l / 2 + l1)
        p3 = Point2D(b1 / 2, (-l / 2 + l1) + (l / 2) / 4)
        p4 = Point2D(b1 / 2, -l / 2)
        p5 = Point2D(-b1 / 2, -l / 2)
        # p6 = Point2D(-b1 / 2, -l / 2 + l1)
        p6 = Point2D(-b1 / 2, (-l / 2 + l1) + (l / 2) / 4)
        p7 = Point2D(-b / 2, -l / 2 + l1)

        # describe curves
        l1 = Line2D(p1, p2)
        l2 = Line2D(p2, p3)
        l3 = Line2D(p3, p4)
        l4 = Line2D(p4, p5)
        l5 = Line2D(p5, p6)
        l6 = Line2D(p6, p7)
        l7 = Line2D(p7, p1)

        self.curve = PolyCurve2D().by_joined_curves(
            [l1, l2, l3, l4, l5, l6, l7])

    def serialize(self):
        return {
            'Description': self.Description,
            'ID': self.ID,
            'id': self.id,
            'type': self.type,
            'name': self.name,
            'l': self.l,
            'b': self.b,
            'b1': self.b1,
            'l1': self.l1,
            'curve': self.curve.serialize() if self.curve else None
        }

    @staticmethod
    def deserialize(data):
        arrowshape = Arrowshape(
            name=data.get('name'),
            l=data.get('l'),
            b=data.get('b'),
            b1=data.get('b1'),
            l1=data.get('l1')
        )

        arrowshape.Description = data.get('Description', "Arrow-shape")
        arrowshape.ID = data.get('ID', "Arrowshape")
        arrowshape.id = data.get('id')
        arrowshape.type = data.get('type')
        arrowshape.curve = PolyCurve2D.deserialize(
            data['curve']) if 'curve' in data else None

        return arrowshape

    def __str__(self):
        return "Profile(" + f"{self.name})"



sqrt2 = math.sqrt(2)

# Hierachie:
# point 2D
# line 2D
# PolyCurve2D 2D
# shape is een parametrische vorm heeft als resultaat een 2D curve
# section is een profiel met eigenschappen HEA200, 200,200,10,10,5 en eventuele rekenkundige eigenschappen.
# beam is een object wat in 3D zit met materiaal enz.


class CChannelParallelFlange:
    def __init__(self, name, h, b, tw, tf, r, ex):
        self.Description = "C-channel with parallel flange"
        self.ID = "C_PF"

        # parameters
        self.id = generateID()
        self.type = __class__.__name__
        self.name = name
        self.curve = []
        self.h = h  # height
        self.b = b  # width
        self.tw = tw  # web thickness
        self.tf = tf  # flange thickness
        self.r1 = r  # web fillet
        self.ex = ex  # centroid horizontal
        self.IfcProfileDef = "IfcUShapeProfileDef"

        # describe points
        p1 = Point2D(-ex, -h / 2)  # left bottom
        p2 = Point2D(b - ex, -h / 2)  # right bottom
        p3 = Point2D(b - ex, -h / 2 + tf)
        p4 = Point2D(-ex + tw + r, -h / 2 + tf)  # start arc
        p5 = Point2D(-ex + tw + r, -h / 2 + tf + r)  # second point arc
        p6 = Point2D(-ex + tw, -h / 2 + tf + r)  # end arc
        p7 = Point2D(-ex + tw, h / 2 - tf - r)  # start arc
        p8 = Point2D(-ex + tw + r, h / 2 - tf - r)  # second point arc
        p9 = Point2D(-ex + tw + r, h / 2 - tf)  # end arc
        p10 = Point2D(b - ex, h / 2 - tf)
        p11 = Point2D(b - ex, h / 2)  # right top
        p12 = Point2D(-ex, h / 2)  # left top

        # describe curves
        l1 = Line2D(p1, p2)
        l2 = Line2D(p2, p3)
        l3 = Line2D(p3, p4)
        l4 = Arc2D(p4, p5, p6)
        l5 = Line2D(p6, p7)
        l6 = Arc2D(p7, p8, p9)
        l7 = Line2D(p9, p10)
        l8 = Line2D(p10, p11)
        l9 = Line2D(p11, p12)
        l10 = Line2D(p12, p1)

        self.curve = PolyCurve2D().by_joined_curves(
            [l1, l2, l3, l4, l5, l6, l7, l8, l9, l10])

    def serialize(self):
        return {
            'id': self.id,
            'type': self.type,
            'Description': self.Description,
            'ID': self.ID,
            'name': self.name,
            'h': self.h,
            'b': self.b,
            'tw': self.tw,
            'tf': self.tf,
            'r1': self.r1,
            'ex': self.ex,
            'curve': self.curve.serialize() if self.curve else None
        }

    @staticmethod
    def deserialize(data):
        c_channel = CChannelParallelFlange(
            name=data.get('name'),
            h=data.get('h'),
            b=data.get('b'),
            tw=data.get('tw'),
            tf=data.get('tf'),
            r=data.get('r1'),
            ex=data.get('ex')
        )

        c_channel.Description = data.get(
            'Description', "C-channel with parallel flange")
        c_channel.ID = data.get('ID', "C_PF")
        c_channel.curve = PolyCurve2D.deserialize(
            data['curve']) if 'curve' in data else None

        return c_channel

    def __str__(self):
        return f"{self.type} ({self.name})"


class CChannelSlopedFlange:
    def __init__(self, name, h, b, tw, tf, r1, r2, tl, sa, ex):
        self.Description = "C-channel with sloped flange"
        self.ID = "C_SF"

        # parameters
        self.id = generateID()
        self.type = __class__.__name__
        self.name = name
        self.curve = []
        self.b = b  # width
        self.h = h  # height
        self.tf = tf  # flange thickness
        self.tw = tw  # web thickness
        self.r1 = r1  # web fillet
        self.r11 = r1 / sqrt2
        self.r2 = r2  # flange fillet
        self.r21 = r2 / sqrt2
        self.tl = tl  # flange thickness location from right
        self.sa = math.radians(sa)  # the angle of sloped flange in degrees
        self.ex = ex  # centroid horizontal
        self.IfcProfileDef = "IfcUShapeProfileDef"

        # describe points
        p1 = Point2D(-ex, -h / 2)  # left bottom
        p2 = Point2D(b - ex, -h / 2)  # right bottom
        p3 = Point2D(b - ex, -h / 2 + tf - math.tan(self.sa)
                     * tl - r2)  # start arc
        p4 = Point2D(b - ex - r2 + self.r21, -h / 2 + tf -
                     math.tan(self.sa) * tl - r2 + self.r21)  # second point arc
        p5 = Point2D(b - ex - r2 + math.sin(self.sa) * r2, -h /
                     2 + tf - math.tan(self.sa) * (tl - r2))  # end arc
        p6 = Point2D(-ex + tw + r1 - math.sin(self.sa) * r1, -h / 2 +
                     tf + math.tan(self.sa) * (b - tl - tw - r1))  # start arc
        p7 = Point2D(-ex + tw + r1 - self.r11, -h / 2 + tf + math.tan(self.sa)
                     * (b - tl - tw - r1) + r1 - self.r11)  # second point arc
        p8 = Point2D(-ex + tw, -h / 2 + tf + math.tan(self.sa)
                     * (b - tl - tw) + r1)  # end arc
        p9 = Point2D(p8.x, -p8.y)  # start arc
        p10 = Point2D(p7.x, -p7.y)  # second point arc
        p11 = Point2D(p6.x, -p6.y)  # end arc
        p12 = Point2D(p5.x, -p5.y)  # start arc
        p13 = Point2D(p4.x, -p4.y)  # second point arc
        p14 = Point2D(p3.x, -p3.y)  # end arc
        p15 = Point2D(p2.x, -p2.y)  # right top
        p16 = Point2D(p1.x, -p1.y)  # left top

        # describe curves
        l1 = Line2D(p1, p2)
        l2 = Line2D(p2, p3)
        l3 = Arc2D(p3, p4, p5)
        l4 = Line2D(p5, p6)
        l5 = Arc2D(p6, p7, p8)
        l6 = Line2D(p8, p9)
        l7 = Arc2D(p9, p10, p11)
        l8 = Line2D(p11, p12)
        l9 = Arc2D(p12, p13, p14)
        l10 = Line2D(p14, p15)
        l11 = Line2D(p15, p16)
        l12 = Line2D(p16, p1)

        self.curve = PolyCurve2D().by_joined_curves(
            [l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12])

    def serialize(self):
        return {
            'Description': self.Description,
            'ID': self.ID,
            'id': self.id,
            'type': self.type,
            'name': self.name,
            'h': self.h,
            'b': self.b,
            'tw': self.tw,
            'tf': self.tf,
            'r1': self.r1,
            'r11': self.r11,
            'r2': self.r2,
            'r21': self.r21,
            'tl': self.tl,
            'sa': self.sa,
            'ex': self.ex,
            'curve': self.curve.serialize() if self.curve else None
        }

    @staticmethod
    def deserialize(data):
        c_channel_sf = CChannelSlopedFlange(
            name=data.get('name'),
            h=data.get('h'),
            b=data.get('b'),
            tw=data.get('tw'),
            tf=data.get('tf'),
            r1=data.get('r1'),
            r2=data.get('r2'),
            tl=data.get('tl'),
            sa=data.get('sa'),
            ex=data.get('ex')
        )

        c_channel_sf.Description = data.get(
            'Description', "C-channel with sloped flange")
        c_channel_sf.ID = data.get('ID', "C_SF")
        c_channel_sf.id = data.get('id')
        c_channel_sf.type = data.get('type')
        c_channel_sf.curve = PolyCurve2D.deserialize(
            data['curve']) if 'curve' in data else None

        return c_channel_sf

    def __str__(self):
        return f"{self.type} ({self.name})"


class IShapeParallelFlange:
    def __init__(self, name, h, b, tw, tf, r):
        self.Description = "I Shape profile with parallel flange"
        self.ID = "I_PF"
        # HEA, IPE, HEB, HEM etc.

        # parameters
        self.id = generateID()
        self.type = __class__.__name__
        self.name = name
        self.h = h  # height
        self.b = b  # width
        self.tw = tw  # web thickness
        self.tf = tf  # flange thickness
        self.r = r  # web fillet
        self.r1 = r1 = r / sqrt2
        self.IfcProfileDef = "IfcIShapeProfileDef"

        # describe points
        p1 = Point2D(b / 2, -h / 2)  # right bottom
        p2 = Point2D(b / 2, -h / 2 + tf)
        p3 = Point2D(tw / 2 + r, -h / 2 + tf)  # start arc
        # second point arc
        p4 = Point2D(tw / 2 + r - r1, (-h / 2 + tf + r - r1))
        p5 = Point2D(tw / 2, -h / 2 + tf + r)  # end arc
        p6 = Point2D(tw / 2, h / 2 - tf - r)  # start arc
        p7 = Point2D(tw / 2 + r - r1, h / 2 - tf - r + r1)  # second point arc
        p8 = Point2D(tw / 2 + r, h / 2 - tf)  # end arc
        p9 = Point2D(b / 2, h / 2 - tf)
        p10 = Point2D((b / 2), (h / 2))  # right top
        p11 = Point2D(-p10.x, p10.y)  # left top
        p12 = Point2D(-p9.x, p9.y)
        p13 = Point2D(-p8.x, p8.y)  # start arc
        p14 = Point2D(-p7.x, p7.y)  # second point arc
        p15 = Point2D(-p6.x, p6.y)  # end arc
        p16 = Point2D(-p5.x, p5.y)  # start arc
        p17 = Point2D(-p4.x, p4.y)  # second point arc
        p18 = Point2D(-p3.x, p3.y)  # end arc
        p19 = Point2D(-p2.x, p2.y)
        p20 = Point2D(-p1.x, p1.y)

        # describe curves
        l1 = Line2D(p1, p2)
        l2 = Line2D(p2, p3)
        l3 = Arc2D(p3, p4, p5)
        l4 = Line2D(p5, p6)
        l5 = Arc2D(p6, p7, p8)
        l6 = Line2D(p8, p9)
        l7 = Line2D(p9, p10)
        l8 = Line2D(p10, p11)
        l9 = Line2D(p11, p12)
        l10 = Line2D(p12, p13)
        l11 = Arc2D(p13, p14, p15)
        l12 = Line2D(p15, p16)
        l13 = Arc2D(p16, p17, p18)
        l14 = Line2D(p18, p19)
        l15 = Line2D(p19, p20)
        l16 = Line2D(p20, p1)

        self.curve = PolyCurve2D().by_joined_curves(
            [l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16])

    def serialize(self):
        return {
            'Description': self.Description,
            'ID': self.ID,
            'id': self.id,
            'type': self.type,
            'name': self.name,
            'h': self.h,
            'b': self.b,
            'tw': self.tw,
            'tf': self.tf,
            'r': self.r,
            'r1': self.r1,
            'curve': self.curve.serialize() if self.curve else None
        }

    @staticmethod
    def deserialize(data):
        i_shape_pf = IShapeParallelFlange(
            name=data.get('name'),
            h=data.get('h'),
            b=data.get('b'),
            tw=data.get('tw'),
            tf=data.get('tf'),
            r=data.get('r')
        )

        i_shape_pf.Description = data.get(
            'Description', "I Shape profile with parallel flange")
        i_shape_pf.ID = data.get('ID', "I_PF")
        i_shape_pf.id = data.get('id')
        i_shape_pf.type = data.get('type')
        i_shape_pf.r1 = data.get('r1')
        i_shape_pf.curve = PolyCurve2D.deserialize(
            data['curve']) if 'curve' in data else None

        return i_shape_pf

    def __str__(self):
        return f"{self.type} ({self.name})"


class Rectangle:
    def __init__(self, name, b, h):
        self.Description = "Rectangle"
        self.ID = "Rec"

        # parameters
        self.id = generateID()
        self.type = __class__.__name__
        self.name = name
        self.curve = []
        self.h = h  # height
        self.b = b  # width
        self.IfcProfileDef = "IfcRectangleProfileDef"

        # describe points
        p1 = Point2D(b / 2, -h / 2)  # right bottom
        p2 = Point2D(b / 2, h / 2)  # right top
        p3 = Point2D(-b / 2, h / 2)  # left top
        p4 = Point2D(-b / 2, -h / 2)  # left bottom

        # describe curves
        l1 = Line2D(p1, p2)
        l2 = Line2D(p2, p3)
        l3 = Line2D(p3, p4)
        l4 = Line2D(p4, p1)

        self.curve = PolyCurve2D().by_joined_curves([l1, l2, l3, l4])

    def serialize(self):
        return {
            'Description': self.Description,
            'ID': self.ID,
            'id': self.id,
            'type': self.type,
            'name': self.name,
            'h': self.h,
            'b': self.b,
            'curve': self.curve.serialize() if self.curve else None
        }

    @staticmethod
    def deserialize(data):
        rectangle = Rectangle(
            name=data.get('name'),
            b=data.get('b'),
            h=data.get('h')
        )

        rectangle.Description = data.get('Description', "Rectangle")
        rectangle.ID = data.get('ID', "Rec")
        rectangle.id = data.get('id')
        rectangle.type = data.get('type')
        rectangle.curve = PolyCurve2D.deserialize(
            data['curve']) if 'curve' in data else None

        return rectangle

    def __str__(self):
        return f"{self.type} ({self.name})"


class Round:
    def __init__(self, name, r):
        self.Description = "Round"
        self.ID = "Rnd"

        # parameters
        self.id = generateID()
        self.type = __class__.__name__
        self.name = name
        self.curve = []
        self.r = r  # radius
        self.data = (name, r, "Round")
        dr = r / sqrt2  # grootste deel
        self.IfcProfileDef = "IfcCircleProfileDef"

        # describe points
        p1 = Point2D(r, 0)  # right middle
        p2 = Point2D(dr, dr)
        p3 = Point2D(0, r)  # middle top
        p4 = Point2D(-dr, dr)
        p5 = Point2D(-r, 0)  # left middle
        p6 = Point2D(-dr, -dr)
        p7 = Point2D(0, -r)  # middle bottom
        p8 = Point2D(dr, -dr)

        # describe curves
        l1 = Arc2D(p1, p2, p3)
        l2 = Arc2D(p3, p4, p5)
        l3 = Arc2D(p5, p6, p7)
        l4 = Arc2D(p7, p8, p1)

        self.curve = PolyCurve2D().by_joined_curves([l1, l2, l3, l4])

    def serialize(self):
        return {
            'Description': self.Description,
            'ID': self.ID,
            'id': self.id,
            'type': self.type,
            'name': self.name,
            'r': self.r,
            'data': self.data,
            'curve': self.curve.serialize() if self.curve else None
        }

    @staticmethod
    def deserialize(data):
        round_shape = Round(
            name=data.get('name'),
            r=data.get('r')
        )

        round_shape.Description = data.get('Description', "Round")
        round_shape.ID = data.get('ID', "Rnd")
        round_shape.id = data.get('id')
        round_shape.type = data.get('type')
        round_shape.data = data.get(
            'data', (data.get('name'), data.get('r'), "Round"))
        round_shape.curve = PolyCurve2D.deserialize(
            data['curve']) if 'curve' in data else None

        return round_shape

    def __str__(self):
        return f"{self.type} ({self.name})"


class Roundtube:
    def __init__(self, name, d, t):
        self.Description = "Round Tube Profile"
        self.ID = "Tube"

        # parameters
        self.id = generateID()
        self.type = __class__.__name__
        self.name = name
        self.curve = []
        self.d = d
        self.r = d/2  # radius
        self.t = t  # wall thickness
        self.data = (name, d, t, "Round Tube Profile")
        dr = self.r / sqrt2  # grootste deel
        r = self.r
        ri = r-t
        dri = ri / sqrt2
        self.IfcProfileDef = "IfcCircleHollowProfileDef"

        # describe points
        p1 = Point2D(r, 0)  # right middle
        p2 = Point2D(dr, dr)
        p3 = Point2D(0, r)  # middle top
        p4 = Point2D(-dr, dr)
        p5 = Point2D(-r, 0)  # left middle
        p6 = Point2D(-dr, -dr)
        p7 = Point2D(0, -r)  # middle bottom
        p8 = Point2D(dr, -dr)

        p9 = Point2D(ri, 0)  # right middle inner
        p10 = Point2D(dri, dri)
        p11 = Point2D(0, ri)  # middle top inner
        p12 = Point2D(-dri, dri)
        p13 = Point2D(-ri, 0)  # left middle inner
        p14 = Point2D(-dri, -dri)
        p15 = Point2D(0, -ri)  # middle bottom inner
        p16 = Point2D(dri, -dri)

        # describe curves
        l1 = Arc2D(p1, p2, p3)
        l2 = Arc2D(p3, p4, p5)
        l3 = Arc2D(p5, p6, p7)
        l4 = Arc2D(p7, p8, p1)

        l5 = Line2D(p1, p9)

        l6 = Arc2D(p9, p10, p11)
        l7 = Arc2D(p11, p12, p13)
        l8 = Arc2D(p13, p14, p15)
        l9 = Arc2D(p15, p16, p9)
        l10 = Line2D(p9, p1)

        self.curve = PolyCurve2D().by_joined_curves(
            [l1, l2, l3, l4, l5, l6, l7, l8, l9, l10])

    def serialize(self):
        return {
            'Description': self.Description,
            'ID': self.ID,
            'id': self.id,
            'type': self.type,
            'name': self.name,
            'd': self.d,
            'r': self.r,
            't': self.t,
            'data': self.data,
            'curve': self.curve.serialize() if self.curve else None
        }

    @staticmethod
    def deserialize(data):
        roundtube = Roundtube(
            name=data.get('name'),
            d=data.get('d'),
            t=data.get('t')
        )

        roundtube.Description = data.get('Description', "Round Tube Profile")
        roundtube.ID = data.get('ID', "Tube")
        roundtube.id = data.get('id')
        roundtube.type = data.get('type')
        roundtube.data = data.get('data', (data.get('name'), data.get(
            'd'), data.get('t'), "Round Tube Profile"))
        roundtube.curve = PolyCurve2D.deserialize(
            data['curve']) if 'curve' in data else None

        return roundtube

    def __str__(self):
        return f"{self.type} ({self.name})"


class LAngle:
    def __init__(self, name, h, b, tw, tf, r1, r2, ex, ey):
        self.Description = "LAngle"
        self.ID = "L"

        # parameters
        self.id = generateID()
        self.type = __class__.__name__
        self.name = name
        self.curve = []
        self.b = b  # width
        self.h = h  # height
        self.tw = tw  # wall nominal thickness
        self.tf = tw
        self.r1 = r1  # inner fillet
        self.r11 = r1 / sqrt2
        self.r2 = r2  # outer fillet
        self.r21 = r2 / sqrt2
        self.ex = ex  # from left
        self.ey = ey  # from bottom
        self.IfcProfileDef = "IfcLShapeProfileDef"

        # describe points
        p1 = Point2D(-ex, -ey)  # left bottom
        p2 = Point2D(b - ex, -ey)  # right bottom
        p3 = Point2D(b - ex, -ey + tf - r2)  # start arc
        p4 = Point2D(b - ex - r2 + self.r21, -ey + tf -
                     r2 + self.r21)  # second point arc
        p5 = Point2D(b - ex - r2, -ey + tf)  # end arc
        p6 = Point2D(-ex + tf + r1, -ey + tf)  # start arc
        p7 = Point2D(-ex + tf + r1 - self.r11, -ey + tf +
                     r1 - self.r11)  # second point arc
        p8 = Point2D(-ex + tf, -ey + tf + r1)  # end arc
        p9 = Point2D(-ex + tf, h - ey - r2)  # start arc
        p10 = Point2D(-ex + tf - r2 + self.r21, h - ey -
                      r2 + self.r21)  # second point arc
        p11 = Point2D(-ex + tf - r2, h - ey)  # end arc
        p12 = Point2D(-ex, h - ey)  # left top

        # describe curves
        l1 = Line2D(p1, p2)
        l2 = Line2D(p2, p3)
        l3 = Arc2D(p3, p4, p5)
        l4 = Line2D(p5, p6)
        l5 = Arc2D(p6, p7, p8)
        l6 = Line2D(p8, p9)
        l7 = Arc2D(p9, p10, p11)
        l8 = Line2D(p11, p12)
        l9 = Line2D(p12, p1)

        self.curve = PolyCurve2D().by_joined_curves(
            [l1, l2, l3, l4, l5, l6, l7, l8, l9])

    def serialize(self):
        return {
            'Description': self.Description,
            'ID': self.ID,
            'id': self.id,
            'type': self.type,
            'name': self.name,
            'b': self.b,
            'h': self.h,
            'tw': self.tw,
            'tf': self.tf,
            'r1': self.r1,
            'r11': self.r11,
            'r2': self.r2,
            'r21': self.r21,
            'ex': self.ex,
            'ey': self.ey,
            'curve': self.curve.serialize() if self.curve else None
        }

    @staticmethod
    def deserialize(data):
        langle = LAngle(
            name=data.get('name'),
            h=data.get('h'),
            b=data.get('b'),
            tw=data.get('tw'),
            tf=data.get('tf'),
            r1=data.get('r1'),
            r2=data.get('r2'),
            ex=data.get('ex'),
            ey=data.get('ey')
        )

        langle.Description = data.get('Description', "LAngle")
        langle.ID = data.get('ID', "L")
        langle.id = data.get('id')
        langle.type = data.get('type')
        langle.r11 = data.get('r11')
        langle.r21 = data.get('r21')
        langle.curve = PolyCurve2D.deserialize(
            data['curve']) if 'curve' in data else None

        return langle

    def __str__(self):
        return f"{self.type} ({self.name})"


class TProfile:
    # ToDo: inner outer fillets in polycurve
    def __init__(self, name, h, b, tw, tf, r, r1, r2, ex, ey):
        self.Description = "TProfile"
        self.ID = "T"

        # parameters
        self.id = generateID()
        self.type = __class__.__name__
        self.name = name
        self.curve = []
        self.b = b  # width
        self.h = h  # height
        self.tw = tw  # wall nominal thickness
        self.tf = tw
        self.r = r  # inner fillet
        self.r01 = r/sqrt2
        self.r1 = r1  # outer fillet flange
        self.r11 = r1 / sqrt2
        self.r2 = r2  # outer fillet top web
        self.r21 = r2 / sqrt2
        self.ex = ex  # from left
        self.ey = ey  # from bottom
        self.IfcProfileDef = "IfcTShapeProfileDef"

        # describe points
        p1 = Point2D(-ex, -ey)  # left bottom
        p2 = Point2D(b - ex, -ey)  # right bottom
        p3 = Point2D(b - ex, -ey + tf - r1)  # start arc
        p4 = Point2D(b - ex - r1 + self.r11, -ey + tf -
                     r1 + self.r11)  # second point arc
        p5 = Point2D(b - ex - r1, -ey + tf)  # end arc
        p6 = Point2D(0.5 * tw + r, -ey + tf)  # start arc
        p7 = Point2D(0.5 * tw + r - self.r01, -ey + tf +
                     r - self.r01)  # second point arc
        p8 = Point2D(0.5 * tw, -ey + tf + r)  # end arc
        p9 = Point2D(0.5 * tw, -ey + h - r2)  # start arc
        p10 = Point2D(0.5 * tw - self.r21, -ey + h -
                      r2 + self.r21)  # second point arc
        p11 = Point2D(0.5 * tw - r2, -ey + h)  # end arc

        p12 = Point2D(-p11.x, p11.y)
        p13 = Point2D(-p10.x, p10.y)
        p14 = Point2D(-p9.x, p9.y)
        p15 = Point2D(-p8.x, p8.y)
        p16 = Point2D(-p7.x, p7.y)
        p17 = Point2D(-p6.x, p6.y)
        p18 = Point2D(-p5.x, p5.y)
        p19 = Point2D(-p4.x, p4.y)
        p20 = Point2D(-p3.x, p3.y)

        # describe curves
        l1 = Line2D(p1, p2)

        l2 = Line2D(p2, p3)
        l3 = Arc2D(p3, p4, p5)
        l4 = Line2D(p5, p6)
        l5 = Arc2D(p6, p7, p8)
        l6 = Line2D(p8, p9)
        l7 = Arc2D(p9, p10, p11)
        l8 = Line2D(p11, p12)

        l9 = Arc2D(p12, p13, p14)
        l10 = Line2D(p14, p15)
        l11 = Arc2D(p15, p16, p17)
        l12 = Line2D(p17, p18)
        l13 = Arc2D(p18, p19, p20)
        l14 = Line2D(p20, p1)

        self.curve = PolyCurve2D().by_joined_curves(
            [l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14])

    def serialize(self):
        return {
            'Description': self.Description,
            'ID': self.ID,
            'id': self.id,
            'type': self.type,
            'name': self.name,
            'b': self.b,
            'h': self.h,
            'tw': self.tw,
            'tf': self.tf,
            'r': self.r,
            'r01': self.r01,
            'r1': self.r1,
            'r11': self.r11,
            'r2': self.r2,
            'r21': self.r21,
            'ex': self.ex,
            'ey': self.ey,
            'curve': self.curve.serialize() if self.curve else None
        }

    @staticmethod
    def deserialize(data):
        t_profile = TProfile(
            name=data.get('name'),
            h=data.get('h'),
            b=data.get('b'),
            tw=data.get('tw'),
            tf=data.get('tf'),
            r=data.get('r'),
            r1=data.get('r1'),
            r2=data.get('r2'),
            ex=data.get('ex'),
            ey=data.get('ey')
        )

        t_profile.Description = data.get('Description', "TProfile")
        t_profile.ID = data.get('ID', "T")
        t_profile.id = data.get('id')
        t_profile.type = data.get('type')
        t_profile.r01 = data.get('r01')
        t_profile.r11 = data.get('r11')
        t_profile.r21 = data.get('r21')
        t_profile.curve = PolyCurve2D.deserialize(
            data['curve']) if 'curve' in data else None

        return t_profile

    def __str__(self):
        return f"{self.type} ({self.name})"


class RectangleHollowSection:
    def __init__(self, name, h, b, t, r1, r2):
        self.Description = "Rectangle Hollow Section"
        self.ID = "RHS"

        # parameters
        self.id = generateID()
        self.type = __class__.__name__
        self.name = name
        self.curve = []
        self.h = h  # height
        self.b = b  # width
        self.t = t  # thickness
        self.r1 = r1  # outer radius
        self.r2 = r2  # inner radius
        dr = r1 - r1 / sqrt2
        dri = r2 - r2 / sqrt2
        bi = b-t
        hi = h-t
        self.IfcProfileDef = "IfcRectangleHollowProfileDef"

        # describe points
        p1 = Point2D(-b / 2 + r1, - h / 2)  # left bottom end arc
        p2 = Point2D(b / 2 - r1, - h / 2)  # right bottom start arc
        p3 = Point2D(b / 2 - dr, - h / 2 + dr)  # right bottom mid arc
        p4 = Point2D(b / 2, - h / 2 + r1)  # right bottom end arc
        p5 = Point2D(p4.x, -p4.y)  # right start arc
        p6 = Point2D(p3.x, -p3.y)  # right mid arc
        p7 = Point2D(p2.x, -p2.y)  # right end arc
        p8 = Point2D(-p7.x, p7.y)  # left start arc
        p9 = Point2D(-p6.x, p6.y)  # left mid arc
        p10 = Point2D(-p5.x, p5.y)  # left end arc
        p11 = Point2D(p10.x, -p10.y)  # right bottom start arc
        p12 = Point2D(p9.x, -p9.y)  # right bottom mid arc

        # inner part
        p13 = Point2D(-bi / 2 + r2, - hi / 2)  # left bottom end arc
        p14 = Point2D(bi / 2 - r2, - hi / 2)  # right bottom start arc
        p15 = Point2D(bi / 2 - dri, - hi / 2 + dri)  # right bottom mid arc
        p16 = Point2D(bi / 2, - hi / 2 + r2)  # right bottom end arc
        p17 = Point2D(p16.x, -p16.y)  # right start arc
        p18 = Point2D(p15.x, -p15.y)  # right mid arc
        p19 = Point2D(p14.x, -p14.y)  # right end arc
        p20 = Point2D(-p19.x, p19.y)  # left start arc
        p21 = Point2D(-p18.x, p18.y)  # left mid arc
        p22 = Point2D(-p17.x, p17.y)  # left end arc
        p23 = Point2D(p22.x, -p22.y)  # right bottom start arc
        p24 = Point2D(p21.x, -p21.y)  # right bottom mid arc

        # describe outer curves
        l1 = Line2D(p1, p2)
        l2 = Arc2D(p2, p3, p4)
        l3 = Line2D(p4, p5)
        l4 = Arc2D(p5, p6, p7)
        l5 = Line2D(p7, p8)
        l6 = Arc2D(p8, p9, p10)
        l7 = Line2D(p10, p11)
        l8 = Arc2D(p11, p12, p1)

        l9 = Line2D(p1, p13)
        # describe inner curves
        l10 = Line2D(p13, p14)
        l11 = Arc2D(p14, p15, p16)
        l12 = Line2D(p16, p17)
        l13 = Arc2D(p17, p18, p19)
        l14 = Line2D(p19, p20)
        l15 = Arc2D(p20, p21, p22)
        l16 = Line2D(p22, p23)
        l17 = Arc2D(p23, p24, p13)

        l18 = Line2D(p13, p1)

        self.curve = PolyCurve2D().by_joined_curves(
            [l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16, l17, l18])

    def serialize(self):
        return {
            'Description': self.Description,
            'ID': self.ID,
            'id': self.id,
            'type': self.type,
            'name': self.name,
            'h': self.h,
            'b': self.b,
            't': self.t,
            'r1': self.r1,
            'r2': self.r2,
            'curve': self.curve.serialize() if self.curve else None
        }

    @staticmethod
    def deserialize(data):
        rhs = RectangleHollowSection(
            name=data.get('name'),
            h=data.get('h'),
            b=data.get('b'),
            t=data.get('t'),
            r1=data.get('r1'),
            r2=data.get('r2')
        )

        rhs.Description = data.get('Description', "Rectangle Hollow Section")
        rhs.ID = data.get('ID', "RHS")
        rhs.id = data.get('id')
        rhs.type = data.get('type')
        rhs.curve = PolyCurve2D.deserialize(
            data['curve']) if 'curve' in data else None

        return rhs

    def __str__(self):
        return f"{self.type} ({self.name})"


class CProfile:
    def __init__(self, name, b, h, t, r1, ex):
        self.Description = "Cold Formed C Profile"
        self.ID = "CP"

        # parameters
        self.id = generateID()
        self.type = __class__.__name__
        self.name = name
        self.curve = []
        self.h = h  # height
        self.b = b  # width
        self.t = t  # flange thickness
        self.r1 = r1  # outer radius
        self.r2 = r1-t  # inner radius
        r2 = r1-t

        self.ex = ex
        self.ey = h/2
        dr = r1 - r1/sqrt2
        dri = r2 - r2/sqrt2
        hi = h-t
        self.IfcProfileDef = "Unknown"

        # describe points
        p1 = Point2D(b-ex, -h/2)  # right bottom
        p2 = Point2D(r1-ex, -h/2)
        p3 = Point2D(dr-ex, -h/2+dr)
        p4 = Point2D(0-ex, -h/2+r1)
        p5 = Point2D(p4.x, -p4.y)
        p6 = Point2D(p3.x, -p3.y)
        p7 = Point2D(p2.x, -p2.y)
        p8 = Point2D(p1.x, -p1.y)  # right top
        p9 = Point2D(b-ex, hi/2)  # right top inner
        p10 = Point2D(t+r2-ex, hi/2)
        p11 = Point2D(t+dri-ex, hi/2-dri)
        p12 = Point2D(t-ex, hi/2-r2)
        p13 = Point2D(p12.x, -p12.y)
        p14 = Point2D(p11.x, -p11.y)
        p15 = Point2D(p10.x, -p10.y)
        p16 = Point2D(p9.x, -p9.y)  # right bottom inner
        # describe outer curves
        l1 = Line2D(p1, p2)  # bottom
        l2 = Arc2D(p2, p3, p4)  # right outer fillet
        l3 = Line2D(p4, p5)  # left outer web
        l4 = Arc2D(p5, p6, p7)  # left top outer fillet
        l5 = Line2D(p7, p8)  # outer top
        l6 = Line2D(p8, p9)
        l7 = Line2D(p9, p10)
        l8 = Arc2D(p10, p11, p12)  # left top inner fillet
        l9 = Line2D(p12, p13)
        l10 = Arc2D(p13, p14, p15)  # left botom inner fillet
        l11 = Line2D(p15, p16)
        l12 = Line2D(p16, p1)

        self.curve = PolyCurve2D().by_joined_curves(
            [l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12])

    def serialize(self):
        return {
            'Description': self.Description,
            'ID': self.ID,
            'id': self.id,
            'type': self.type,
            'name': self.name,
            'h': self.h,
            'b': self.b,
            't': self.t,
            'r1': self.r1,
            'r2': self.r2,
            'ex': self.ex,
            'ey': self.ey,
            'curve': self.curve.serialize() if self.curve else None
        }

    @staticmethod
    def deserialize(data):
        c_profile = CProfile(
            name=data.get('name'),
            b=data.get('b'),
            h=data.get('h'),
            t=data.get('t'),
            r1=data.get('r1'),
            ex=data.get('ex')
        )

        c_profile.Description = data.get(
            'Description', "Cold Formed C Profile")
        c_profile.ID = data.get('ID', "CP")
        c_profile.id = data.get('id')
        c_profile.type = data.get('type')
        c_profile.r2 = data.get('r2')
        c_profile.ey = data.get('ey')
        c_profile.curve = PolyCurve2D.deserialize(
            data['curve']) if 'curve' in data else None

        return c_profile

    def __str__(self):
        return f"{self.type} ({self.name})"


class CProfileWithLips:
    def __init__(self, name, b, h, h1, t, r1, ex):
        self.Description = "Cold Formed C Profile with Lips"
        self.ID = "CPWL"

        # parameters
        self.id = generateID()
        self.type = __class__.__name__
        self.name = name
        self.curve = []
        self.h = h  # height
        self.b = b  # width
        self.h1 = h1  # lip length
        self.t = t  # flange thickness
        self.r1 = r1  # outer radius
        self.r2 = r1-t  # inner radius
        r2 = r1-t

        self.ex = ex
        self.ey = h/2
        dr = r1 - r1/sqrt2
        dri = r2 - r2/sqrt2
        hi = h-t
        self.IfcProfileDef = "Unknown"

        # describe points
        p1 = Point2D(b-ex-r1, -h/2)  # right bottom  before fillet
        p2 = Point2D(r1-ex, -h/2)
        p3 = Point2D(dr-ex, -h/2+dr)
        p4 = Point2D(0-ex, -h/2+r1)
        p5 = Point2D(p4.x, -p4.y)
        p6 = Point2D(p3.x, -p3.y)
        p7 = Point2D(p2.x, -p2.y)
        p8 = Point2D(p1.x, -p1.y)  # right top before fillet
        p9 = Point2D(b-ex-dr, h/2-dr)  # middle point arc
        p10 = Point2D(b-ex, h/2-r1)  # end fillet
        p11 = Point2D(b-ex, h/2-h1)
        p12 = Point2D(b-ex-t, h/2-h1)  # bottom lip
        p13 = Point2D(b-ex-t, h/2-t-r2)  # start inner fillet right top
        p14 = Point2D(b-ex-t-dri, h/2-t-dri)
        p15 = Point2D(b-ex-t-r2, h/2-t)  # end inner fillet right top
        p16 = Point2D(0-ex+t+r2, h/2-t)
        p17 = Point2D(0-ex+t+dri, h/2-t-dri)
        p18 = Point2D(0-ex+t, h/2-t-r2)

        p19 = Point2D(p18.x, -p18.y)
        p20 = Point2D(p17.x, -p17.y)
        p21 = Point2D(p16.x, -p16.y)
        p22 = Point2D(p15.x, -p15.y)
        p23 = Point2D(p14.x, -p14.y)
        p24 = Point2D(p13.x, -p13.y)
        p25 = Point2D(p12.x, -p12.y)
        p26 = Point2D(p11.x, -p11.y)
        p27 = Point2D(p10.x, -p10.y)
        p28 = Point2D(p9.x, -p9.y)

        # describe outer curves
        l1 = Line2D(p1, p2)
        l2 = Arc2D(p2, p3, p4)
        l3 = Line2D(p4, p5)
        l4 = Arc2D(p5, p6, p7)  # outer fillet right top
        l5 = Line2D(p7, p8)
        l6 = Arc2D(p8, p9, p10)
        l7 = Line2D(p10, p11)
        l8 = Line2D(p11, p12)
        l9 = Line2D(p12, p13)
        l10 = Arc2D(p13, p14, p15)
        l11 = Line2D(p15, p16)
        l12 = Arc2D(p16, p17, p18)
        l13 = Line2D(p18, p19)  # inner web
        l14 = Arc2D(p19, p20, p21)
        l15 = Line2D(p21, p22)
        l16 = Arc2D(p22, p23, p24)
        l17 = Line2D(p24, p25)
        l18 = Line2D(p25, p26)
        l19 = Line2D(p26, p27)
        l20 = Arc2D(p27, p28, p1)

        self.curve = PolyCurve2D().by_joined_curves(
            [l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16, l17, l18, l19, l20])

    def serialize(self):
        return {
            'Description': self.Description,
            'ID': self.ID,
            'id': self.id,
            'type': self.type,
            'name': self.name,
            'h': self.h,
            'b': self.b,
            'h1': self.h1,
            't': self.t,
            'r1': self.r1,
            'r2': self.r2,
            'ex': self.ex,
            'ey': self.ey,
            'curve': self.curve.serialize() if self.curve else None
        }

    @staticmethod
    def deserialize(data):
        c_profile_with_lips = CProfileWithLips(
            name=data.get('name'),
            b=data.get('b'),
            h=data.get('h'),
            h1=data.get('h1'),
            t=data.get('t'),
            r1=data.get('r1'),
            ex=data.get('ex')
        )

        c_profile_with_lips.Description = data.get(
            'Description', "Cold Formed C Profile with Lips")
        c_profile_with_lips.ID = data.get('ID', "CPWL")
        c_profile_with_lips.id = data.get('id')
        c_profile_with_lips.type = data.get('type')
        c_profile_with_lips.r2 = data.get('r2')
        c_profile_with_lips.ey = data.get('ey')
        c_profile_with_lips.curve = PolyCurve2D.deserialize(
            data['curve']) if 'curve' in data else None

        return c_profile_with_lips

    def __str__(self):
        return "Profile(" + f"{self.name})"


class LProfileColdFormed:
    def __init__(self, name, b, h, t, r1, ex, ey):
        self.Description = "Cold Formed L Profile"
        self.ID = "CF_L"

        # parameters
        self.id = generateID()
        self.type = __class__.__name__
        self.name = name
        self.curve = []
        self.h = h  # height
        self.b = b  # width
        self.t = t  # flange thickness
        self.r1 = r1  # inner radius
        self.r2 = r1-t  # outer radius
        self.ex = ex
        self.ey = ey
        r11 = r1/math.sqrt(2)
        r2 = r1+t
        r21 = r2/math.sqrt(2)
        self.IfcProfileDef = "Unknown"

        # describe points
        p1 = Point2D(-ex, -ey + r2)  # start arc left bottom
        p2 = Point2D(-ex + r2 - r21, -ey + r2 - r21)  # second point arc
        p3 = Point2D(-ex + r2, -ey)  # end arc
        p4 = Point2D(b - ex, -ey)  # right bottom
        p5 = Point2D(b - ex, -ey + t)
        p6 = Point2D(-ex + t + r1, -ey + t)  # start arc
        p7 = Point2D(-ex + t + r1 - r11, -ey + t +
                     r1 - r11)  # second point arc
        p8 = Point2D(-ex + t, -ey + t + r1)  # end arc
        p9 = Point2D(-ex + t, ey)
        p10 = Point2D(-ex, ey)  # left top

        l1 = Arc2D(p1, p2, p3)
        l2 = Line2D(p3, p4)
        l3 = Line2D(p4, p5)
        l4 = Line2D(p5, p6)
        l5 = Arc2D(p6, p7, p8)
        l6 = Line2D(p8, p9)
        l7 = Line2D(p9, p10)
        l8 = Line2D(p10, p1)

        self.curve = PolyCurve2D().by_joined_curves(
            [l1, l2, l3, l4, l5, l6, l7, l8])

    def serialize(self):
        return {
            'Description': self.Description,
            'ID': self.ID,
            'id': self.id,
            'type': self.type,
            'name': self.name,
            'h': self.h,
            'b': self.b,
            't': self.t,
            'r1': self.r1,
            'r2': self.r2,
            'ex': self.ex,
            'ey': self.ey,
            'curve': self.curve.serialize() if self.curve else None
        }

    @staticmethod
    def deserialize(data):
        l_profile_cold_formed = LProfileColdFormed(
            name=data.get('name'),
            b=data.get('b'),
            h=data.get('h'),
            t=data.get('t'),
            r1=data.get('r1'),
            ex=data.get('ex'),
            ey=data.get('ey')
        )

        l_profile_cold_formed.Description = data.get(
            'Description', "Cold Formed L Profile")
        l_profile_cold_formed.ID = data.get('ID', "CF_L")
        l_profile_cold_formed.id = data.get('id')
        l_profile_cold_formed.type = data.get('type')
        l_profile_cold_formed.r2 = data.get('r2')
        l_profile_cold_formed.curve = PolyCurve2D.deserialize(
            data['curve']) if 'curve' in data else None

        return l_profile_cold_formed

    def __str__(self):
        return f"{self.type} ({self.name})"


class SigmaProfileWithLipsColdFormed:
    def __init__(self, name, b, h, t, r1, h1, h2, h3, b2, ex):
        self.Description = "Cold Formed Sigma Profile with Lips"
        self.ID = "CF_SWL"

        # parameters
        self.id = generateID()
        self.type = __class__.__name__
        self.name = name
        self.curve = []
        self.h = h  # height
        self.h1 = h1  # LipLength
        self.h2 = h2  # MiddleBendLength
        self.h3 = h3  # TopBendLength
        self.h4 = h4 = (h - h2 - h3 * 2) / 2
        self.h5 = h5 = math.tan(0.5 * math.atan(b2 / h4)) * t
        self.b = b  # width
        self.b2 = b2  # MiddleBendWidth
        self.t = t  # flange thickness
        self.r1 = r1  # inner radius
        self.r2 = r2 = r1+t  # outer radius
        self.ex = ex
        self.ey = ey = h/2
        self.r11 = r11 = r1/math.sqrt(2)
        self.r21 = r21 = r2/math.sqrt(2)
        self.IfcProfileDef = "Unknown"

        p1 = Point2D(-ex + b2, -h2 / 2)
        p2 = Point2D(-ex, -ey + h3)
        p3 = Point2D(-ex, -ey + r2)  # start arc left bottom
        p4 = Point2D(-ex + r2 - r21, -ey + r2 - r21)  # second point arc
        p5 = Point2D(-ex + r2, -ey)  # end arc
        p6 = Point2D(b - ex - r2, -ey)  # start arc
        p7 = Point2D(b - ex - r2 + r21, -ey + r2 - r21)  # second point arc
        p8 = Point2D(b - ex, -ey + r2)  # end arc
        p9 = Point2D(b - ex, -ey + h1)  # end lip
        p10 = Point2D(b - ex - t, -ey + h1)
        p11 = Point2D(b - ex - t, -ey + t + r1)  # start arc
        p12 = Point2D(b - ex - t - r1 + r11, -ey +
                      t + r1 - r11)  # second point arc
        p13 = Point2D(b - ex - t - r1, -ey + t)  # end arc
        p14 = Point2D(-ex + t + r1, -ey + t)  # start arc
        p15 = Point2D(-ex + t + r1 - r11, -ey + t +
                      r1 - r11)  # second point arc
        p16 = Point2D(-ex + t, -ey + t + r1)  # end arc
        p17 = Point2D(-ex + t, -ey + h3 - h5)
        p18 = Point2D(-ex + b2 + t, -h2 / 2 - h5)
        p19 = Point2D(p18.x, -p18.y)
        p20 = Point2D(p17.x, -p17.y)
        p21 = Point2D(p16.x, -p16.y)
        p22 = Point2D(p15.x, -p15.y)
        p23 = Point2D(p14.x, -p14.y)
        p24 = Point2D(p13.x, -p13.y)
        p25 = Point2D(p12.x, -p12.y)
        p26 = Point2D(p11.x, -p11.y)
        p27 = Point2D(p10.x, -p10.y)
        p28 = Point2D(p9.x, -p9.y)
        p29 = Point2D(p8.x, -p8.y)
        p30 = Point2D(p7.x, -p7.y)
        p31 = Point2D(p6.x, -p6.y)
        p32 = Point2D(p5.x, -p5.y)
        p33 = Point2D(p4.x, -p4.y)
        p34 = Point2D(p3.x, -p3.y)
        p35 = Point2D(p2.x, -p2.y)
        p36 = Point2D(p1.x, -p1.y)

        l1 = Line2D(p1, p2)
        l2 = Line2D(p2, p3)
        l3 = Arc2D(p3, p4, p5)
        l4 = Line2D(p5, p6)
        l5 = Arc2D(p6, p7, p8)
        l6 = Line2D(p8, p9)
        l7 = Line2D(p9, p10)
        l8 = Line2D(p10, p11)
        l9 = Arc2D(p11, p12, p13)
        l10 = Line2D(p13, p14)
        l11 = Arc2D(p14, p15, p16)
        l12 = Line2D(p16, p17)
        l13 = Line2D(p17, p18)
        l14 = Line2D(p18, p19)
        l15 = Line2D(p19, p20)
        l16 = Line2D(p20, p21)
        l17 = Arc2D(p21, p22, p23)
        l18 = Line2D(p23, p24)
        l19 = Arc2D(p24, p25, p26)
        l20 = Line2D(p26, p27)
        l21 = Line2D(p27, p28)
        l22 = Line2D(p28, p29)
        l23 = Arc2D(p29, p30, p31)
        l24 = Line2D(p31, p32)
        l25 = Arc2D(p32, p33, p34)
        l26 = Line2D(p34, p35)
        l27 = Line2D(p35, p36)
        l28 = Line2D(p36, p1)

        self.curve = PolyCurve2D().by_joined_curves([l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16, l17, l18, l19, l20, l21, l22, l23,
                                                     l24, l25,
                                                     l26, l27, l28])

    def serialize(self):
        return {
            'Description': self.Description,
            'ID': self.ID,
            'id': self.id,
            'type': self.type,
            'name': self.name,
            'h': self.h,
            'b': self.b,
            't': self.t,
            'r1': self.r1,
            'h1': self.h1,
            'h2': self.h2,
            'h3': self.h3,
            'b2': self.b2,
            'ex': self.ex,
            'ey': self.ey,
            'r2': self.r2,
            'r11': self.r11,
            'r21': self.r21,
            'h4': self.h4,
            'h5': self.h5,
            'curve': self.curve.serialize() if self.curve else None
        }

    @staticmethod
    def deserialize(data):
        sigma_profile_with_lips = SigmaProfileWithLipsColdFormed(
            name=data.get('name'),
            b=data.get('b'),
            h=data.get('h'),
            t=data.get('t'),
            r1=data.get('r1'),
            h1=data.get('h1'),
            h2=data.get('h2'),
            h3=data.get('h3'),
            b2=data.get('b2'),
            ex=data.get('ex')
        )

        sigma_profile_with_lips.Description = data.get(
            'Description', "Cold Formed Sigma Profile with Lips")
        sigma_profile_with_lips.ID = data.get('ID', "CF_SWL")
        sigma_profile_with_lips.id = data.get('id')
        sigma_profile_with_lips.type = data.get('type')
        sigma_profile_with_lips.ey = data.get('ey')
        sigma_profile_with_lips.r2 = data.get('r2')
        sigma_profile_with_lips.r11 = data.get('r11')
        sigma_profile_with_lips.r21 = data.get('r21')
        sigma_profile_with_lips.h4 = data.get('h4')
        sigma_profile_with_lips.h5 = data.get('h5')
        sigma_profile_with_lips.curve = PolyCurve2D.deserialize(
            data['curve']) if 'curve' in data else None

        return sigma_profile_with_lips

    def __str__(self):
        return f"{self.type} ({self.name})"


class ZProfileColdFormed:
    def __init__(self, name, b, h, t, r1):
        self.Description = "Cold Formed Z Profile"
        self.ID = "CF_Z"

        # parameters
        self.id = generateID()
        self.type = __class__.__name__
        self.name = name
        self.curve = []
        self.b = b  # width
        self.h = h  # height
        self.t = t  # flange thickness
        self.r1 = r1  # inner radius
        self.r2 = r2 = r1+t  # outer radius
        self.ex = ex = b/2
        self.ey = ey = h/2
        self.r11 = r11 = r1 / math.sqrt(2)
        self.r21 = r21 = r2 / math.sqrt(2)
        self.IfcProfileDef = "Unknown"

        p1 = Point2D(-0.5 * t, -ey + t + r1)  # start arc
        p2 = Point2D(-0.5 * t - r1 + r11, -ey + t +
                     r1 - r11)  # second point arc
        p3 = Point2D(-0.5 * t - r1, -ey + t)  # end arc
        p4 = Point2D(-ex, -ey + t)
        p5 = Point2D(-ex, -ey)  # left bottom
        p6 = Point2D(-r2 + 0.5 * t, -ey)  # start arc
        p7 = Point2D(-r2 + 0.5 * t + r21, -ey + r2 - r21)  # second point arc
        p8 = Point2D(0.5 * t, -ey + r2)  # end arc
        p9 = Point2D(-p1.x, -p1.y)
        p10 = Point2D(-p2.x, -p2.y)
        p11 = Point2D(-p3.x, -p3.y)
        p12 = Point2D(-p4.x, -p4.y)
        p13 = Point2D(-p5.x, -p5.y)
        p14 = Point2D(-p6.x, -p6.y)
        p15 = Point2D(-p7.x, -p7.y)
        p16 = Point2D(-p8.x, -p8.y)

        l1 = Arc2D(p1, p2, p3)
        l2 = Line2D(p3, p4)
        l3 = Line2D(p4, p5)
        l4 = Line2D(p5, p6)
        l5 = Arc2D(p6, p7, p8)
        l6 = Line2D(p8, p9)
        l7 = Arc2D(p9, p10, p11)
        l8 = Line2D(p11, p12)
        l9 = Line2D(p12, p13)
        l10 = Line2D(p13, p14)
        l11 = Arc2D(p14, p15, p16)
        l12 = Line2D(p16, p1)

        self.curve = PolyCurve2D().by_joined_curves(
            [l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12])

    def serialize(self):
        return {
            'Description': self.Description,
            'ID': self.ID,
            'id': self.id,
            'type': self.type,
            'name': self.name,
            'b': self.b,
            'h': self.h,
            't': self.t,
            'r1': self.r1,
            'r2': self.r2,
            'ex': self.ex,
            'ey': self.ey,
            'r11': self.r11,
            'r21': self.r21,
            'curve': self.curve.serialize() if self.curve else None
        }

    @staticmethod
    def deserialize(data):
        z_profile_cold_formed = ZProfileColdFormed(
            name=data.get('name'),
            b=data.get('b'),
            h=data.get('h'),
            t=data.get('t'),
            r1=data.get('r1')
        )

        z_profile_cold_formed.Description = data.get(
            'Description', "Cold Formed Z Profile")
        z_profile_cold_formed.ID = data.get('ID', "CF_Z")
        z_profile_cold_formed.id = data.get('id')
        z_profile_cold_formed.type = data.get('type')
        z_profile_cold_formed.r2 = data.get('r2')
        z_profile_cold_formed.ex = data.get('ex')
        z_profile_cold_formed.ey = data.get('ey')
        z_profile_cold_formed.r11 = data.get('r11')
        z_profile_cold_formed.r21 = data.get('r21')
        z_profile_cold_formed.curve = PolyCurve2D.deserialize(
            data['curve']) if 'curve' in data else None

        return z_profile_cold_formed

    def __str__(self):
        return f"{self.type} ({self.name})"


class ZProfileWithLipsColdFormed:
    def __init__(self, name, b, h, t, r1, h1):
        self.Description = "Cold Formed Z Profile with Lips"
        self.ID = "CF_ZL"

        # parameters
        self.id = generateID()
        self.type = __class__.__name__
        self.name = name
        self.curve = []
        self.b = b  # width
        self.h = h  # height
        self.t = t  # flange thickness
        self.h1 = h1  # lip length
        self.r1 = r1  # inner radius
        self.r2 = r2 = r1+t  # outer radius
        self.ex = ex = b/2
        self.ey = ey = h/2
        self.r11 = r11 = r1 / math.sqrt(2)
        self.r21 = r21 = r2 / math.sqrt(2)
        self.IfcProfileDef = "Unknown"

        p1 = Point2D(-0.5*t, -ey+t+r1)  # start arc
        p2 = Point2D(-0.5*t-r1+r11, -ey+t+r1-r11)  # second point arc
        p3 = Point2D(-0.5*t-r1, -ey+t)  # end arc
        p4 = Point2D(-ex+t+r1, -ey+t)  # start arc
        p5 = Point2D(-ex+t+r1-r11, -ey+t+r1-r11)  # second point arc
        p6 = Point2D(-ex+t, -ey+t+r1)  # end arc
        p7 = Point2D(-ex+t, -ey+h1)
        p8 = Point2D(-ex, -ey+h1)
        p9 = Point2D(-ex, -ey+r2)  # start arc
        p10 = Point2D(-ex+r2-r21, -ey+r2-r21)  # second point arc
        p11 = Point2D(-ex+r2, -ey)  # end arc
        p12 = Point2D(-r2+0.5*t, -ey)  # start arc
        p13 = Point2D(-r2+0.5*t+r21, -ey+r2-r21)  # second point arc
        p14 = Point2D(0.5*t, -ey+r2)  # end arc
        p15 = Point2D(-p1.x, -p1.y)
        p16 = Point2D(-p2.x, -p2.y)
        p17 = Point2D(-p3.x, -p3.y)
        p18 = Point2D(-p4.x, -p4.y)
        p19 = Point2D(-p5.x, -p5.y)
        p20 = Point2D(-p6.x, -p6.y)
        p21 = Point2D(-p7.x, -p7.y)
        p22 = Point2D(-p8.x, -p8.y)
        p23 = Point2D(-p9.x, -p9.y)
        p24 = Point2D(-p10.x, -p10.y)
        p25 = Point2D(-p11.x, -p11.y)
        p26 = Point2D(-p12.x, -p12.y)
        p27 = Point2D(-p13.x, -p13.y)
        p28 = Point2D(-p14.x, -p14.y)

        l1 = Arc2D(p1, p2, p3)
        l2 = Line2D(p3, p4)
        l3 = Arc2D(p4, p5, p6)
        l4 = Line2D(p6, p7)
        l5 = Line2D(p7, p8)
        l6 = Line2D(p8, p9)
        l7 = Arc2D(p9, p10, p11)
        l8 = Line2D(p11, p12)
        l9 = Arc2D(p12, p13, p14)
        l10 = Line2D(p14, p15)
        l11 = Arc2D(p15, p16, p17)
        l12 = Line2D(p17, p18)
        l13 = Arc2D(p18, p19, p20)
        l14 = Line2D(p20, p21)
        l15 = Line2D(p21, p22)
        l16 = Line2D(p22, p23)
        l17 = Arc2D(p23, p24, p25)
        l18 = Line2D(p25, p26)
        l19 = Arc2D(p26, p27, p28)
        l20 = Line2D(p28, p1)

        self.curve = PolyCurve2D().by_joined_curves(
            [l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16, l17, l18, l19, l20])

    def serialize(self):
        return {
            'Description': self.Description,
            'ID': self.ID,
            'id': self.id,
            'type': self.type,
            'name': self.name,
            'b': self.b,
            'h': self.h,
            't': self.t,
            'h1': self.h1,
            'r1': self.r1,
            'r2': self.r2,
            'ex': self.ex,
            'ey': self.ey,
            'r11': self.r11,
            'r21': self.r21,
            'curve': self.curve.serialize() if self.curve else None
        }

    @staticmethod
    def deserialize(data):
        z_profile_with_lips = ZProfileWithLipsColdFormed(
            name=data.get('name'),
            b=data.get('b'),
            h=data.get('h'),
            t=data.get('t'),
            r1=data.get('r1'),
            h1=data.get('h1')
        )

        z_profile_with_lips.Description = data.get(
            'Description', "Cold Formed Z Profile with Lips")
        z_profile_with_lips.ID = data.get('ID', "CF_ZL")
        z_profile_with_lips.id = data.get('id')
        z_profile_with_lips.type = data.get('type')
        z_profile_with_lips.r2 = data.get('r2')
        z_profile_with_lips.ex = data.get('ex')
        z_profile_with_lips.ey = data.get('ey')
        z_profile_with_lips.r11 = data.get('r11')
        z_profile_with_lips.r21 = data.get('r21')
        z_profile_with_lips.curve = PolyCurve2D.deserialize(
            data['curve']) if 'curve' in data else None

        return z_profile_with_lips

    def __str__(self):
        return f"{self.type} ({self.name})"



Patprefix = ';%UNITS=MM' \
         ';' \

Revitmodelpattern = ";%TYPE=MODEL"

class PATRow:
    def __init__(self,):
        self.angle = 0
        self.x_orig = 0
        self.y_orig = 0
        self.shift_pattern = 0
        self.offset_spacing = 0
        self.dash = 0
        self.space = 0
        self.patstr = ""

    def createpatstr(self):
        patstr = str(self.angle) + ",  " + str(self.x_orig) + ",  " + str(self.y_orig) + ",  " + str(self.shift_pattern) + ",  " + str(
            self.offset_spacing)
        if self.dash == 0:
            addstr = ""
        else:
            addstr = ",  " + str(self.dash) + ",  " + str(self.space)
        patstr = patstr + addstr
        return patstr

    def create(self,angle: float, x_orig: float, y_orig: float, shift_pattern: float, offset_spacing: float, dash: float=0, space: float=0):
        # if dash and space are 0 then no pattern
        # rules: ;;;angle, x-origin, y-origin, shift_pattern, offset(spacing), pen_down, pen_up (negatief waarde)
        # x, y-origin is global,
        self.angle = angle
        self.x_orig = x_orig
        self.y_orig = y_orig
        self.shift_pattern = shift_pattern
        self.offset_spacing = offset_spacing
        self.dash = dash
        self.space = space
        self.patstr = self.createpatstr()
        return self

class PAT:
    def __init__(self,):
        self.patrows = []
        self.patstrings = []
        self.name = "None"
        self.patterntype = "None"

    def TilePattern(self, name: str, width: float, height: float, patterntype: str):
        #this is rectangle tile pattern
        self.name = name
        self.patterntype = patterntype
        row1 = PATRow().create(0,0,0,0,height,0,0)
        row2 = PATRow().create(90,0,0,0,width,0,0)
        self.patrows.append(row1)
        self.patrows.append(row2)

        self.patstrings.append("*" + name)
        self.patstrings.append(patterntype)
        self.patstrings.append(row1.patstr)
        self.patstrings.append(row2.patstr)
        self.patstrings.append(";")
        return self

    def BlockPattern(self, name: str, grosswidthheight: float, numbersublines: int, patterntype: str):
        #this is a block pattern
        subspacing = grosswidthheight / numbersublines
        self.name = name
        self.patterntype = patterntype
        row1 = PATRow().create(0,0,0,0,grosswidthheight,0,0)
        row2 = PATRow().create(90,0,0,0,grosswidthheight,0,0)

        self.patrows.append(row1)
        self.patrows.append(row2)

        self.patstrings.append("*" + name)
        self.patstrings.append(patterntype)
        self.patstrings.append(row1.patstr)
        self.patstrings.append(row2.patstr)
        n = 0
        for i in range(numbersublines):
            row3 = PATRow().create(0, 0, subspacing * n + grosswidthheight, 0, grosswidthheight*2, grosswidthheight, -grosswidthheight)
            row4 = PATRow().create(0, grosswidthheight, subspacing * n, 0, grosswidthheight*2, grosswidthheight, -grosswidthheight)
            row5 = PATRow().create(90, subspacing * n, 0, 0, grosswidthheight*2, grosswidthheight,-grosswidthheight)
            row6 = PATRow().create(90, subspacing * n + grosswidthheight, grosswidthheight, 0, grosswidthheight*2, grosswidthheight,-grosswidthheight)
            self.patrows.append(row3)
            self.patrows.append(row4)
            self.patrows.append(row5)
            self.patrows.append(row6)
            self.patstrings.append(row3.patstr)
            self.patstrings.append(row4.patstr)
            self.patstrings.append(row5.patstr)
            self.patstrings.append(row6.patstr)
            n = n + 1
        self.patstrings.append(";")
        return self

    def CombiPattern(self, name: str, grosswidthheight: float, patterntype: str):
        #this is a combined pattern
        width = (2 / 3) * grosswidthheight
        t = grosswidthheight / 6
        self.name = name
        self.patterntype = patterntype

        row1 = PATRow().create(0, 0, 0, 0, grosswidthheight, width, (-2 * t))
        row2 = PATRow().create(0, 0, t, 0, grosswidthheight, width, (-2 * t))
        row3 = PATRow().create(0, 0, 2 * t, 0, grosswidthheight, width, (-2 * t))
        row4 = PATRow().create(0, 2 * t, width, 0, grosswidthheight, width, (-2 * t))
        row5 = PATRow().create(0, 2 * t, width + t, 0, grosswidthheight, width, (-2 * t))
        row6 = PATRow().create(0, 2 * t, width + 2 * t, 0, grosswidthheight, width, (-2 * t))
        row7 = PATRow().create(90, 0, 2 * t, 0, grosswidthheight, width, (-2 * t))
        row8 = PATRow().create(90, t, 2 * t, 0, grosswidthheight, width, (-2 * t))
        row9 = PATRow().create(90, 2 * t, 2 * t, 0, grosswidthheight, width, (-2 * t))
        row10 = PATRow().create(90, width, 0, 0, grosswidthheight, width, (-2 * t))
        row11 = PATRow().create(90, width + t, 0, 0, grosswidthheight, width, (-2 * t))
        row12 = PATRow().create(90, width + 2 * t, 0, 0, grosswidthheight, width, (-2 * t))

        self.patrows.append(row1)
        self.patrows.append(row2)
        self.patrows.append(row3)
        self.patrows.append(row4)
        self.patrows.append(row5)
        self.patrows.append(row6)
        self.patrows.append(row7)
        self.patrows.append(row8)
        self.patrows.append(row9)
        self.patrows.append(row10)
        self.patrows.append(row11)
        self.patrows.append(row12)

        self.patstrings.append("*" + name)
        self.patstrings.append(patterntype)
        self.patstrings.append(row1.patstr)
        self.patstrings.append(row2.patstr)
        self.patstrings.append(row3.patstr)
        self.patstrings.append(row4.patstr)
        self.patstrings.append(row5.patstr)
        self.patstrings.append(row6.patstr)
        self.patstrings.append(row7.patstr)
        self.patstrings.append(row8.patstr)
        self.patstrings.append(row9.patstr)
        self.patstrings.append(row10.patstr)
        self.patstrings.append(row11.patstr)
        self.patstrings.append(row12.patstr)
        self.patstrings.append(";")
        return self

    def ChevronPattern(self, name: str, grosswidth: float, widthtile: float, patterntype: str):
        #this is a chevronpattern(hungarian)
        lengthline = math.sqrt(2) * grosswidth
        self.name = name
        self.patterntype = patterntype

        row1 = PATRow().create(90, 0, 0, 0, grosswidth, 0, 0)
        row2 = PATRow().create(45, 0, 0, widthtile, widthtile, lengthline, -lengthline)
        row3 = PATRow().create(-45, -grosswidth, 0, -widthtile, widthtile, lengthline, -lengthline)

        self.patrows.append(row1)
        self.patrows.append(row2)
        self.patrows.append(row3)

        self.patstrings.append("*" + name)
        self.patstrings.append(patterntype)
        self.patstrings.append(row1.patstr)
        self.patstrings.append(row2.patstr)
        self.patstrings.append(row3.patstr)
        self.patstrings.append(";")
        return self

    def HerringbonePattern(self, name: str, lengthtile: float, numberOfTilesInLength: float, patterntype: str):
        # this is a herringbone pattern(visgraat)
        width = lengthtile / numberOfTilesInLength
        self.name = name
        self.patterntype = patterntype

        row1 = PATRow().create(45, 0, 0, width, width, lengthtile + width, -(lengthtile - width))
        row2 = PATRow().create(135, 0, 0, -width, width, lengthtile, -lengthtile)
        row3 = PATRow().create(-45, 0, 0, -width, width, width, -(2 * lengthtile - width))

        self.patrows.append(row1)
        self.patrows.append(row2)
        self.patrows.append(row3)

        self.patstrings.append("*" + name)
        self.patstrings.append(patterntype)
        self.patstrings.append(row1.patstr)
        self.patstrings.append(row2.patstr)
        self.patstrings.append(row3.patstr)
        self.patstrings.append(";")
        return self

    def Strips(self, name: str, spacing: float, angle: float, patterntype: str):
        # these are continues lines with a certain spacing and angle
        self.name = name
        self.patterntype = patterntype

        row1 = PATRow().create(angle, 0, 0, 0, spacing, 0, 0)

        self.patrows.append(row1)

        self.patstrings.append("*" + name)
        self.patstrings.append(patterntype)
        self.patstrings.append(row1.patstr)
        self.patstrings.append(";")
        return self

    def StretcherBondPattern(self, name: str, width: float, height: float, shift: float, patterntype: str):
        # this is a brick pattern rectangle with a shift
        self.name = name
        self.patterntype = patterntype

        row1 = PATRow().create(0, 0, 0, 0, height, 0, 0)
        row2 = PATRow().create(90, 0, 0, 0, width, height, -height)
        row3 = PATRow().create(90, shift, height, 0, width, height, -height)

        self.patrows.append(row1)
        self.patrows.append(row2)
        self.patrows.append(row3)

        self.patstrings.append("*" + name)
        self.patstrings.append(patterntype)
        self.patstrings.append(row1.patstr)
        self.patstrings.append(row2.patstr)
        self.patstrings.append(row3.patstr)
        self.patstrings.append(";")
        return self

    def ParallelLines(self, name: str, widths: list, patterntype: str):
        # this pattern consists of parallel lines with different offset distances. Can be defined in a list.
        self.name = name
        self.patterntype = patterntype
        self.patstrings.append("*" + name)
        self.patstrings.append(patterntype)
        width = sum(widths)
        x = 0
        for i in widths:
            row = PATRow().create(90,x,0,0,width,0,0)
            self.patrows.append(row)
            self.patstrings.append(row.patstr)
            x = x + i

        self.patstrings.append(";")
        return self

    def stretcher_bond_with_joint(self, name:str, bricklength: float, brickheight: float, jointwidth: float, jointheight: float, patterntype: str):
        #This is stretcherbond(halfsteensverband) with joints
        self.name = name
        self.patterntype = patterntype
        lagenmaat = brickheight + jointheight

        row1 = PATRow().create(0,0,0,0,lagenmaat*2, bricklength, -jointwidth)
        row2 = PATRow().create(0,0,brickheight,0,lagenmaat*2,bricklength, -jointwidth)
        row3 = PATRow().create(0,0.5*(bricklength + jointwidth),lagenmaat,0,lagenmaat*2, bricklength, -jointwidth)
        row4 = PATRow().create(0,0.5*(bricklength + jointwidth),lagenmaat+brickheight,0,lagenmaat*2, bricklength, -jointwidth)

        row5 = PATRow().create(90,0,0,0,bricklength+jointwidth,brickheight,-(brickheight+2*jointheight))
        row6 = PATRow().create(90,bricklength,0,0,bricklength+jointwidth,brickheight,-(brickheight+2*jointheight))
        row7 = PATRow().create(90,(bricklength+jointwidth)/2,lagenmaat,0,bricklength+jointwidth,brickheight,-(brickheight+2*jointheight))
        row8 = PATRow().create(90,(bricklength+jointwidth)/2+bricklength,lagenmaat,0,bricklength+jointwidth,brickheight,-(brickheight+2*jointheight))

        self.patrows.append(row1)
        self.patrows.append(row2)
        self.patrows.append(row3)
        self.patrows.append(row4)
        self.patrows.append(row5)
        self.patrows.append(row6)
        self.patrows.append(row7)
        self.patrows.append(row8)

        self.patstrings.append("*" + name)
        self.patstrings.append(patterntype)
        self.patstrings.append(row1.patstr)
        self.patstrings.append(row2.patstr)
        self.patstrings.append(row3.patstr)
        self.patstrings.append(row4.patstr)
        self.patstrings.append(row5.patstr)
        self.patstrings.append(row6.patstr)
        self.patstrings.append(row7.patstr)
        self.patstrings.append(row8.patstr)
        self.patstrings.append(";")
        return self

    def TilePatternWithJoint(self, name: str, width: float, height: float, jointwidth: float, jointheight: float, patterntype: str):
        #this is rectangle tile pattern with joints between tiles
        self.name = name
        self.patterntype = patterntype
        row1 = PATRow().create(0, 0, 0, 0, height+jointheight, width, -jointwidth)
        row2 = PATRow().create(0, 0, height, 0, height + jointheight, width, -jointwidth)
        row3 = PATRow().create(90,0,0,0,width+jointwidth,height,-jointheight)
        row4 = PATRow().create(90,width,0,0,width+jointwidth,height,-jointheight)

        self.patrows.append(row1)
        self.patrows.append(row2)
        self.patrows.append(row3)
        self.patrows.append(row4)

        self.patstrings.append("*" + name)
        self.patstrings.append(patterntype)
        self.patstrings.append(row1.patstr)
        self.patstrings.append(row2.patstr)
        self.patstrings.append(row3.patstr)
        self.patstrings.append(row4.patstr)
        self.patstrings.append(";")
        return self

    def cross_bond_with_joint(self, name:str, brickwidth: float, bricklength: float, brickheight: float, jointwidth: float, jointheight: float, patterntype: str):
        #This is crossbond(kruisverband) with joints
        self.name = name
        self.patterntype = patterntype
        lagenmaat = brickheight + jointheight

        row1 = PATRow().create(0,0,0,0,lagenmaat*4, bricklength, -jointwidth)
        row2 = PATRow().create(0,0,brickheight,0,lagenmaat*4,bricklength, -jointwidth)

        row3 = PATRow().create(0,0.5*(brickwidth + jointwidth),lagenmaat,0,lagenmaat*2, brickwidth, -jointwidth)
        row4 = PATRow().create(0,0.5*(brickwidth + jointwidth),lagenmaat + brickheight,0,lagenmaat*2, brickwidth, -jointwidth)

        row5 = PATRow().create(0,0.5*(bricklength + jointwidth),lagenmaat*2,0,lagenmaat*4, bricklength, -jointwidth)
        row6 = PATRow().create(0,0.5*(bricklength + jointwidth),lagenmaat*4+brickheight,0,lagenmaat*2, bricklength, -jointwidth)

        row7 = PATRow().create(90,0,0,0,bricklength+jointwidth,brickheight,-(3*lagenmaat+jointheight))
        row8 = PATRow().create(90,bricklength,0,0,bricklength+jointwidth,brickheight,-(3*lagenmaat+jointheight))
        row9 = PATRow().create(90,0.5*(brickwidth + jointwidth),lagenmaat,0,brickwidth+jointwidth,brickheight,-(brickheight+2*jointheight))
        row10 = PATRow().create(90,0.5*(brickwidth + jointwidth)+brickwidth,lagenmaat,0,brickwidth+jointwidth,brickheight,-(brickheight+2*jointheight))

        row11 = PATRow().create(90,(bricklength+jointwidth)/2,lagenmaat*2,0,bricklength+jointwidth,brickheight,-(3*lagenmaat+jointheight))
        row12 = PATRow().create(90,(bricklength+jointwidth)/2+bricklength,lagenmaat*2,0,bricklength+jointwidth,brickheight,-(3*lagenmaat+jointheight))

        self.patrows.append(row1)
        self.patrows.append(row2)
        self.patrows.append(row3)
        self.patrows.append(row4)
        self.patrows.append(row5)
        self.patrows.append(row6)
        self.patrows.append(row7)
        self.patrows.append(row8)
        self.patrows.append(row9)
        self.patrows.append(row10)
        self.patrows.append(row11)
        self.patrows.append(row12)

        self.patstrings.append("*" + name)
        self.patstrings.append(patterntype)
        self.patstrings.append(row1.patstr)
        self.patstrings.append(row2.patstr)
        self.patstrings.append(row3.patstr)
        self.patstrings.append(row4.patstr)
        self.patstrings.append(row5.patstr)
        self.patstrings.append(row6.patstr)
        self.patstrings.append(row7.patstr)
        self.patstrings.append(row8.patstr)
        self.patstrings.append(row9.patstr)
        self.patstrings.append(row10.patstr)
        self.patstrings.append(row11.patstr)
        self.patstrings.append(row12.patstr)
        self.patstrings.append(";")
        return self

def CreatePatFile(patternobjects: list, filepath: str):
    #Write Pattern File
    patternstrings = []
    for i in patternobjects:
        patternstrings = patternstrings + i.patstrings

    patternstrings.insert(0, Patprefix)

    patn = []
    for i in patternstrings:
        patn.append(i + "\n")
    # Create PAT-file
    fp = open(filepath, 'w')
    for i in patn:
        fp.write(i)
    fp.close()
    return filepath

def PatRowGeom(patrow: PATRow, width: float, height: float, dx, dy):
    # tested for 0-90 degrees
    #Create BuildingPy Lines from PAT-objects
    nlines = int(height / patrow.offset_spacing)+1
    lines = []
    n = 0
    for i in range(nlines):
        Xn = Vector3.rotate_XY(X_axis, math.radians(patrow.angle))
        Yn = Vector3.rotate_XY(Y_Axis, math.radians(patrow.angle))
        CSNewLn = CoordinateSystem(Point(0, 0, 0), Xn, Yn, Z_Axis)
        x_start = 0
        y_start = 0
        x_end = width
        y_end = 0
        l1 = Line(Point(x_start, y_start, 0), Point(x_end, y_end, 0)) # baseline
        l2 = Line.transform(l1, CSNewLn) # rotation
        v1 = Vector3.by_two_points(l2.start,l2.end)
        v1 = Vector3.normalize(v1)
        v2 = Vector3.scale(v1, patrow.shift_pattern * n)
        l3 = Line.translate_2(l2, v2)  # shift of line for pattern
        #if patrow.shift_pattern == 0:
        #    l3 = l2
        #else:
        #    v2 = Vector3.scale(v1, patrow.shift_pattern*(n+1))
        #    l3 = Line.translate_2(l2,v2) # shift of line for pattern
        v3 = Vector3.normalize(Vector3.cross_product(v1,Z_Axis)) #Eenheidsvector haaks op lijn
        if patrow.angle == 0:
            v4 = Vector3.scale(v3, n * patrow.offset_spacing)  # Verplaatsingsvector voor spacing, inverse in geval lijn = 0 graden
            v4 = Vector3.reverse(v4)
        else:
            v4 = Vector3.scale(v3, n * patrow.offset_spacing)  # Verplaatsingsvector voor spacing
        if n * patrow.offset_spacing == 0: # eerste lijn heeft geen verplaatsing
            l4 = l3
        else:
            l4 = l3.translate(v4)
        v6 = Vector3(dx + patrow.x_orig,dy + patrow.y_orig,0)
        print(v6)
        l5 = Line.translate_2(l4,v6)

        if patrow.dash == 0 and patrow.space == 0:
            lines.append(l5)
        else:
            # dashed lines
            LinePattern = ["Pat", [patrow.dash, -patrow.space],
                           1]  # Rule: line, whitespace, line whitespace etc., scale
            for i in line_to_pattern(l5, LinePattern):
                lines.append(i)
        n = n + 1

    return lines

def PAT2Geom(Pat: PAT, width, height,dx,dy):
    lineObjs = []
    for i in Pat.patrows:
        lines = PatRowGeom(i, width, height,dx,dy)
        for i in lines:
            lineObjs.append(i)
    return lineObjs

#reader
#drawsection
# [!not included in BP singlefile - end]

def WFSCurvesToBPCurves(curves):
    BPyPolyCurves = []
    for i in curves:
        pointlist = []
        for j in i:
            pointlist.append(Point(j[0], j[1], 0))
        PC = PolyCurve().by_points(pointlist)
        BPyPolyCurves.append(PC)
    return BPyPolyCurves


def WFSCurvesToBPCurvesLinePattern(curves, pattern):
    Lines = []
    for i in curves:
        n = 0
        for j in range(len(i)-1):
            PntStart = Point(i[n][0], i[n][1], 0)
            n = n + 1
            PntEnd = Point(i[n][0], i[n][1], 0)
            ln = line_to_pattern(Line(PntStart, PntEnd), pattern)
            # print(ln)
            for x in ln:
                Lines.append(x)
    return Lines



def CreateDirectory(Directory):
    import os
    try:
        os.mkdir(Directory)
    except:
        pass
    return Directory

def GetWebServerData(servertitle, category, parameter):
	#Get webserverdata from github repository of GIS2BIM(up to date list of GIS-servers & requests)
	Serverlocation = "https://raw.githubusercontent.com/DutchSailor/GIS2BIM/master/GIS2BIM_Data.json"
	url = urllib.request.urlopen(Serverlocation)
	data = json.loads(url.read())['GIS2BIMserversRequests'][category]
	test = []
	for i in data:
		test.append(i["title"])
	result = data[test.index(servertitle)][parameter]
	return result

def xmldata(myurl, xPathStrings):
    urlFile = urllib.request.urlopen(myurl)
    tree = ET.parse(urlFile)
    xPathResults = []
    for xPathString in xPathStrings:
        a = tree.findall(xPathString)
        xPathResulttemp2 = []
        for xPathResult in a:
            xPathResulttemp2.append(xPathResult.text)
        xPathResults.append(xPathResulttemp2)
    return xPathResults

def GetWebServerDataService(category,service):
	#Get a list with webserverdata from github repository of GIS2BIM(up to date list of GIS-servers & requests)
	Serverlocation = "https://raw.githubusercontent.com/DutchSailor/GIS2BIM/master/GIS2BIM_Data.json"
	url = urllib.request.urlopen(Serverlocation)
	data = json.loads(url.read())['GIS2BIMserversRequests'][category]
	listOfData = []
	for i in data:
		if i["service"] == service:
			listOfData.append(i)
	return listOfData
	
def DownloadURL(folder,url,filename):
    #Download a file to a folder from a given url
    path = folder + filename
    urllib.request.urlretrieve(url,path)
    return path

def GetDataFiles(folder):
    Serverlocation = "https://raw.githubusercontent.com/DutchSailor/GIS2BIM/master/datafiles/map.html"
    url = urllib.request.urlopen(Serverlocation)
    data = json.loads(url.read())['GIS2BIMserversRequests'][category]
    test = []
    for i in data:
        test.append(i["title"])
    result = data[test.index(servertitle)][parameter]
    return result

def downloadUnzip(downloadURL,filepathZIP,folderUNZIP):
    zipresp = urlopen(downloadURL)
    tempzip = open(filepathZIP, "wb")
    tempzip.write(zipresp.read())
    tempzip.close()
    zf = ZipFile(filepathZIP)
    zf.extractall(path = folderUNZIP)
    zf.close()
    return folderUNZIP
	
#GIS2BIM functions

def mortonCode(X,Y,Xmod,Ymod,TileDim):
    #
    x = bin(int(math.floor(((X - Xmod)/TileDim))))
    y = bin(int(math.floor(((Y - Ymod)/TileDim))))
    x = str(x[2:])
    y = str(y[2:])

    res = "".join(i + j for i, j in zip(y, x))
    z=(res)

    z = int(z, 2)
    return z

def checkIfCoordIsInsideBoundingBox(coord, bounding_box):
    #check if coordinate is inside rectangle boundingbox
    min_x = bounding_box[0] - (bounding_box[2] / 2)
    min_y = bounding_box[1] - (bounding_box[2] / 2)
    max_x = bounding_box[0] + (bounding_box[2] / 2)
    max_y = bounding_box[1] + (bounding_box[2] / 2)

    if min_x <= float(coord[0]) <= max_x and min_y <= float(coord[1]) <= max_y:
        return True
    else:
        return False

def TransformCRS_epsg(SourceCRS, TargetCRS, X, Y):
    # transform coordinates between different Coordinate Reference Systems using EPSG-server
    X = str(X)
    Y = str(Y)
    requestURL = "https://epsg.io/trans?" + "&s_srs=" + SourceCRS + "&t_srs=" + TargetCRS + "&x=" + X + "&y=" + Y + "&format=json"
    req = urllib.request.Request(requestURL, headers={'User-Agent': 'Mozilla/5.0'})
    webpage = urllib.request.urlopen(req).read()
    data = json.loads(webpage)
    X = data["x"]
    Y = data["y"]
    return X,Y

def GML_poslistData(tree,xPathString,dx,dy,scale,DecimalNumbers):
#group X and Y Coordinates of polylines
    posLists = tree.findall(xPathString)
    xyPosList = []
    for posList in posLists:
        dataPosList = posList.text
        coordSplit = dataPosList.split()
        try:
            if float(coordSplit[2]) == 0:
                XYZCountDimensions = 3
            else:XYZCountDimensions = 2
        except:
            XYZCountDimensions = 2
        x = 0
        coordSplitXY = []
        for j in range(0, int(len(coordSplit) / XYZCountDimensions)):
            xy_coord = (round((float(coordSplit[x])+dx)*scale,DecimalNumbers), round((float(coordSplit[x+1])+dy)*scale,DecimalNumbers))
            coordSplitXY.append(xy_coord)
            x +=XYZCountDimensions
        xyPosList.append(coordSplitXY)
    return xyPosList

def CreateBoundingBox(CoordinateX,CoordinateY,BoxWidth,BoxHeight,DecimalNumbers):
#Create Boundingboxstring for use in webrequests.
    XLeft = round(CoordinateX-0.5*BoxWidth,DecimalNumbers)
    XRight = round(CoordinateX+0.5*BoxWidth,DecimalNumbers)
    YBottom = round(CoordinateY-0.5*BoxHeight,DecimalNumbers)
    YTop = round(CoordinateY+0.5*BoxHeight,DecimalNumbers)
    boundingBoxString = str(XLeft) + "," + str(YBottom) + "," + str(XRight) + "," + str(YTop)
    return boundingBoxString

class GisRectBoundingBox:
    def __init__(self):
        self.type = __class__.__name__
        self.origX = 0
        self.origY = 0
        self.XLeft = 0
        self.XRight = 0
        self.YBottom = 0
        self.YTop = 0
        self.width = 0
        self.height = 0
        self.boundingBoxString = ""
        self.boundingBoxString2 = ""
        self.boundingBoxStringPolygon = ""
        self.boundingBoxXY = []
        self.z = 0

    def Create(self,CoordinateX,CoordinateY,Width,Height,DecimalNumbers):
        #Create boundingbox object based on a center point
        self.origX = CoordinateX
        self.origY = CoordinateY
        self.XLeft = round(CoordinateX - 0.5 * Width, DecimalNumbers)
        self.XRight = round(CoordinateX + 0.5 * Width, DecimalNumbers)
        self.YBottom = round(CoordinateY - 0.5 * Height, DecimalNumbers)
        self.YTop = round(CoordinateY + 0.5 * Height, DecimalNumbers)
        self.width = Width
        self.height = Height
        self.boundingBoxString = str(self.XLeft) + "," + str(self.YBottom) + "," + str(self.XRight) + "," + str(self.YTop)
        self.boundingBoxString2 = str(self.XLeft) + "%2C" + str(self.YBottom) + "%2C" + str(self.XRight) + "%2C" + str(self.YTop)
        self.boundingBoxStringPolygon = "(" + str(self.XLeft) + ' ' + str(self.YTop) + ',' + str(self.XRight) + ' ' + str(self.YTop) + ',' + str(
            self.XRight) + ' ' + str(self.YBottom) + ',' + str(self.XLeft) + ' ' + str(self.YBottom) + ',' + str(self.XLeft) + ' ' + str(
            self.YTop) + ')'
        self.boundingBoxXY = [self.XLeft,self.YBottom,self.XRight,self.YTop]
        return self

def CreateBoundingBoxPolygon(CoordinateX,CoordinateY,BoxWidth,BoxHeight,DecimalNumbers):
#Create Boundingboxstring for use in webrequests.
    XLeft = round(CoordinateX-0.5*BoxWidth,DecimalNumbers)
    XRight = round(CoordinateX+0.5*BoxWidth,DecimalNumbers)
    YBottom = round(CoordinateY-0.5*BoxHeight,DecimalNumbers)
    YTop = round(CoordinateY+0.5*BoxHeight,DecimalNumbers)
    boundingBoxStringPolygon = "(" + str(XLeft) + ' ' + str(YTop) + ',' + str(XRight) + ' ' + str(YTop) + ',' + str(XRight) + ' ' + str(YBottom) + ',' + str(XLeft) + ' ' + str(YBottom) + ',' + str(XLeft) + ' ' + str(YTop) + ')'
    return boundingBoxStringPolygon
		
def PointsFromWFS(serverName,boundingBoxString,xPathString,dx,dy,scale,DecimalNumbers):
# group X and Y Coordinates
    myrequesturl = serverName + boundingBoxString
    urlFile = urllib.request.urlopen(myrequesturl)
    tree = ET.parse(urlFile)
    xyPosList = GML_poslistData(tree,xPathString,dx,dy,scale,DecimalNumbers)
    return xyPosList
	
def PointsFromGML(filePath,xPathString,dx,dy,scale,DecimalNumbers):
    # group X and Y Coordinates
    tree = ET.parse(filePath)
    xyPosList = GML_poslistData(tree,xPathString,dx,dy,scale,DecimalNumbers)
    return xyPosList

def DataFromWFS(serverName,boundingBoxString,xPathStringCoord,xPathStrings,dx,dy,scale,DecimalNumbers):
    # group textdata from WFS
    myrequesturl = serverName + boundingBoxString
    urlFile = urllib.request.urlopen(myrequesturl)
    tree = ET.parse(urlFile)
    xyPosList = GML_poslistData(tree,xPathStringCoord,dx,dy,scale,DecimalNumbers)
    xPathResults = []
    for xPathString in xPathStrings:
        a = tree.findall(xPathString)
        xPathResulttemp2 = []
        for xPathResult in a:
            xPathResulttemp2.append(xPathResult.text)
        xPathResults.append(xPathResulttemp2)
    xPathResults.insert(0,xyPosList)
    return xPathResults

def checkIfCoordIsInsideBoundingBox(coord, min_x, min_y, max_x, max_y):
    if min_x <= float(coord[0]) <= max_x and min_y <= float(coord[1]) <= max_y:
        return True
    else:
        return False

def filterGMLbbox(tree,xPathString,bbx,bby,BoxWidth,BoxHeight,scale):

    # Bounding box definition
    bounding_box = [bbx, bby, BoxWidth,BoxHeight]
    min_x = bounding_box[0] - (bounding_box[2]/2)
    min_y = bounding_box[1] - (bounding_box[3]/2)
    max_x = bounding_box[0] + (bounding_box[2]/2)
    max_y = bounding_box[1] + (bounding_box[3]/2)

    # get data from xml
    root = tree.getroot()

    # for loop to get each element in an array
    XMLelements = []
    for elem in root.iter():
        XMLelements.append(elem)

    xpathfound = root.findall(xPathString)

    # for loop to get all polygons in an array
    polygons = []
    for x in xpathfound:
        if x.text:
            try:
                polygons.append(x.text.split(" "))
            except:
                polygons.append("_none_")
        else:
            polygons.append("_none_")

    # for loop to get x,y coords and filter polygons inside Bounding Box
    xyPolygons = []
    for newPolygon in polygons:
        polygon_is_inside_bounding_box = False
        x = 0
        xyPolygon = []
        for i in range(0, int(len(newPolygon) / 2)):
            xy_coord = [newPolygon[x], newPolygon[x + 1]]
            xy_coord_trans = [round((float(newPolygon[x])-bbx)*scale), round((float(newPolygon[x + 1])-bby)*scale)]
            xyPolygon.append(xy_coord_trans)
            x += 2
            if checkIfCoordIsInsideBoundingBox(xy_coord, min_x, min_y, max_x, max_y):
                polygon_is_inside_bounding_box = True
        if polygon_is_inside_bounding_box:
            xyPolygons.append(xyPolygon)
    return xyPolygons
	
def WMSRequest(serverName,boundingBoxString,fileLocation,pixWidth,pixHeight):
    # perform a WMS OGC webrequest( Web Map Service). This is loading images.
    myrequestURL = serverName + boundingBoxString
    myrequestURL = myrequestURL.replace("width=3000", "width=" + str(pixWidth))
    myrequestURL = myrequestURL.replace("height=3000", "height=" + str(pixHeight))
    resource = urllib.request.urlopen(myrequestURL)
    output1 = open(fileLocation, "wb")
    output1.write(resource.read())
    output1.close()
    return fileLocation, resource, myrequestURL

def MortonCode(X,Y,Xmod,Ymod,TileDimension):
    # convert a x and y coordinate to a mortoncode
    x = bin(int(math.floor(((X - Xmod)/TileDimension))))
    y = bin(int(math.floor(((Y - Ymod)/TileDimension))))
    x = str(x[2:])
    y = str(y[2:])
    res = "".join(i + j for i, j in zip(y, x))
    z=(res)
    z = int(z, 2)
    return z

def NominatimAPI(inputlist):
    #get lat/lon via an adress using Nominatim API
    URLpart1 = "https://nominatim.openstreetmap.org/search/"
    URLpart2 = "%20".join(inputlist)
    URLpart3 = "?format=xml&addressdetails=1&limit=1&polygon_svg=1"
    URL = URLpart1 + URLpart2 + URLpart3
    req = urllib.request.Request(URL)
    resp = urllib.request.urlopen(req)
    content = resp.read().decode('utf8')
    try:
        lst = re.split('lat=| lon=| display_name=',content)
        lat = lst[1][1:-1]
        lon = lst[2][1:-1]
    except:
        lat = None
        lon = None
    return lat, lon

def LatLonZoomToTileXY(lat,lon,zoom):
    lat_rad = math.radians(lat)
    n = 2.0 ** zoom
    TileX = int((lon + 180.0) / 360.0 * n)
    TileY = int((1.0 - math.log(math.tan(lat_rad) + (1 / math.cos(lat_rad))) / math.pi) / 2.0 * n)

    return TileX, TileY

def TMSBboxFromTileXY(TileX,TileY,zoom):
    n = 2.0 ** zoom
    W_deg = TileX / n * 360.0 - 180.0
    N_rad = math.atan(math.sinh(math.pi * (1 - 2 * TileY / n)))
    N_deg = math.degrees(N_rad)
    E_deg = (TileX+1) / n * 360.0 - 180.0
    S_rad = math.atan(math.sinh(math.pi * (1 - 2 * (TileY+1) / n)))
    S_deg = math.degrees(S_rad)

    return S_deg,W_deg,N_deg,E_deg

def TMS_WMTSCombinedMapFromLatLonBbox(lat,lon,bboxWidth,bboxHeight,zoomL,pixels,TMS_WMTS,ServerName):
    #With lat/lon and bbox tilenumbers are calculated then downloaded from given server and merged into 1 images and cropped afterwards to given boundingbox

    #Create Boundingbox lat/lon
    loc = GeoLocation.from_degrees(lat,lon)
    radiusWidth = bboxWidth/2000
    SW_locWidth = loc.bounding_locations(radiusWidth)[0]
    NE_locWidth = loc.bounding_locations(radiusWidth)[1]
    radiusHeight = bboxHeight/2000
    SW_locHeight = loc.bounding_locations(radiusHeight)[0]
    NE_locHeight = loc.bounding_locations(radiusHeight)[1]

    #GetUniqueTileX/TileY list
    TileXYBottomLeft = LatLonZoomToTileXY(SW_locHeight[0],SW_locWidth[1],zoomL)
    TileXYTopRight = LatLonZoomToTileXY(NE_locHeight[0],NE_locWidth[1],zoomL)

    #Get TileX/TileY orderlist for URLlists
    rangex = list(range(TileXYBottomLeft[0], TileXYTopRight[0]+1))
    rangey1 = list(range(TileXYTopRight[1], TileXYBottomLeft[1]+1))
    rangey = rangey1[::-1]
    minx = min(rangex)
    miny = min(rangey)
    maxx = max(rangex)
    maxy = max(rangey)

    #Get Bbox from TopRight/BottomLeft
    BboxTileBottomLeft = TMSBboxFromTileXY(minx,maxy,zoomL)
    BboxTileTopRight = TMSBboxFromTileXY(maxx,miny,zoomL)

    # Calculate total width of tiles and deltax/y of boundingbox
    GeoLocationBottomLeft = GeoLocation.from_degrees(BboxTileBottomLeft[0],BboxTileBottomLeft[1])
    GeoLocationTopLeft = GeoLocation.from_degrees(BboxTileTopRight[2],BboxTileBottomLeft[1])
    GeoLocationTopRight = GeoLocation.from_degrees(BboxTileTopRight[2],BboxTileTopRight[3])

    TotalWidthOfTiles = 1000*GeoLocation.distance_to(GeoLocationTopLeft,GeoLocationTopRight,GeoLocation.EARTH_RADIUS)
    TotalHeightOfTiles = 1000*GeoLocation.distance_to(GeoLocationBottomLeft,GeoLocationTopLeft,GeoLocation.EARTH_RADIUS)

    #deltax Left, Width difference between bbox and TotalWidthOfTiles
    GeoLocationBottomLeftBbox = GeoLocation.from_degrees(SW_locHeight[0],SW_locWidth[1])
    GeoLocationBottomBboxLeftTiles = GeoLocation.from_degrees(SW_locHeight[0],BboxTileBottomLeft[1])
    dx = 1000*GeoLocation.distance_to(GeoLocationBottomBboxLeftTiles,GeoLocationBottomLeftBbox,GeoLocation.EARTH_RADIUS)

    #deltay Bottom, Height difference between bbox and TotalHeightOfTiles
    GeoLocationBottomTilesLeftBbox = GeoLocation.from_degrees(BboxTileBottomLeft[0],SW_locWidth[1])
    dy = 1000*GeoLocation.distance_to(GeoLocationBottomTilesLeftBbox,GeoLocationBottomLeftBbox,GeoLocation.EARTH_RADIUS)

    x = rangex
    y = rangey
    n = len(rangey)
    xl1=[]
    for i in x:
        xl1.append([i]*n)

    xl2=[]
    for sublist in xl1:
        for item in sublist:
            xl2.append(item)
    yl1=[]
    for i in x:
        yl1.append(y)
    yl2=[]
    for sublist in yl1:
        for item in sublist:
            yl2.append(item)

    tilesX = xl2
    tileY = yl2

    #Create URLs for image
    ServerName = ServerName.replace("{z}",str(zoomL))
    URLlist = []

    for i,j in zip(tilesX,tileY):
        URLlist.append(ServerName.replace("{y}",str(j)).replace("{x}",str(i)))

    #Download TileImages
    TileImages = []
    opener=urllib.request.build_opener()
    opener.addheaders=[('User-Agent','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1941.0 Safari/537.36')]
    urllib.request.install_opener(opener)
    for i in URLlist:
        TileImages.append(Image.open(urllib.request.urlopen(i)))

    #Create new image to concatenate the tileimages in.
    widthImg = len(rangex)*pixels
    heightImg = len(rangey)*pixels

    img = Image.new('RGB', (widthImg,heightImg))

    LPx=[]
    n=0
    for i in rangex:
        LPx.append(n*pixels)
        n=n+1

    LPy=[]
    n=0
    for i in rangey:
        LPy.append(n*pixels)
        n=n+1

    LPx2=[]
    n=len(LPy)
    for i in LPx:
        LPx2.append([i]*n)

    LPx3=[]
    for sublist in LPx2:
        for item in sublist:
            LPx3.append(item)

    LPy2=[]
    #n=len(LPy)
    for i in LPx:
        LPy2.append(LPy)

    LPy3=[]
    for sublist in LPy2:
        for item in sublist:
            LPy3.append(item)

    LPy4=LPy3[::-1]

    if TMS_WMTS:
        for i,j,k in zip(TileImages,LPy3,LPx3):
            img.paste(i,(j,k))
    else:
        for i,j,k in zip(TileImages,LPx3,LPy4):
            img.paste(i,(j,k))

    #Crop Image
    deltaHeight = TotalHeightOfTiles- bboxHeight
    dxM = dx
    dyM = deltaHeight-dy
    ImageWidthNew=(bboxWidth/TotalWidthOfTiles)*widthImg
    ImageHeightNew=(bboxHeight/TotalHeightOfTiles)*heightImg
    dxImage=-int((dxM/TotalWidthOfTiles)*widthImg)
    dyImage=-int((dyM/TotalHeightOfTiles)*heightImg)

    imgNew = Image.new('RGB', (int(ImageWidthNew),int(ImageHeightNew)))
    imgNew.paste(img,(dxImage,dyImage))

    return imgNew,widthImg,heightImg

class GeoLocation:
    MIN_LAT = math.radians(-90)
    MAX_LAT = math.radians(90)
    MIN_LON = math.radians(-180)
    MAX_LON = math.radians(180)
    EARTH_RADIUS = 6378.1  # kilometers

    @classmethod
    def from_degrees(cls, deg_lat, deg_lon):
        rad_lat = math.radians(deg_lat)
        rad_lon = math.radians(deg_lon)
        return GeoLocation(rad_lat, rad_lon, deg_lat, deg_lon)

    @classmethod
    def from_radians(cls, rad_lat, rad_lon):
        deg_lat = math.degrees(rad_lat)
        deg_lon = math.degrees(rad_lon)
        return deg_lat, deg_lon

    def __init__(
            self,
            rad_lat,
            rad_lon,
            deg_lat,
            deg_lon
    ):
        self.rad_lat = float(rad_lat)
		
        self.rad_lon = float(rad_lon)
        self.deg_lat = float(deg_lat)
        self.deg_lon = float(deg_lon)
        self._check_bounds()

    def __str__(self):
        degree_sign = u'\N{DEGREE SIGN}'
        return ("{0:.20f}, {1:.20f}").format(
            self.deg_lat, self.deg_lon, self.rad_lat, self.rad_lon)

    def _check_bounds(self):

        if (self.rad_lat < GeoLocation.MIN_LAT
            or self.rad_lat > GeoLocation.MAX_LAT
            or self.rad_lon < GeoLocation.MIN_LON
            or self.rad_lon > GeoLocation.MAX_LON):
            raise Exception("Illegal arguments")

    def distance_to(self, other, radius=EARTH_RADIUS):

        '''

        Computes the great circle distance between this GeoLocation instance
        and the other.
        '''

        return radius * math.acos(
            math.sin(self.rad_lat) * math.sin(other.rad_lat) +
            math.cos(self.rad_lat) *
            math.cos(other.rad_lat) *
            math.cos(self.rad_lon - other.rad_lon)
        )

    def bounding_locations(self, distance, radius=EARTH_RADIUS):

        '''
        Computes the bounding coordinates of all points on the surface
        of a sphere that has a great circle distance to the point represented
        by this GeoLocation instance that is less or equal to the distance argument.

        Param:
            distance - the distance from the point represented by this GeoLocation
                       instance. Must be measured in the same unit as the radius
                       argument (which is kilometers by default)
            radius   - the radius of the sphere. defaults to Earth's radius.
        Returns a list of two GeoLoations - the SW corner and the NE corner - that
        represents the bounding box.
        '''

        if radius < 0 or distance < 0:
            raise Exception("Illegal arguments")

        # angular distance in radians on a great circle

        rad_dist = distance / radius
        min_lat = self.rad_lat - rad_dist
        max_lat = self.rad_lat + rad_dist

        if min_lat > GeoLocation.MIN_LAT and max_lat < GeoLocation.MAX_LAT:
            delta_lon = math.asin(math.sin(rad_dist) / math.cos(self.rad_lat))
            min_lon = self.rad_lon - delta_lon
            if min_lon < GeoLocation.MIN_LON:
                min_lon += 2 * math.pi
            max_lon = self.rad_lon + delta_lon

            if max_lon > GeoLocation.MAX_LON:
                max_lon -= 2 * math.pi

        # a pole is within the distance
        else:

            min_lat = max(min_lat, GeoLocation.MIN_LAT)
            max_lat = min(max_lat, GeoLocation.MAX_LAT)
            min_lon = GeoLocation.MIN_LON
            max_lon = GeoLocation.MAX_LON

        return [GeoLocation.from_radians(min_lat, min_lon),
                GeoLocation.from_radians(max_lat, max_lon)]

def download_image(url, index, results):
    import requests
    response = requests.get(url)
    img = Image.open(BytesIO(response.content))
    results[index] = img


def download_images(urls):
    results = [None] * len(urls)
    threads = []

    for index, url in enumerate(urls):
        thread = threading.Thread(target=download_image, args=(url, index, results))
        thread.start()
        threads.append(thread)

    # Wacht tot alle threads zijn voltooid
    for thread in threads:
        thread.join()

    return results


def TMS(zoom_level, rdx, rdy, width, layer, downloadimage: bool):
    zoomlevels = [zoom_level]
    boundingbox_widths = [width]
    layers = [layer]

    zoomleveldata = {0: 3440.640,
                     1: 1720.320,
                     2: 860.160,
                     3: 430.080,
                     4: 215.040,
                     5: 107.520,
                     6: 53.720,
                     7: 26.880,
                     8: 13.440,
                     9: 6.720,
                     10: 3.360,
                     11: 1.680,
                     12: 0.840,
                     13: 0.420,
                     14: 0.210,
                     15: 0.105,
                     16: 0.0575}

    pixel_width = 256
    xcorner = -285401.92
    ycorner = 903402.0

    Resolutions = []
    for x in zoomlevels:
        Resolutions.append(zoomleveldata[x])

    TileColumns = []
    TileRows = []
    DeltaX = []
    DeltaY = []

    for x in Resolutions:
        a = pixel_width * x
        # TileColumns.append(Rdx-Xcorner)
        # TileRows.append(a)
        TileY = (ycorner - rdy) / a
        TileX = (rdx - xcorner) / a
        TileYRound = int(TileY)
        TileXRound = int(TileX)
        TilePercentageY = TileX - TileXRound
        TilePercentageX = TileY - TileYRound
        DeltaYM = TilePercentageY * pixel_width * x
        DeltaXM = TilePercentageX * pixel_width * x

        TileRows.append(TileYRound)
        TileColumns.append(TileXRound)
        DeltaY.append(DeltaYM)
        DeltaX.append(DeltaXM)

    UniqueTileColumns = []
    UniqueTileRows = []
    TileColumns2 = []
    TileRows2 = []

    for x, j, k, l in zip(TileColumns, TileRows, boundingbox_widths, Resolutions):
        TileWidth = pixel_width * l
        c = math.ceil(k / TileWidth)
        b = math.ceil(c / 2) * 2
        UniqueTileColumns.append(range(int((x - b / 2)), 1 + int(x + b / 2)))
        UniqueTileRows.append(range((int(j - b / 2)), 1 + int(j + b / 2)))

    for x in UniqueTileColumns:
        # de list:
        a = []

        counter = len(x)

    for j in x:  # elke unieke tile
        a.append(x)

    flatA = []

    for sublist in a:
        for item in sublist:
            flatA.append(item)

    TileColumns2.append(flatA)
    counter = 0

    for x in UniqueTileRows:
        # de list:
        a = []
        counter = len(x)

        for j in x:  # elke unieke tile
            a.append([int(j)] * counter)

        flatA = []

        for sublist in a:
            for item in sublist:
                flatA.append(item)

        TileRows2.append(flatA)
        counter = 0

    TotalTileWidth = []
    TotalTileHeight = []
    TileColumnMin = min(UniqueTileColumns[0])
    TileColumnsMax = max(UniqueTileColumns[0])
    TileRowsMin = min(UniqueTileRows[0])
    TileRowsMax = max(UniqueTileRows[0])
    TileWidthHeight = (903401.92 - 22598.08) * pow(0.5, zoom_level)
    Rdxmin = TileColumnMin * TileWidthHeight - 285401.92
    # LET OP: WMTS TILING KOMT VAN BOVEN DAAROM HIERONDER MAX I.P.V. MIN
    Rdymin = 903401.92 - TileRowsMax * TileWidthHeight - TileWidthHeight

    # 22598.08
    for x, j in zip(Resolutions, UniqueTileColumns):
        a = len(j) * pixel_width * x
        TotalTileWidth.append(a)

    for x, j in zip(Resolutions, UniqueTileRows):
        a = len(j) * pixel_width * x
        TotalTileHeight.append(a)

    Rdxmax = Rdxmin + TotalTileWidth[0]
    Rdymax = Rdymin + TotalTileHeight[0]
    print(Rdxmin - rdx)
    print(Rdymin - rdy)

    # string1 = "http://geodata.nationaalgeoregister.nl/tiles/service/wmts?&request=GetTile&VERSION=1.0.0&LAYER="
    string1 = "https://service.pdok.nl/lv/bgt/wmts/v1_0?request=GetTile&service=WMTS&VERSION=1.0.0&LAYER="
    string3 = "&STYLE=default&TILEMATRIXSET=EPSG:28992&TILEMATRIX=EPSG:28992:"
    string34 = "&TILEROW="
    string5 = "&TILECOL="
    string7 = "&FORMAT=image/png8";

    urlList = []

    for x, j, k, z in zip(TileColumns2, TileRows2, layers, zoomlevels):
        a = []

        for l, m in zip(x, j):
            b = string1 + str(k) + string3 + str(z) + string34 + str(m) + string5 + str(l) + string7
            a.append(b)
        urlList.append(a)

    bitmaps2 = []

    if downloadimage:
        for x in urlList:
            bitmaps = download_images(x)
            # for j in i:
            #  response = requests.get(j)
            #  img = Image.open(BytesIO(response.content))
            #  bitmaps.append(img)
            #  print(img)
            # DIT MOET SNELLER, RETERTRAAG
            bitmaps2.append(bitmaps)
            combined_bitmaps = []
            for a, b, c in zip(bitmaps2, UniqueTileColumns, UniqueTileRows):
                total_width = len(b) * pixel_width
                total_height = len(c) * pixel_width
                img = Image.new('RGB', (total_width, total_height))
                lpx = []
                n = 0
                for l in j:
                    lpx.append(n * pixel_width)
                    n = n + 1

                LPy = []
                n = 0
                for x in c:
                    LPy.append(n * pixel_width)
                    n = n + 1

                LPx2 = []
                n = len(LPy)
                for x in lpx:
                    LPx2.append([x] * n)

                LPx3 = []
                for sublist in LPx2:
                    for item in sublist:
                        LPx3.append(item)

                LPy2 = []
                for x in lpx:
                    LPy2.append(LPy)

                LPy3 = []
                for sublist in LPy2:
                    for item in sublist:
                        LPy3.append(item)

                LPy4 = reversed(LPy3)

                for m, n, o in zip(a, LPy3, LPx3):
                    img.paste(m, (n, o))
                combined_bitmaps.append(img)
                return combined_bitmaps[0], TotalTileWidth[0], TotalTileHeight[0], Rdxmin, Rdymin, Rdxmax, Rdymax
    else:
        return (
        TotalTileWidth[0], TotalTileHeight[0], TileColumnMin, TileColumnsMax, TileRowsMin, TileRowsMax, Rdxmin, Rdymin,
        Rdxmax, Rdymax, TileWidthHeight)


def toPix(point1, Xmin, Ymin, TotalWidth, TotalHeight, ImgWidthPix, ImgHeightPix):
    # Give a pixel on an image
    x = point1.x
    y = point1.y
    xpix = math.floor(((x - Xmin) / TotalWidth) * ImgWidthPix)
    ypix = ImgHeightPix - math.floor(((y - Ymin) / TotalHeight) * ImgHeightPix)  # min vanwege coord stelsel Image.Draw
    return xpix, ypix


def pointToPILLine(imgdrawobj, color: str, width: float, pnts, dx, dy, TotalTileWidthM, TotalTileHeightM, imgwidthpix,
                   imgheightpix):
    ind = 0
    for i in pnts:
        try:
            P1 = toPix(pnts[ind], dx, dy, TotalTileWidthM, TotalTileHeightM, imgwidthpix,
                       imgheightpix)
            P2 = toPix(pnts[ind + 1], dx, dy, TotalTileWidthM, TotalTileHeightM, imgwidthpix,
                       imgheightpix)
            imgdrawobj.line([P1, P2], fill=color, width=width)
        except:
            pass
        ind = ind + 1
        return P1, P2



#import urllib.request, json

#jsonpath = "$.GIS2BIMserversRequests.webserverRequests[?(@.title==NetherlandsPDOKServerURL)].serverrequestprefix"

## Webserverdata NL
NLPDOKServerURL = GetWebServerData('NLPDOKServerURL_28992','webserverRequests','serverrequestprefix')
NLPDOKCadastreCadastralParcels = GetWebServerData('NLPDOKCadastreCadastralParcels_28992','webserverRequests','serverrequestprefix') #For curves of Cadastral Parcels
NLPDOKCadastreCadastralParcelsNummeraanduiding = GetWebServerData('NLPDOKCadastreCadastralParcelsNummeraanduiding_28992','webserverRequests','serverrequestprefix') #For 'nummeraanduidingreeks' of Cadastral Parcels
NLPDOKCadastreOpenbareruimtenaam = GetWebServerData('NLPDOKCadastreOpenbareruimtenaam_28992','webserverRequests','serverrequestprefix')#For 'openbareruimtenaam' of Cadastral Parcels
NLPDOKBAGBuildingCountour = GetWebServerData('NLPDOKBAGBuildingCountour_28992','webserverRequests','serverrequestprefix')  #Building Contour of BAG
NLTUDelftBAG3DV1 = GetWebServerData('NLTUDelftBAG3DV1_28992','webserverRequests','serverrequestprefix')  #3D Buildings of BAG
NLRuimtelijkeplannenBouwvlak = GetWebServerData('NLRuimtelijkeplannenBouwvlak_28992','webserverRequests','serverrequestprefix')
NLPDOKLuchtfoto2016 = GetWebServerData('NL_PDOK_Luchtfoto_2016_28992','webserverRequests','serverrequestprefix')
NLPDOKLuchtfoto2017 = GetWebServerData('NL_PDOK_Luchtfoto_2017_28992','webserverRequests','serverrequestprefix')
NLPDOKLuchtfoto2018 = GetWebServerData('NL_PDOK_Luchtfoto_2018_28992','webserverRequests','serverrequestprefix')
NLPDOKLuchtfoto2019 = GetWebServerData('NL_PDOK_Luchtfoto_2019_28992','webserverRequests','serverrequestprefix')
NLPDOKLuchtfoto2020 = GetWebServerData('NL_PDOK_Luchtfoto_2020_28992','webserverRequests','serverrequestprefix')
NLPDOKLuchtfoto2021 = GetWebServerData('NL_PDOK_Luchtfoto_2021_28992','webserverRequests','serverrequestprefix')
NLPDOKLuchtfotoActueel = GetWebServerData('NL_PDOK_Luchtfoto_actueel_28992','webserverRequests','serverrequestprefix')
NLRuimtelijkeplannenEnkelbestemming = GetWebServerData('NLRuimtelijkeplannenEnkelbestemming_28992','webserverRequests','serverrequestprefix')
NLNatura2000 = GetWebServerData('NL_PDOK_natura2000_28992','webserverRequests','serverrequestprefix')
NLGeluidskaartAlleBronnen = GetWebServerData('NL_RIVM_Geluidskaart_alle_bronnen_28992','webserverRequests','serverrequestprefix')
NLRIVMGeluidskaartldenwegverkeer = GetWebServerData('NL_RIVM_Geluidskaart_lden_wegverkeer_28992','webserverRequests','serverrequestprefix')
NLRIVMGeluidskaartldenspoor = GetWebServerData('NL_RIVM_Geluidskaart_lden_spoor_28992','webserverRequests','serverrequestprefix')
NLRisicocontourbasisnet = GetWebServerData('NL_RIVM_Geluidskaart_lden_spoor_28992','webserverRequests','serverrequestprefix')
NLRisicocontourEV = GetWebServerData('NL_RIVM_Geluidskaart_lden_spoor_28992','webserverRequests','serverrequestprefix')
NLRisicocontourEVbrand = GetWebServerData('NL_RIVM_Geluidskaart_lden_spoor_28992','webserverRequests','serverrequestprefix')
NLRisicocontourEVexplosie = GetWebServerData('NL_RIVM_Geluidskaart_lden_spoor_28992','webserverRequests','serverrequestprefix')


NLTUDelftBAG3D = GetWebServerData('NLTUDelftBAG3D_28992','webserverRequests','serverrequestprefix')

NLTUDelftBAG3DDownloadPrefix = GetWebServerData('NLTUDelftBAG3Ddownload_28992','webserverRequests','serverrequestprefix')

NLPDOKBGTURL1 = "https://api.pdok.nl/lv/bgt/download/v1_0/full/custom"
NLPDOKBGTURL2 = "https://api.pdok.nl"

## Xpath for several Web Feature Servers
NLPDOKxPathOpenGISposList = GetWebServerData('NLPDOKxPathOpenGISposList','Querystrings','querystring')
NLPDOKxPathOpenGISPos = GetWebServerData('NLPDOKxPathOpenGISPos','Querystrings','querystring')
NLPDOKxPathStringsCadastreTextAngle = GetWebServerData('NLPDOKxPathStringsCadastreTextAngle','Querystrings','querystring')
NLPDOKxPathStringsCadastreTextValue = GetWebServerData('NLPDOKxPathStringsCadastreTextValue','Querystrings','querystring')
NLPDOKxPathOpenGISPosList2 = GetWebServerData('NLPDOKxPathOpenGISPosList2','Querystrings','querystring')
NLTUDelftxPathString3DBagGround = GetWebServerData('NLTUDelftxPathString3DBagGround','Querystrings','querystring')
NLTUDelftxPathString3DBagRoof = GetWebServerData('NLTUDelftxPathString3DBagRoof','Querystrings','querystring')

NLTUDelftxPathString3DBagTileId = GetWebServerData('NLTUDelftxPathString3DBagTileId','Querystrings','querystring')
NLTUDelftxPathString3DBag2 = GetWebServerData('NLTUDelftxPathString3DBag2','Querystrings','querystring')

NLPDOKKadasterBasisvoorziening3DCityJSONVolledig = GetWebServerData("NLPDOKKadasterBasisvoorziening3DCityJSONVolledig","webserverRequests","serverrequestprefix")

xPathStrings3DBag = [NLTUDelftxPathString3DBagGround, NLTUDelftxPathString3DBagRoof]
xPathStrings3DBAG2 = [NLTUDelftxPathString3DBagTileId, NLPDOKxPathOpenGISposList, NLTUDelftxPathString3DBag2]
xPathStringsCadastreTextAngle = [NLPDOKxPathStringsCadastreTextAngle, NLPDOKxPathStringsCadastreTextValue]

#Country specific

#NL Netherlands
def NL_GetLocationData(PDOKServer, City, Streetname, Housenumber):
# Use PDOK location server to get X & Y data
	SN = Streetname.replace(" ", "%20")
	requestURL =  PDOKServer + City +"%20and%20" + SN + "%20and%20" + Housenumber
	urlFile = urllib.request.urlopen(requestURL)
	jsonList = json.load(urlFile)
	jsonList = jsonList["response"]["docs"]
	jsonList1 = jsonList[0]
	RD = jsonList1['centroide_rd']
	RD = RD.replace("("," ").replace(")"," ")
	RD = RD.split()
	RDx = float(RD[1])
	RDy = float(RD[2])
	result = [RDx,RDy,requestURL]
	
	return result
	
def bgtDownloadURL(X,Y,bboxWidth,bboxHeight,timeout):
	polygonString = CreateBoundingBoxPolygon(X,Y,bboxWidth,bboxHeight,2)
	
	url = NLPDOKBGTURL1
	url2 = NLPDOKBGTURL2

	##Define data 
	qryPart1 = '{"featuretypes":['
	qryPart2 = '"bak","begroeidterreindeel","bord","buurt","functioneelgebied","gebouwinstallatie","installatie","kast","kunstwerkdeel","mast","onbegroeidterreindeel","ondersteunendwaterdeel","ondersteunendwegdeel","ongeclassificeerdobject","openbareruimte","openbareruimtelabel","overbruggingsdeel","overigbouwwerk","overigescheiding","paal","pand","put","scheiding","sensor","spoor","stadsdeel","straatmeubilair","tunneldeel","vegetatieobject","waterdeel","waterinrichtingselement","waterschap","weginrichtingselement","wijk","wegdeel"'
	qryPart3 = '],"format":"gmllight","geofilter":"POLYGON('
	qryPart4 = polygonString
	qryPart5 = ')"}'
	
	data = qryPart1 +  qryPart2 + qryPart3 + qryPart4 + qryPart5
	dataquery = data
	
	headers = requests.structures.CaseInsensitiveDict()
	headers["accept"] = "application/json"
	headers["Content-Type"] = "application/json"
	
	resp = requests.post(url, headers=headers, data=data)
	
	jsondata = json.loads(resp.text)
	data = jsondata["downloadRequestId"]
	urlstatus = url + "/" + data + "/status" 
	
	# Check URL Status
	
	req = urllib.request.urlopen(urlstatus)
	req2 = req.read().decode('utf-8')
	progressStatus = int(json.loads(req2)['progress'])
	
	timer = 0
	
	while timer < timeout:
	    req = urllib.request.urlopen(urlstatus)
	    req2 = req.read().decode('utf-8')    
	    progressStatus = int(json.loads(req2)['progress'])
	    status = json.loads(req2)['status']
	    if status == "COMPLETED":
	        try:
	            downloadURL = url2 + json.loads(req2)["_links"]["download"]["href"]
	        except:   
	            downloadURL = "unable to get downloadlink"        
	        message = status
	        break
	    elif timer > timeout:
	        downloadURL = "empty"
	        message = "timeout"
	        break
	    else: 
	        time.sleep(1)
	    timer = timer + 1
	return downloadURL

def BAG3DDownload(bboxString, tempFolder):
	#Download 3D BAG as CityJSON
	import requests
	url = NLTUDelftBAG3D
	xPathString1 = xPathStrings3DBAG2[0]

	# Webrequest to obtain tilenumbers based on bbox
	urlreq = url + bboxString
	response = requests.get(urlreq)
	tree = ET.fromstring(response.text)
	res = tree.findall(xPathString1)
	for i in res:
		tile_id = i.text
		tile_id2 = tile_id.replace("/","-")
		url = NLTUDelftBAG3DDownloadPrefix + tile_id + "/" + tile_id2 + ".city.json"
		path = tempFolder + tile_id2 + ".city.json"
		r = requests.get(url)
		with open(path, 'wb') as f:
			f.write(r.content)
	return res


lstkaartbladenpolygons = \
    [[[175000, 600000], [175000, 606250], [180000, 606250], [180000, 600000], [175000, 600000]],
[[165000, 600000], [165000, 606250], [170000, 606250], [170000, 600000], [165000, 600000]],
[[200000, 612500], [200000, 618750], [205000, 618750], [205000, 612500], [200000, 612500]],
[[185000, 600000], [185000, 606250], [190000, 606250], [190000, 600000], [185000, 600000]],
[[190000, 606250], [190000, 612500], [195000, 612500], [195000, 606250], [190000, 606250]],
[[190000, 600000], [190000, 606250], [195000, 606250], [195000, 600000], [190000, 600000]],
[[170000, 606250], [170000, 612500], [175000, 612500], [175000, 606250], [170000, 606250]],
[[160000, 606250], [160000, 612500], [165000, 612500], [165000, 606250], [160000, 606250]],
[[145000, 600000], [145000, 606250], [150000, 606250], [150000, 600000], [145000, 600000]],
[[150000, 600000], [150000, 606250], [155000, 606250], [155000, 600000], [150000, 600000]],
[[175000, 606250], [175000, 612500], [180000, 612500], [180000, 606250], [175000, 606250]],
[[180000, 600000], [180000, 606250], [185000, 606250], [185000, 600000], [180000, 600000]],
[[185000, 606250], [185000, 612500], [190000, 612500], [190000, 606250], [185000, 606250]],
[[165000, 606250], [165000, 612500], [170000, 612500], [170000, 606250], [165000, 606250]],
[[195000, 600000], [195000, 606250], [200000, 606250], [200000, 600000], [195000, 600000]],
[[210000, 612500], [210000, 618750], [215000, 618750], [215000, 612500], [210000, 612500]],
[[140000, 600000], [140000, 606250], [145000, 606250], [145000, 600000], [140000, 600000]],
[[170000, 600000], [170000, 606250], [175000, 606250], [175000, 600000], [170000, 600000]],
[[205000, 612500], [205000, 618750], [210000, 618750], [210000, 612500], [205000, 612500]],
[[180000, 606250], [180000, 612500], [185000, 612500], [185000, 606250], [180000, 606250]],
[[215000, 612500], [215000, 618750], [220000, 618750], [220000, 612500], [215000, 612500]],
[[160000, 600000], [160000, 606250], [165000, 606250], [165000, 600000], [160000, 600000]],
[[155000, 600000], [155000, 606250], [160000, 606250], [160000, 600000], [155000, 600000]],
[[235000, 600000], [235000, 606250], [240000, 606250], [240000, 600000], [235000, 600000]],
[[200000, 606250], [200000, 612500], [205000, 612500], [205000, 606250], [200000, 606250]],
[[240000, 606250], [240000, 612500], [245000, 612500], [245000, 606250], [240000, 606250]],
[[245000, 606250], [245000, 612500], [250000, 612500], [250000, 606250], [245000, 606250]],
[[205000, 606250], [205000, 612500], [210000, 612500], [210000, 606250], [205000, 606250]],
[[215000, 606250], [215000, 612500], [220000, 612500], [220000, 606250], [215000, 606250]],
[[230000, 606250], [230000, 612500], [235000, 612500], [235000, 606250], [230000, 606250]],
[[210000, 600000], [210000, 606250], [215000, 606250], [215000, 600000], [210000, 600000]],
[[230000, 600000], [230000, 606250], [235000, 606250], [235000, 600000], [230000, 600000]],
[[210000, 606250], [210000, 612500], [215000, 612500], [215000, 606250], [210000, 606250]],
[[240000, 600000], [240000, 606250], [245000, 606250], [245000, 600000], [240000, 600000]],
[[225000, 600000], [225000, 606250], [230000, 606250], [230000, 600000], [225000, 600000]],
[[205000, 600000], [205000, 606250], [210000, 606250], [210000, 600000], [205000, 600000]],
[[250000, 606250], [250000, 612500], [255000, 612500], [255000, 606250], [250000, 606250]],
[[220000, 600000], [220000, 606250], [225000, 606250], [225000, 600000], [220000, 600000]],
[[220000, 612500], [220000, 618750], [225000, 618750], [225000, 612500], [220000, 612500]],
[[245000, 600000], [245000, 606250], [250000, 606250], [250000, 600000], [245000, 600000]],
[[235000, 606250], [235000, 612500], [240000, 612500], [240000, 606250], [235000, 606250]],
[[215000, 600000], [215000, 606250], [220000, 606250], [220000, 600000], [215000, 600000]],
[[140000, 593750], [140000, 600000], [145000, 600000], [145000, 593750], [140000, 593750]],
[[200000, 600000], [200000, 606250], [205000, 606250], [205000, 600000], [200000, 600000]],
[[250000, 600000], [250000, 606250], [255000, 606250], [255000, 600000], [250000, 600000]],
[[125000, 587500], [125000, 593750], [130000, 593750], [130000, 587500], [125000, 587500]],
[[120000, 575000], [120000, 581250], [125000, 581250], [125000, 575000], [120000, 575000]],
[[135000, 587500], [135000, 593750], [140000, 593750], [140000, 587500], [135000, 587500]],
[[130000, 587500], [130000, 593750], [135000, 593750], [135000, 587500], [130000, 587500]],
[[255000, 600000], [255000, 606250], [260000, 606250], [260000, 600000], [255000, 600000]],
[[120000, 581250], [120000, 587500], [125000, 587500], [125000, 581250], [120000, 581250]],
[[115000, 581250], [115000, 587500], [120000, 587500], [120000, 581250], [115000, 581250]],
[[155000, 575000], [155000, 581250], [160000, 581250], [160000, 575000], [155000, 575000]],
[[125000, 581250], [125000, 587500], [130000, 587500], [130000, 581250], [125000, 581250]],
[[135000, 593750], [135000, 600000], [140000, 600000], [140000, 593750], [135000, 593750]],
[[170000, 587500], [170000, 593750], [175000, 593750], [175000, 587500], [170000, 587500]],
[[170000, 581250], [170000, 587500], [175000, 587500], [175000, 581250], [170000, 581250]],
[[150000, 593750], [150000, 600000], [155000, 600000], [155000, 593750], [150000, 593750]],
[[165000, 581250], [165000, 587500], [170000, 587500], [170000, 581250], [165000, 581250]],
[[165000, 587500], [165000, 593750], [170000, 593750], [170000, 587500], [165000, 587500]],
[[115000, 575000], [115000, 581250], [120000, 581250], [120000, 575000], [115000, 575000]],
[[145000, 593750], [145000, 600000], [150000, 600000], [150000, 593750], [145000, 593750]],
[[190000, 593750], [190000, 600000], [195000, 600000], [195000, 593750], [190000, 593750]],
[[170000, 575000], [170000, 581250], [175000, 581250], [175000, 575000], [170000, 575000]],
[[175000, 587500], [175000, 593750], [180000, 593750], [180000, 587500], [175000, 587500]],
[[170000, 593750], [170000, 600000], [175000, 600000], [175000, 593750], [170000, 593750]],
[[160000, 587500], [160000, 593750], [165000, 593750], [165000, 587500], [160000, 587500]],
[[155000, 581250], [155000, 587500], [160000, 587500], [160000, 581250], [155000, 581250]],
[[175000, 575000], [175000, 581250], [180000, 581250], [180000, 575000], [175000, 575000]],
[[160000, 581250], [160000, 587500], [165000, 587500], [165000, 581250], [160000, 581250]],
[[160000, 575000], [160000, 581250], [165000, 581250], [165000, 575000], [160000, 575000]],
[[180000, 587500], [180000, 593750], [185000, 593750], [185000, 587500], [180000, 587500]],
[[175000, 593750], [175000, 600000], [180000, 600000], [180000, 593750], [175000, 593750]],
[[195000, 593750], [195000, 600000], [200000, 600000], [200000, 593750], [195000, 593750]],
[[185000, 587500], [185000, 593750], [190000, 593750], [190000, 587500], [185000, 587500]],
[[180000, 581250], [180000, 587500], [185000, 587500], [185000, 581250], [180000, 581250]],
[[185000, 593750], [185000, 600000], [190000, 600000], [190000, 593750], [185000, 593750]],
[[165000, 575000], [165000, 581250], [170000, 581250], [170000, 575000], [165000, 575000]],
[[175000, 581250], [175000, 587500], [180000, 587500], [180000, 581250], [175000, 581250]],
[[185000, 581250], [185000, 587500], [190000, 587500], [190000, 581250], [185000, 581250]],
[[190000, 581250], [190000, 587500], [195000, 587500], [195000, 581250], [190000, 581250]],
[[180000, 593750], [180000, 600000], [185000, 600000], [185000, 593750], [180000, 593750]],
[[190000, 575000], [190000, 581250], [195000, 581250], [195000, 575000], [190000, 575000]],
[[185000, 575000], [185000, 581250], [190000, 581250], [190000, 575000], [185000, 575000]],
[[195000, 587500], [195000, 593750], [200000, 593750], [200000, 587500], [195000, 587500]],
[[180000, 575000], [180000, 581250], [185000, 581250], [185000, 575000], [180000, 575000]],
[[195000, 581250], [195000, 587500], [200000, 587500], [200000, 581250], [195000, 581250]],
[[200000, 581250], [200000, 587500], [205000, 587500], [205000, 581250], [200000, 581250]],
[[190000, 587500], [190000, 593750], [195000, 593750], [195000, 587500], [190000, 587500]],
[[205000, 575000], [205000, 581250], [210000, 581250], [210000, 575000], [205000, 575000]],
[[205000, 593750], [205000, 600000], [210000, 600000], [210000, 593750], [205000, 593750]],
[[215000, 575000], [215000, 581250], [220000, 581250], [220000, 575000], [215000, 575000]],
[[205000, 581250], [205000, 587500], [210000, 587500], [210000, 581250], [205000, 581250]],
[[200000, 593750], [200000, 600000], [205000, 600000], [205000, 593750], [200000, 593750]],
[[200000, 587500], [200000, 593750], [205000, 593750], [205000, 587500], [200000, 587500]],
[[225000, 593750], [225000, 600000], [230000, 600000], [230000, 593750], [225000, 593750]],
[[200000, 575000], [200000, 581250], [205000, 581250], [205000, 575000], [200000, 575000]],
[[195000, 575000], [195000, 581250], [200000, 581250], [200000, 575000], [195000, 575000]],
[[215000, 581250], [215000, 587500], [220000, 587500], [220000, 581250], [215000, 581250]],
[[210000, 581250], [210000, 587500], [215000, 587500], [215000, 581250], [210000, 581250]],
[[220000, 593750], [220000, 600000], [225000, 600000], [225000, 593750], [220000, 593750]],
[[230000, 593750], [230000, 600000], [235000, 600000], [235000, 593750], [230000, 593750]],
[[205000, 587500], [205000, 593750], [210000, 593750], [210000, 587500], [205000, 587500]],
[[210000, 593750], [210000, 600000], [215000, 600000], [215000, 593750], [210000, 593750]],
[[215000, 587500], [215000, 593750], [220000, 593750], [220000, 587500], [215000, 587500]],
[[230000, 581250], [230000, 587500], [235000, 587500], [235000, 581250], [230000, 581250]],
[[210000, 587500], [210000, 593750], [215000, 593750], [215000, 587500], [210000, 587500]],
[[235000, 593750], [235000, 600000], [240000, 600000], [240000, 593750], [235000, 593750]],
[[215000, 593750], [215000, 600000], [220000, 600000], [220000, 593750], [215000, 593750]],
[[225000, 587500], [225000, 593750], [230000, 593750], [230000, 587500], [225000, 587500]],
[[210000, 575000], [210000, 581250], [215000, 581250], [215000, 575000], [210000, 575000]],
[[230000, 587500], [230000, 593750], [235000, 593750], [235000, 587500], [230000, 587500]],
[[220000, 587500], [220000, 593750], [225000, 593750], [225000, 587500], [220000, 587500]],
[[225000, 581250], [225000, 587500], [230000, 587500], [230000, 581250], [225000, 581250]],
[[250000, 587500], [250000, 593750], [255000, 593750], [255000, 587500], [250000, 587500]],
[[235000, 575000], [235000, 581250], [240000, 581250], [240000, 575000], [235000, 575000]],
[[220000, 575000], [220000, 581250], [225000, 581250], [225000, 575000], [220000, 575000]],
[[230000, 575000], [230000, 581250], [235000, 581250], [235000, 575000], [230000, 575000]],
[[235000, 581250], [235000, 587500], [240000, 587500], [240000, 581250], [235000, 581250]],
[[225000, 575000], [225000, 581250], [230000, 581250], [230000, 575000], [225000, 575000]],
[[235000, 587500], [235000, 593750], [240000, 593750], [240000, 587500], [235000, 587500]],
[[220000, 581250], [220000, 587500], [225000, 587500], [225000, 581250], [220000, 581250]],
[[245000, 587500], [245000, 593750], [250000, 593750], [250000, 587500], [245000, 587500]],
[[245000, 593750], [245000, 600000], [250000, 600000], [250000, 593750], [245000, 593750]],
[[240000, 593750], [240000, 600000], [245000, 600000], [245000, 593750], [240000, 593750]],
[[240000, 575000], [240000, 581250], [245000, 581250], [245000, 575000], [240000, 575000]],
[[240000, 587500], [240000, 593750], [245000, 593750], [245000, 587500], [240000, 587500]],
[[250000, 581250], [250000, 587500], [255000, 587500], [255000, 581250], [250000, 581250]],
[[255000, 593750], [255000, 600000], [260000, 600000], [260000, 593750], [255000, 593750]],
[[255000, 581250], [255000, 587500], [260000, 587500], [260000, 581250], [255000, 581250]],
[[240000, 581250], [240000, 587500], [245000, 587500], [245000, 581250], [240000, 581250]],
[[250000, 593750], [250000, 600000], [255000, 600000], [255000, 593750], [250000, 593750]],
[[260000, 587500], [260000, 593750], [265000, 593750], [265000, 587500], [260000, 587500]],
[[255000, 587500], [255000, 593750], [260000, 593750], [260000, 587500], [255000, 587500]],
[[245000, 575000], [245000, 581250], [250000, 581250], [250000, 575000], [245000, 575000]],
[[270000, 575000], [270000, 581250], [275000, 581250], [275000, 575000], [270000, 575000]],
[[260000, 593750], [260000, 600000], [265000, 600000], [265000, 593750], [260000, 593750]],
[[245000, 581250], [245000, 587500], [250000, 587500], [250000, 581250], [245000, 581250]],
[[270000, 581250], [270000, 587500], [275000, 587500], [275000, 581250], [270000, 581250]],
[[250000, 575000], [250000, 581250], [255000, 581250], [255000, 575000], [250000, 575000]],
[[115000, 568750], [115000, 575000], [120000, 575000], [120000, 568750], [115000, 568750]],
[[260000, 581250], [260000, 587500], [265000, 587500], [265000, 581250], [260000, 581250]],
[[260000, 575000], [260000, 581250], [265000, 581250], [265000, 575000], [260000, 575000]],
[[265000, 575000], [265000, 581250], [270000, 581250], [270000, 575000], [265000, 575000]],
[[265000, 587500], [265000, 593750], [270000, 593750], [270000, 587500], [265000, 587500]],
[[110000, 562500], [110000, 568750], [115000, 568750], [115000, 562500], [110000, 562500]],
[[255000, 575000], [255000, 581250], [260000, 581250], [260000, 575000], [255000, 575000]],
[[275000, 575000], [275000, 581250], [280000, 581250], [280000, 575000], [275000, 575000]],
[[265000, 581250], [265000, 587500], [270000, 587500], [270000, 581250], [265000, 581250]],
[[115000, 562500], [115000, 568750], [120000, 568750], [120000, 562500], [115000, 562500]],
[[275000, 581250], [275000, 587500], [280000, 587500], [280000, 581250], [275000, 581250]],
[[110000, 556250], [110000, 562500], [115000, 562500], [115000, 556250], [110000, 556250]],
[[105000, 556250], [105000, 562500], [110000, 562500], [110000, 556250], [105000, 556250]],
[[110000, 568750], [110000, 575000], [115000, 575000], [115000, 568750], [110000, 568750]],
[[115000, 556250], [115000, 562500], [120000, 562500], [120000, 556250], [115000, 556250]],
[[130000, 550000], [130000, 556250], [135000, 556250], [135000, 550000], [130000, 550000]],
[[115000, 550000], [115000, 556250], [120000, 556250], [120000, 550000], [115000, 550000]],
[[120000, 562500], [120000, 568750], [125000, 568750], [125000, 562500], [120000, 562500]],
[[105000, 562500], [105000, 568750], [110000, 568750], [110000, 562500], [105000, 562500]],
[[105000, 550000], [105000, 556250], [110000, 556250], [110000, 550000], [105000, 550000]],
[[110000, 550000], [110000, 556250], [115000, 556250], [115000, 550000], [110000, 550000]],
[[120000, 568750], [120000, 575000], [125000, 575000], [125000, 568750], [120000, 568750]],
[[145000, 562500], [145000, 568750], [150000, 568750], [150000, 562500], [145000, 562500]],
[[155000, 550000], [155000, 556250], [160000, 556250], [160000, 550000], [155000, 550000]],
[[145000, 556250], [145000, 562500], [150000, 562500], [150000, 556250], [145000, 556250]],
[[160000, 568750], [160000, 575000], [165000, 575000], [165000, 568750], [160000, 568750]],
[[135000, 556250], [135000, 562500], [140000, 562500], [140000, 556250], [135000, 556250]],
[[155000, 568750], [155000, 575000], [160000, 575000], [160000, 568750], [155000, 568750]],
[[155000, 556250], [155000, 562500], [160000, 562500], [160000, 556250], [155000, 556250]],
[[150000, 556250], [150000, 562500], [155000, 562500], [155000, 556250], [150000, 556250]],
[[150000, 568750], [150000, 575000], [155000, 575000], [155000, 568750], [150000, 568750]],
[[150000, 562500], [150000, 568750], [155000, 568750], [155000, 562500], [150000, 562500]],
[[175000, 568750], [175000, 575000], [180000, 575000], [180000, 568750], [175000, 568750]],
[[140000, 556250], [140000, 562500], [145000, 562500], [145000, 556250], [140000, 556250]],
[[135000, 550000], [135000, 556250], [140000, 556250], [140000, 550000], [135000, 550000]],
[[180000, 568750], [180000, 575000], [185000, 575000], [185000, 568750], [180000, 568750]],
[[170000, 568750], [170000, 575000], [175000, 575000], [175000, 568750], [170000, 568750]],
[[160000, 550000], [160000, 556250], [165000, 556250], [165000, 550000], [160000, 550000]],
[[155000, 562500], [155000, 568750], [160000, 568750], [160000, 562500], [155000, 562500]],
[[175000, 562500], [175000, 568750], [180000, 568750], [180000, 562500], [175000, 562500]],
[[165000, 568750], [165000, 575000], [170000, 575000], [170000, 568750], [165000, 568750]],
[[165000, 556250], [165000, 562500], [170000, 562500], [170000, 556250], [165000, 556250]],
[[160000, 562500], [160000, 568750], [165000, 568750], [165000, 562500], [160000, 562500]],
[[170000, 562500], [170000, 568750], [175000, 568750], [175000, 562500], [170000, 562500]],
[[190000, 568750], [190000, 575000], [195000, 575000], [195000, 568750], [190000, 568750]],
[[170000, 556250], [170000, 562500], [175000, 562500], [175000, 556250], [170000, 556250]],
[[185000, 568750], [185000, 575000], [190000, 575000], [190000, 568750], [185000, 568750]],
[[175000, 556250], [175000, 562500], [180000, 562500], [180000, 556250], [175000, 556250]],
[[175000, 550000], [175000, 556250], [180000, 556250], [180000, 550000], [175000, 550000]],
[[165000, 562500], [165000, 568750], [170000, 568750], [170000, 562500], [165000, 562500]],
[[195000, 550000], [195000, 556250], [200000, 556250], [200000, 550000], [195000, 550000]],
[[180000, 550000], [180000, 556250], [185000, 556250], [185000, 550000], [180000, 550000]],
[[185000, 562500], [185000, 568750], [190000, 568750], [190000, 562500], [185000, 562500]],
[[180000, 562500], [180000, 568750], [185000, 568750], [185000, 562500], [180000, 562500]],
[[195000, 556250], [195000, 562500], [200000, 562500], [200000, 556250], [195000, 556250]],
[[160000, 556250], [160000, 562500], [165000, 562500], [165000, 556250], [160000, 556250]],
[[165000, 550000], [165000, 556250], [170000, 556250], [170000, 550000], [165000, 550000]],
[[170000, 550000], [170000, 556250], [175000, 556250], [175000, 550000], [170000, 550000]],
[[205000, 568750], [205000, 575000], [210000, 575000], [210000, 568750], [205000, 568750]],
[[185000, 550000], [185000, 556250], [190000, 556250], [190000, 550000], [185000, 550000]],
[[195000, 562500], [195000, 568750], [200000, 568750], [200000, 562500], [195000, 562500]],
[[190000, 556250], [190000, 562500], [195000, 562500], [195000, 556250], [190000, 556250]],
[[190000, 562500], [190000, 568750], [195000, 568750], [195000, 562500], [190000, 562500]],
[[190000, 550000], [190000, 556250], [195000, 556250], [195000, 550000], [190000, 550000]],
[[185000, 556250], [185000, 562500], [190000, 562500], [190000, 556250], [185000, 556250]],
[[195000, 568750], [195000, 575000], [200000, 575000], [200000, 568750], [195000, 568750]],
[[205000, 562500], [205000, 568750], [210000, 568750], [210000, 562500], [205000, 562500]],
[[205000, 556250], [205000, 562500], [210000, 562500], [210000, 556250], [205000, 556250]],
[[180000, 556250], [180000, 562500], [185000, 562500], [185000, 556250], [180000, 556250]],
[[215000, 556250], [215000, 562500], [220000, 562500], [220000, 556250], [215000, 556250]],
[[200000, 556250], [200000, 562500], [205000, 562500], [205000, 556250], [200000, 556250]],
[[210000, 568750], [210000, 575000], [215000, 575000], [215000, 568750], [210000, 568750]],
[[210000, 550000], [210000, 556250], [215000, 556250], [215000, 550000], [210000, 550000]],
[[215000, 562500], [215000, 568750], [220000, 568750], [220000, 562500], [215000, 562500]],
[[200000, 568750], [200000, 575000], [205000, 575000], [205000, 568750], [200000, 568750]],
[[200000, 550000], [200000, 556250], [205000, 556250], [205000, 550000], [200000, 550000]],
[[205000, 550000], [205000, 556250], [210000, 556250], [210000, 550000], [205000, 550000]],
[[215000, 568750], [215000, 575000], [220000, 575000], [220000, 568750], [215000, 568750]],
[[200000, 562500], [200000, 568750], [205000, 568750], [205000, 562500], [200000, 562500]],
[[220000, 556250], [220000, 562500], [225000, 562500], [225000, 556250], [220000, 556250]],
[[225000, 562500], [225000, 568750], [230000, 568750], [230000, 562500], [225000, 562500]],
[[210000, 562500], [210000, 568750], [215000, 568750], [215000, 562500], [210000, 562500]],
[[255000, 568750], [255000, 575000], [260000, 575000], [260000, 568750], [255000, 568750]],
[[230000, 562500], [230000, 568750], [235000, 568750], [235000, 562500], [230000, 562500]],
[[210000, 556250], [210000, 562500], [215000, 562500], [215000, 556250], [210000, 556250]],
[[220000, 568750], [220000, 575000], [225000, 575000], [225000, 568750], [220000, 568750]],
[[230000, 568750], [230000, 575000], [235000, 575000], [235000, 568750], [230000, 568750]],
[[225000, 568750], [225000, 575000], [230000, 575000], [230000, 568750], [225000, 568750]],
[[235000, 562500], [235000, 568750], [240000, 568750], [240000, 562500], [235000, 562500]],
[[220000, 562500], [220000, 568750], [225000, 568750], [225000, 562500], [220000, 562500]],
[[240000, 568750], [240000, 575000], [245000, 575000], [245000, 568750], [240000, 568750]],
[[230000, 556250], [230000, 562500], [235000, 562500], [235000, 556250], [230000, 556250]],
[[215000, 550000], [215000, 556250], [220000, 556250], [220000, 550000], [215000, 550000]],
[[225000, 550000], [225000, 556250], [230000, 556250], [230000, 550000], [225000, 550000]],
[[235000, 568750], [235000, 575000], [240000, 575000], [240000, 568750], [235000, 568750]],
[[250000, 568750], [250000, 575000], [255000, 575000], [255000, 568750], [250000, 568750]],
[[235000, 556250], [235000, 562500], [240000, 562500], [240000, 556250], [235000, 556250]],
[[245000, 562500], [245000, 568750], [250000, 568750], [250000, 562500], [245000, 562500]],
[[225000, 556250], [225000, 562500], [230000, 562500], [230000, 556250], [225000, 556250]],
[[220000, 550000], [220000, 556250], [225000, 556250], [225000, 550000], [220000, 550000]],
[[235000, 550000], [235000, 556250], [240000, 556250], [240000, 550000], [235000, 550000]],
[[240000, 550000], [240000, 556250], [245000, 556250], [245000, 550000], [240000, 550000]],
[[245000, 568750], [245000, 575000], [250000, 575000], [250000, 568750], [245000, 568750]],
[[230000, 550000], [230000, 556250], [235000, 556250], [235000, 550000], [230000, 550000]],
[[245000, 556250], [245000, 562500], [250000, 562500], [250000, 556250], [245000, 556250]],
[[260000, 568750], [260000, 575000], [265000, 575000], [265000, 568750], [260000, 568750]],
[[245000, 550000], [245000, 556250], [250000, 556250], [250000, 550000], [245000, 550000]],
[[255000, 562500], [255000, 568750], [260000, 568750], [260000, 562500], [255000, 562500]],
[[240000, 562500], [240000, 568750], [245000, 568750], [245000, 562500], [240000, 562500]],
[[240000, 556250], [240000, 562500], [245000, 562500], [245000, 556250], [240000, 556250]],
[[250000, 556250], [250000, 562500], [255000, 562500], [255000, 556250], [250000, 556250]],
[[255000, 556250], [255000, 562500], [260000, 562500], [260000, 556250], [255000, 556250]],
[[275000, 568750], [275000, 575000], [280000, 575000], [280000, 568750], [275000, 568750]],
[[250000, 550000], [250000, 556250], [255000, 556250], [255000, 550000], [250000, 550000]],
[[250000, 562500], [250000, 568750], [255000, 568750], [255000, 562500], [250000, 562500]],
[[265000, 550000], [265000, 556250], [270000, 556250], [270000, 550000], [265000, 550000]],
[[265000, 562500], [265000, 568750], [270000, 568750], [270000, 562500], [265000, 562500]],
[[270000, 568750], [270000, 575000], [275000, 575000], [275000, 568750], [270000, 568750]],
[[255000, 550000], [255000, 556250], [260000, 556250], [260000, 550000], [255000, 550000]],
[[265000, 568750], [265000, 575000], [270000, 575000], [270000, 568750], [265000, 568750]],
[[105000, 543750], [105000, 550000], [110000, 550000], [110000, 543750], [105000, 543750]],
[[275000, 556250], [275000, 562500], [280000, 562500], [280000, 556250], [275000, 556250]],
[[275000, 550000], [275000, 556250], [280000, 556250], [280000, 550000], [275000, 550000]],
[[275000, 562500], [275000, 568750], [280000, 568750], [280000, 562500], [275000, 562500]],
[[270000, 562500], [270000, 568750], [275000, 568750], [275000, 562500], [270000, 562500]],
[[260000, 550000], [260000, 556250], [265000, 556250], [265000, 550000], [260000, 550000]],
[[260000, 562500], [260000, 568750], [265000, 568750], [265000, 562500], [260000, 562500]],
[[105000, 537500], [105000, 543750], [110000, 543750], [110000, 537500], [105000, 537500]],
[[115000, 537500], [115000, 543750], [120000, 543750], [120000, 537500], [115000, 537500]],
[[260000, 556250], [260000, 562500], [265000, 562500], [265000, 556250], [260000, 556250]],
[[125000, 543750], [125000, 550000], [130000, 550000], [130000, 543750], [125000, 543750]],
[[110000, 525000], [110000, 531250], [115000, 531250], [115000, 525000], [110000, 525000]],
[[110000, 537500], [110000, 543750], [115000, 543750], [115000, 537500], [110000, 537500]],
[[120000, 543750], [120000, 550000], [125000, 550000], [125000, 543750], [120000, 543750]],
[[125000, 537500], [125000, 543750], [130000, 543750], [130000, 537500], [125000, 537500]],
[[265000, 556250], [265000, 562500], [270000, 562500], [270000, 556250], [265000, 556250]],
[[120000, 537500], [120000, 543750], [125000, 543750], [125000, 537500], [120000, 537500]],
[[270000, 556250], [270000, 562500], [275000, 562500], [275000, 556250], [270000, 556250]],
[[110000, 543750], [110000, 550000], [115000, 550000], [115000, 543750], [110000, 543750]],
[[115000, 525000], [115000, 531250], [120000, 531250], [120000, 525000], [115000, 525000]],
[[110000, 531250], [110000, 537500], [115000, 537500], [115000, 531250], [110000, 531250]],
[[105000, 525000], [105000, 531250], [110000, 531250], [110000, 525000], [105000, 525000]],
[[105000, 531250], [105000, 537500], [110000, 537500], [110000, 531250], [105000, 531250]],
[[270000, 550000], [270000, 556250], [275000, 556250], [275000, 550000], [270000, 550000]],
[[115000, 531250], [115000, 537500], [120000, 537500], [120000, 531250], [115000, 531250]],
[[135000, 531250], [135000, 537500], [140000, 537500], [140000, 531250], [135000, 531250]],
[[115000, 543750], [115000, 550000], [120000, 550000], [120000, 543750], [115000, 543750]],
[[125000, 531250], [125000, 537500], [130000, 537500], [130000, 531250], [125000, 531250]],
[[100000, 525000], [100000, 531250], [105000, 531250], [105000, 525000], [100000, 525000]],
[[130000, 543750], [130000, 550000], [135000, 550000], [135000, 543750], [130000, 543750]],
[[130000, 537500], [130000, 543750], [135000, 543750], [135000, 537500], [130000, 537500]],
[[135000, 537500], [135000, 543750], [140000, 543750], [140000, 537500], [135000, 537500]],
[[145000, 525000], [145000, 531250], [150000, 531250], [150000, 525000], [145000, 525000]],
[[165000, 543750], [165000, 550000], [170000, 550000], [170000, 543750], [165000, 543750]],
[[150000, 543750], [150000, 550000], [155000, 550000], [155000, 543750], [150000, 543750]],
[[160000, 537500], [160000, 543750], [165000, 543750], [165000, 537500], [160000, 537500]],
[[165000, 537500], [165000, 543750], [170000, 543750], [170000, 537500], [165000, 537500]],
[[125000, 525000], [125000, 531250], [130000, 531250], [130000, 525000], [125000, 525000]],
[[150000, 537500], [150000, 543750], [155000, 543750], [155000, 537500], [150000, 537500]],
[[140000, 525000], [140000, 531250], [145000, 531250], [145000, 525000], [140000, 525000]],
[[130000, 531250], [130000, 537500], [135000, 537500], [135000, 531250], [130000, 531250]],
[[120000, 531250], [120000, 537500], [125000, 537500], [125000, 531250], [120000, 531250]],
[[155000, 537500], [155000, 543750], [160000, 543750], [160000, 537500], [155000, 537500]],
[[130000, 525000], [130000, 531250], [135000, 531250], [135000, 525000], [130000, 525000]],
[[135000, 525000], [135000, 531250], [140000, 531250], [140000, 525000], [135000, 525000]],
[[175000, 543750], [175000, 550000], [180000, 550000], [180000, 543750], [175000, 543750]],
[[120000, 525000], [120000, 531250], [125000, 531250], [125000, 525000], [120000, 525000]],
[[155000, 543750], [155000, 550000], [160000, 550000], [160000, 543750], [155000, 543750]],
[[160000, 543750], [160000, 550000], [165000, 550000], [165000, 543750], [160000, 543750]],
[[170000, 543750], [170000, 550000], [175000, 550000], [175000, 543750], [170000, 543750]],
[[175000, 537500], [175000, 543750], [180000, 543750], [180000, 537500], [175000, 537500]],
[[165000, 531250], [165000, 537500], [170000, 537500], [170000, 531250], [165000, 531250]],
[[170000, 525000], [170000, 531250], [175000, 531250], [175000, 525000], [170000, 525000]],
[[170000, 537500], [170000, 543750], [175000, 543750], [175000, 537500], [170000, 537500]],
[[185000, 531250], [185000, 537500], [190000, 537500], [190000, 531250], [185000, 531250]],
[[170000, 531250], [170000, 537500], [175000, 537500], [175000, 531250], [170000, 531250]],
[[190000, 543750], [190000, 550000], [195000, 550000], [195000, 543750], [190000, 543750]],
[[180000, 543750], [180000, 550000], [185000, 550000], [185000, 543750], [180000, 543750]],
[[165000, 525000], [165000, 531250], [170000, 531250], [170000, 525000], [165000, 525000]],
[[185000, 543750], [185000, 550000], [190000, 550000], [190000, 543750], [185000, 543750]],
[[180000, 531250], [180000, 537500], [185000, 537500], [185000, 531250], [180000, 531250]],
[[180000, 537500], [180000, 543750], [185000, 543750], [185000, 537500], [180000, 537500]],
[[195000, 543750], [195000, 550000], [200000, 550000], [200000, 543750], [195000, 543750]],
[[190000, 531250], [190000, 537500], [195000, 537500], [195000, 531250], [190000, 531250]],
[[185000, 537500], [185000, 543750], [190000, 543750], [190000, 537500], [185000, 537500]],
[[185000, 525000], [185000, 531250], [190000, 531250], [190000, 525000], [185000, 525000]],
[[180000, 525000], [180000, 531250], [185000, 531250], [185000, 525000], [180000, 525000]],
[[195000, 531250], [195000, 537500], [200000, 537500], [200000, 531250], [195000, 531250]],
[[195000, 537500], [195000, 543750], [200000, 543750], [200000, 537500], [195000, 537500]],
[[175000, 525000], [175000, 531250], [180000, 531250], [180000, 525000], [175000, 525000]],
[[175000, 531250], [175000, 537500], [180000, 537500], [180000, 531250], [175000, 531250]],
[[200000, 543750], [200000, 550000], [205000, 550000], [205000, 543750], [200000, 543750]],
[[190000, 525000], [190000, 531250], [195000, 531250], [195000, 525000], [190000, 525000]],
[[215000, 543750], [215000, 550000], [220000, 550000], [220000, 543750], [215000, 543750]],
[[210000, 543750], [210000, 550000], [215000, 550000], [215000, 543750], [210000, 543750]],
[[200000, 531250], [200000, 537500], [205000, 537500], [205000, 531250], [200000, 531250]],
[[205000, 537500], [205000, 543750], [210000, 543750], [210000, 537500], [205000, 537500]],
[[210000, 531250], [210000, 537500], [215000, 537500], [215000, 531250], [210000, 531250]],
[[210000, 537500], [210000, 543750], [215000, 543750], [215000, 537500], [210000, 537500]],
[[205000, 543750], [205000, 550000], [210000, 550000], [210000, 543750], [205000, 543750]],
[[225000, 543750], [225000, 550000], [230000, 550000], [230000, 543750], [225000, 543750]],
[[215000, 537500], [215000, 543750], [220000, 543750], [220000, 537500], [215000, 537500]],
[[200000, 537500], [200000, 543750], [205000, 543750], [205000, 537500], [200000, 537500]],
[[225000, 537500], [225000, 543750], [230000, 543750], [230000, 537500], [225000, 537500]],
[[195000, 525000], [195000, 531250], [200000, 531250], [200000, 525000], [195000, 525000]],
[[215000, 531250], [215000, 537500], [220000, 537500], [220000, 531250], [215000, 531250]],
[[190000, 537500], [190000, 543750], [195000, 543750], [195000, 537500], [190000, 537500]],
[[200000, 525000], [200000, 531250], [205000, 531250], [205000, 525000], [200000, 525000]],
[[210000, 525000], [210000, 531250], [215000, 531250], [215000, 525000], [210000, 525000]],
[[215000, 525000], [215000, 531250], [220000, 531250], [220000, 525000], [215000, 525000]],
[[205000, 525000], [205000, 531250], [210000, 531250], [210000, 525000], [205000, 525000]],
[[230000, 537500], [230000, 543750], [235000, 543750], [235000, 537500], [230000, 537500]],
[[245000, 543750], [245000, 550000], [250000, 550000], [250000, 543750], [245000, 543750]],
[[225000, 525000], [225000, 531250], [230000, 531250], [230000, 525000], [225000, 525000]],
[[240000, 543750], [240000, 550000], [245000, 550000], [245000, 543750], [240000, 543750]],
[[205000, 531250], [205000, 537500], [210000, 537500], [210000, 531250], [205000, 531250]],
[[225000, 531250], [225000, 537500], [230000, 537500], [230000, 531250], [225000, 531250]],
[[220000, 543750], [220000, 550000], [225000, 550000], [225000, 543750], [220000, 543750]],
[[220000, 537500], [220000, 543750], [225000, 543750], [225000, 537500], [220000, 537500]],
[[235000, 543750], [235000, 550000], [240000, 550000], [240000, 543750], [235000, 543750]],
[[250000, 537500], [250000, 543750], [255000, 543750], [255000, 537500], [250000, 537500]],
[[230000, 525000], [230000, 531250], [235000, 531250], [235000, 525000], [230000, 525000]],
[[235000, 537500], [235000, 543750], [240000, 543750], [240000, 537500], [235000, 537500]],
[[250000, 543750], [250000, 550000], [255000, 550000], [255000, 543750], [250000, 543750]],
[[235000, 531250], [235000, 537500], [240000, 537500], [240000, 531250], [235000, 531250]],
[[220000, 525000], [220000, 531250], [225000, 531250], [225000, 525000], [220000, 525000]],
[[230000, 543750], [230000, 550000], [235000, 550000], [235000, 543750], [230000, 543750]],
[[255000, 525000], [255000, 531250], [260000, 531250], [260000, 525000], [255000, 525000]],
[[220000, 531250], [220000, 537500], [225000, 537500], [225000, 531250], [220000, 531250]],
[[245000, 531250], [245000, 537500], [250000, 537500], [250000, 531250], [245000, 531250]],
[[240000, 537500], [240000, 543750], [245000, 543750], [245000, 537500], [240000, 537500]],
[[230000, 531250], [230000, 537500], [235000, 537500], [235000, 531250], [230000, 531250]],
[[240000, 525000], [240000, 531250], [245000, 531250], [245000, 525000], [240000, 525000]],
[[245000, 537500], [245000, 543750], [250000, 543750], [250000, 537500], [245000, 537500]],
[[255000, 543750], [255000, 550000], [260000, 550000], [260000, 543750], [255000, 543750]],
[[250000, 525000], [250000, 531250], [255000, 531250], [255000, 525000], [250000, 525000]],
[[265000, 525000], [265000, 531250], [270000, 531250], [270000, 525000], [265000, 525000]],
[[235000, 525000], [235000, 531250], [240000, 531250], [240000, 525000], [235000, 525000]],
[[260000, 543750], [260000, 550000], [265000, 550000], [265000, 543750], [260000, 543750]],
[[260000, 531250], [260000, 537500], [265000, 537500], [265000, 531250], [260000, 531250]],
[[270000, 543750], [270000, 550000], [275000, 550000], [275000, 543750], [270000, 543750]],
[[270000, 537500], [270000, 543750], [275000, 543750], [275000, 537500], [270000, 537500]],
[[105000, 518750], [105000, 525000], [110000, 525000], [110000, 518750], [105000, 518750]],
[[250000, 531250], [250000, 537500], [255000, 537500], [255000, 531250], [250000, 531250]],
[[265000, 543750], [265000, 550000], [270000, 550000], [270000, 543750], [265000, 543750]],
[[255000, 537500], [255000, 543750], [260000, 543750], [260000, 537500], [255000, 537500]],
[[260000, 537500], [260000, 543750], [265000, 543750], [265000, 537500], [260000, 537500]],
[[255000, 531250], [255000, 537500], [260000, 537500], [260000, 531250], [255000, 531250]],
[[265000, 537500], [265000, 543750], [270000, 543750], [270000, 537500], [265000, 537500]],
[[100000, 518750], [100000, 525000], [105000, 525000], [105000, 518750], [100000, 518750]],
[[240000, 531250], [240000, 537500], [245000, 537500], [245000, 531250], [240000, 531250]],
[[245000, 525000], [245000, 531250], [250000, 531250], [250000, 525000], [245000, 525000]],
[[115000, 518750], [115000, 525000], [120000, 525000], [120000, 518750], [115000, 518750]],
[[260000, 525000], [260000, 531250], [265000, 531250], [265000, 525000], [260000, 525000]],
[[115000, 512500], [115000, 518750], [120000, 518750], [120000, 512500], [115000, 512500]],
[[105000, 506250], [105000, 512500], [110000, 512500], [110000, 506250], [105000, 506250]],
[[105000, 512500], [105000, 518750], [110000, 518750], [110000, 512500], [105000, 512500]],
[[110000, 512500], [110000, 518750], [115000, 518750], [115000, 512500], [110000, 512500]],
[[265000, 531250], [265000, 537500], [270000, 537500], [270000, 531250], [265000, 531250]],
[[100000, 512500], [100000, 518750], [105000, 518750], [105000, 512500], [100000, 512500]],
[[95000, 500000], [95000, 506250], [100000, 506250], [100000, 500000], [95000, 500000]],
[[100000, 500000], [100000, 506250], [105000, 506250], [105000, 500000], [100000, 500000]],
[[105000, 500000], [105000, 506250], [110000, 506250], [110000, 500000], [105000, 500000]],
[[110000, 506250], [110000, 512500], [115000, 512500], [115000, 506250], [110000, 506250]],
[[125000, 512500], [125000, 518750], [130000, 518750], [130000, 512500], [125000, 512500]],
[[115000, 506250], [115000, 512500], [120000, 512500], [120000, 506250], [115000, 506250]],
[[100000, 506250], [100000, 512500], [105000, 512500], [105000, 506250], [100000, 506250]],
[[110000, 518750], [110000, 525000], [115000, 525000], [115000, 518750], [110000, 518750]],
[[120000, 518750], [120000, 525000], [125000, 525000], [125000, 518750], [120000, 518750]],
[[135000, 512500], [135000, 518750], [140000, 518750], [140000, 512500], [135000, 512500]],
[[110000, 500000], [110000, 506250], [115000, 506250], [115000, 500000], [110000, 500000]],
[[120000, 512500], [120000, 518750], [125000, 518750], [125000, 512500], [120000, 512500]],
[[125000, 518750], [125000, 525000], [130000, 525000], [130000, 518750], [125000, 518750]],
[[135000, 500000], [135000, 506250], [140000, 506250], [140000, 500000], [135000, 500000]],
[[130000, 518750], [130000, 525000], [135000, 525000], [135000, 518750], [130000, 518750]],
[[125000, 506250], [125000, 512500], [130000, 512500], [130000, 506250], [125000, 506250]],
[[135000, 518750], [135000, 525000], [140000, 525000], [140000, 518750], [135000, 518750]],
[[130000, 512500], [130000, 518750], [135000, 518750], [135000, 512500], [130000, 512500]],
[[130000, 500000], [130000, 506250], [135000, 506250], [135000, 500000], [130000, 500000]],
[[130000, 506250], [130000, 512500], [135000, 512500], [135000, 506250], [130000, 506250]],
[[150000, 518750], [150000, 525000], [155000, 525000], [155000, 518750], [150000, 518750]],
[[115000, 500000], [115000, 506250], [120000, 506250], [120000, 500000], [115000, 500000]],
[[120000, 500000], [120000, 506250], [125000, 506250], [125000, 500000], [120000, 500000]],
[[145000, 518750], [145000, 525000], [150000, 525000], [150000, 518750], [145000, 518750]],
[[155000, 506250], [155000, 512500], [160000, 512500], [160000, 506250], [155000, 506250]],
[[125000, 500000], [125000, 506250], [130000, 506250], [130000, 500000], [125000, 500000]],
[[150000, 512500], [150000, 518750], [155000, 518750], [155000, 512500], [150000, 512500]],
[[120000, 506250], [120000, 512500], [125000, 512500], [125000, 506250], [120000, 506250]],
[[150000, 506250], [150000, 512500], [155000, 512500], [155000, 506250], [150000, 506250]],
[[155000, 518750], [155000, 525000], [160000, 525000], [160000, 518750], [155000, 518750]],
[[140000, 512500], [140000, 518750], [145000, 518750], [145000, 512500], [140000, 512500]],
[[165000, 512500], [165000, 518750], [170000, 518750], [170000, 512500], [165000, 512500]],
[[140000, 518750], [140000, 525000], [145000, 525000], [145000, 518750], [140000, 518750]],
[[170000, 512500], [170000, 518750], [175000, 518750], [175000, 512500], [170000, 512500]],
[[150000, 500000], [150000, 506250], [155000, 506250], [155000, 500000], [150000, 500000]],
[[155000, 512500], [155000, 518750], [160000, 518750], [160000, 512500], [155000, 512500]],
[[165000, 518750], [165000, 525000], [170000, 525000], [170000, 518750], [165000, 518750]],
[[170000, 518750], [170000, 525000], [175000, 525000], [175000, 518750], [170000, 518750]],
[[170000, 506250], [170000, 512500], [175000, 512500], [175000, 506250], [170000, 506250]],
[[155000, 500000], [155000, 506250], [160000, 506250], [160000, 500000], [155000, 500000]],
[[160000, 506250], [160000, 512500], [165000, 512500], [165000, 506250], [160000, 506250]],
[[160000, 500000], [160000, 506250], [165000, 506250], [165000, 500000], [160000, 500000]],
[[175000, 518750], [175000, 525000], [180000, 525000], [180000, 518750], [175000, 518750]],
[[175000, 512500], [175000, 518750], [180000, 518750], [180000, 512500], [175000, 512500]],
[[175000, 506250], [175000, 512500], [180000, 512500], [180000, 506250], [175000, 506250]],
[[165000, 500000], [165000, 506250], [170000, 506250], [170000, 500000], [165000, 500000]],
[[175000, 500000], [175000, 506250], [180000, 506250], [180000, 500000], [175000, 500000]],
[[165000, 506250], [165000, 512500], [170000, 512500], [170000, 506250], [165000, 506250]],
[[180000, 518750], [180000, 525000], [185000, 525000], [185000, 518750], [180000, 518750]],
[[185000, 500000], [185000, 506250], [190000, 506250], [190000, 500000], [185000, 500000]],
[[170000, 500000], [170000, 506250], [175000, 506250], [175000, 500000], [170000, 500000]],
[[185000, 512500], [185000, 518750], [190000, 518750], [190000, 512500], [185000, 512500]],
[[180000, 506250], [180000, 512500], [185000, 512500], [185000, 506250], [180000, 506250]],
[[185000, 518750], [185000, 525000], [190000, 525000], [190000, 518750], [185000, 518750]],
[[200000, 518750], [200000, 525000], [205000, 525000], [205000, 518750], [200000, 518750]],
[[190000, 518750], [190000, 525000], [195000, 525000], [195000, 518750], [190000, 518750]],
[[195000, 512500], [195000, 518750], [200000, 518750], [200000, 512500], [195000, 512500]],
[[195000, 518750], [195000, 525000], [200000, 525000], [200000, 518750], [195000, 518750]],
[[190000, 500000], [190000, 506250], [195000, 506250], [195000, 500000], [190000, 500000]],
[[190000, 506250], [190000, 512500], [195000, 512500], [195000, 506250], [190000, 506250]],
[[185000, 506250], [185000, 512500], [190000, 512500], [190000, 506250], [185000, 506250]],
[[190000, 512500], [190000, 518750], [195000, 518750], [195000, 512500], [190000, 512500]],
[[180000, 500000], [180000, 506250], [185000, 506250], [185000, 500000], [180000, 500000]],
[[205000, 512500], [205000, 518750], [210000, 518750], [210000, 512500], [205000, 512500]],
[[195000, 506250], [195000, 512500], [200000, 512500], [200000, 506250], [195000, 506250]],
[[180000, 512500], [180000, 518750], [185000, 518750], [185000, 512500], [180000, 512500]],
[[210000, 512500], [210000, 518750], [215000, 518750], [215000, 512500], [210000, 512500]],
[[195000, 500000], [195000, 506250], [200000, 506250], [200000, 500000], [195000, 500000]],
[[210000, 518750], [210000, 525000], [215000, 525000], [215000, 518750], [210000, 518750]],
[[215000, 518750], [215000, 525000], [220000, 525000], [220000, 518750], [215000, 518750]],
[[205000, 518750], [205000, 525000], [210000, 525000], [210000, 518750], [205000, 518750]],
[[205000, 500000], [205000, 506250], [210000, 506250], [210000, 500000], [205000, 500000]],
[[200000, 512500], [200000, 518750], [205000, 518750], [205000, 512500], [200000, 512500]],
[[215000, 500000], [215000, 506250], [220000, 506250], [220000, 500000], [215000, 500000]],
[[220000, 512500], [220000, 518750], [225000, 518750], [225000, 512500], [220000, 512500]],
[[215000, 506250], [215000, 512500], [220000, 512500], [220000, 506250], [215000, 506250]],
[[210000, 500000], [210000, 506250], [215000, 506250], [215000, 500000], [210000, 500000]],
[[215000, 512500], [215000, 518750], [220000, 518750], [220000, 512500], [215000, 512500]],
[[210000, 506250], [210000, 512500], [215000, 512500], [215000, 506250], [210000, 506250]],
[[230000, 518750], [230000, 525000], [235000, 525000], [235000, 518750], [230000, 518750]],
[[200000, 500000], [200000, 506250], [205000, 506250], [205000, 500000], [200000, 500000]],
[[225000, 512500], [225000, 518750], [230000, 518750], [230000, 512500], [225000, 512500]],
[[225000, 518750], [225000, 525000], [230000, 525000], [230000, 518750], [225000, 518750]],
[[225000, 506250], [225000, 512500], [230000, 512500], [230000, 506250], [225000, 506250]],
[[200000, 506250], [200000, 512500], [205000, 512500], [205000, 506250], [200000, 506250]],
[[220000, 518750], [220000, 525000], [225000, 525000], [225000, 518750], [220000, 518750]],
[[230000, 512500], [230000, 518750], [235000, 518750], [235000, 512500], [230000, 512500]],
[[235000, 512500], [235000, 518750], [240000, 518750], [240000, 512500], [235000, 512500]],
[[220000, 506250], [220000, 512500], [225000, 512500], [225000, 506250], [220000, 506250]],
[[235000, 518750], [235000, 525000], [240000, 525000], [240000, 518750], [235000, 518750]],
[[235000, 506250], [235000, 512500], [240000, 512500], [240000, 506250], [235000, 506250]],
[[220000, 500000], [220000, 506250], [225000, 506250], [225000, 500000], [220000, 500000]],
[[230000, 506250], [230000, 512500], [235000, 512500], [235000, 506250], [230000, 506250]],
[[205000, 506250], [205000, 512500], [210000, 512500], [210000, 506250], [205000, 506250]],
[[240000, 518750], [240000, 525000], [245000, 525000], [245000, 518750], [240000, 518750]],
[[250000, 518750], [250000, 525000], [255000, 525000], [255000, 518750], [250000, 518750]],
[[255000, 518750], [255000, 525000], [260000, 525000], [260000, 518750], [255000, 518750]],
[[245000, 512500], [245000, 518750], [250000, 518750], [250000, 512500], [245000, 512500]],
[[245000, 518750], [245000, 525000], [250000, 525000], [250000, 518750], [245000, 518750]],
[[240000, 512500], [240000, 518750], [245000, 518750], [245000, 512500], [240000, 512500]],
[[235000, 500000], [235000, 506250], [240000, 506250], [240000, 500000], [235000, 500000]],
[[225000, 500000], [225000, 506250], [230000, 506250], [230000, 500000], [225000, 500000]],
[[240000, 506250], [240000, 512500], [245000, 512500], [245000, 506250], [240000, 506250]],
[[230000, 500000], [230000, 506250], [235000, 506250], [235000, 500000], [230000, 500000]],
[[240000, 500000], [240000, 506250], [245000, 506250], [245000, 500000], [240000, 500000]],
[[265000, 518750], [265000, 525000], [270000, 525000], [270000, 518750], [265000, 518750]],
[[260000, 518750], [260000, 525000], [265000, 525000], [265000, 518750], [260000, 518750]],
[[255000, 512500], [255000, 518750], [260000, 518750], [260000, 512500], [255000, 512500]],
[[265000, 512500], [265000, 518750], [270000, 518750], [270000, 512500], [265000, 512500]],
[[95000, 493750], [95000, 500000], [100000, 500000], [100000, 493750], [95000, 493750]],
[[245000, 506250], [245000, 512500], [250000, 512500], [250000, 506250], [245000, 506250]],
[[105000, 493750], [105000, 500000], [110000, 500000], [110000, 493750], [105000, 493750]],
[[95000, 487500], [95000, 493750], [100000, 493750], [100000, 487500], [95000, 487500]],
[[100000, 487500], [100000, 493750], [105000, 493750], [105000, 487500], [100000, 487500]],
[[245000, 500000], [245000, 506250], [250000, 506250], [250000, 500000], [245000, 500000]],
[[260000, 512500], [260000, 518750], [265000, 518750], [265000, 512500], [260000, 512500]],
[[105000, 487500], [105000, 493750], [110000, 493750], [110000, 487500], [105000, 487500]],
[[90000, 481250], [90000, 487500], [95000, 487500], [95000, 481250], [90000, 481250]],
[[95000, 481250], [95000, 487500], [100000, 487500], [100000, 481250], [95000, 481250]],
[[115000, 487500], [115000, 493750], [120000, 493750], [120000, 487500], [115000, 487500]],
[[90000, 475000], [90000, 481250], [95000, 481250], [95000, 475000], [90000, 475000]],
[[100000, 493750], [100000, 500000], [105000, 500000], [105000, 493750], [100000, 493750]],
[[115000, 493750], [115000, 500000], [120000, 500000], [120000, 493750], [115000, 493750]],
[[95000, 475000], [95000, 481250], [100000, 481250], [100000, 475000], [95000, 475000]],
[[110000, 493750], [110000, 500000], [115000, 500000], [115000, 493750], [110000, 493750]],
[[105000, 475000], [105000, 481250], [110000, 481250], [110000, 475000], [105000, 475000]],
[[110000, 487500], [110000, 493750], [115000, 493750], [115000, 487500], [110000, 487500]],
[[100000, 481250], [100000, 487500], [105000, 487500], [105000, 481250], [100000, 481250]],
[[110000, 475000], [110000, 481250], [115000, 481250], [115000, 475000], [110000, 475000]],
[[110000, 481250], [110000, 487500], [115000, 487500], [115000, 481250], [110000, 481250]],
[[120000, 493750], [120000, 500000], [125000, 500000], [125000, 493750], [120000, 493750]],
[[105000, 481250], [105000, 487500], [110000, 487500], [110000, 481250], [105000, 481250]],
[[115000, 475000], [115000, 481250], [120000, 481250], [120000, 475000], [115000, 475000]],
[[120000, 487500], [120000, 493750], [125000, 493750], [125000, 487500], [120000, 487500]],
[[125000, 493750], [125000, 500000], [130000, 500000], [130000, 493750], [125000, 493750]],
[[100000, 475000], [100000, 481250], [105000, 481250], [105000, 475000], [100000, 475000]],
[[130000, 493750], [130000, 500000], [135000, 500000], [135000, 493750], [130000, 493750]],
[[115000, 481250], [115000, 487500], [120000, 487500], [120000, 481250], [115000, 481250]],
[[135000, 493750], [135000, 500000], [140000, 500000], [140000, 493750], [135000, 493750]],
[[125000, 487500], [125000, 493750], [130000, 493750], [130000, 487500], [125000, 487500]],
[[135000, 487500], [135000, 493750], [140000, 493750], [140000, 487500], [135000, 487500]],
[[130000, 487500], [130000, 493750], [135000, 493750], [135000, 487500], [130000, 487500]],
[[120000, 481250], [120000, 487500], [125000, 487500], [125000, 481250], [120000, 481250]],
[[125000, 475000], [125000, 481250], [130000, 481250], [130000, 475000], [125000, 475000]],
[[125000, 481250], [125000, 487500], [130000, 487500], [130000, 481250], [125000, 481250]],
[[130000, 481250], [130000, 487500], [135000, 487500], [135000, 481250], [130000, 481250]],
[[145000, 493750], [145000, 500000], [150000, 500000], [150000, 493750], [145000, 493750]],
[[140000, 493750], [140000, 500000], [145000, 500000], [145000, 493750], [140000, 493750]],
[[130000, 475000], [130000, 481250], [135000, 481250], [135000, 475000], [130000, 475000]],
[[120000, 475000], [120000, 481250], [125000, 481250], [125000, 475000], [120000, 475000]],
[[150000, 487500], [150000, 493750], [155000, 493750], [155000, 487500], [150000, 487500]],
[[135000, 475000], [135000, 481250], [140000, 481250], [140000, 475000], [135000, 475000]],
[[155000, 487500], [155000, 493750], [160000, 493750], [160000, 487500], [155000, 487500]],
[[140000, 487500], [140000, 493750], [145000, 493750], [145000, 487500], [140000, 487500]],
[[145000, 487500], [145000, 493750], [150000, 493750], [150000, 487500], [145000, 487500]],
[[145000, 475000], [145000, 481250], [150000, 481250], [150000, 475000], [145000, 475000]],
[[155000, 493750], [155000, 500000], [160000, 500000], [160000, 493750], [155000, 493750]],
[[150000, 493750], [150000, 500000], [155000, 500000], [155000, 493750], [150000, 493750]],
[[155000, 481250], [155000, 487500], [160000, 487500], [160000, 481250], [155000, 481250]],
[[135000, 481250], [135000, 487500], [140000, 487500], [140000, 481250], [135000, 481250]],
[[155000, 475000], [155000, 481250], [160000, 481250], [160000, 475000], [155000, 475000]],
[[140000, 481250], [140000, 487500], [145000, 487500], [145000, 481250], [140000, 481250]],
[[145000, 481250], [145000, 487500], [150000, 487500], [150000, 481250], [145000, 481250]],
[[150000, 481250], [150000, 487500], [155000, 487500], [155000, 481250], [150000, 481250]],
[[170000, 493750], [170000, 500000], [175000, 500000], [175000, 493750], [170000, 493750]],
[[150000, 475000], [150000, 481250], [155000, 481250], [155000, 475000], [150000, 475000]],
[[140000, 475000], [140000, 481250], [145000, 481250], [145000, 475000], [140000, 475000]],
[[165000, 493750], [165000, 500000], [170000, 500000], [170000, 493750], [165000, 493750]],
[[165000, 481250], [165000, 487500], [170000, 487500], [170000, 481250], [165000, 481250]],
[[160000, 487500], [160000, 493750], [165000, 493750], [165000, 487500], [160000, 487500]],
[[165000, 487500], [165000, 493750], [170000, 493750], [170000, 487500], [165000, 487500]],
[[175000, 487500], [175000, 493750], [180000, 493750], [180000, 487500], [175000, 487500]],
[[160000, 493750], [160000, 500000], [165000, 500000], [165000, 493750], [160000, 493750]],
[[170000, 487500], [170000, 493750], [175000, 493750], [175000, 487500], [170000, 487500]],
[[175000, 493750], [175000, 500000], [180000, 500000], [180000, 493750], [175000, 493750]],
[[175000, 481250], [175000, 487500], [180000, 487500], [180000, 481250], [175000, 481250]],
[[160000, 481250], [160000, 487500], [165000, 487500], [165000, 481250], [160000, 481250]],
[[160000, 475000], [160000, 481250], [165000, 481250], [165000, 475000], [160000, 475000]],
[[165000, 475000], [165000, 481250], [170000, 481250], [170000, 475000], [165000, 475000]],
[[175000, 475000], [175000, 481250], [180000, 481250], [180000, 475000], [175000, 475000]],
[[170000, 475000], [170000, 481250], [175000, 481250], [175000, 475000], [170000, 475000]],
[[185000, 487500], [185000, 493750], [190000, 493750], [190000, 487500], [185000, 487500]],
[[180000, 493750], [180000, 500000], [185000, 500000], [185000, 493750], [180000, 493750]],
[[180000, 487500], [180000, 493750], [185000, 493750], [185000, 487500], [180000, 487500]],
[[190000, 487500], [190000, 493750], [195000, 493750], [195000, 487500], [190000, 487500]],
[[195000, 493750], [195000, 500000], [200000, 500000], [200000, 493750], [195000, 493750]],
[[185000, 475000], [185000, 481250], [190000, 481250], [190000, 475000], [185000, 475000]],
[[170000, 481250], [170000, 487500], [175000, 487500], [175000, 481250], [170000, 481250]],
[[185000, 493750], [185000, 500000], [190000, 500000], [190000, 493750], [185000, 493750]],
[[190000, 493750], [190000, 500000], [195000, 500000], [195000, 493750], [190000, 493750]],
[[180000, 481250], [180000, 487500], [185000, 487500], [185000, 481250], [180000, 481250]],
[[190000, 475000], [190000, 481250], [195000, 481250], [195000, 475000], [190000, 475000]],
[[185000, 481250], [185000, 487500], [190000, 487500], [190000, 481250], [185000, 481250]],
[[195000, 487500], [195000, 493750], [200000, 493750], [200000, 487500], [195000, 487500]],
[[180000, 475000], [180000, 481250], [185000, 481250], [185000, 475000], [180000, 475000]],
[[205000, 493750], [205000, 500000], [210000, 500000], [210000, 493750], [205000, 493750]],
[[210000, 493750], [210000, 500000], [215000, 500000], [215000, 493750], [210000, 493750]],
[[190000, 481250], [190000, 487500], [195000, 487500], [195000, 481250], [190000, 481250]],
[[195000, 481250], [195000, 487500], [200000, 487500], [200000, 481250], [195000, 481250]],
[[205000, 487500], [205000, 493750], [210000, 493750], [210000, 487500], [205000, 487500]],
[[200000, 493750], [200000, 500000], [205000, 500000], [205000, 493750], [200000, 493750]],
[[200000, 487500], [200000, 493750], [205000, 493750], [205000, 487500], [200000, 487500]],
[[210000, 487500], [210000, 493750], [215000, 493750], [215000, 487500], [210000, 487500]],
[[200000, 481250], [200000, 487500], [205000, 487500], [205000, 481250], [200000, 481250]],
[[195000, 475000], [195000, 481250], [200000, 481250], [200000, 475000], [195000, 475000]],
[[205000, 481250], [205000, 487500], [210000, 487500], [210000, 481250], [205000, 481250]],
[[215000, 493750], [215000, 500000], [220000, 500000], [220000, 493750], [215000, 493750]],
[[215000, 487500], [215000, 493750], [220000, 493750], [220000, 487500], [215000, 487500]],
[[205000, 475000], [205000, 481250], [210000, 481250], [210000, 475000], [205000, 475000]],
[[200000, 475000], [200000, 481250], [205000, 481250], [205000, 475000], [200000, 475000]],
[[235000, 493750], [235000, 500000], [240000, 500000], [240000, 493750], [235000, 493750]],
[[215000, 481250], [215000, 487500], [220000, 487500], [220000, 481250], [215000, 481250]],
[[225000, 493750], [225000, 500000], [230000, 500000], [230000, 493750], [225000, 493750]],
[[210000, 475000], [210000, 481250], [215000, 481250], [215000, 475000], [210000, 475000]],
[[220000, 493750], [220000, 500000], [225000, 500000], [225000, 493750], [220000, 493750]],
[[210000, 481250], [210000, 487500], [215000, 487500], [215000, 481250], [210000, 481250]],
[[230000, 487500], [230000, 493750], [235000, 493750], [235000, 487500], [230000, 487500]],
[[215000, 475000], [215000, 481250], [220000, 481250], [220000, 475000], [215000, 475000]],
[[235000, 481250], [235000, 487500], [240000, 487500], [240000, 481250], [235000, 481250]],
[[235000, 487500], [235000, 493750], [240000, 493750], [240000, 487500], [235000, 487500]],
[[220000, 487500], [220000, 493750], [225000, 493750], [225000, 487500], [220000, 487500]],
[[220000, 475000], [220000, 481250], [225000, 481250], [225000, 475000], [220000, 475000]],
[[235000, 475000], [235000, 481250], [240000, 481250], [240000, 475000], [235000, 475000]],
[[225000, 475000], [225000, 481250], [230000, 481250], [230000, 475000], [225000, 475000]],
[[225000, 487500], [225000, 493750], [230000, 493750], [230000, 487500], [225000, 487500]],
[[225000, 481250], [225000, 487500], [230000, 487500], [230000, 481250], [225000, 481250]],
[[230000, 481250], [230000, 487500], [235000, 487500], [235000, 481250], [230000, 481250]],
[[245000, 487500], [245000, 493750], [250000, 493750], [250000, 487500], [245000, 487500]],
[[230000, 493750], [230000, 500000], [235000, 500000], [235000, 493750], [230000, 493750]],
[[240000, 481250], [240000, 487500], [245000, 487500], [245000, 481250], [240000, 481250]],
[[245000, 493750], [245000, 500000], [250000, 500000], [250000, 493750], [245000, 493750]],
[[255000, 487500], [255000, 493750], [260000, 493750], [260000, 487500], [255000, 487500]],
[[220000, 481250], [220000, 487500], [225000, 487500], [225000, 481250], [220000, 481250]],
[[250000, 493750], [250000, 500000], [255000, 500000], [255000, 493750], [250000, 493750]],
[[230000, 475000], [230000, 481250], [235000, 481250], [235000, 475000], [230000, 475000]],
[[240000, 493750], [240000, 500000], [245000, 500000], [245000, 493750], [240000, 493750]],
[[255000, 493750], [255000, 500000], [260000, 500000], [260000, 493750], [255000, 493750]],
[[240000, 487500], [240000, 493750], [245000, 493750], [245000, 487500], [240000, 487500]],
[[250000, 487500], [250000, 493750], [255000, 493750], [255000, 487500], [250000, 487500]],
[[240000, 475000], [240000, 481250], [245000, 481250], [245000, 475000], [240000, 475000]],
[[255000, 475000], [255000, 481250], [260000, 481250], [260000, 475000], [255000, 475000]],
[[250000, 475000], [250000, 481250], [255000, 481250], [255000, 475000], [250000, 475000]],
[[245000, 481250], [245000, 487500], [250000, 487500], [250000, 481250], [245000, 481250]],
[[265000, 493750], [265000, 500000], [270000, 500000], [270000, 493750], [265000, 493750]],
[[250000, 481250], [250000, 487500], [255000, 487500], [255000, 481250], [250000, 481250]],
[[265000, 487500], [265000, 493750], [270000, 493750], [270000, 487500], [265000, 487500]],
[[260000, 487500], [260000, 493750], [265000, 493750], [265000, 487500], [260000, 487500]],
[[260000, 493750], [260000, 500000], [265000, 500000], [265000, 493750], [260000, 493750]],
[[245000, 475000], [245000, 481250], [250000, 481250], [250000, 475000], [245000, 475000]],
[[70000, 450000], [70000, 456250], [75000, 456250], [75000, 450000], [70000, 450000]],
[[260000, 481250], [260000, 487500], [265000, 487500], [265000, 481250], [260000, 481250]],
[[75000, 450000], [75000, 456250], [80000, 456250], [80000, 450000], [75000, 450000]],
[[260000, 475000], [260000, 481250], [265000, 481250], [265000, 475000], [260000, 475000]],
[[255000, 481250], [255000, 487500], [260000, 487500], [260000, 481250], [255000, 481250]],
[[85000, 468750], [85000, 475000], [90000, 475000], [90000, 468750], [85000, 468750]],
[[265000, 481250], [265000, 487500], [270000, 487500], [270000, 481250], [265000, 481250]],
[[90000, 462500], [90000, 468750], [95000, 468750], [95000, 462500], [90000, 462500]],
[[80000, 462500], [80000, 468750], [85000, 468750], [85000, 462500], [80000, 462500]],
[[90000, 468750], [90000, 475000], [95000, 475000], [95000, 468750], [90000, 468750]],
[[265000, 475000], [265000, 481250], [270000, 481250], [270000, 475000], [265000, 475000]],
[[95000, 468750], [95000, 475000], [100000, 475000], [100000, 468750], [95000, 468750]],
[[80000, 456250], [80000, 462500], [85000, 462500], [85000, 456250], [80000, 456250]],
[[90000, 456250], [90000, 462500], [95000, 462500], [95000, 456250], [90000, 456250]],
[[80000, 450000], [80000, 456250], [85000, 456250], [85000, 450000], [80000, 450000]],
[[95000, 450000], [95000, 456250], [100000, 456250], [100000, 450000], [95000, 450000]],
[[85000, 450000], [85000, 456250], [90000, 456250], [90000, 450000], [85000, 450000]],
[[75000, 456250], [75000, 462500], [80000, 462500], [80000, 456250], [75000, 456250]],
[[85000, 462500], [85000, 468750], [90000, 468750], [90000, 462500], [85000, 462500]],
[[95000, 462500], [95000, 468750], [100000, 468750], [100000, 462500], [95000, 462500]],
[[100000, 462500], [100000, 468750], [105000, 468750], [105000, 462500], [100000, 462500]],
[[85000, 456250], [85000, 462500], [90000, 462500], [90000, 456250], [85000, 456250]],
[[100000, 468750], [100000, 475000], [105000, 475000], [105000, 468750], [100000, 468750]],
[[95000, 456250], [95000, 462500], [100000, 462500], [100000, 456250], [95000, 456250]],
[[90000, 450000], [90000, 456250], [95000, 456250], [95000, 450000], [90000, 450000]],
[[105000, 462500], [105000, 468750], [110000, 468750], [110000, 462500], [105000, 462500]],
[[115000, 468750], [115000, 475000], [120000, 475000], [120000, 468750], [115000, 468750]],
[[110000, 462500], [110000, 468750], [115000, 468750], [115000, 462500], [110000, 462500]],
[[115000, 462500], [115000, 468750], [120000, 468750], [120000, 462500], [115000, 462500]],
[[110000, 456250], [110000, 462500], [115000, 462500], [115000, 456250], [110000, 456250]],
[[100000, 450000], [100000, 456250], [105000, 456250], [105000, 450000], [100000, 450000]],
[[105000, 468750], [105000, 475000], [110000, 475000], [110000, 468750], [105000, 468750]],
[[110000, 468750], [110000, 475000], [115000, 475000], [115000, 468750], [110000, 468750]],
[[120000, 462500], [120000, 468750], [125000, 468750], [125000, 462500], [120000, 462500]],
[[115000, 456250], [115000, 462500], [120000, 462500], [120000, 456250], [115000, 456250]],
[[105000, 456250], [105000, 462500], [110000, 462500], [110000, 456250], [105000, 456250]],
[[110000, 450000], [110000, 456250], [115000, 456250], [115000, 450000], [110000, 450000]],
[[100000, 456250], [100000, 462500], [105000, 462500], [105000, 456250], [100000, 456250]],
[[120000, 468750], [120000, 475000], [125000, 475000], [125000, 468750], [120000, 468750]],
[[105000, 450000], [105000, 456250], [110000, 456250], [110000, 450000], [105000, 450000]],
[[125000, 468750], [125000, 475000], [130000, 475000], [130000, 468750], [125000, 468750]],
[[125000, 456250], [125000, 462500], [130000, 462500], [130000, 456250], [125000, 456250]],
[[125000, 462500], [125000, 468750], [130000, 468750], [130000, 462500], [125000, 462500]],
[[130000, 462500], [130000, 468750], [135000, 468750], [135000, 462500], [130000, 462500]],
[[115000, 450000], [115000, 456250], [120000, 456250], [120000, 450000], [115000, 450000]],
[[130000, 468750], [130000, 475000], [135000, 475000], [135000, 468750], [130000, 468750]],
[[120000, 450000], [120000, 456250], [125000, 456250], [125000, 450000], [120000, 450000]],
[[140000, 468750], [140000, 475000], [145000, 475000], [145000, 468750], [140000, 468750]],
[[120000, 456250], [120000, 462500], [125000, 462500], [125000, 456250], [120000, 456250]],
[[135000, 468750], [135000, 475000], [140000, 475000], [140000, 468750], [135000, 468750]],
[[135000, 462500], [135000, 468750], [140000, 468750], [140000, 462500], [135000, 462500]],
[[145000, 468750], [145000, 475000], [150000, 475000], [150000, 468750], [145000, 468750]],
[[140000, 462500], [140000, 468750], [145000, 468750], [145000, 462500], [140000, 462500]],
[[135000, 450000], [135000, 456250], [140000, 456250], [140000, 450000], [135000, 450000]],
[[145000, 462500], [145000, 468750], [150000, 468750], [150000, 462500], [145000, 462500]],
[[155000, 468750], [155000, 475000], [160000, 475000], [160000, 468750], [155000, 468750]],
[[130000, 456250], [130000, 462500], [135000, 462500], [135000, 456250], [130000, 456250]],
[[130000, 450000], [130000, 456250], [135000, 456250], [135000, 450000], [130000, 450000]],
[[140000, 450000], [140000, 456250], [145000, 456250], [145000, 450000], [140000, 450000]],
[[125000, 450000], [125000, 456250], [130000, 456250], [130000, 450000], [125000, 450000]],
[[150000, 468750], [150000, 475000], [155000, 475000], [155000, 468750], [150000, 468750]],
[[140000, 456250], [140000, 462500], [145000, 462500], [145000, 456250], [140000, 456250]],
[[135000, 456250], [135000, 462500], [140000, 462500], [140000, 456250], [135000, 456250]],
[[155000, 456250], [155000, 462500], [160000, 462500], [160000, 456250], [155000, 456250]],
[[145000, 456250], [145000, 462500], [150000, 462500], [150000, 456250], [145000, 456250]],
[[145000, 450000], [145000, 456250], [150000, 456250], [150000, 450000], [145000, 450000]],
[[150000, 450000], [150000, 456250], [155000, 456250], [155000, 450000], [150000, 450000]],
[[155000, 462500], [155000, 468750], [160000, 468750], [160000, 462500], [155000, 462500]],
[[170000, 456250], [170000, 462500], [175000, 462500], [175000, 456250], [170000, 456250]],
[[170000, 468750], [170000, 475000], [175000, 475000], [175000, 468750], [170000, 468750]],
[[150000, 462500], [150000, 468750], [155000, 468750], [155000, 462500], [150000, 462500]],
[[175000, 468750], [175000, 475000], [180000, 475000], [180000, 468750], [175000, 468750]],
[[175000, 456250], [175000, 462500], [180000, 462500], [180000, 456250], [175000, 456250]],
[[160000, 468750], [160000, 475000], [165000, 475000], [165000, 468750], [160000, 468750]],
[[170000, 462500], [170000, 468750], [175000, 468750], [175000, 462500], [170000, 462500]],
[[155000, 450000], [155000, 456250], [160000, 456250], [160000, 450000], [155000, 450000]],
[[165000, 456250], [165000, 462500], [170000, 462500], [170000, 456250], [165000, 456250]],
[[175000, 462500], [175000, 468750], [180000, 468750], [180000, 462500], [175000, 462500]],
[[160000, 462500], [160000, 468750], [165000, 468750], [165000, 462500], [160000, 462500]],
[[150000, 456250], [150000, 462500], [155000, 462500], [155000, 456250], [150000, 456250]],
[[165000, 450000], [165000, 456250], [170000, 456250], [170000, 450000], [165000, 450000]],
[[165000, 468750], [165000, 475000], [170000, 475000], [170000, 468750], [165000, 468750]],
[[165000, 462500], [165000, 468750], [170000, 468750], [170000, 462500], [165000, 462500]],
[[170000, 450000], [170000, 456250], [175000, 456250], [175000, 450000], [170000, 450000]],
[[175000, 450000], [175000, 456250], [180000, 456250], [180000, 450000], [175000, 450000]],
[[160000, 456250], [160000, 462500], [165000, 462500], [165000, 456250], [160000, 456250]],
[[180000, 456250], [180000, 462500], [185000, 462500], [185000, 456250], [180000, 456250]],
[[190000, 468750], [190000, 475000], [195000, 475000], [195000, 468750], [190000, 468750]],
[[195000, 462500], [195000, 468750], [200000, 468750], [200000, 462500], [195000, 462500]],
[[200000, 468750], [200000, 475000], [205000, 475000], [205000, 468750], [200000, 468750]],
[[180000, 462500], [180000, 468750], [185000, 468750], [185000, 462500], [180000, 462500]],
[[185000, 456250], [185000, 462500], [190000, 462500], [190000, 456250], [185000, 456250]],
[[160000, 450000], [160000, 456250], [165000, 456250], [165000, 450000], [160000, 450000]],
[[195000, 456250], [195000, 462500], [200000, 462500], [200000, 456250], [195000, 456250]],
[[180000, 468750], [180000, 475000], [185000, 475000], [185000, 468750], [180000, 468750]],
[[185000, 468750], [185000, 475000], [190000, 475000], [190000, 468750], [185000, 468750]],
[[185000, 462500], [185000, 468750], [190000, 468750], [190000, 462500], [185000, 462500]],
[[205000, 462500], [205000, 468750], [210000, 468750], [210000, 462500], [205000, 462500]],
[[180000, 450000], [180000, 456250], [185000, 456250], [185000, 450000], [180000, 450000]],
[[190000, 462500], [190000, 468750], [195000, 468750], [195000, 462500], [190000, 462500]],
[[195000, 450000], [195000, 456250], [200000, 456250], [200000, 450000], [195000, 450000]],
[[205000, 468750], [205000, 475000], [210000, 475000], [210000, 468750], [205000, 468750]],
[[195000, 468750], [195000, 475000], [200000, 475000], [200000, 468750], [195000, 468750]],
[[190000, 456250], [190000, 462500], [195000, 462500], [195000, 456250], [190000, 456250]],
[[220000, 468750], [220000, 475000], [225000, 475000], [225000, 468750], [220000, 468750]],
[[220000, 462500], [220000, 468750], [225000, 468750], [225000, 462500], [220000, 462500]],
[[210000, 462500], [210000, 468750], [215000, 468750], [215000, 462500], [210000, 462500]],
[[200000, 456250], [200000, 462500], [205000, 462500], [205000, 456250], [200000, 456250]],
[[215000, 462500], [215000, 468750], [220000, 468750], [220000, 462500], [215000, 462500]],
[[210000, 468750], [210000, 475000], [215000, 475000], [215000, 468750], [210000, 468750]],
[[205000, 456250], [205000, 462500], [210000, 462500], [210000, 456250], [205000, 456250]],
[[215000, 468750], [215000, 475000], [220000, 475000], [220000, 468750], [215000, 468750]],
[[190000, 450000], [190000, 456250], [195000, 456250], [195000, 450000], [190000, 450000]],
[[200000, 462500], [200000, 468750], [205000, 468750], [205000, 462500], [200000, 462500]],
[[205000, 450000], [205000, 456250], [210000, 456250], [210000, 450000], [205000, 450000]],
[[185000, 450000], [185000, 456250], [190000, 456250], [190000, 450000], [185000, 450000]],
[[225000, 468750], [225000, 475000], [230000, 475000], [230000, 468750], [225000, 468750]],
[[200000, 450000], [200000, 456250], [205000, 456250], [205000, 450000], [200000, 450000]],
[[225000, 462500], [225000, 468750], [230000, 468750], [230000, 462500], [225000, 462500]],
[[210000, 456250], [210000, 462500], [215000, 462500], [215000, 456250], [210000, 456250]],
[[215000, 450000], [215000, 456250], [220000, 456250], [220000, 450000], [215000, 450000]],
[[235000, 468750], [235000, 475000], [240000, 475000], [240000, 468750], [235000, 468750]],
[[210000, 450000], [210000, 456250], [215000, 456250], [215000, 450000], [210000, 450000]],
[[215000, 456250], [215000, 462500], [220000, 462500], [220000, 456250], [215000, 456250]],
[[250000, 462500], [250000, 468750], [255000, 468750], [255000, 462500], [250000, 462500]],
[[230000, 468750], [230000, 475000], [235000, 475000], [235000, 468750], [230000, 468750]],
[[225000, 456250], [225000, 462500], [230000, 462500], [230000, 456250], [225000, 456250]],
[[230000, 456250], [230000, 462500], [235000, 462500], [235000, 456250], [230000, 456250]],
[[230000, 462500], [230000, 468750], [235000, 468750], [235000, 462500], [230000, 462500]],
[[220000, 456250], [220000, 462500], [225000, 462500], [225000, 456250], [220000, 456250]],
[[230000, 450000], [230000, 456250], [235000, 456250], [235000, 450000], [230000, 450000]],
[[235000, 456250], [235000, 462500], [240000, 462500], [240000, 456250], [235000, 456250]],
[[240000, 462500], [240000, 468750], [245000, 468750], [245000, 462500], [240000, 462500]],
[[235000, 462500], [235000, 468750], [240000, 468750], [240000, 462500], [235000, 462500]],
[[245000, 462500], [245000, 468750], [250000, 468750], [250000, 462500], [245000, 462500]],
[[225000, 450000], [225000, 456250], [230000, 456250], [230000, 450000], [225000, 450000]],
[[235000, 450000], [235000, 456250], [240000, 456250], [240000, 450000], [235000, 450000]],
[[240000, 468750], [240000, 475000], [245000, 475000], [245000, 468750], [240000, 468750]],
[[245000, 468750], [245000, 475000], [250000, 475000], [250000, 468750], [245000, 468750]],
[[255000, 468750], [255000, 475000], [260000, 475000], [260000, 468750], [255000, 468750]],
[[250000, 468750], [250000, 475000], [255000, 475000], [255000, 468750], [250000, 468750]],
[[240000, 450000], [240000, 456250], [245000, 456250], [245000, 450000], [240000, 450000]],
[[245000, 456250], [245000, 462500], [250000, 462500], [250000, 456250], [245000, 456250]],
[[240000, 456250], [240000, 462500], [245000, 462500], [245000, 456250], [240000, 456250]],
[[220000, 450000], [220000, 456250], [225000, 456250], [225000, 450000], [220000, 450000]],
[[265000, 468750], [265000, 475000], [270000, 475000], [270000, 468750], [265000, 468750]],
[[55000, 437500], [55000, 443750], [60000, 443750], [60000, 437500], [55000, 437500]],
[[255000, 462500], [255000, 468750], [260000, 468750], [260000, 462500], [255000, 462500]],
[[65000, 437500], [65000, 443750], [70000, 443750], [70000, 437500], [65000, 437500]],
[[255000, 456250], [255000, 462500], [260000, 462500], [260000, 456250], [255000, 456250]],
[[65000, 443750], [65000, 450000], [70000, 450000], [70000, 443750], [65000, 443750]],
[[260000, 468750], [260000, 475000], [265000, 475000], [265000, 468750], [260000, 468750]],
[[60000, 443750], [60000, 450000], [65000, 450000], [65000, 443750], [60000, 443750]],
[[245000, 450000], [245000, 456250], [250000, 456250], [250000, 450000], [245000, 450000]],
[[250000, 456250], [250000, 462500], [255000, 462500], [255000, 456250], [250000, 456250]],
[[70000, 443750], [70000, 450000], [75000, 450000], [75000, 443750], [70000, 443750]],
[[65000, 431250], [65000, 437500], [70000, 437500], [70000, 431250], [65000, 431250]],
[[70000, 437500], [70000, 443750], [75000, 443750], [75000, 437500], [70000, 437500]],
[[260000, 462500], [260000, 468750], [265000, 468750], [265000, 462500], [260000, 462500]],
[[60000, 437500], [60000, 443750], [65000, 443750], [65000, 437500], [60000, 437500]],
[[75000, 443750], [75000, 450000], [80000, 450000], [80000, 443750], [75000, 443750]],
[[55000, 431250], [55000, 437500], [60000, 437500], [60000, 431250], [55000, 431250]],
[[60000, 431250], [60000, 437500], [65000, 437500], [65000, 431250], [60000, 431250]],
[[55000, 443750], [55000, 450000], [60000, 450000], [60000, 443750], [55000, 443750]],
[[60000, 425000], [60000, 431250], [65000, 431250], [65000, 425000], [60000, 425000]],
[[80000, 443750], [80000, 450000], [85000, 450000], [85000, 443750], [80000, 443750]],
[[75000, 437500], [75000, 443750], [80000, 443750], [80000, 437500], [75000, 437500]],
[[65000, 425000], [65000, 431250], [70000, 431250], [70000, 425000], [65000, 425000]],
[[75000, 425000], [75000, 431250], [80000, 431250], [80000, 425000], [75000, 425000]],
[[70000, 425000], [70000, 431250], [75000, 431250], [75000, 425000], [70000, 425000]],
[[75000, 431250], [75000, 437500], [80000, 437500], [80000, 431250], [75000, 431250]],
[[80000, 425000], [80000, 431250], [85000, 431250], [85000, 425000], [80000, 425000]],
[[70000, 431250], [70000, 437500], [75000, 437500], [75000, 431250], [70000, 431250]],
[[95000, 443750], [95000, 450000], [100000, 450000], [100000, 443750], [95000, 443750]],
[[85000, 431250], [85000, 437500], [90000, 437500], [90000, 431250], [85000, 431250]],
[[80000, 437500], [80000, 443750], [85000, 443750], [85000, 437500], [80000, 437500]],
[[90000, 437500], [90000, 443750], [95000, 443750], [95000, 437500], [90000, 437500]],
[[90000, 443750], [90000, 450000], [95000, 450000], [95000, 443750], [90000, 443750]],
[[85000, 443750], [85000, 450000], [90000, 450000], [90000, 443750], [85000, 443750]],
[[95000, 437500], [95000, 443750], [100000, 443750], [100000, 437500], [95000, 437500]],
[[85000, 437500], [85000, 443750], [90000, 443750], [90000, 437500], [85000, 437500]],
[[95000, 425000], [95000, 431250], [100000, 431250], [100000, 425000], [95000, 425000]],
[[90000, 425000], [90000, 431250], [95000, 431250], [95000, 425000], [90000, 425000]],
[[85000, 425000], [85000, 431250], [90000, 431250], [90000, 425000], [85000, 425000]],
[[90000, 431250], [90000, 437500], [95000, 437500], [95000, 431250], [90000, 431250]],
[[100000, 425000], [100000, 431250], [105000, 431250], [105000, 425000], [100000, 425000]],
[[80000, 431250], [80000, 437500], [85000, 437500], [85000, 431250], [80000, 431250]],
[[95000, 431250], [95000, 437500], [100000, 437500], [100000, 431250], [95000, 431250]],
[[115000, 437500], [115000, 443750], [120000, 443750], [120000, 437500], [115000, 437500]],
[[110000, 443750], [110000, 450000], [115000, 450000], [115000, 443750], [110000, 443750]],
[[115000, 443750], [115000, 450000], [120000, 450000], [120000, 443750], [115000, 443750]],
[[105000, 443750], [105000, 450000], [110000, 450000], [110000, 443750], [105000, 443750]],
[[100000, 437500], [100000, 443750], [105000, 443750], [105000, 437500], [100000, 437500]],
[[100000, 431250], [100000, 437500], [105000, 437500], [105000, 431250], [100000, 431250]],
[[105000, 437500], [105000, 443750], [110000, 443750], [110000, 437500], [105000, 437500]],
[[110000, 437500], [110000, 443750], [115000, 443750], [115000, 437500], [110000, 437500]],
[[100000, 443750], [100000, 450000], [105000, 450000], [105000, 443750], [100000, 443750]],
[[105000, 425000], [105000, 431250], [110000, 431250], [110000, 425000], [105000, 425000]],
[[105000, 431250], [105000, 437500], [110000, 437500], [110000, 431250], [105000, 431250]],
[[110000, 425000], [110000, 431250], [115000, 431250], [115000, 425000], [110000, 425000]],
[[115000, 431250], [115000, 437500], [120000, 437500], [120000, 431250], [115000, 431250]],
[[125000, 443750], [125000, 450000], [130000, 450000], [130000, 443750], [125000, 443750]],
[[125000, 437500], [125000, 443750], [130000, 443750], [130000, 437500], [125000, 437500]],
[[115000, 425000], [115000, 431250], [120000, 431250], [120000, 425000], [115000, 425000]],
[[120000, 437500], [120000, 443750], [125000, 443750], [125000, 437500], [120000, 437500]],
[[120000, 443750], [120000, 450000], [125000, 450000], [125000, 443750], [120000, 443750]],
[[135000, 437500], [135000, 443750], [140000, 443750], [140000, 437500], [135000, 437500]],
[[110000, 431250], [110000, 437500], [115000, 437500], [115000, 431250], [110000, 431250]],
[[130000, 425000], [130000, 431250], [135000, 431250], [135000, 425000], [130000, 425000]],
[[125000, 431250], [125000, 437500], [130000, 437500], [130000, 431250], [125000, 431250]],
[[135000, 443750], [135000, 450000], [140000, 450000], [140000, 443750], [135000, 443750]],
[[130000, 437500], [130000, 443750], [135000, 443750], [135000, 437500], [130000, 437500]],
[[135000, 431250], [135000, 437500], [140000, 437500], [140000, 431250], [135000, 431250]],
[[130000, 443750], [130000, 450000], [135000, 450000], [135000, 443750], [130000, 443750]],
[[140000, 437500], [140000, 443750], [145000, 443750], [145000, 437500], [140000, 437500]],
[[125000, 425000], [125000, 431250], [130000, 431250], [130000, 425000], [125000, 425000]],
[[140000, 443750], [140000, 450000], [145000, 450000], [145000, 443750], [140000, 443750]],
[[155000, 443750], [155000, 450000], [160000, 450000], [160000, 443750], [155000, 443750]],
[[130000, 431250], [130000, 437500], [135000, 437500], [135000, 431250], [130000, 431250]],
[[120000, 425000], [120000, 431250], [125000, 431250], [125000, 425000], [120000, 425000]],
[[145000, 437500], [145000, 443750], [150000, 443750], [150000, 437500], [145000, 437500]],
[[150000, 443750], [150000, 450000], [155000, 450000], [155000, 443750], [150000, 443750]],
[[155000, 437500], [155000, 443750], [160000, 443750], [160000, 437500], [155000, 437500]],
[[145000, 425000], [145000, 431250], [150000, 431250], [150000, 425000], [145000, 425000]],
[[135000, 425000], [135000, 431250], [140000, 431250], [140000, 425000], [135000, 425000]],
[[145000, 431250], [145000, 437500], [150000, 437500], [150000, 431250], [145000, 431250]],
[[120000, 431250], [120000, 437500], [125000, 437500], [125000, 431250], [120000, 431250]],
[[160000, 437500], [160000, 443750], [165000, 443750], [165000, 437500], [160000, 437500]],
[[145000, 443750], [145000, 450000], [150000, 450000], [150000, 443750], [145000, 443750]],
[[155000, 431250], [155000, 437500], [160000, 437500], [160000, 431250], [155000, 431250]],
[[150000, 437500], [150000, 443750], [155000, 443750], [155000, 437500], [150000, 437500]],
[[150000, 431250], [150000, 437500], [155000, 437500], [155000, 431250], [150000, 431250]],
[[150000, 425000], [150000, 431250], [155000, 431250], [155000, 425000], [150000, 425000]],
[[140000, 431250], [140000, 437500], [145000, 437500], [145000, 431250], [140000, 431250]],
[[155000, 425000], [155000, 431250], [160000, 431250], [160000, 425000], [155000, 425000]],
[[140000, 425000], [140000, 431250], [145000, 431250], [145000, 425000], [140000, 425000]],
[[175000, 443750], [175000, 450000], [180000, 450000], [180000, 443750], [175000, 443750]],
[[160000, 443750], [160000, 450000], [165000, 450000], [165000, 443750], [160000, 443750]],
[[165000, 437500], [165000, 443750], [170000, 443750], [170000, 437500], [165000, 437500]],
[[165000, 443750], [165000, 450000], [170000, 450000], [170000, 443750], [165000, 443750]],
[[160000, 431250], [160000, 437500], [165000, 437500], [165000, 431250], [160000, 431250]],
[[170000, 443750], [170000, 450000], [175000, 450000], [175000, 443750], [170000, 443750]],
[[170000, 425000], [170000, 431250], [175000, 431250], [175000, 425000], [170000, 425000]],
[[175000, 437500], [175000, 443750], [180000, 443750], [180000, 437500], [175000, 437500]],
[[185000, 443750], [185000, 450000], [190000, 450000], [190000, 443750], [185000, 443750]],
[[170000, 437500], [170000, 443750], [175000, 443750], [175000, 437500], [170000, 437500]],
[[170000, 431250], [170000, 437500], [175000, 437500], [175000, 431250], [170000, 431250]],
[[180000, 443750], [180000, 450000], [185000, 450000], [185000, 443750], [180000, 443750]],
[[165000, 431250], [165000, 437500], [170000, 437500], [170000, 431250], [165000, 431250]],
[[160000, 425000], [160000, 431250], [165000, 431250], [165000, 425000], [160000, 425000]],
[[180000, 437500], [180000, 443750], [185000, 443750], [185000, 437500], [180000, 437500]],
[[175000, 431250], [175000, 437500], [180000, 437500], [180000, 431250], [175000, 431250]],
[[165000, 425000], [165000, 431250], [170000, 431250], [170000, 425000], [165000, 425000]],
[[195000, 437500], [195000, 443750], [200000, 443750], [200000, 437500], [195000, 437500]],
[[175000, 425000], [175000, 431250], [180000, 431250], [180000, 425000], [175000, 425000]],
[[180000, 431250], [180000, 437500], [185000, 437500], [185000, 431250], [180000, 431250]],
[[195000, 443750], [195000, 450000], [200000, 450000], [200000, 443750], [195000, 443750]],
[[190000, 443750], [190000, 450000], [195000, 450000], [195000, 443750], [190000, 443750]],
[[190000, 437500], [190000, 443750], [195000, 443750], [195000, 437500], [190000, 437500]],
[[185000, 437500], [185000, 443750], [190000, 443750], [190000, 437500], [185000, 437500]],
[[180000, 425000], [180000, 431250], [185000, 431250], [185000, 425000], [180000, 425000]],
[[195000, 425000], [195000, 431250], [200000, 431250], [200000, 425000], [195000, 425000]],
[[185000, 431250], [185000, 437500], [190000, 437500], [190000, 431250], [185000, 431250]],
[[190000, 425000], [190000, 431250], [195000, 431250], [195000, 425000], [190000, 425000]],
[[190000, 431250], [190000, 437500], [195000, 437500], [195000, 431250], [190000, 431250]],
[[185000, 425000], [185000, 431250], [190000, 431250], [190000, 425000], [185000, 425000]],
[[215000, 443750], [215000, 450000], [220000, 450000], [220000, 443750], [215000, 443750]],
[[205000, 437500], [205000, 443750], [210000, 443750], [210000, 437500], [205000, 437500]],
[[195000, 431250], [195000, 437500], [200000, 437500], [200000, 431250], [195000, 431250]],
[[205000, 443750], [205000, 450000], [210000, 450000], [210000, 443750], [205000, 443750]],
[[200000, 443750], [200000, 450000], [205000, 450000], [205000, 443750], [200000, 443750]],
[[210000, 443750], [210000, 450000], [215000, 450000], [215000, 443750], [210000, 443750]],
[[200000, 437500], [200000, 443750], [205000, 443750], [205000, 437500], [200000, 437500]],
[[200000, 431250], [200000, 437500], [205000, 437500], [205000, 431250], [200000, 431250]],
[[210000, 431250], [210000, 437500], [215000, 437500], [215000, 431250], [210000, 431250]],
[[215000, 437500], [215000, 443750], [220000, 443750], [220000, 437500], [215000, 437500]],
[[200000, 425000], [200000, 431250], [205000, 431250], [205000, 425000], [200000, 425000]],
[[205000, 425000], [205000, 431250], [210000, 431250], [210000, 425000], [205000, 425000]],
[[220000, 443750], [220000, 450000], [225000, 450000], [225000, 443750], [220000, 443750]],
[[205000, 431250], [205000, 437500], [210000, 437500], [210000, 431250], [205000, 431250]],
[[210000, 437500], [210000, 443750], [215000, 443750], [215000, 437500], [210000, 437500]],
[[215000, 425000], [215000, 431250], [220000, 431250], [220000, 425000], [215000, 425000]],
[[220000, 437500], [220000, 443750], [225000, 443750], [225000, 437500], [220000, 437500]],
[[235000, 437500], [235000, 443750], [240000, 443750], [240000, 437500], [235000, 437500]],
[[215000, 431250], [215000, 437500], [220000, 437500], [220000, 431250], [215000, 431250]],
[[230000, 443750], [230000, 450000], [235000, 450000], [235000, 443750], [230000, 443750]],
[[230000, 437500], [230000, 443750], [235000, 443750], [235000, 437500], [230000, 437500]],
[[225000, 437500], [225000, 443750], [230000, 443750], [230000, 437500], [225000, 437500]],
[[230000, 431250], [230000, 437500], [235000, 437500], [235000, 431250], [230000, 431250]],
[[225000, 443750], [225000, 450000], [230000, 450000], [230000, 443750], [225000, 443750]],
[[225000, 425000], [225000, 431250], [230000, 431250], [230000, 425000], [225000, 425000]],
[[235000, 431250], [235000, 437500], [240000, 437500], [240000, 431250], [235000, 431250]],
[[225000, 431250], [225000, 437500], [230000, 437500], [230000, 431250], [225000, 431250]],
[[220000, 431250], [220000, 437500], [225000, 437500], [225000, 431250], [220000, 431250]],
[[230000, 425000], [230000, 431250], [235000, 431250], [235000, 425000], [230000, 425000]],
[[220000, 425000], [220000, 431250], [225000, 431250], [225000, 425000], [220000, 425000]],
[[240000, 431250], [240000, 437500], [245000, 437500], [245000, 431250], [240000, 431250]],
[[250000, 437500], [250000, 443750], [255000, 443750], [255000, 437500], [250000, 437500]],
[[240000, 437500], [240000, 443750], [245000, 443750], [245000, 437500], [240000, 437500]],
[[240000, 443750], [240000, 450000], [245000, 450000], [245000, 443750], [240000, 443750]],
[[65000, 412500], [65000, 418750], [70000, 418750], [70000, 412500], [65000, 412500]],
[[245000, 443750], [245000, 450000], [250000, 450000], [250000, 443750], [245000, 443750]],
[[250000, 443750], [250000, 450000], [255000, 450000], [255000, 443750], [250000, 443750]],
[[245000, 437500], [245000, 443750], [250000, 443750], [250000, 437500], [245000, 437500]],
[[235000, 443750], [235000, 450000], [240000, 450000], [240000, 443750], [235000, 443750]],
[[60000, 412500], [60000, 418750], [65000, 418750], [65000, 412500], [60000, 412500]],
[[60000, 418750], [60000, 425000], [65000, 425000], [65000, 418750], [60000, 418750]],
[[60000, 406250], [60000, 412500], [65000, 412500], [65000, 406250], [60000, 406250]],
[[75000, 406250], [75000, 412500], [80000, 412500], [80000, 406250], [75000, 406250]],
[[70000, 406250], [70000, 412500], [75000, 412500], [75000, 406250], [70000, 406250]],
[[75000, 412500], [75000, 418750], [80000, 418750], [80000, 412500], [75000, 412500]],
[[70000, 418750], [70000, 425000], [75000, 425000], [75000, 418750], [70000, 418750]],
[[245000, 431250], [245000, 437500], [250000, 437500], [250000, 431250], [245000, 431250]],
[[60000, 400000], [60000, 406250], [65000, 406250], [65000, 400000], [60000, 400000]],
[[80000, 418750], [80000, 425000], [85000, 425000], [85000, 418750], [80000, 418750]],
[[85000, 412500], [85000, 418750], [90000, 418750], [90000, 412500], [85000, 412500]],
[[250000, 431250], [250000, 437500], [255000, 437500], [255000, 431250], [250000, 431250]],
[[85000, 418750], [85000, 425000], [90000, 425000], [90000, 418750], [85000, 418750]],
[[65000, 418750], [65000, 425000], [70000, 425000], [70000, 418750], [65000, 418750]],
[[95000, 406250], [95000, 412500], [100000, 412500], [100000, 406250], [95000, 406250]],
[[65000, 400000], [65000, 406250], [70000, 406250], [70000, 400000], [65000, 400000]],
[[80000, 412500], [80000, 418750], [85000, 418750], [85000, 412500], [80000, 412500]],
[[70000, 412500], [70000, 418750], [75000, 418750], [75000, 412500], [70000, 412500]],
[[75000, 418750], [75000, 425000], [80000, 425000], [80000, 418750], [75000, 418750]],
[[90000, 406250], [90000, 412500], [95000, 412500], [95000, 406250], [90000, 406250]],
[[70000, 400000], [70000, 406250], [75000, 406250], [75000, 400000], [70000, 400000]],
[[95000, 400000], [95000, 406250], [100000, 406250], [100000, 400000], [95000, 400000]],
[[90000, 418750], [90000, 425000], [95000, 425000], [95000, 418750], [90000, 418750]],
[[90000, 412500], [90000, 418750], [95000, 418750], [95000, 412500], [90000, 412500]],
[[75000, 400000], [75000, 406250], [80000, 406250], [80000, 400000], [75000, 400000]],
[[100000, 418750], [100000, 425000], [105000, 425000], [105000, 418750], [100000, 418750]],
[[105000, 418750], [105000, 425000], [110000, 425000], [110000, 418750], [105000, 418750]],
[[90000, 400000], [90000, 406250], [95000, 406250], [95000, 400000], [90000, 400000]],
[[100000, 406250], [100000, 412500], [105000, 412500], [105000, 406250], [100000, 406250]],
[[65000, 406250], [65000, 412500], [70000, 412500], [70000, 406250], [65000, 406250]],
[[85000, 406250], [85000, 412500], [90000, 412500], [90000, 406250], [85000, 406250]],
[[80000, 400000], [80000, 406250], [85000, 406250], [85000, 400000], [80000, 400000]],
[[95000, 418750], [95000, 425000], [100000, 425000], [100000, 418750], [95000, 418750]],
[[105000, 412500], [105000, 418750], [110000, 418750], [110000, 412500], [105000, 412500]],
[[80000, 406250], [80000, 412500], [85000, 412500], [85000, 406250], [80000, 406250]],
[[115000, 418750], [115000, 425000], [120000, 425000], [120000, 418750], [115000, 418750]],
[[115000, 406250], [115000, 412500], [120000, 412500], [120000, 406250], [115000, 406250]],
[[85000, 400000], [85000, 406250], [90000, 406250], [90000, 400000], [85000, 400000]],
[[115000, 412500], [115000, 418750], [120000, 418750], [120000, 412500], [115000, 412500]],
[[110000, 418750], [110000, 425000], [115000, 425000], [115000, 418750], [110000, 418750]],
[[110000, 412500], [110000, 418750], [115000, 418750], [115000, 412500], [110000, 412500]],
[[95000, 412500], [95000, 418750], [100000, 418750], [100000, 412500], [95000, 412500]],
[[100000, 412500], [100000, 418750], [105000, 418750], [105000, 412500], [100000, 412500]],
[[110000, 406250], [110000, 412500], [115000, 412500], [115000, 406250], [110000, 406250]],
[[115000, 400000], [115000, 406250], [120000, 406250], [120000, 400000], [115000, 400000]],
[[100000, 400000], [100000, 406250], [105000, 406250], [105000, 400000], [100000, 400000]],
[[105000, 406250], [105000, 412500], [110000, 412500], [110000, 406250], [105000, 406250]],
[[110000, 400000], [110000, 406250], [115000, 406250], [115000, 400000], [110000, 400000]],
[[125000, 412500], [125000, 418750], [130000, 418750], [130000, 412500], [125000, 412500]],
[[105000, 400000], [105000, 406250], [110000, 406250], [110000, 400000], [105000, 400000]],
[[120000, 418750], [120000, 425000], [125000, 425000], [125000, 418750], [120000, 418750]],
[[135000, 418750], [135000, 425000], [140000, 425000], [140000, 418750], [135000, 418750]],
[[135000, 406250], [135000, 412500], [140000, 412500], [140000, 406250], [135000, 406250]],
[[135000, 412500], [135000, 418750], [140000, 418750], [140000, 412500], [135000, 412500]],
[[120000, 406250], [120000, 412500], [125000, 412500], [125000, 406250], [120000, 406250]],
[[140000, 418750], [140000, 425000], [145000, 425000], [145000, 418750], [140000, 418750]],
[[130000, 406250], [130000, 412500], [135000, 412500], [135000, 406250], [130000, 406250]],
[[120000, 400000], [120000, 406250], [125000, 406250], [125000, 400000], [120000, 400000]],
[[130000, 400000], [130000, 406250], [135000, 406250], [135000, 400000], [130000, 400000]],
[[130000, 418750], [130000, 425000], [135000, 425000], [135000, 418750], [130000, 418750]],
[[130000, 412500], [130000, 418750], [135000, 418750], [135000, 412500], [130000, 412500]],
[[120000, 412500], [120000, 418750], [125000, 418750], [125000, 412500], [120000, 412500]],
[[145000, 418750], [145000, 425000], [150000, 425000], [150000, 418750], [145000, 418750]],
[[125000, 418750], [125000, 425000], [130000, 425000], [130000, 418750], [125000, 418750]],
[[125000, 406250], [125000, 412500], [130000, 412500], [130000, 406250], [125000, 406250]],
[[155000, 412500], [155000, 418750], [160000, 418750], [160000, 412500], [155000, 412500]],
[[155000, 418750], [155000, 425000], [160000, 425000], [160000, 418750], [155000, 418750]],
[[140000, 412500], [140000, 418750], [145000, 418750], [145000, 412500], [140000, 412500]],
[[155000, 400000], [155000, 406250], [160000, 406250], [160000, 400000], [155000, 400000]],
[[145000, 400000], [145000, 406250], [150000, 406250], [150000, 400000], [145000, 400000]],
[[165000, 418750], [165000, 425000], [170000, 425000], [170000, 418750], [165000, 418750]],
[[145000, 412500], [145000, 418750], [150000, 418750], [150000, 412500], [145000, 412500]],
[[160000, 418750], [160000, 425000], [165000, 425000], [165000, 418750], [160000, 418750]],
[[150000, 400000], [150000, 406250], [155000, 406250], [155000, 400000], [150000, 400000]],
[[155000, 406250], [155000, 412500], [160000, 412500], [160000, 406250], [155000, 406250]],
[[150000, 412500], [150000, 418750], [155000, 418750], [155000, 412500], [150000, 412500]],
[[150000, 406250], [150000, 412500], [155000, 412500], [155000, 406250], [150000, 406250]],
[[125000, 400000], [125000, 406250], [130000, 406250], [130000, 400000], [125000, 400000]],
[[170000, 418750], [170000, 425000], [175000, 425000], [175000, 418750], [170000, 418750]],
[[135000, 400000], [135000, 406250], [140000, 406250], [140000, 400000], [135000, 400000]],
[[140000, 400000], [140000, 406250], [145000, 406250], [145000, 400000], [140000, 400000]],
[[140000, 406250], [140000, 412500], [145000, 412500], [145000, 406250], [140000, 406250]],
[[145000, 406250], [145000, 412500], [150000, 412500], [150000, 406250], [145000, 406250]],
[[165000, 412500], [165000, 418750], [170000, 418750], [170000, 412500], [165000, 412500]],
[[160000, 406250], [160000, 412500], [165000, 412500], [165000, 406250], [160000, 406250]],
[[175000, 412500], [175000, 418750], [180000, 418750], [180000, 412500], [175000, 412500]],
[[170000, 412500], [170000, 418750], [175000, 418750], [175000, 412500], [170000, 412500]],
[[150000, 418750], [150000, 425000], [155000, 425000], [155000, 418750], [150000, 418750]],
[[160000, 412500], [160000, 418750], [165000, 418750], [165000, 412500], [160000, 412500]],
[[170000, 406250], [170000, 412500], [175000, 412500], [175000, 406250], [170000, 406250]],
[[175000, 418750], [175000, 425000], [180000, 425000], [180000, 418750], [175000, 418750]],
[[165000, 406250], [165000, 412500], [170000, 412500], [170000, 406250], [165000, 406250]],
[[175000, 400000], [175000, 406250], [180000, 406250], [180000, 400000], [175000, 400000]],
[[195000, 418750], [195000, 425000], [200000, 425000], [200000, 418750], [195000, 418750]],
[[180000, 418750], [180000, 425000], [185000, 425000], [185000, 418750], [180000, 418750]],
[[170000, 400000], [170000, 406250], [175000, 406250], [175000, 400000], [170000, 400000]],
[[160000, 400000], [160000, 406250], [165000, 406250], [165000, 400000], [160000, 400000]],
[[175000, 406250], [175000, 412500], [180000, 412500], [180000, 406250], [175000, 406250]],
[[180000, 400000], [180000, 406250], [185000, 406250], [185000, 400000], [180000, 400000]],
[[165000, 400000], [165000, 406250], [170000, 406250], [170000, 400000], [165000, 400000]],
[[195000, 412500], [195000, 418750], [200000, 418750], [200000, 412500], [195000, 412500]],
[[185000, 418750], [185000, 425000], [190000, 425000], [190000, 418750], [185000, 418750]],
[[185000, 400000], [185000, 406250], [190000, 406250], [190000, 400000], [185000, 400000]],
[[195000, 400000], [195000, 406250], [200000, 406250], [200000, 400000], [195000, 400000]],
[[190000, 412500], [190000, 418750], [195000, 418750], [195000, 412500], [190000, 412500]],
[[60000, 393750], [60000, 400000], [65000, 400000], [65000, 393750], [60000, 393750]],
[[190000, 400000], [190000, 406250], [195000, 406250], [195000, 400000], [190000, 400000]],
[[195000, 406250], [195000, 412500], [200000, 412500], [200000, 406250], [195000, 406250]],
[[185000, 406250], [185000, 412500], [190000, 412500], [190000, 406250], [185000, 406250]],
[[200000, 412500], [200000, 418750], [205000, 418750], [205000, 412500], [200000, 412500]],
[[190000, 418750], [190000, 425000], [195000, 425000], [195000, 418750], [190000, 418750]],
[[185000, 412500], [185000, 418750], [190000, 418750], [190000, 412500], [185000, 412500]],
[[180000, 406250], [180000, 412500], [185000, 412500], [185000, 406250], [180000, 406250]],
[[180000, 412500], [180000, 418750], [185000, 418750], [185000, 412500], [180000, 412500]],
[[205000, 406250], [205000, 412500], [210000, 412500], [210000, 406250], [205000, 406250]],
[[60000, 387500], [60000, 393750], [65000, 393750], [65000, 387500], [60000, 387500]],
[[75000, 393750], [75000, 400000], [80000, 400000], [80000, 393750], [75000, 393750]],
[[60000, 381250], [60000, 387500], [65000, 387500], [65000, 381250], [60000, 381250]],
[[65000, 381250], [65000, 387500], [70000, 387500], [70000, 381250], [65000, 381250]],
[[200000, 406250], [200000, 412500], [205000, 412500], [205000, 406250], [200000, 406250]],
[[200000, 400000], [200000, 406250], [205000, 406250], [205000, 400000], [200000, 400000]],
[[205000, 400000], [205000, 406250], [210000, 406250], [210000, 400000], [205000, 400000]],
[[75000, 381250], [75000, 387500], [80000, 387500], [80000, 381250], [75000, 381250]],
[[70000, 387500], [70000, 393750], [75000, 393750], [75000, 387500], [70000, 387500]],
[[60000, 375000], [60000, 381250], [65000, 381250], [65000, 375000], [60000, 375000]],
[[75000, 387500], [75000, 393750], [80000, 393750], [80000, 387500], [75000, 387500]],
[[190000, 406250], [190000, 412500], [195000, 412500], [195000, 406250], [190000, 406250]],
[[70000, 375000], [70000, 381250], [75000, 381250], [75000, 375000], [70000, 375000]],
[[70000, 393750], [70000, 400000], [75000, 400000], [75000, 393750], [70000, 393750]],
[[65000, 387500], [65000, 393750], [70000, 393750], [70000, 387500], [65000, 387500]],
[[65000, 375000], [65000, 381250], [70000, 381250], [70000, 375000], [65000, 375000]],
[[80000, 387500], [80000, 393750], [85000, 393750], [85000, 387500], [80000, 387500]],
[[65000, 393750], [65000, 400000], [70000, 400000], [70000, 393750], [65000, 393750]],
[[90000, 387500], [90000, 393750], [95000, 393750], [95000, 387500], [90000, 387500]],
[[95000, 393750], [95000, 400000], [100000, 400000], [100000, 393750], [95000, 393750]],
[[90000, 381250], [90000, 387500], [95000, 387500], [95000, 381250], [90000, 381250]],
[[80000, 393750], [80000, 400000], [85000, 400000], [85000, 393750], [80000, 393750]],
[[70000, 381250], [70000, 387500], [75000, 387500], [75000, 381250], [70000, 381250]],
[[85000, 393750], [85000, 400000], [90000, 400000], [90000, 393750], [85000, 393750]],
[[75000, 375000], [75000, 381250], [80000, 381250], [80000, 375000], [75000, 375000]],
[[80000, 381250], [80000, 387500], [85000, 387500], [85000, 381250], [80000, 381250]],
[[90000, 393750], [90000, 400000], [95000, 400000], [95000, 393750], [90000, 393750]],
[[100000, 381250], [100000, 387500], [105000, 387500], [105000, 381250], [100000, 381250]],
[[110000, 387500], [110000, 393750], [115000, 393750], [115000, 387500], [110000, 387500]],
[[115000, 393750], [115000, 400000], [120000, 400000], [120000, 393750], [115000, 393750]],
[[95000, 381250], [95000, 387500], [100000, 387500], [100000, 381250], [95000, 381250]],
[[85000, 387500], [85000, 393750], [90000, 393750], [90000, 387500], [85000, 387500]],
[[105000, 393750], [105000, 400000], [110000, 400000], [110000, 393750], [105000, 393750]],
[[105000, 387500], [105000, 393750], [110000, 393750], [110000, 387500], [105000, 387500]],
[[85000, 381250], [85000, 387500], [90000, 387500], [90000, 381250], [85000, 381250]],
[[100000, 387500], [100000, 393750], [105000, 393750], [105000, 387500], [100000, 387500]],
[[100000, 393750], [100000, 400000], [105000, 400000], [105000, 393750], [100000, 393750]],
[[110000, 393750], [110000, 400000], [115000, 400000], [115000, 393750], [110000, 393750]],
[[85000, 375000], [85000, 381250], [90000, 381250], [90000, 375000], [85000, 375000]],
[[120000, 387500], [120000, 393750], [125000, 393750], [125000, 387500], [120000, 387500]],
[[80000, 375000], [80000, 381250], [85000, 381250], [85000, 375000], [80000, 375000]],
[[115000, 381250], [115000, 387500], [120000, 387500], [120000, 381250], [115000, 381250]],
[[115000, 387500], [115000, 393750], [120000, 393750], [120000, 387500], [115000, 387500]],
[[135000, 387500], [135000, 393750], [140000, 393750], [140000, 387500], [135000, 387500]],
[[105000, 381250], [105000, 387500], [110000, 387500], [110000, 381250], [105000, 381250]],
[[95000, 387500], [95000, 393750], [100000, 393750], [100000, 387500], [95000, 387500]],
[[110000, 375000], [110000, 381250], [115000, 381250], [115000, 375000], [110000, 375000]],
[[125000, 381250], [125000, 387500], [130000, 387500], [130000, 381250], [125000, 381250]],
[[125000, 393750], [125000, 400000], [130000, 400000], [130000, 393750], [125000, 393750]],
[[115000, 375000], [115000, 381250], [120000, 381250], [120000, 375000], [115000, 375000]],
[[125000, 375000], [125000, 381250], [130000, 381250], [130000, 375000], [125000, 375000]],
[[130000, 387500], [130000, 393750], [135000, 393750], [135000, 387500], [130000, 387500]],
[[120000, 393750], [120000, 400000], [125000, 400000], [125000, 393750], [120000, 393750]],
[[135000, 393750], [135000, 400000], [140000, 400000], [140000, 393750], [135000, 393750]],
[[110000, 381250], [110000, 387500], [115000, 387500], [115000, 381250], [110000, 381250]],
[[150000, 393750], [150000, 400000], [155000, 400000], [155000, 393750], [150000, 393750]],
[[120000, 375000], [120000, 381250], [125000, 381250], [125000, 375000], [120000, 375000]],
[[145000, 393750], [145000, 400000], [150000, 400000], [150000, 393750], [145000, 393750]],
[[125000, 387500], [125000, 393750], [130000, 393750], [130000, 387500], [125000, 387500]],
[[130000, 381250], [130000, 387500], [135000, 387500], [135000, 381250], [130000, 381250]],
[[135000, 375000], [135000, 381250], [140000, 381250], [140000, 375000], [135000, 375000]],
[[135000, 381250], [135000, 387500], [140000, 387500], [140000, 381250], [135000, 381250]],
[[130000, 393750], [130000, 400000], [135000, 400000], [135000, 393750], [130000, 393750]],
[[150000, 381250], [150000, 387500], [155000, 387500], [155000, 381250], [150000, 381250]],
[[145000, 387500], [145000, 393750], [150000, 393750], [150000, 387500], [145000, 387500]],
[[145000, 381250], [145000, 387500], [150000, 387500], [150000, 381250], [145000, 381250]],
[[120000, 381250], [120000, 387500], [125000, 387500], [125000, 381250], [120000, 381250]],
[[130000, 375000], [130000, 381250], [135000, 381250], [135000, 375000], [130000, 375000]],
[[140000, 387500], [140000, 393750], [145000, 393750], [145000, 387500], [140000, 387500]],
[[140000, 381250], [140000, 387500], [145000, 387500], [145000, 381250], [140000, 381250]],
[[155000, 393750], [155000, 400000], [160000, 400000], [160000, 393750], [155000, 393750]],
[[140000, 375000], [140000, 381250], [145000, 381250], [145000, 375000], [140000, 375000]],
[[155000, 375000], [155000, 381250], [160000, 381250], [160000, 375000], [155000, 375000]],
[[140000, 393750], [140000, 400000], [145000, 400000], [145000, 393750], [140000, 393750]],
[[150000, 387500], [150000, 393750], [155000, 393750], [155000, 387500], [150000, 387500]],
[[160000, 393750], [160000, 400000], [165000, 400000], [165000, 393750], [160000, 393750]],
[[170000, 393750], [170000, 400000], [175000, 400000], [175000, 393750], [170000, 393750]],
[[155000, 381250], [155000, 387500], [160000, 387500], [160000, 381250], [155000, 381250]],
[[150000, 375000], [150000, 381250], [155000, 381250], [155000, 375000], [150000, 375000]],
[[145000, 375000], [145000, 381250], [150000, 381250], [150000, 375000], [145000, 375000]],
[[155000, 387500], [155000, 393750], [160000, 393750], [160000, 387500], [155000, 387500]],
[[160000, 387500], [160000, 393750], [165000, 393750], [165000, 387500], [160000, 387500]],
[[165000, 381250], [165000, 387500], [170000, 387500], [170000, 381250], [165000, 381250]],
[[175000, 381250], [175000, 387500], [180000, 387500], [180000, 381250], [175000, 381250]],
[[165000, 393750], [165000, 400000], [170000, 400000], [170000, 393750], [165000, 393750]],
[[170000, 387500], [170000, 393750], [175000, 393750], [175000, 387500], [170000, 387500]],
[[175000, 393750], [175000, 400000], [180000, 400000], [180000, 393750], [175000, 393750]],
[[175000, 375000], [175000, 381250], [180000, 381250], [180000, 375000], [175000, 375000]],
[[170000, 381250], [170000, 387500], [175000, 387500], [175000, 381250], [170000, 381250]],
[[165000, 387500], [165000, 393750], [170000, 393750], [170000, 387500], [165000, 387500]],
[[165000, 375000], [165000, 381250], [170000, 381250], [170000, 375000], [165000, 375000]],
[[160000, 375000], [160000, 381250], [165000, 381250], [165000, 375000], [160000, 375000]],
[[190000, 387500], [190000, 393750], [195000, 393750], [195000, 387500], [190000, 387500]],
[[180000, 393750], [180000, 400000], [185000, 400000], [185000, 393750], [180000, 393750]],
[[175000, 387500], [175000, 393750], [180000, 393750], [180000, 387500], [175000, 387500]],
[[160000, 381250], [160000, 387500], [165000, 387500], [165000, 381250], [160000, 381250]],
[[195000, 393750], [195000, 400000], [200000, 400000], [200000, 393750], [195000, 393750]],
[[170000, 375000], [170000, 381250], [175000, 381250], [175000, 375000], [170000, 375000]],
[[190000, 393750], [190000, 400000], [195000, 400000], [195000, 393750], [190000, 393750]],
[[185000, 381250], [185000, 387500], [190000, 387500], [190000, 381250], [185000, 381250]],
[[180000, 381250], [180000, 387500], [185000, 387500], [185000, 381250], [180000, 381250]],
[[185000, 393750], [185000, 400000], [190000, 400000], [190000, 393750], [185000, 393750]],
[[185000, 375000], [185000, 381250], [190000, 381250], [190000, 375000], [185000, 375000]],
[[205000, 393750], [205000, 400000], [210000, 400000], [210000, 393750], [205000, 393750]],
[[180000, 387500], [180000, 393750], [185000, 393750], [185000, 387500], [180000, 387500]],
[[180000, 375000], [180000, 381250], [185000, 381250], [185000, 375000], [180000, 375000]],
[[195000, 381250], [195000, 387500], [200000, 387500], [200000, 381250], [195000, 381250]],
[[200000, 375000], [200000, 381250], [205000, 381250], [205000, 375000], [200000, 375000]],
[[195000, 375000], [195000, 381250], [200000, 381250], [200000, 375000], [195000, 375000]],
[[200000, 387500], [200000, 393750], [205000, 393750], [205000, 387500], [200000, 387500]],
[[200000, 381250], [200000, 387500], [205000, 387500], [205000, 381250], [200000, 381250]],
[[190000, 381250], [190000, 387500], [195000, 387500], [195000, 381250], [190000, 381250]],
[[200000, 393750], [200000, 400000], [205000, 400000], [205000, 393750], [200000, 393750]],
[[185000, 387500], [185000, 393750], [190000, 393750], [190000, 387500], [185000, 387500]],
[[190000, 375000], [190000, 381250], [195000, 381250], [195000, 375000], [190000, 375000]],
[[65000, 368750], [65000, 375000], [70000, 375000], [70000, 368750], [65000, 368750]],
[[60000, 368750], [60000, 375000], [65000, 375000], [65000, 368750], [60000, 368750]],
[[210000, 387500], [210000, 393750], [215000, 393750], [215000, 387500], [210000, 387500]],
[[205000, 381250], [205000, 387500], [210000, 387500], [210000, 381250], [205000, 381250]],
[[210000, 375000], [210000, 381250], [215000, 381250], [215000, 375000], [210000, 375000]],
[[195000, 387500], [195000, 393750], [200000, 393750], [200000, 387500], [195000, 387500]],
[[205000, 387500], [205000, 393750], [210000, 393750], [210000, 387500], [205000, 387500]],
[[60000, 362500], [60000, 368750], [65000, 368750], [65000, 362500], [60000, 362500]],
[[70000, 362500], [70000, 368750], [75000, 368750], [75000, 362500], [70000, 362500]],
[[205000, 375000], [205000, 381250], [210000, 381250], [210000, 375000], [205000, 375000]],
[[210000, 393750], [210000, 400000], [215000, 400000], [215000, 393750], [210000, 393750]],
[[65000, 362500], [65000, 368750], [70000, 368750], [70000, 362500], [65000, 362500]],
[[60000, 356250], [60000, 362500], [65000, 362500], [65000, 356250], [60000, 356250]],
[[175000, 368750], [175000, 375000], [180000, 375000], [180000, 368750], [175000, 368750]],
[[150000, 362500], [150000, 368750], [155000, 368750], [155000, 362500], [150000, 362500]],
[[165000, 368750], [165000, 375000], [170000, 375000], [170000, 368750], [165000, 368750]],
[[160000, 368750], [160000, 375000], [165000, 375000], [165000, 368750], [160000, 368750]],
[[70000, 368750], [70000, 375000], [75000, 375000], [75000, 368750], [70000, 368750]],
[[85000, 368750], [85000, 375000], [90000, 375000], [90000, 368750], [85000, 368750]],
[[210000, 381250], [210000, 387500], [215000, 387500], [215000, 381250], [210000, 381250]],
[[140000, 368750], [140000, 375000], [145000, 375000], [145000, 368750], [140000, 368750]],
[[145000, 362500], [145000, 368750], [150000, 368750], [150000, 362500], [145000, 362500]],
[[150000, 368750], [150000, 375000], [155000, 375000], [155000, 368750], [150000, 368750]],
[[145000, 368750], [145000, 375000], [150000, 375000], [150000, 368750], [145000, 368750]],
[[155000, 362500], [155000, 368750], [160000, 368750], [160000, 362500], [155000, 362500]],
[[175000, 356250], [175000, 362500], [180000, 362500], [180000, 356250], [175000, 356250]],
[[135000, 368750], [135000, 375000], [140000, 375000], [140000, 368750], [135000, 368750]],
[[80000, 368750], [80000, 375000], [85000, 375000], [85000, 368750], [80000, 368750]],
[[170000, 368750], [170000, 375000], [175000, 375000], [175000, 368750], [170000, 368750]],
[[160000, 362500], [160000, 368750], [165000, 368750], [165000, 362500], [160000, 362500]],
[[170000, 350000], [170000, 356250], [175000, 356250], [175000, 350000], [170000, 350000]],
[[140000, 362500], [140000, 368750], [145000, 368750], [145000, 362500], [140000, 362500]],
[[155000, 368750], [155000, 375000], [160000, 375000], [160000, 368750], [155000, 368750]],
[[180000, 362500], [180000, 368750], [185000, 368750], [185000, 362500], [180000, 362500]],
[[165000, 356250], [165000, 362500], [170000, 362500], [170000, 356250], [165000, 356250]],
[[195000, 368750], [195000, 375000], [200000, 375000], [200000, 368750], [195000, 368750]],
[[195000, 350000], [195000, 356250], [200000, 356250], [200000, 350000], [195000, 350000]],
[[185000, 362500], [185000, 368750], [190000, 368750], [190000, 362500], [185000, 362500]],
[[180000, 368750], [180000, 375000], [185000, 375000], [185000, 368750], [180000, 368750]],
[[185000, 368750], [185000, 375000], [190000, 375000], [190000, 368750], [185000, 368750]],
[[205000, 368750], [205000, 375000], [210000, 375000], [210000, 368750], [205000, 368750]],
[[195000, 356250], [195000, 362500], [200000, 362500], [200000, 356250], [195000, 356250]],
[[200000, 368750], [200000, 375000], [205000, 375000], [205000, 368750], [200000, 368750]],
[[190000, 350000], [190000, 356250], [195000, 356250], [195000, 350000], [190000, 350000]],
[[170000, 362500], [170000, 368750], [175000, 368750], [175000, 362500], [170000, 362500]],
[[180000, 350000], [180000, 356250], [185000, 356250], [185000, 350000], [180000, 350000]],
[[175000, 350000], [175000, 356250], [180000, 356250], [180000, 350000], [175000, 350000]],
[[185000, 356250], [185000, 362500], [190000, 362500], [190000, 356250], [185000, 356250]],
[[190000, 362500], [190000, 368750], [195000, 368750], [195000, 362500], [190000, 362500]],
[[190000, 368750], [190000, 375000], [195000, 375000], [195000, 368750], [190000, 368750]],
[[175000, 362500], [175000, 368750], [180000, 368750], [180000, 362500], [175000, 362500]],
[[185000, 350000], [185000, 356250], [190000, 356250], [190000, 350000], [185000, 350000]],
[[205000, 362500], [205000, 368750], [210000, 368750], [210000, 362500], [205000, 362500]],
[[170000, 356250], [170000, 362500], [175000, 362500], [175000, 356250], [170000, 356250]],
[[195000, 362500], [195000, 368750], [200000, 368750], [200000, 362500], [195000, 362500]],
[[200000, 356250], [200000, 362500], [205000, 362500], [205000, 356250], [200000, 356250]],
[[205000, 356250], [205000, 362500], [210000, 362500], [210000, 356250], [205000, 356250]],
[[165000, 362500], [165000, 368750], [170000, 368750], [170000, 362500], [165000, 362500]],
[[180000, 356250], [180000, 362500], [185000, 362500], [185000, 356250], [180000, 356250]],
[[45000, 406250], [45000, 412500], [50000, 412500], [50000, 406250], [45000, 406250]],
[[200000, 362500], [200000, 368750], [205000, 368750], [205000, 362500], [200000, 362500]],
[[210000, 350000], [210000, 356250], [215000, 356250], [215000, 350000], [210000, 350000]],
[[210000, 368750], [210000, 375000], [215000, 375000], [215000, 368750], [210000, 368750]],
[[205000, 350000], [205000, 356250], [210000, 356250], [210000, 350000], [205000, 350000]],
[[45000, 412500], [45000, 418750], [50000, 418750], [50000, 412500], [45000, 412500]],
[[25000, 400000], [25000, 406250], [30000, 406250], [30000, 400000], [25000, 400000]],
[[55000, 425000], [55000, 431250], [60000, 431250], [60000, 425000], [55000, 425000]],
[[50000, 418750], [50000, 425000], [55000, 425000], [55000, 418750], [50000, 418750]],
[[45000, 418750], [45000, 425000], [50000, 425000], [50000, 418750], [45000, 418750]],
[[45000, 425000], [45000, 431250], [50000, 431250], [50000, 425000], [45000, 425000]],
[[55000, 418750], [55000, 425000], [60000, 425000], [60000, 418750], [55000, 418750]],
[[190000, 356250], [190000, 362500], [195000, 362500], [195000, 356250], [190000, 356250]],
[[35000, 406250], [35000, 412500], [40000, 412500], [40000, 406250], [35000, 406250]],
[[200000, 350000], [200000, 356250], [205000, 356250], [205000, 350000], [200000, 350000]],
[[35000, 412500], [35000, 418750], [40000, 418750], [40000, 412500], [35000, 412500]],
[[20000, 393750], [20000, 400000], [25000, 400000], [25000, 393750], [20000, 393750]],
[[50000, 406250], [50000, 412500], [55000, 412500], [55000, 406250], [50000, 406250]],
[[30000, 400000], [30000, 406250], [35000, 406250], [35000, 400000], [30000, 400000]],
[[35000, 393750], [35000, 400000], [40000, 400000], [40000, 393750], [35000, 393750]],
[[40000, 412500], [40000, 418750], [45000, 418750], [45000, 412500], [40000, 412500]],
[[50000, 412500], [50000, 418750], [55000, 418750], [55000, 412500], [50000, 412500]],
[[30000, 393750], [30000, 400000], [35000, 400000], [35000, 393750], [30000, 393750]],
[[50000, 425000], [50000, 431250], [55000, 431250], [55000, 425000], [50000, 425000]],
[[40000, 406250], [40000, 412500], [45000, 412500], [45000, 406250], [40000, 406250]],
[[55000, 406250], [55000, 412500], [60000, 412500], [60000, 406250], [55000, 406250]],
[[25000, 381250], [25000, 387500], [30000, 387500], [30000, 381250], [25000, 381250]],
[[20000, 387500], [20000, 393750], [25000, 393750], [25000, 387500], [20000, 387500]],
[[45000, 400000], [45000, 406250], [50000, 406250], [50000, 400000], [45000, 400000]],
[[25000, 387500], [25000, 393750], [30000, 393750], [30000, 387500], [25000, 387500]],
[[25000, 393750], [25000, 400000], [30000, 400000], [30000, 393750], [25000, 393750]],
[[55000, 412500], [55000, 418750], [60000, 418750], [60000, 412500], [55000, 412500]],
[[40000, 393750], [40000, 400000], [45000, 400000], [45000, 393750], [40000, 393750]],
[[20000, 381250], [20000, 387500], [25000, 387500], [25000, 381250], [20000, 381250]],
[[45000, 393750], [45000, 400000], [50000, 400000], [50000, 393750], [45000, 393750]],
[[35000, 400000], [35000, 406250], [40000, 406250], [40000, 400000], [35000, 400000]],
[[35000, 387500], [35000, 393750], [40000, 393750], [40000, 387500], [35000, 387500]],
[[35000, 381250], [35000, 387500], [40000, 387500], [40000, 381250], [35000, 381250]],
[[20000, 400000], [20000, 406250], [25000, 406250], [25000, 400000], [20000, 400000]],
[[55000, 400000], [55000, 406250], [60000, 406250], [60000, 400000], [55000, 400000]],
[[50000, 393750], [50000, 400000], [55000, 400000], [55000, 393750], [50000, 393750]],
[[30000, 381250], [30000, 387500], [35000, 387500], [35000, 381250], [30000, 381250]],
[[50000, 400000], [50000, 406250], [55000, 406250], [55000, 400000], [50000, 400000]],
[[10000, 375000], [10000, 381250], [15000, 381250], [15000, 375000], [10000, 375000]],
[[55000, 393750], [55000, 400000], [60000, 400000], [60000, 393750], [55000, 393750]],
[[30000, 387500], [30000, 393750], [35000, 393750], [35000, 387500], [30000, 387500]],
[[40000, 387500], [40000, 393750], [45000, 393750], [45000, 387500], [40000, 387500]],
[[15000, 368750], [15000, 375000], [20000, 375000], [20000, 368750], [15000, 368750]],
[[40000, 400000], [40000, 406250], [45000, 406250], [45000, 400000], [40000, 400000]],
[[40000, 381250], [40000, 387500], [45000, 387500], [45000, 381250], [40000, 381250]],
[[55000, 387500], [55000, 393750], [60000, 393750], [60000, 387500], [55000, 387500]],
[[15000, 375000], [15000, 381250], [20000, 381250], [20000, 375000], [15000, 375000]],
[[45000, 381250], [45000, 387500], [50000, 387500], [50000, 381250], [45000, 381250]],
[[50000, 381250], [50000, 387500], [55000, 387500], [55000, 381250], [50000, 381250]],
[[25000, 368750], [25000, 375000], [30000, 375000], [30000, 368750], [25000, 368750]],
[[35000, 375000], [35000, 381250], [40000, 381250], [40000, 375000], [35000, 375000]],
[[50000, 387500], [50000, 393750], [55000, 393750], [55000, 387500], [50000, 387500]],
[[45000, 387500], [45000, 393750], [50000, 393750], [50000, 387500], [45000, 387500]],
[[15000, 362500], [15000, 368750], [20000, 368750], [20000, 362500], [15000, 362500]],
[[35000, 368750], [35000, 375000], [40000, 375000], [40000, 368750], [35000, 368750]],
[[20000, 375000], [20000, 381250], [25000, 381250], [25000, 375000], [20000, 375000]],
[[55000, 381250], [55000, 387500], [60000, 387500], [60000, 381250], [55000, 381250]],
[[30000, 375000], [30000, 381250], [35000, 381250], [35000, 375000], [30000, 375000]],
[[20000, 368750], [20000, 375000], [25000, 375000], [25000, 368750], [20000, 368750]],
[[30000, 362500], [30000, 368750], [35000, 368750], [35000, 362500], [30000, 362500]],
[[10000, 368750], [10000, 375000], [15000, 375000], [15000, 368750], [10000, 368750]],
[[40000, 375000], [40000, 381250], [45000, 381250], [45000, 375000], [40000, 375000]],
[[30000, 368750], [30000, 375000], [35000, 375000], [35000, 368750], [30000, 368750]],
[[35000, 362500], [35000, 368750], [40000, 368750], [40000, 362500], [35000, 362500]],
[[25000, 375000], [25000, 381250], [30000, 381250], [30000, 375000], [25000, 375000]],
[[40000, 368750], [40000, 375000], [45000, 375000], [45000, 368750], [40000, 368750]],
[[45000, 362500], [45000, 368750], [50000, 368750], [50000, 362500], [45000, 362500]],
[[45000, 375000], [45000, 381250], [50000, 381250], [50000, 375000], [45000, 375000]],
[[10000, 362500], [10000, 368750], [15000, 368750], [15000, 362500], [10000, 362500]],
[[185000, 343750], [185000, 350000], [190000, 350000], [190000, 343750], [185000, 343750]],
[[50000, 375000], [50000, 381250], [55000, 381250], [55000, 375000], [50000, 375000]],
[[20000, 362500], [20000, 368750], [25000, 368750], [25000, 362500], [20000, 362500]],
[[55000, 362500], [55000, 368750], [60000, 368750], [60000, 362500], [55000, 362500]],
[[55000, 368750], [55000, 375000], [60000, 375000], [60000, 368750], [55000, 368750]],
[[55000, 375000], [55000, 381250], [60000, 381250], [60000, 375000], [55000, 375000]],
[[50000, 356250], [50000, 362500], [55000, 362500], [55000, 356250], [50000, 356250]],
[[40000, 362500], [40000, 368750], [45000, 368750], [45000, 362500], [40000, 362500]],
[[45000, 356250], [45000, 362500], [50000, 362500], [50000, 356250], [45000, 356250]],
[[180000, 331250], [180000, 337500], [185000, 337500], [185000, 331250], [180000, 331250]],
[[40000, 356250], [40000, 362500], [45000, 362500], [45000, 356250], [40000, 356250]],
[[25000, 362500], [25000, 368750], [30000, 368750], [30000, 362500], [25000, 362500]],
[[180000, 343750], [180000, 350000], [185000, 350000], [185000, 343750], [180000, 343750]],
[[45000, 368750], [45000, 375000], [50000, 375000], [50000, 368750], [45000, 368750]],
[[175000, 331250], [175000, 337500], [180000, 337500], [180000, 331250], [175000, 331250]],
[[180000, 337500], [180000, 343750], [185000, 343750], [185000, 337500], [180000, 337500]],
[[50000, 368750], [50000, 375000], [55000, 375000], [55000, 368750], [50000, 368750]],
[[185000, 331250], [185000, 337500], [190000, 337500], [190000, 331250], [185000, 331250]],
[[190000, 337500], [190000, 343750], [195000, 343750], [195000, 337500], [190000, 337500]],
[[175000, 325000], [175000, 331250], [180000, 331250], [180000, 325000], [175000, 325000]],
[[205000, 343750], [205000, 350000], [210000, 350000], [210000, 343750], [205000, 343750]],
[[50000, 362500], [50000, 368750], [55000, 368750], [55000, 362500], [50000, 362500]],
[[195000, 343750], [195000, 350000], [200000, 350000], [200000, 343750], [195000, 343750]],
[[180000, 325000], [180000, 331250], [185000, 331250], [185000, 325000], [180000, 325000]],
[[55000, 356250], [55000, 362500], [60000, 362500], [60000, 356250], [55000, 356250]],
[[190000, 343750], [190000, 350000], [195000, 350000], [195000, 343750], [190000, 343750]],
[[185000, 337500], [185000, 343750], [190000, 343750], [190000, 337500], [185000, 337500]],
[[195000, 331250], [195000, 337500], [200000, 337500], [200000, 331250], [195000, 331250]],
[[190000, 331250], [190000, 337500], [195000, 337500], [195000, 331250], [190000, 331250]],
[[185000, 325000], [185000, 331250], [190000, 331250], [190000, 325000], [185000, 325000]],
[[180000, 306250], [180000, 312500], [185000, 312500], [185000, 306250], [180000, 306250]],
[[195000, 337500], [195000, 343750], [200000, 343750], [200000, 337500], [195000, 337500]],
[[175000, 318750], [175000, 325000], [180000, 325000], [180000, 318750], [175000, 318750]],
[[180000, 312500], [180000, 318750], [185000, 318750], [185000, 312500], [180000, 312500]],
[[195000, 325000], [195000, 331250], [200000, 331250], [200000, 325000], [195000, 325000]],
[[190000, 325000], [190000, 331250], [195000, 331250], [195000, 325000], [190000, 325000]],
[[200000, 343750], [200000, 350000], [205000, 350000], [205000, 343750], [200000, 343750]],
[[170000, 318750], [170000, 325000], [175000, 325000], [175000, 318750], [170000, 318750]],
[[190000, 318750], [190000, 325000], [195000, 325000], [195000, 318750], [190000, 318750]],
[[170000, 312500], [170000, 318750], [175000, 318750], [175000, 312500], [170000, 312500]],
[[175000, 312500], [175000, 318750], [180000, 318750], [180000, 312500], [175000, 312500]],
[[190000, 312500], [190000, 318750], [195000, 318750], [195000, 312500], [190000, 312500]],
[[200000, 325000], [200000, 331250], [205000, 331250], [205000, 325000], [200000, 325000]],
[[180000, 318750], [180000, 325000], [185000, 325000], [185000, 318750], [180000, 318750]],
[[200000, 318750], [200000, 325000], [205000, 325000], [205000, 318750], [200000, 318750]],
[[195000, 306250], [195000, 312500], [200000, 312500], [200000, 306250], [195000, 306250]],
[[190000, 306250], [190000, 312500], [195000, 312500], [195000, 306250], [190000, 306250]],
[[185000, 318750], [185000, 325000], [190000, 325000], [190000, 318750], [185000, 318750]],
[[195000, 312500], [195000, 318750], [200000, 318750], [200000, 312500], [195000, 312500]],
[[200000, 306250], [200000, 312500], [205000, 312500], [205000, 306250], [200000, 306250]],
[[185000, 312500], [185000, 318750], [190000, 318750], [190000, 312500], [185000, 312500]],
[[185000, 306250], [185000, 312500], [190000, 312500], [190000, 306250], [185000, 306250]],
[[15000, 393750], [15000, 400000], [20000, 400000], [20000, 393750], [15000, 393750]],
[[200000, 312500], [200000, 318750], [205000, 318750], [205000, 312500], [200000, 312500]],
[[175000, 306250], [175000, 312500], [180000, 312500], [180000, 306250], [175000, 306250]],
[[195000, 318750], [195000, 325000], [200000, 325000], [200000, 318750], [195000, 318750]]]

lstkaartbladennummers = \
    ["01hz2",
"01gz2",
"02ez1",
"02cz2",
"02dn1",
"02dz1",
"01hn1",
"01gn1",
"01cz2",
"01dz1",
"01hn2",
"02cz1",
"02cn2",
"01gn2",
"02dz2",
"02fz1",
"01cz1",
"01hz1",
"02ez2",
"02cn1",
"02fz2",
"01gz1",
"01dz2",
"03dz2",
"02gn1",
"03gn1",
"03gn2",
"02gn2",
"02hn2",
"03dn1",
"02hz1",
"03dz1",
"02hn1",
"03gz1",
"03cz2",
"02gz2",
"03hn1",
"03cz1",
"03az1",
"03gz2",
"03dn2",
"02hz2",
"05an1",
"02gz1",
"03hz1",
"04ez2",
"04gz1",
"04fz2",
"04fz1",
"03hz2",
"04gn1",
"04dn2",
"05dz2",
"04gn2",
"04fn2",
"05fz1",
"05hn1",
"05bn1",
"05gn2",
"05ez2",
"04dz2",
"05an2",
"06bn1",
"05hz1",
"05fz2",
"05fn1",
"05ez1",
"05dn2",
"05hz2",
"05gn1",
"05gz1",
"06az1",
"05fn2",
"06bn2",
"06az2",
"06cn1",
"06an2",
"05gz2",
"05hn2",
"06cn2",
"06dn1",
"06an1",
"06dz1",
"06cz2",
"06bz2",
"06cz1",
"06dn2",
"06gn1",
"06bz1",
"06gz2",
"06en2",
"06hz2",
"06gn2",
"06en1",
"06ez1",
"07an2",
"06gz1",
"06dz2",
"06hn2",
"06hn1",
"07an1",
"07bn1",
"06ez2",
"06fn1",
"06fz2",
"07dn1",
"06fz1",
"07bn2",
"06fn2",
"07az2",
"06hz1",
"07bz1",
"07az1",
"07cn2",
"07fz1",
"07dz2",
"07cz1",
"07dz1",
"07dn2",
"07cz2",
"07bz2",
"07cn1",
"07ez2",
"07en2",
"07en1",
"07gz1",
"07ez1",
"07hn1",
"07fn2",
"07hn2",
"07gn1",
"07fn1",
"08az1",
"07fz2",
"07gz2",
"08dz1",
"08an1",
"07gn2",
"08dn1",
"07hz1",
"09bn2",
"08cn1",
"08cz1",
"08cz2",
"08az2",
"09bz1",
"07hz2",
"08dz2",
"08cn2",
"09bz2",
"08dn2",
"09dn1",
"09cn2",
"09bn1",
"09dn2",
"09hz1",
"09dz2",
"09ez1",
"09az2",
"09cz2",
"09dz1",
"09en1",
"10az2",
"10dz2",
"10cn2",
"10en1",
"09hn2",
"10bn2",
"10dn2",
"10dn1",
"10bn1",
"10bz1",
"10fn2",
"10cn1",
"09hz2",
"11an1",
"10fn1",
"10gz1",
"10bz2",
"10fz2",
"10en2",
"10gn2",
"10ez1",
"10fz1",
"11bn1",
"10hn1",
"11an2",
"10hn2",
"10hz2",
"10ez2",
"11dz2",
"11cz1",
"11az2",
"11az1",
"11dn2",
"10gn1",
"10gz2",
"10hz1",
"11en2",
"11cz2",
"11bz2",
"11dn1",
"11bz1",
"11dz1",
"11cn2",
"11bn2",
"11ez2",
"11gn2",
"11cn1",
"11hn2",
"11gn1",
"11fn1",
"11hz1",
"11fz2",
"11en1",
"11gz1",
"11gz2",
"11fn2",
"11ez1",
"12cn1",
"12az2",
"11fz1",
"12fn2",
"12bz1",
"11hn1",
"12an1",
"12bn1",
"12an2",
"12bz2",
"12az1",
"12en1",
"12dn1",
"11hz2",
"12cz2",
"12bn2",
"12fn1",
"12dn2",
"12ez2",
"12cn2",
"12cz1",
"12dz2",
"12gz1",
"12en2",
"12dz1",
"12gn2",
"13an1",
"12gz2",
"12fz2",
"12ez1",
"12gn1",
"12hn1",
"12hn2",
"13bn2",
"12hz1",
"12fz1",
"13cz2",
"13az2",
"13bn1",
"12hz2",
"13an2",
"14an2",
"13dn2",
"13dz2",
"13bz2",
"13bz1",
"13cz1",
"13az1",
"14az2",
"14bz2",
"13cn1",
"14en2",
"14dz1",
"14bz1",
"14en1",
"14ez2",
"13cn2",
"14ez1",
"13dn1",
"14bn1",
"14dz2",
"14dn1",
"14cz2",
"14cn2",
"13dz1",
"14dn2",
"14hn2",
"14bn2",
"14gn2",
"14cz1",
"14fn1",
"14fz1",
"14fz2",
"15cz2",
"15en2",
"15bn1",
"15ez1",
"15ez2",
"14gz2",
"15bz1",
"15cz1",
"14hn1",
"14gn1",
"15bz2",
"14hz1",
"14hz2",
"15fn2",
"14gz1",
"15bn2",
"15en1",
"15fn1",
"15fz2",
"15gn2",
"15hz1",
"15fz1",
"16cn2",
"15hn1",
"16bn1",
"16an1",
"15gz2",
"16an2",
"16cn1",
"16az1",
"16bn2",
"16dn1",
"16az2",
"16cz2",
"16cz1",
"16dn2",
"16bz2",
"15hz2",
"15hn2",
"16en1",
"16dz1",
"16fn2",
"16fn1",
"16gn1",
"16ez2",
"16hn1",
"16fz1",
"16en2",
"17an2",
"16fz2",
"16ez1",
"17az2",
"16dz2",
"16hn2",
"16bz1",
"16gz1",
"16hz1",
"16hz2",
"16gz2",
"17bz1",
"17en2",
"17cz2",
"17en1",
"16gn2",
"17cn2",
"17an1",
"17az1",
"17bn2",
"17fz1",
"17dz1",
"17bz2",
"17fn1",
"17dn2",
"17cz1",
"17bn1",
"17hz2",
"17cn1",
"17gn2",
"17ez1",
"17dn1",
"17gz1",
"17ez2",
"17fn2",
"17hz1",
"18cz2",
"17dz2",
"18an1",
"18cn1",
"18bn1",
"18bz1",
"19an2",
"17hn1",
"18an2",
"17fz2",
"18az1",
"17hn2",
"18az2",
"19an1",
"17gn1",
"17gz2",
"19bn2",
"18cz1",
"19bz2",
"19cn2",
"19az2",
"19bz1",
"18cn2",
"19az1",
"18hz2",
"19cz1",
"19cz2",
"19dn1",
"19ez2",
"19dn2",
"19cn1",
"19bn1",
"19en1",
"19fz2",
"19dz1",
"19ez1",
"19en2",
"19hz2",
"19fn1",
"19gn2",
"19fn2",
"19fz1",
"19hz1",
"19hn1",
"20bn1",
"19dz2",
"19gz1",
"20an2",
"20dn2",
"19gz2",
"20bz1",
"19gn1",
"20dn1",
"20bn2",
"20az1",
"20ez2",
"20an1",
"20fz1",
"20dz1",
"20bz2",
"20en2",
"20fn1",
"20hn1",
"20dz2",
"20gn1",
"20gz1",
"20fn2",
"20fz2",
"20hn2",
"20gz2",
"20hz2",
"20gn2",
"21an1",
"21cz2",
"20hz1",
"21az2",
"21cn1",
"21an2",
"21en1",
"21bn1",
"21bz2",
"21bn2",
"21dz1",
"21dn1",
"21cn2",
"21bz1",
"21cz1",
"21ez2",
"21dn2",
"21az1",
"21fz1",
"21dz2",
"21fn1",
"21fn2",
"21en2",
"21gz2",
"21ez1",
"21hz2",
"22az1",
"21hn2",
"21hz1",
"21fz2",
"21hn1",
"22bn1",
"21gz1",
"22az2",
"22an2",
"22cn2",
"21gn1",
"22an1",
"22bz1",
"22bz2",
"22cn1",
"22bn2",
"22dn2",
"22cz1",
"22dn1",
"21gn2",
"22en1",
"22fn1",
"22fn2",
"22ez2",
"22en2",
"22ez1",
"22dz2",
"22cz2",
"22gn1",
"22dz1",
"22gz1",
"23an2",
"23an1",
"22fz2",
"23az2",
"24fn2",
"22gn2",
"25an2",
"24fz2",
"25az1",
"22gz2",
"23az1",
"25az2",
"24hn1",
"24hn2",
"25bz2",
"24hz1",
"25an1",
"25bn2",
"24hz2",
"25bn1",
"25cz2",
"25bz1",
"25cn1",
"25dz1",
"25dn1",
"25en1",
"25cn2",
"25dz2",
"25ez1",
"25en2",
"25cz1",
"25fn1",
"25dn2",
"25fn2",
"25ez2",
"25fz2",
"25fz1",
"25gn1",
"25gz2",
"25gn2",
"25hn1",
"26an2",
"26an1",
"25hz1",
"25gz1",
"26bz1",
"25hz2",
"26bz2",
"26az1",
"26az2",
"26cz2",
"26bn2",
"26bn1",
"26dn2",
"25hn2",
"26dz2",
"26cn1",
"26cn2",
"26dn1",
"26fn1",
"26dz1",
"26cz1",
"26en2",
"26gn2",
"26ez1",
"26ez2",
"26fz2",
"26en1",
"26fz1",
"26fn2",
"26hn2",
"26gn1",
"26gz1",
"26gz2",
"26hz2",
"26hz1",
"27az2",
"27an1",
"27az1",
"27bz1",
"27bn2",
"27cz2",
"26hn1",
"27an2",
"27bn1",
"27cn1",
"27dz1",
"27cn2",
"27bz2",
"27cz1",
"27en2",
"27fn1",
"27dn1",
"27dn2",
"27ez2",
"27en1",
"27ez1",
"27fz1",
"27gn1",
"27dz2",
"27gn2",
"27fn2",
"27fz2",
"27gz2",
"27gz1",
"28bn2",
"27hn2",
"28an2",
"27hz1",
"28an1",
"27hn1",
"28bz1",
"27hz2",
"28dn2",
"28bz2",
"28az1",
"28cz1",
"28dz2",
"28cz2",
"28az2",
"28cn2",
"28dn1",
"28ez2",
"28bn1",
"28gn1",
"28en2",
"28fz2",
"28cn1",
"28fn1",
"28dz1",
"28en1",
"28fn2",
"28ez1",
"28fz1",
"28gz1",
"28hz2",
"28hz1",
"28gn2",
"29an2",
"28hn1",
"29az2",
"29az1",
"29an1",
"28gz2",
"30dz1",
"29cn1",
"30dz2",
"29cz1",
"28hn2",
"30en2",
"29cn2",
"30fz1",
"30ez1",
"30fn1",
"29cz2",
"30fn2",
"30gn1",
"30hn1",
"30gz1",
"30hz2",
"30gz2",
"30dn2",
"30ez2",
"30fz2",
"31az1",
"30gn2",
"31an1",
"30hn2",
"30hz1",
"31az2",
"31bn2",
"31bz1",
"31bz2",
"31dn1",
"31cz1",
"31an2",
"31bn1",
"31ez1",
"31dn2",
"31cn2",
"31dz1",
"31cn1",
"31en1",
"31cz2",
"31en2",
"31gn2",
"31ez2",
"31fz1",
"31dz2",
"31fn1",
"31gz1",
"32an1",
"31gn1",
"31fn2",
"31fz2",
"32an2",
"32az1",
"31hz2",
"32az2",
"32bn2",
"31hn1",
"31hz1",
"32cz1",
"31gz2",
"32bn1",
"32cn1",
"31hn2",
"32dn2",
"32cn2",
"32cz2",
"32dz1",
"32bz2",
"32hn1",
"32fn1",
"32bz1",
"32fn2",
"32hn2",
"32en1",
"32fz1",
"32dz2",
"32gn2",
"32fz2",
"32ez1",
"32dn1",
"32gz2",
"32en2",
"32ez2",
"32hz1",
"32hz2",
"32gn1",
"33cn1",
"33bn1",
"33bz2",
"33en1",
"33az1",
"33cn2",
"32gz1",
"33dn2",
"33an1",
"33an2",
"33az2",
"33ez2",
"33cz1",
"33bz1",
"33dz2",
"33en2",
"33bn2",
"33dn1",
"34an1",
"34az1",
"33fz1",
"33gn1",
"33fz2",
"33fn1",
"33gn2",
"33fn2",
"33dz1",
"33ez1",
"33gz2",
"33cz2",
"34an2",
"33gz1",
"34az2",
"33hn1",
"33hz2",
"34bn2",
"33hz1",
"33hn2",
"34fz1",
"34bn1",
"34cn2",
"34dn1",
"34bz1",
"34cn1",
"34dz1",
"34dn2",
"34ez1",
"34bz2",
"34ez2",
"34cz2",
"34dz2",
"34en1",
"34en2",
"34fn2",
"34fn1",
"34gz1",
"34gn2",
"34gn1",
"34cz1",
"35an2",
"36fz2",
"34fz2",
"37az2",
"34hn2",
"37an2",
"35an1",
"37an1",
"34gz2",
"34hn1",
"37bn1",
"37cn2",
"37bz1",
"35az1",
"37az1",
"37bn2",
"36hn2",
"37cn1",
"36fn2",
"37cz1",
"37en1",
"37bz2",
"37cz2",
"37dz2",
"37dz1",
"37dn2",
"37gz1",
"37dn1",
"37fn2",
"37gn2",
"37ez1",
"37fz1",
"37fn1",
"37en2",
"37fz2",
"37ez2",
"37hz2",
"37hz1",
"37gz2",
"37hn1",
"38cz1",
"37gn1",
"37hn2",
"38bz2",
"38bn1",
"38bn2",
"38an2",
"38az1",
"38cn1",
"38az2",
"38bz1",
"38an1",
"38cz2",
"38cn2",
"38dz1",
"38dn2",
"38en2",
"38ez2",
"38dz2",
"38ez1",
"38en1",
"38fz2",
"38dn1",
"38hz1",
"38gn2",
"38fn2",
"38fz1",
"38hn2",
"38fn1",
"39az1",
"38gz2",
"39an1",
"39bn2",
"38hn1",
"38gz1",
"39az2",
"39bn1",
"39bz2",
"39cz2",
"38hz2",
"39cn2",
"38gn1",
"39ez1",
"39an2",
"39dn2",
"39bz1",
"39dn1",
"39dz1",
"39cn1",
"39dz2",
"39cz1",
"39fn2",
"39en1",
"39ez2",
"39en2",
"39gn1",
"39fn1",
"39hz1",
"39fz2",
"40an2",
"39fz1",
"39hn1",
"40an1",
"39gn2",
"39gz1",
"40az1",
"39hn2",
"39gz2",
"40bz2",
"39hz2",
"40cn1",
"40bn2",
"40bn1",
"40bz1",
"40az2",
"40cz1",
"40dz2",
"40cn2",
"40dz1",
"40dn1",
"40cz2",
"40fn2",
"40ez2",
"40dn2",
"40en2",
"40en1",
"40fn1",
"40ez1",
"40gn1",
"40hn1",
"40fz2",
"40gz1",
"40gz2",
"41an1",
"40gn2",
"40fz1",
"40hz2",
"41az1",
"41bz2",
"40hn2",
"41bn1",
"41bz1",
"41az2",
"41dn1",
"41an2",
"41cz2",
"41dn2",
"41cn2",
"41cn1",
"41dz1",
"41cz1",
"41gn1",
"41fz1",
"41ez1",
"41en1",
"43az2",
"41en2",
"41fn1",
"41ez2",
"41bn2",
"43az1",
"43an1",
"43cn1",
"43dn2",
"43dn1",
"43bz2",
"43bn1",
"41gn2",
"43cz1",
"43en1",
"43ez2",
"41hn1",
"43en2",
"43an2",
"43hn2",
"43cz2",
"43ez1",
"43bz1",
"43bn2",
"43hn1",
"43dz1",
"43hz2",
"43fn1",
"43fz1",
"43dz2",
"44an1",
"44an2",
"43hz1",
"44cn1",
"43cn2",
"43gn2",
"43gz1",
"43fn2",
"44az2",
"43gn1",
"44bn2",
"44dn2",
"43gz2",
"44bz2",
"44bn1",
"44bz1",
"43fz2",
"44az1",
"44dn1",
"44dz2",
"44cz1",
"44cn2",
"44dz1",
"44ez2",
"44cz2",
"44en1",
"44fn2",
"44hn2",
"44fz2",
"44gn1",
"45an1",
"44hn1",
"44gz1",
"44hz1",
"44fn1",
"44fz1",
"44ez1",
"45an2",
"44en2",
"44gn2",
"45bz2",
"45bn2",
"45az1",
"45dz2",
"45cz2",
"45en2",
"45az2",
"45en1",
"45dz1",
"45dn2",
"45bz1",
"45dn1",
"44gz2",
"45fn1",
"44hz2",
"45cz1",
"45cn1",
"45cn2",
"45ez2",
"45gn1",
"45fz2",
"45fz1",
"45bn1",
"45ez1",
"45hn1",
"45fn2",
"45gn2",
"45hz2",
"46bn2",
"46an1",
"45hz1",
"45gz1",
"45hn2",
"46cz1",
"45gz2",
"46bz2",
"46an2",
"46cz2",
"46dz2",
"46bz1",
"49an1",
"46dz1",
"46dn2",
"46cn2",
"46ez1",
"46bn1",
"46az2",
"46cn1",
"46az1",
"46gn2",
"49az1",
"49bn2",
"49cn1",
"49cn2",
"46gn1",
"46gz1",
"46gz2",
"49dn2",
"49bz1",
"49cz1",
"49bz2",
"46dn1",
"49dz1",
"49bn1",
"49az2",
"49cz2",
"49ez1",
"49an2",
"49fz1",
"49fn2",
"49hn1",
"49en1",
"49dn1",
"49en2",
"49dz2",
"49gn1",
"49fn1",
"50cn1",
"50bz1",
"50bn2",
"49hn2",
"49ez2",
"50an2",
"50az2",
"49gn2",
"50az1",
"50an1",
"50bn1",
"49gz2",
"50ez1",
"49gz1",
"50dn2",
"50bz2",
"50fz2",
"50cn2",
"49fz2",
"50dz1",
"50gn2",
"50en2",
"50dz2",
"50gz2",
"50fz1",
"50en1",
"50fn2",
"50dn1",
"51bn1",
"50gz1",
"51an2",
"50ez2",
"50hn1",
"50hz2",
"50hn2",
"50fn1",
"51dn1",
"51az2",
"51cn2",
"50gn1",
"50hz1",
"51az1",
"51cn1",
"51bn2",
"51cz1",
"51dz2",
"51an1",
"51bz1",
"51en1",
"51fn1",
"51dn2",
"51dz1",
"51cz2",
"51bz2",
"51ez1",
"51gn2",
"51hn2",
"51en2",
"51fz1",
"51fn2",
"51hz2",
"51hn1",
"51ez2",
"51gz2",
"51gz1",
"52bz1",
"52an1",
"51fz2",
"51gn1",
"52bn2",
"51hz1",
"52bn1",
"52cn2",
"52cn1",
"52an2",
"52cz2",
"52en2",
"52az1",
"52cz1",
"52dn2",
"52gz1",
"52dz2",
"52ez1",
"52gn1",
"52dn1",
"52en1",
"52az2",
"52dz1",
"55an2",
"55an1",
"52fz1",
"52gn2",
"52hz1",
"52bz2",
"52ez2",
"55az1",
"55bz1",
"52gz2",
"52fn1",
"55az2",
"55cn1",
"57fn2",
"57bz1",
"57en2",
"57en1",
"55bn1",
"55en2",
"52hn1",
"57an1",
"57az2",
"57bn1",
"57an2",
"57bz2",
"57hn2",
"56fn2",
"55en1",
"57fn1",
"57ez1",
"57hz1",
"57az1",
"57bn2",
"58az1",
"57gn2",
"58bn2",
"58dz2",
"58az2",
"58an1",
"58an2",
"58en2",
"58dn2",
"58en1",
"58dz1",
"57fz1",
"58cz1",
"57hz2",
"58cn2",
"58bz1",
"58bn1",
"57fz2",
"58cz2",
"58ez2",
"57hn1",
"58bz2",
"58gn1",
"58gn2",
"57ez2",
"58cn1",
"64gz2",
"58ez1",
"58hz1",
"58fn1",
"58gz2",
"64gn2",
"65an2",
"64fn2",
"64fz1",
"64ez2",
"64en2",
"64fz2",
"58dn1",
"64dz2",
"58gz1",
"64dn2",
"65az1",
"64hz1",
"65bn1",
"65bz2",
"64gn1",
"64hn1",
"65bz1",
"64fn1",
"64gz1",
"64hz2",
"65cz2",
"65cn1",
"65en2",
"65cn2",
"65az2",
"64hn2",
"65ez1",
"65cz1",
"65ez2",
"65bn2",
"65dn2",
"65dz2",
"65an1",
"65fn2",
"65fz1",
"65dz1",
"65fn1",
"66fn1",
"65fz2",
"65dn1",
"65gn1",
"66fz2",
"65en1",
"65gz1",
"65hn2",
"66fn2",
"65gz2",
"65hz1",
"67az2",
"67bn2",
"65hn1",
"65gn2",
"66hn2",
"67bz2",
"67an1",
"65hz2",
"67bn1",
"67az1",
"67dn1",
"66fz1",
"67en1",
"67bz1",
"67dn2",
"67an2",
"67ez1",
"67gn2",
"67en2",
"66hn1",
"68bn2",
"67fn1",
"67cn1",
"67hn2",
"67fz2",
"67fn2",
"67hz1",
"67gn1",
"67gz2",
"68dn1",
"67gz1",
"67cn2",
"68bn1",
"67ez2",
"68cn2",
"68bz1",
"67fz1",
"68dn2",
"68ez1",
"68cz2",
"68fn2",
"67hn1",
"68en2",
"68dz1",
"67hz2",
"68en1",
"68bz2",
"68gn2",
"68gn1",
"68dz2",
"69dn1",
"68ez2",
"69an2",
"69bz1",
"68gz2",
"68gz1",
"68fn1",
"69an1",
"69en1",
"69az1",
"69az2",
"69ez1",
"68hz1",
"69bn1",
"69fn1",
"69gn2",
"69gn1",
"69bn2",
"69ez2",
"69hn1",
"69bz2",
"69dn2",
"70fz2",
"69fz1",
"69cn2",
"69en2"]


PCKaartbladen = []

def is_point_in_polycurve(point: Point2D, polycurve: PolyCurve2D) -> bool:
    x, y = point.x, point.y
    intersections = 0
    for curve in polycurve.curves:
        p1, p2 = curve.start, curve.end
        if (y > min(p1.y, p2.y)) and (y <= max(p1.y, p2.y)) and (x <= max(p1.x, p2.x)):
            if p1.y != p2.y:
                x_inters = (y - p1.y) * (p2.x - p1.x) / (p2.y - p1.y) + p1.x
                if (p1.x == p2.x) or (x <= x_inters):
                    intersections += 1
    return intersections % 2 != 0

def kaartbladnummer(RdX,RdY):
    #geeft als resultaat het kaartbladnummer die voor de 3D Kadaster basisvoorziening o.a. gebruikt wordt
    orig = Point2D(RdX,RdY)
    kaartbladen = []
    for i,k in zip(lstkaartbladenpolygons,lstkaartbladennummers):
        pnts = []
        for j in i:
            pnts.append(Point2D(j[0],j[1]))
        pc = PolyCurve2D().by_points(pnts)
        res = is_point_in_polycurve(orig,pc)
        if res is True:
            kaartbladen.append(k)
    return kaartbladen

def kaartbladenBbox(Bbox:GisRectBoundingBox):
    kaartbladencodes = []
    pnts = [[Bbox.XLeft,Bbox.YBottom],
    [Bbox.XRight, Bbox.YBottom],
    [Bbox.XRight, Bbox.YTop],
    [Bbox.XLeft, Bbox.YTop]]

    for i in pnts:
        kaartbladencodes.append(kaartbladnummer(i[0],i[1]))
    res_list = []
    for item in kaartbladencodes:
        if item not in res_list:
            res_list.append(item)

    return res_list

maximumLoD = 2.2

def translateVertex(vertices, index, transform,projectLocation,scaleFactor):
    vertex = list(vertices[index])
    if len(transform.get('scale', [])) == 3 and len(transform.get('translate', [])) == 3:
        vertex[0] = round(
            ((vertex[0] * transform['scale'][0]) + transform['translate'][0] - projectLocation[0]) * scaleFactor)
        vertex[1] = round(
            ((vertex[1] * transform['scale'][1]) + transform['translate'][1] - projectLocation[1]) * scaleFactor)
        vertex[2] = round(
            ((vertex[2] * transform['scale'][2]) + transform['translate'][2] - projectLocation[2]) * scaleFactor)
    else:
        vertex[0] = round((vertex[0] - projectLocation[0]) * scaleFactor)
        vertex[1] = round((vertex[1] - projectLocation[1]) * scaleFactor)
        vertex[2] = round((vertex[2] - projectLocation[2]) * scaleFactor)
    return vertex

def sitsInsideBBox(vertex,transformedBBox):
    if len(transformedBBox) == 4:
        return transformedBBox[0] < vertex[0] < transformedBBox[2] and transformedBBox[1] < vertex[1] < transformedBBox[
            3]
    else:
        return True

def parseGeometry(projectLocation, scaleFactor,transformedBBox,geometries, vertices, decompressionTransform, filterBBox=True, cutGeometries=False,
                  includeHoles=False):
    outVolBoundary = []
    insideBBox = False
    # Find highest lod
    targetLoD = 0;
    targetGeoIndex = -1;
    for index, geometry in enumerate(geometries):
        geoLoD = float(geometry['lod'])
        if targetLoD < geoLoD and geoLoD <= maximumLoD:
            targetLoD = geoLoD
            targetGeoIndex = index

    if targetGeoIndex > -1:
        selectedGeometry = geometries[targetGeoIndex]
        if selectedGeometry['type'] == 'Solid':
            # TODO: Only supports whole solids atm. Inner shells would be defined in following indices
            for faceBoundaries in selectedGeometry['boundaries'][0]:
                boundaryInsideBBox = False
                outSrfBoundary = []
                # If Holes are included they are returned as consecutive arrays in the surface boundary.
                if includeHoles:
                    for boundary in faceBoundaries:
                        outPolyBoundary = []
                        for vertexIndex in boundary:
                            vertex = translateVertex(vertices, vertexIndex, decompressionTransform,projectLocation,scaleFactor)
                            outPolyBoundary.append(vertex)
                            if sitsInsideBBox(vertex,transformedBBox):
                                insideBBox = True
                                boundaryInsideBBox = True
                        outSrfBoundary.append(outPolyBoundary)
                else:
                    for vertexIndex in faceBoundaries[0]:
                        vertex = translateVertex(vertices, vertexIndex, decompressionTransform,projectLocation,scaleFactor)
                        outSrfBoundary.append(vertex)
                        if sitsInsideBBox(vertex,transformedBBox):
                            insideBBox = True
                            boundaryInsideBBox = True
                if boundaryInsideBBox or not cutGeometries:
                    outVolBoundary.append(outSrfBoundary)
        if selectedGeometry['type'] == 'MultiSurface':
            for faceBoundaries in selectedGeometry['boundaries']:
                boundaryInsideBBox = False
                outSrfBoundary = []
                # If Holes are included they are returned as consecutive arrays in the surface boundary.
                if includeHoles:
                    for boundary in faceBoundaries:
                        outPolyBoundary = []
                        for vertexIndex in boundary:
                            vertex = translateVertex(vertices, vertexIndex, decompressionTransform,projectLocation,scaleFactor)
                            outPolyBoundary.append(vertex)
                            if sitsInsideBBox(vertex,transformedBBox):
                                insideBBox = True
                                boundaryInsideBBox = True
                        outSrfBoundary.append(outPolyBoundary)
                else:
                    for vertexIndex in faceBoundaries[0]:
                        vertex = translateVertex(vertices, vertexIndex, decompressionTransform,projectLocation,scaleFactor)
                        outSrfBoundary.append(vertex)
                        if sitsInsideBBox(vertex,transformedBBox):
                            insideBBox = True
                            boundaryInsideBBox = True
                if boundaryInsideBBox or not cutGeometries:
                    outVolBoundary.append(outSrfBoundary)

        if insideBBox or not filterBBox:
            return outVolBoundary
        else:
            return None
    else:
        return None

def parseAttributes(attributes, objectKey):
    availableKeys = attributes.keys()
    result = {}

    # The id might not always be the objecyKey but for the BAG files it seems to be the most reliable
    result['cadastre_id'] = objectKey

    # Attributes can be different from file to file: update/extend if-checks to adjust to new ones
    if 'bouwjaar' in availableKeys:
        result['year_of_construction'] = int(attributes['bouwjaar'])
    if 'oorspronkelijkbouwjaar' in availableKeys:
        result['year_of_construction'] = int(attributes['oorspronkelijkbouwjaar'])
    if 'status' in availableKeys:
        result['usage_status'] = attributes['status']
    if 'pandstatus' in availableKeys:
        result['usage_status'] = attributes['pandstatus']

    return result

def cityJSONParser(filePaths, GISBbox, maximumLoD):
    # START PARSING
    bbox = GISBbox.boundingBoxXY
    RdX = GISBbox.origX
    RdY = GISBbox.origY
    projectLocation = [RdX, RdY, 0]
    scaleFactor = 1000

    transformedBBox = [
        (bbox[0] - projectLocation[0]) * scaleFactor,
        (bbox[1] - projectLocation[1]) * scaleFactor,
        (bbox[2] - projectLocation[0]) * scaleFactor,
        (bbox[3] - projectLocation[1]) * scaleFactor
    ] if len(bbox) == 4 else []

    if type(filePaths) != list:
        filePaths = [filePaths]

    print('BBOX', transformedBBox)

    buildings = []
    bridges = []
    roads = []
    railways = []
    landuses = []
    plantcovers = []
    waterways = []
    waterbodies = []
    generics = []
    reliefs = []

    decompressionTransform = {}

    # Open and Parse JSON file(s)

    for filePath in filePaths:
        with open(filePath, 'rb') as f:

            # Step 1: Read Metadata and Transform (if available)

            transformParser = ijson.kvitems(f, 'transform', use_float=True)
            for k, v in transformParser:
                decompressionTransform[k] = v

            # print('Transform', decompressionTransform)

            # also possible to read out: referenceSystem/EPSG, thematicModels (occuring cityObject types), ...
            # metadataParser = ijson.kvitems(f, 'metadata')
            # f.seek(0)

            # Reset File Cursor Between parses:
            f.seek(0)

            # Step 2: Read Vertices
            vertices = list(ijson.items(f, 'vertices'))[0]

            # Reset File Cursor Between parses:
            f.seek(0)

            # Step 3: Read CityObjects and extract and decompress (transform & translate) coordinate, filter LOD and BBox
            cityObjectsParser = ijson.kvitems(f, 'CityObjects')

            waitingBuildings = {}
            waitingBuildingParts = {}

            for k, v in cityObjectsParser:
                if v['type'] == 'Building':
                    geometries = []
                    attributes = {}
                    missingChildren = []
                    if 'children' in v.keys():
                        for child in v['children']:
                            if child in waitingBuildingParts.keys():
                                part = waitingBuildingParts.pop(child)
                                geometries += part['geometry']
                                attributes = {**attributes, **parseAttributes(part['attributes'], child)}
                            else:
                                missingChildren.append(child)

                    geometries += v['geometry']
                    attributes = {**attributes, **parseAttributes(v['attributes'], k)}

                    if len(missingChildren) == 0:
                        # building complete: parse complete geometry
                        geometry = parseGeometry(projectLocation, scaleFactor,transformedBBox, geometries, vertices, decompressionTransform, True, False, True)

                        if geometry is not None:
                            buildings.append({
                                'geometry': geometry,
                                'attributes': attributes
                            })
                    else:
                        waitingBuildings[k] = {
                            'geometries': geometries,
                            'attributes': attributes,
                            'missingChildren': missingChildren
                        }

                if v['type'] == 'BuildingPart':
                    # TODO: Support multiple parents??
                    parentId = v['parents'][0]
                    if parentId in waitingBuildings.keys():
                        building = waitingBuildings[parentId]
                        building['geometries'] += v['geometry']
                        building['attributes'] = {**building['attributes'], **parseAttributes(v['attributes'], k)}

                        building['missingChildren'].remove(k)

                        if len(building['missingChildren']) == 0:
                            # building complete: parse complete geometry
                            geometry = parseGeometry(projectLocation, scaleFactor,transformedBBox,geometries, vertices, decompressionTransform, True, False, True)

                            if geometry is not None:
                                buildings.append({
                                    'geometry': geometry,
                                    'attributes': attributes
                                })

                        else:
                            waitingBuildingParts[k] = {
                                'geometry': geometry,
                                'attributes': attributes
                            }

                if v['type'] == 'Bridge':
                    geometry = parseGeometry(projectLocation, scaleFactor,transformedBBox,v['geometry'], vertices, decompressionTransform)
                    if geometry is not None:
                        bridges.append(geometry)
                if v['type'] == 'Road':
                    geometry = parseGeometry(projectLocation, scaleFactor,transformedBBox,v['geometry'], vertices, decompressionTransform, True, True)
                    if geometry is not None:
                        roads.append(geometry)
                if v['type'] == 'Railway':
                    geometry = parseGeometry(projectLocation, scaleFactor,transformedBBox,v['geometry'], vertices, decompressionTransform, True, True)
                    if geometry is not None:
                        railways.append(geometry)
                if v['type'] == 'LandUse':
                    geometry = parseGeometry(projectLocation, scaleFactor,transformedBBox,v['geometry'], vertices, decompressionTransform, True, True)
                    if geometry is not None:
                        landuses.append(geometry)
                if v['type'] == 'PlantCover':
                    geometry = parseGeometry(projectLocation, scaleFactor,transformedBBox,v['geometry'], vertices, decompressionTransform, True, True)
                    if geometry is not None:
                        plantcovers.append(geometry)
                if v['type'] == 'Waterway':
                    geometry = parseGeometry(projectLocation, scaleFactor,transformedBBox,v['geometry'], vertices, decompressionTransform, True, True)
                    if geometry is not None:
                        waterways.append(geometry)
                if v['type'] == 'WaterBody':
                    geometry = parseGeometry(projectLocation, scaleFactor,transformedBBox,v['geometry'], vertices, decompressionTransform, True, True)
                    if geometry is not None:
                        waterbodies.append(geometry)
                if v['type'] == 'GenericCityObject':
                    geometry = parseGeometry(projectLocation, scaleFactor,transformedBBox,v['geometry'], vertices, decompressionTransform)
                    if geometry is not None:
                        generics.append(geometry)
                if v['type'] == 'TINRelief':
                    geometry = parseGeometry(projectLocation, scaleFactor,transformedBBox,v['geometry'], vertices, decompressionTransform, True, True)
                    if geometry is not None:
                        reliefs.append(geometry)

    # DEBUG and TIMING
    end = time.time()
    print('Found',
        len(buildings), 'buildings,',
        len(bridges), 'bridges,',
        len(roads), 'roads,',
        len(railways), 'railways,',
        len(landuses), 'landuse items,',
        len(plantcovers), 'plant cover items,',
        len(waterways), 'waterways,',
        len(waterbodies), 'water bodies,',
        len(generics), 'other items and',
        len(reliefs), 'TIN reliefs.'
    )
    # Object Types in Example
    # Building
    # Bridge
    # Road
    # GenericCityObject
    # LandUse
    # PlantCover
    # WaterBody
    # see here for full schema: https://3d.bk.tudelft.nl/schemas/cityjson/1.1.3/cityobjects.schema.json

    return buildings, bridges, roads, railways, landuses, plantcovers, waterways, waterbodies, generics, reliefs

def cityJSONParserBAG3D(jsonFile, dX, dY, LODnumber, bboxWidth, bboxHeight):
    # Fast but incomplete parser. Used for import of BAG3D
    #dX = m, #dY = m bboxWidth is M
    data = json.load(open(jsonFile, ))
    vert = data['vertices']
    cityobj = data['CityObjects']
    translate = data['transform']['translate']
    scaleX = data['transform']['scale'][0]
    scaleY = data['transform']['scale'][1]
    scaleZ = data['transform']['scale'][2]
    translatex = (translate[0] - float(dX)) / scaleX #mm
    translatey = (translate[1] - float(dY)) / scaleY #mm
    translatez = translate[2] / scaleZ

    meshes = []
    metadata = []
    for i in cityobj:
        cityobj = []
        objName = i
        try:
            for j in data['CityObjects'][objName]['geometry'][2]['boundaries'][0]:
                a = 0
        except:
            continue
        name = data['CityObjects'][objName]['parents'][0]
        metadata.append(name)
        for j in data['CityObjects'][objName]['geometry'][2]['boundaries'][0]:
            #print(j)
            for jj in j:
                facets = []
                #print(jj) #All the indices of the verts in a face
                for k in jj:
                    #print(k) #This is the index of the vert
                    x = math.floor(vert[k][0] + translatex)
                    y = math.floor(vert[k][1] + translatey)
                    z = math.floor(vert[k][2] + translatez)
                    coord = [x,y]
                    facets.append([x,y,z])


                cityobj.append(facets)
        if checkIfCoordIsInsideBoundingBox(coord, -500 * float(bboxWidth), -500 * float(bboxHeight),
                                           500 * float(bboxWidth), 500 * float(bboxHeight)):
            #print("true")
            meshes.append(cityobj)
    return meshes, metadata


# example is the copy of a parsed cityjson file of 3D basis. This can be used for testing purposes without the need
# to parse the files of 1 GB.



# input = "28992"
inputChars = (
'2000' ,
'2001' ,
'2002' ,
'2003' ,
'2004' ,
'2005' ,
'2006' ,
'2007' ,
'2008' ,
'2009' ,
'2010' ,
'2011' ,
'2012' ,
'2013' ,
'2014' ,
'2015' ,
'2016' ,
'2017' ,
'2018' ,
'2019' ,
'2020' ,
'2021' ,
'2022' ,
'2023' ,
'2024' ,
'2025' ,
'2026' ,
'2027' ,
'2028' ,
'2029' ,
'2030' ,
'2031' ,
'2032' ,
'2033' ,
'2034' ,
'2035' ,
'2036' ,
'2037' ,
'2038' ,
'2039' ,
'2040' ,
'2041' ,
'2042' ,
'2043' ,
'2044' ,
'2045' ,
'2046' ,
'2047' ,
'2048' ,
'2049' ,
'2050' ,
'2051' ,
'2052' ,
'2053' ,
'2054' ,
'2055' ,
'2056' ,
'2057' ,
'2058' ,
'2059' ,
'2060' ,
'2061' ,
'2062' ,
'2063' ,
'2064' ,
'2065' ,
'2066' ,
'2067' ,
'2068' ,
'2069' ,
'2070' ,
'2071' ,
'2072' ,
'2073' ,
'2074' ,
'2075' ,
'2076' ,
'2077' ,
'2078' ,
'2079' ,
'2080' ,
'2081' ,
'2082' ,
'2083' ,
'2084' ,
'2085' ,
'2086' ,
'2087' ,
'2088' ,
'2089' ,
'2090' ,
'2091' ,
'2092' ,
'2093' ,
'2094' ,
'2095' ,
'2096' ,
'2097' ,
'2098' ,
'2099' ,
'2100' ,
'2101' ,
'2102' ,
'2103' ,
'2104' ,
'2105' ,
'2106' ,
'2107' ,
'2108' ,
'2109' ,
'2110' ,
'2111' ,
'2112' ,
'2113' ,
'2114' ,
'2115' ,
'2116' ,
'2117' ,
'2118' ,
'2119' ,
'2120' ,
'2121' ,
'2122' ,
'2123' ,
'2124' ,
'2125' ,
'2126' ,
'2127' ,
'2128' ,
'2129' ,
'2130' ,
'2131' ,
'2132' ,
'2133' ,
'2134' ,
'2135' ,
'2136' ,
'2137' ,
'2138' ,
'2139' ,
'2140' ,
'2141' ,
'2142' ,
'2143' ,
'2144' ,
'2145' ,
'2146' ,
'2147' ,
'2148' ,
'2149' ,
'2150' ,
'2151' ,
'2152' ,
'2153' ,
'2154' ,
'2155' ,
'2156' ,
'2157' ,
'2158' ,
'2159' ,
'2160' ,
'2161' ,
'2162' ,
'2163' ,
'2164' ,
'2165' ,
'2166' ,
'2167' ,
'2168' ,
'2169' ,
'2170' ,
'2171' ,
'2172' ,
'2173' ,
'2174' ,
'2175' ,
'2176' ,
'2177' ,
'2178' ,
'2179' ,
'2180' ,
'2188' ,
'2189' ,
'2190' ,
'2191' ,
'2192' ,
'2193' ,
'2194' ,
'2195' ,
'2196' ,
'2197' ,
'2198' ,
'2199' ,
'2200' ,
'2201' ,
'2202' ,
'2203' ,
'2204' ,
'2205' ,
'2206' ,
'2207' ,
'2208' ,
'2209' ,
'2210' ,
'2211' ,
'2212' ,
'2213' ,
'2214' ,
'2215' ,
'2216' ,
'2217' ,
'2218' ,
'2219' ,
'2220' ,
'2221' ,
'2222' ,
'2223' ,
'2224' ,
'2225' ,
'2226' ,
'2227' ,
'2228' ,
'2229' ,
'2230' ,
'2231' ,
'2232' ,
'2233' ,
'2234' ,
'2235' ,
'2236' ,
'2237' ,
'2238' ,
'2239' ,
'2240' ,
'2241' ,
'2242' ,
'2243' ,
'2244' ,
'2245' ,
'2246' ,
'2247' ,
'2248' ,
'2249' ,
'2250' ,
'2251' ,
'2252' ,
'2253' ,
'2254' ,
'2255' ,
'2256' ,
'2257' ,
'2258' ,
'2259' ,
'2260' ,
'2261' ,
'2262' ,
'2263' ,
'2264' ,
'2265' ,
'2266' ,
'2267' ,
'2268' ,
'2269' ,
'2270' ,
'2271' ,
'2272' ,
'2273' ,
'2274' ,
'2275' ,
'2276' ,
'2277' ,
'2278' ,
'2279' ,
'2280' ,
'2281' ,
'2282' ,
'2283' ,
'2284' ,
'2285' ,
'2286' ,
'2287' ,
'2288' ,
'2289' ,
'2290' ,
'2291' ,
'2292' ,
'2294' ,
'2295' ,
'2296' ,
'2297' ,
'2298' ,
'2299' ,
'2300' ,
'2301' ,
'2302' ,
'2303' ,
'2304' ,
'2305' ,
'2306' ,
'2307' ,
'2308' ,
'2309' ,
'2310' ,
'2311' ,
'2312' ,
'2313' ,
'2314' ,
'2315' ,
'2316' ,
'2317' ,
'2318' ,
'2319' ,
'2320' ,
'2321' ,
'2322' ,
'2323' ,
'2324' ,
'2325' ,
'2326' ,
'2327' ,
'2328' ,
'2329' ,
'2330' ,
'2331' ,
'2332' ,
'2333' ,
'2334' ,
'2335' ,
'2336' ,
'2337' ,
'2338' ,
'2339' ,
'2340' ,
'2341' ,
'2342' ,
'2343' ,
'2344' ,
'2345' ,
'2346' ,
'2347' ,
'2348' ,
'2349' ,
'2350' ,
'2351' ,
'2352' ,
'2353' ,
'2354' ,
'2355' ,
'2356' ,
'2357' ,
'2358' ,
'2359' ,
'2360' ,
'2361' ,
'2362' ,
'2363' ,
'2364' ,
'2365' ,
'2366' ,
'2367' ,
'2368' ,
'2369' ,
'2370' ,
'2371' ,
'2372' ,
'2373' ,
'2374' ,
'2375' ,
'2376' ,
'2377' ,
'2378' ,
'2379' ,
'2380' ,
'2381' ,
'2382' ,
'2383' ,
'2384' ,
'2385' ,
'2386' ,
'2387' ,
'2388' ,
'2389' ,
'2390' ,
'2391' ,
'2392' ,
'2393' ,
'2394' ,
'2395' ,
'2396' ,
'2397' ,
'2398' ,
'2399' ,
'2400' ,
'2401' ,
'2402' ,
'2403' ,
'2404' ,
'2405' ,
'2406' ,
'2407' ,
'2408' ,
'2409' ,
'2410' ,
'2411' ,
'2412' ,
'2413' ,
'2414' ,
'2415' ,
'2416' ,
'2417' ,
'2418' ,
'2419' ,
'2420' ,
'2421' ,
'2422' ,
'2423' ,
'2424' ,
'2425' ,
'2426' ,
'2427' ,
'2428' ,
'2429' ,
'2430' ,
'2431' ,
'2432' ,
'2433' ,
'2434' ,
'2435' ,
'2436' ,
'2437' ,
'2438' ,
'2439' ,
'2440' ,
'2441' ,
'2442' ,
'2443' ,
'2444' ,
'2445' ,
'2446' ,
'2447' ,
'2448' ,
'2449' ,
'2450' ,
'2451' ,
'2452' ,
'2453' ,
'2454' ,
'2455' ,
'2456' ,
'2457' ,
'2458' ,
'2459' ,
'2460' ,
'2461' ,
'2462' ,
'2463' ,
'2464' ,
'2465' ,
'2466' ,
'2467' ,
'2468' ,
'2469' ,
'2470' ,
'2471' ,
'2472' ,
'2473' ,
'2474' ,
'2475' ,
'2476' ,
'2477' ,
'2478' ,
'2479' ,
'2480' ,
'2481' ,
'2482' ,
'2483' ,
'2484' ,
'2485' ,
'2486' ,
'2487' ,
'2488' ,
'2489' ,
'2490' ,
'2491' ,
'2492' ,
'2493' ,
'2494' ,
'2495' ,
'2496' ,
'2497' ,
'2498' ,
'2499' ,
'2500' ,
'2501' ,
'2502' ,
'2503' ,
'2504' ,
'2505' ,
'2506' ,
'2507' ,
'2508' ,
'2509' ,
'2510' ,
'2511' ,
'2512' ,
'2513' ,
'2514' ,
'2515' ,
'2516' ,
'2517' ,
'2518' ,
'2519' ,
'2520' ,
'2521' ,
'2522' ,
'2523' ,
'2524' ,
'2525' ,
'2526' ,
'2527' ,
'2528' ,
'2529' ,
'2530' ,
'2531' ,
'2532' ,
'2533' ,
'2534' ,
'2535' ,
'2536' ,
'2537' ,
'2538' ,
'2539' ,
'2540' ,
'2541' ,
'2542' ,
'2543' ,
'2544' ,
'2545' ,
'2546' ,
'2547' ,
'2548' ,
'2549' ,
'2550' ,
'2551' ,
'2552' ,
'2553' ,
'2554' ,
'2555' ,
'2556' ,
'2557' ,
'2558' ,
'2559' ,
'2560' ,
'2561' ,
'2562' ,
'2563' ,
'2564' ,
'2565' ,
'2566' ,
'2567' ,
'2568' ,
'2569' ,
'2570' ,
'2571' ,
'2572' ,
'2573' ,
'2574' ,
'2575' ,
'2576' ,
'2577' ,
'2578' ,
'2579' ,
'2580' ,
'2581' ,
'2582' ,
'2583' ,
'2584' ,
'2585' ,
'2586' ,
'2587' ,
'2588' ,
'2589' ,
'2590' ,
'2591' ,
'2592' ,
'2593' ,
'2594' ,
'2595' ,
'2596' ,
'2597' ,
'2598' ,
'2599' ,
'2600' ,
'2601' ,
'2602' ,
'2603' ,
'2604' ,
'2605' ,
'2606' ,
'2607' ,
'2608' ,
'2609' ,
'2610' ,
'2611' ,
'2612' ,
'2613' ,
'2614' ,
'2615' ,
'2616' ,
'2617' ,
'2618' ,
'2619' ,
'2620' ,
'2621' ,
'2622' ,
'2623' ,
'2624' ,
'2625' ,
'2626' ,
'2627' ,
'2628' ,
'2629' ,
'2630' ,
'2631' ,
'2632' ,
'2633' ,
'2634' ,
'2635' ,
'2636' ,
'2637' ,
'2638' ,
'2639' ,
'2640' ,
'2641' ,
'2642' ,
'2643' ,
'2644' ,
'2645' ,
'2646' ,
'2647' ,
'2648' ,
'2649' ,
'2650' ,
'2651' ,
'2652' ,
'2653' ,
'2654' ,
'2655' ,
'2656' ,
'2657' ,
'2658' ,
'2659' ,
'2660' ,
'2661' ,
'2662' ,
'2663' ,
'2664' ,
'2665' ,
'2666' ,
'2667' ,
'2668' ,
'2669' ,
'2670' ,
'2671' ,
'2672' ,
'2673' ,
'2674' ,
'2675' ,
'2676' ,
'2677' ,
'2678' ,
'2679' ,
'2680' ,
'2681' ,
'2682' ,
'2683' ,
'2684' ,
'2685' ,
'2686' ,
'2687' ,
'2688' ,
'2689' ,
'2690' ,
'2691' ,
'2692' ,
'2693' ,
'2694' ,
'2695' ,
'2696' ,
'2697' ,
'2698' ,
'2699' ,
'2700' ,
'2701' ,
'2702' ,
'2703' ,
'2704' ,
'2705' ,
'2706' ,
'2707' ,
'2708' ,
'2709' ,
'2710' ,
'2711' ,
'2712' ,
'2713' ,
'2714' ,
'2715' ,
'2716' ,
'2717' ,
'2718' ,
'2719' ,
'2720' ,
'2721' ,
'2722' ,
'2723' ,
'2724' ,
'2725' ,
'2726' ,
'2727' ,
'2728' ,
'2729' ,
'2730' ,
'2731' ,
'2732' ,
'2733' ,
'2734' ,
'2735' ,
'2736' ,
'2737' ,
'2738' ,
'2739' ,
'2740' ,
'2741' ,
'2742' ,
'2743' ,
'2744' ,
'2745' ,
'2746' ,
'2747' ,
'2748' ,
'2749' ,
'2750' ,
'2751' ,
'2752' ,
'2753' ,
'2754' ,
'2755' ,
'2756' ,
'2757' ,
'2758' ,
'2759' ,
'2760' ,
'2761' ,
'2762' ,
'2763' ,
'2764' ,
'2765' ,
'2766' ,
'2767' ,
'2768' ,
'2769' ,
'2770' ,
'2771' ,
'2772' ,
'2773' ,
'2774' ,
'2775' ,
'2776' ,
'2777' ,
'2778' ,
'2779' ,
'2780' ,
'2781' ,
'2782' ,
'2783' ,
'2784' ,
'2785' ,
'2786' ,
'2787' ,
'2788' ,
'2789' ,
'2790' ,
'2791' ,
'2792' ,
'2793' ,
'2794' ,
'2795' ,
'2796' ,
'2797' ,
'2798' ,
'2799' ,
'2800' ,
'2801' ,
'2802' ,
'2803' ,
'2804' ,
'2805' ,
'2806' ,
'2807' ,
'2808' ,
'2809' ,
'2810' ,
'2811' ,
'2812' ,
'2813' ,
'2814' ,
'2815' ,
'2816' ,
'2817' ,
'2818' ,
'2819' ,
'2820' ,
'2821' ,
'2822' ,
'2823' ,
'2824' ,
'2825' ,
'2826' ,
'2827' ,
'2828' ,
'2829' ,
'2830' ,
'2831' ,
'2832' ,
'2833' ,
'2834' ,
'2835' ,
'2836' ,
'2837' ,
'2838' ,
'2839' ,
'2840' ,
'2841' ,
'2842' ,
'2843' ,
'2844' ,
'2845' ,
'2846' ,
'2847' ,
'2848' ,
'2849' ,
'2850' ,
'2851' ,
'2852' ,
'2853' ,
'2854' ,
'2855' ,
'2856' ,
'2857' ,
'2858' ,
'2859' ,
'2860' ,
'2861' ,
'2862' ,
'2863' ,
'2864' ,
'2865' ,
'2866' ,
'2867' ,
'2868' ,
'2869' ,
'2870' ,
'2871' ,
'2872' ,
'2873' ,
'2874' ,
'2875' ,
'2876' ,
'2877' ,
'2878' ,
'2879' ,
'2880' ,
'2881' ,
'2882' ,
'2883' ,
'2884' ,
'2885' ,
'2886' ,
'2887' ,
'2888' ,
'2889' ,
'2890' ,
'2891' ,
'2892' ,
'2893' ,
'2894' ,
'2895' ,
'2896' ,
'2897' ,
'2898' ,
'2899' ,
'2900' ,
'2901' ,
'2902' ,
'2903' ,
'2904' ,
'2905' ,
'2906' ,
'2907' ,
'2908' ,
'2909' ,
'2910' ,
'2911' ,
'2912' ,
'2913' ,
'2914' ,
'2915' ,
'2916' ,
'2917' ,
'2918' ,
'2919' ,
'2920' ,
'2921' ,
'2922' ,
'2923' ,
'2924' ,
'2925' ,
'2926' ,
'2927' ,
'2928' ,
'2929' ,
'2930' ,
'2931' ,
'2932' ,
'2933' ,
'2934' ,
'2935' ,
'2936' ,
'2937' ,
'2938' ,
'2939' ,
'2940' ,
'2941' ,
'2942' ,
'2943' ,
'2944' ,
'2945' ,
'2946' ,
'2947' ,
'2948' ,
'2949' ,
'2950' ,
'2951' ,
'2952' ,
'2953' ,
'2954' ,
'2955' ,
'2956' ,
'2957' ,
'2958' ,
'2959' ,
'2960' ,
'2961' ,
'2962' ,
'2963' ,
'2964' ,
'2965' ,
'2966' ,
'2967' ,
'2968' ,
'2969' ,
'2970' ,
'2971' ,
'2972' ,
'2973' ,
'2975' ,
'2976' ,
'2977' ,
'2978' ,
'2979' ,
'2980' ,
'2981' ,
'2982' ,
'2983' ,
'2984' ,
'2985' ,
'2986' ,
'2987' ,
'2988' ,
'2989' ,
'2990' ,
'2991' ,
'2992' ,
'2993' ,
'2994' ,
'2995' ,
'2996' ,
'2997' ,
'2998' ,
'2999' ,
'3000' ,
'3001' ,
'3002' ,
'3003' ,
'3004' ,
'3005' ,
'3006' ,
'3007' ,
'3008' ,
'3009' ,
'3010' ,
'3011' ,
'3012' ,
'3013' ,
'3014' ,
'3015' ,
'3016' ,
'3017' ,
'3018' ,
'3019' ,
'3020' ,
'3021' ,
'3022' ,
'3023' ,
'3024' ,
'3025' ,
'3026' ,
'3027' ,
'3028' ,
'3029' ,
'3030' ,
'3031' ,
'3032' ,
'3033' ,
'3034' ,
'3035' ,
'3036' ,
'3037' ,
'3038' ,
'3039' ,
'3040' ,
'3041' ,
'3042' ,
'3043' ,
'3044' ,
'3045' ,
'3046' ,
'3047' ,
'3048' ,
'3049' ,
'3050' ,
'3051' ,
'3052' ,
'3053' ,
'3054' ,
'3055' ,
'3056' ,
'3057' ,
'3058' ,
'3059' ,
'3060' ,
'3061' ,
'3062' ,
'3063' ,
'3064' ,
'3065' ,
'3066' ,
'3067' ,
'3068' ,
'3069' ,
'3070' ,
'3071' ,
'3072' ,
'3073' ,
'3074' ,
'3075' ,
'3076' ,
'3077' ,
'3078' ,
'3079' ,
'3080' ,
'3081' ,
'3082' ,
'3083' ,
'3084' ,
'3085' ,
'3086' ,
'3087' ,
'3088' ,
'3089' ,
'3090' ,
'3091' ,
'3092' ,
'3093' ,
'3094' ,
'3095' ,
'3096' ,
'3097' ,
'3098' ,
'3099' ,
'3100' ,
'3101' ,
'3102' ,
'3103' ,
'3104' ,
'3105' ,
'3106' ,
'3107' ,
'3108' ,
'3109' ,
'3110' ,
'3111' ,
'3112' ,
'3113' ,
'3114' ,
'3115' ,
'3116' ,
'3117' ,
'3118' ,
'3119' ,
'3120' ,
'3121' ,
'3122' ,
'3123' ,
'3124' ,
'3125' ,
'3126' ,
'3127' ,
'3128' ,
'3129' ,
'3130' ,
'3131' ,
'3132' ,
'3133' ,
'3134' ,
'3135' ,
'3136' ,
'3137' ,
'3138' ,
'3139' ,
'3140' ,
'3141' ,
'3142' ,
'3143' ,
'3144' ,
'3145' ,
'3146' ,
'3147' ,
'3148' ,
'3149' ,
'3150' ,
'3151' ,
'3152' ,
'3153' ,
'3154' ,
'3155' ,
'3156' ,
'3157' ,
'3158' ,
'3159' ,
'3160' ,
'3161' ,
'3162' ,
'3163' ,
'3164' ,
'3165' ,
'3166' ,
'3167' ,
'3168' ,
'3169' ,
'3170' ,
'3171' ,
'3172' ,
'3173' ,
'3174' ,
'3175' ,
'3176' ,
'3177' ,
'3178' ,
'3179' ,
'3180' ,
'3181' ,
'3182' ,
'3183' ,
'3184' ,
'3185' ,
'3186' ,
'3187' ,
'3188' ,
'3189' ,
'3190' ,
'3191' ,
'3192' ,
'3193' ,
'3194' ,
'3195' ,
'3196' ,
'3197' ,
'3198' ,
'3199' ,
'3200' ,
'3201' ,
'3202' ,
'3203' ,
'3204' ,
'3205' ,
'3206' ,
'3207' ,
'3208' ,
'3209' ,
'3210' ,
'3211' ,
'3212' ,
'3213' ,
'3214' ,
'3215' ,
'3216' ,
'3217' ,
'3218' ,
'3219' ,
'3220' ,
'3221' ,
'3222' ,
'3223' ,
'3224' ,
'3225' ,
'3226' ,
'3227' ,
'3228' ,
'3229' ,
'3230' ,
'3231' ,
'3232' ,
'3233' ,
'3234' ,
'3235' ,
'3236' ,
'3237' ,
'3238' ,
'3239' ,
'3240' ,
'3241' ,
'3242' ,
'3243' ,
'3244' ,
'3245' ,
'3246' ,
'3247' ,
'3248' ,
'3249' ,
'3250' ,
'3251' ,
'3252' ,
'3253' ,
'3254' ,
'3255' ,
'3256' ,
'3257' ,
'3258' ,
'3259' ,
'3260' ,
'3261' ,
'3262' ,
'3263' ,
'3264' ,
'3265' ,
'3266' ,
'3267' ,
'3268' ,
'3269' ,
'3270' ,
'3271' ,
'3272' ,
'3273' ,
'3274' ,
'3275' ,
'3276' ,
'3277' ,
'3278' ,
'3279' ,
'3280' ,
'3281' ,
'3282' ,
'3283' ,
'3284' ,
'3285' ,
'3286' ,
'3287' ,
'3288' ,
'3289' ,
'3290' ,
'3291' ,
'3292' ,
'3293' ,
'3294' ,
'3295' ,
'3296' ,
'3297' ,
'3298' ,
'3299' ,
'3300' ,
'3301' ,
'3302' ,
'3303' ,
'3304' ,
'3305' ,
'3306' ,
'3307' ,
'3308' ,
'3309' ,
'3310' ,
'3311' ,
'3312' ,
'3313' ,
'3314' ,
'3315' ,
'3316' ,
'3317' ,
'3318' ,
'3319' ,
'3320' ,
'3321' ,
'3322' ,
'3323' ,
'3324' ,
'3325' ,
'3326' ,
'3327' ,
'3328' ,
'3329' ,
'3330' ,
'3331' ,
'3332' ,
'3333' ,
'3334' ,
'3335' ,
'3336' ,
'3337' ,
'3338' ,
'3339' ,
'3340' ,
'3341' ,
'3342' ,
'3343' ,
'3344' ,
'3345' ,
'3346' ,
'3347' ,
'3348' ,
'3349' ,
'3350' ,
'3351' ,
'3352' ,
'3353' ,
'3354' ,
'3355' ,
'3356' ,
'3357' ,
'3358' ,
'3359' ,
'3360' ,
'3361' ,
'3362' ,
'3363' ,
'3364' ,
'3365' ,
'3366' ,
'3367' ,
'3368' ,
'3369' ,
'3370' ,
'3371' ,
'3372' ,
'3373' ,
'3374' ,
'3375' ,
'3376' ,
'3377' ,
'3378' ,
'3379' ,
'3380' ,
'3381' ,
'3382' ,
'3383' ,
'3384' ,
'3385' ,
'3386' ,
'3387' ,
'3388' ,
'3389' ,
'3390' ,
'3391' ,
'3392' ,
'3393' ,
'3394' ,
'3395' ,
'3396' ,
'3397' ,
'3398' ,
'3399' ,
'3400' ,
'3401' ,
'3402' ,
'3403' ,
'3404' ,
'3405' ,
'3406' ,
'3407' ,
'3408' ,
'3409' ,
'3410' ,
'3411' ,
'3412' ,
'3413' ,
'3414' ,
'3415' ,
'3416' ,
'3417' ,
'3418' ,
'3419' ,
'3420' ,
'3421' ,
'3422' ,
'3423' ,
'3424' ,
'3425' ,
'3426' ,
'3427' ,
'3428' ,
'3429' ,
'3430' ,
'3431' ,
'3432' ,
'3433' ,
'3434' ,
'3435' ,
'3436' ,
'3437' ,
'3438' ,
'3439' ,
'3440' ,
'3441' ,
'3442' ,
'3443' ,
'3444' ,
'3445' ,
'3446' ,
'3447' ,
'3448' ,
'3449' ,
'3450' ,
'3451' ,
'3452' ,
'3453' ,
'3454' ,
'3455' ,
'3456' ,
'3457' ,
'3458' ,
'3459' ,
'3460' ,
'3461' ,
'3462' ,
'3463' ,
'3464' ,
'3465' ,
'3466' ,
'3467' ,
'3468' ,
'3469' ,
'3470' ,
'3471' ,
'3472' ,
'3473' ,
'3474' ,
'3475' ,
'3476' ,
'3477' ,
'3478' ,
'3479' ,
'3480' ,
'3481' ,
'3482' ,
'3483' ,
'3484' ,
'3485' ,
'3486' ,
'3487' ,
'3488' ,
'3489' ,
'3490' ,
'3491' ,
'3492' ,
'3493' ,
'3494' ,
'3495' ,
'3496' ,
'3497' ,
'3498' ,
'3499' ,
'3500' ,
'3501' ,
'3502' ,
'3503' ,
'3504' ,
'3505' ,
'3506' ,
'3507' ,
'3508' ,
'3509' ,
'3510' ,
'3511' ,
'3512' ,
'3513' ,
'3514' ,
'3515' ,
'3516' ,
'3517' ,
'3518' ,
'3519' ,
'3520' ,
'3521' ,
'3522' ,
'3523' ,
'3524' ,
'3525' ,
'3526' ,
'3527' ,
'3528' ,
'3529' ,
'3530' ,
'3531' ,
'3532' ,
'3533' ,
'3534' ,
'3535' ,
'3536' ,
'3537' ,
'3538' ,
'3539' ,
'3540' ,
'3541' ,
'3542' ,
'3543' ,
'3544' ,
'3545' ,
'3546' ,
'3547' ,
'3548' ,
'3549' ,
'3550' ,
'3551' ,
'3552' ,
'3553' ,
'3554' ,
'3555' ,
'3556' ,
'3557' ,
'3558' ,
'3559' ,
'3560' ,
'3561' ,
'3562' ,
'3563' ,
'3564' ,
'3565' ,
'3566' ,
'3567' ,
'3568' ,
'3569' ,
'3570' ,
'3571' ,
'3572' ,
'3573' ,
'3574' ,
'3575' ,
'3576' ,
'3577' ,
'3578' ,
'3579' ,
'3580' ,
'3581' ,
'3582' ,
'3583' ,
'3584' ,
'3585' ,
'3586' ,
'3587' ,
'3588' ,
'3589' ,
'3590' ,
'3591' ,
'3592' ,
'3593' ,
'3594' ,
'3595' ,
'3596' ,
'3597' ,
'3598' ,
'3599' ,
'3600' ,
'3601' ,
'3602' ,
'3603' ,
'3604' ,
'3605' ,
'3606' ,
'3607' ,
'3608' ,
'3609' ,
'3610' ,
'3611' ,
'3612' ,
'3613' ,
'3614' ,
'3615' ,
'3616' ,
'3617' ,
'3618' ,
'3619' ,
'3620' ,
'3621' ,
'3622' ,
'3623' ,
'3624' ,
'3625' ,
'3626' ,
'3627' ,
'3628' ,
'3629' ,
'3630' ,
'3631' ,
'3632' ,
'3633' ,
'3634' ,
'3635' ,
'3636' ,
'3637' ,
'3638' ,
'3639' ,
'3640' ,
'3641' ,
'3642' ,
'3643' ,
'3644' ,
'3645' ,
'3646' ,
'3647' ,
'3648' ,
'3649' ,
'3650' ,
'3651' ,
'3652' ,
'3653' ,
'3654' ,
'3655' ,
'3656' ,
'3657' ,
'3658' ,
'3659' ,
'3660' ,
'3661' ,
'3662' ,
'3663' ,
'3664' ,
'3665' ,
'3666' ,
'3667' ,
'3668' ,
'3669' ,
'3670' ,
'3671' ,
'3672' ,
'3673' ,
'3674' ,
'3675' ,
'3676' ,
'3677' ,
'3678' ,
'3679' ,
'3680' ,
'3681' ,
'3682' ,
'3683' ,
'3684' ,
'3685' ,
'3686' ,
'3687' ,
'3688' ,
'3689' ,
'3690' ,
'3691' ,
'3692' ,
'3693' ,
'3694' ,
'3695' ,
'3696' ,
'3697' ,
'3698' ,
'3699' ,
'3700' ,
'3701' ,
'3702' ,
'3703' ,
'3704' ,
'3705' ,
'3706' ,
'3707' ,
'3708' ,
'3709' ,
'3710' ,
'3711' ,
'3712' ,
'3713' ,
'3714' ,
'3715' ,
'3716' ,
'3717' ,
'3718' ,
'3719' ,
'3720' ,
'3721' ,
'3722' ,
'3723' ,
'3724' ,
'3725' ,
'3726' ,
'3727' ,
'3728' ,
'3729' ,
'3730' ,
'3731' ,
'3732' ,
'3733' ,
'3734' ,
'3735' ,
'3736' ,
'3737' ,
'3738' ,
'3739' ,
'3740' ,
'3741' ,
'3742' ,
'3743' ,
'3744' ,
'3745' ,
'3746' ,
'3747' ,
'3748' ,
'3749' ,
'3750' ,
'3751' ,
'3752' ,
'3753' ,
'3754' ,
'3755' ,
'3756' ,
'3757' ,
'3758' ,
'3759' ,
'3760' ,
'3761' ,
'3762' ,
'3763' ,
'3764' ,
'3765' ,
'3766' ,
'3767' ,
'3768' ,
'3769' ,
'3770' ,
'3771' ,
'3772' ,
'3773' ,
'3774' ,
'3775' ,
'3776' ,
'3777' ,
'3778' ,
'3779' ,
'3780' ,
'3781' ,
'3782' ,
'3783' ,
'3784' ,
'3785' ,
'3786' ,
'3787' ,
'3788' ,
'3789' ,
'3790' ,
'3791' ,
'3793' ,
'3794' ,
'3795' ,
'3796' ,
'3797' ,
'3798' ,
'3799' ,
'3800' ,
'3801' ,
'3802' ,
'3812' ,
'3814' ,
'3815' ,
'3816' ,
'3819' ,
'3821' ,
'3822' ,
'3823' ,
'3824' ,
'3825' ,
'3826' ,
'3827' ,
'3828' ,
'3829' ,
'3832' ,
'3833' ,
'3834' ,
'3835' ,
'3836' ,
'3837' ,
'3838' ,
'3839' ,
'3840' ,
'3841' ,
'3842' ,
'3843' ,
'3844' ,
'3845' ,
'3846' ,
'3847' ,
'3848' ,
'3849' ,
'3850' ,
'3851' ,
'3852' ,
'3854' ,
'3855' ,
'3857' ,
'3873' ,
'3874' ,
'3875' ,
'3876' ,
'3877' ,
'3878' ,
'3879' ,
'3880' ,
'3881' ,
'3882' ,
'3883' ,
'3884' ,
'3885' ,
'3886' ,
'3887' ,
'3888' ,
'3889' ,
'3890' ,
'3891' ,
'3892' ,
'3893' ,
'3900' ,
'3901' ,
'3902' ,
'3903' ,
'3906' ,
'3907' ,
'3908' ,
'3909' ,
'3910' ,
'3911' ,
'3912' ,
'3920' ,
'3942' ,
'3943' ,
'3944' ,
'3945' ,
'3946' ,
'3947' ,
'3948' ,
'3949' ,
'3950' ,
'3968' ,
'3969' ,
'3970' ,
'3973' ,
'3974' ,
'3975' ,
'3976' ,
'3978' ,
'3979' ,
'3985' ,
'3986' ,
'3987' ,
'3988' ,
'3989' ,
'3991' ,
'3992' ,
'3993' ,
'3994' ,
'3995' ,
'3996' ,
'3997' ,
'4000' ,
'4001' ,
'4002' ,
'4003' ,
'4004' ,
'4005' ,
'4006' ,
'4007' ,
'4008' ,
'4009' ,
'4010' ,
'4011' ,
'4012' ,
'4013' ,
'4014' ,
'4015' ,
'4016' ,
'4017' ,
'4018' ,
'4019' ,
'4020' ,
'4021' ,
'4022' ,
'4023' ,
'4024' ,
'4025' ,
'4026' ,
'4027' ,
'4028' ,
'4029' ,
'4030' ,
'4031' ,
'4032' ,
'4033' ,
'4034' ,
'4035' ,
'4036' ,
'4037' ,
'4038' ,
'4039' ,
'4040' ,
'4041' ,
'4042' ,
'4043' ,
'4044' ,
'4045' ,
'4046' ,
'4047' ,
'4048' ,
'4049' ,
'4050' ,
'4051' ,
'4052' ,
'4053' ,
'4054' ,
'4055' ,
'4056' ,
'4057' ,
'4058' ,
'4059' ,
'4060' ,
'4061' ,
'4062' ,
'4063' ,
'4071' ,
'4073' ,
'4074' ,
'4075' ,
'4079' ,
'4080' ,
'4081' ,
'4082' ,
'4083' ,
'4087' ,
'4088' ,
'4093' ,
'4094' ,
'4095' ,
'4096' ,
'4097' ,
'4098' ,
'4099' ,
'4100' ,
'4120' ,
'4121' ,
'4122' ,
'4123' ,
'4124' ,
'4125' ,
'4126' ,
'4127' ,
'4128' ,
'4129' ,
'4130' ,
'4131' ,
'4132' ,
'4133' ,
'4134' ,
'4135' ,
'4136' ,
'4137' ,
'4138' ,
'4139' ,
'4140' ,
'4141' ,
'4142' ,
'4143' ,
'4144' ,
'4145' ,
'4146' ,
'4147' ,
'4148' ,
'4149' ,
'4150' ,
'4151' ,
'4152' ,
'4153' ,
'4154' ,
'4155' ,
'4156' ,
'4157' ,
'4158' ,
'4159' ,
'4160' ,
'4161' ,
'4162' ,
'4163' ,
'4164' ,
'4165' ,
'4166' ,
'4167' ,
'4168' ,
'4169' ,
'4170' ,
'4171' ,
'4172' ,
'4173' ,
'4174' ,
'4175' ,
'4176' ,
'4178' ,
'4179' ,
'4180' ,
'4181' ,
'4182' ,
'4183' ,
'4184' ,
'4185' ,
'4188' ,
'4189' ,
'4190' ,
'4191' ,
'4192' ,
'4193' ,
'4194' ,
'4195' ,
'4196' ,
'4197' ,
'4198' ,
'4199' ,
'4200' ,
'4201' ,
'4202' ,
'4203' ,
'4204' ,
'4205' ,
'4206' ,
'4207' ,
'4208' ,
'4209' ,
'4210' ,
'4211' ,
'4212' ,
'4213' ,
'4214' ,
'4215' ,
'4216' ,
'4217' ,
'4218' ,
'4219' ,
'4220' ,
'4221' ,
'4222' ,
'4223' ,
'4224' ,
'4225' ,
'4226' ,
'4227' ,
'4228' ,
'4229' ,
'4230' ,
'4231' ,
'4232' ,
'4233' ,
'4234' ,
'4235' ,
'4236' ,
'4237' ,
'4238' ,
'4239' ,
'4240' ,
'4241' ,
'4242' ,
'4243' ,
'4244' ,
'4245' ,
'4246' ,
'4247' ,
'4248' ,
'4249' ,
'4250' ,
'4251' ,
'4252' ,
'4253' ,
'4254' ,
'4255' ,
'4256' ,
'4257' ,
'4258' ,
'4259' ,
'4260' ,
'4261' ,
'4262' ,
'4263' ,
'4264' ,
'4265' ,
'4266' ,
'4267' ,
'4268' ,
'4269' ,
'4270' ,
'4271' ,
'4272' ,
'4273' ,
'4274' ,
'4275' ,
'4276' ,
'4277' ,
'4278' ,
'4279' ,
'4280' ,
'4281' ,
'4282' ,
'4283' ,
'4284' ,
'4285' ,
'4286' ,
'4287' ,
'4288' ,
'4289' ,
'4291' ,
'4292' ,
'4293' ,
'4294' ,
'4295' ,
'4296' ,
'4297' ,
'4298' ,
'4299' ,
'4300' ,
'4301' ,
'4302' ,
'4303' ,
'4304' ,
'4306' ,
'4307' ,
'4308' ,
'4309' ,
'4310' ,
'4311' ,
'4312' ,
'4313' ,
'4314' ,
'4315' ,
'4316' ,
'4317' ,
'4318' ,
'4319' ,
'4322' ,
'4324' ,
'4326' ,
'4327' ,
'4328' ,
'4329' ,
'4330' ,
'4331' ,
'4332' ,
'4333' ,
'4334' ,
'4335' ,
'4336' ,
'4337' ,
'4338' ,
'4339' ,
'4340' ,
'4341' ,
'4342' ,
'4343' ,
'4344' ,
'4345' ,
'4346' ,
'4347' ,
'4348' ,
'4349' ,
'4350' ,
'4351' ,
'4352' ,
'4353' ,
'4354' ,
'4355' ,
'4356' ,
'4357' ,
'4358' ,
'4359' ,
'4360' ,
'4361' ,
'4362' ,
'4363' ,
'4364' ,
'4365' ,
'4366' ,
'4367' ,
'4368' ,
'4369' ,
'4370' ,
'4371' ,
'4372' ,
'4373' ,
'4374' ,
'4375' ,
'4376' ,
'4377' ,
'4378' ,
'4379' ,
'4380' ,
'4381' ,
'4382' ,
'4383' ,
'4384' ,
'4385' ,
'4386' ,
'4387' ,
'4388' ,
'4389' ,
'4390' ,
'4391' ,
'4392' ,
'4393' ,
'4394' ,
'4395' ,
'4396' ,
'4397' ,
'4398' ,
'4399' ,
'4400' ,
'4401' ,
'4402' ,
'4403' ,
'4404' ,
'4405' ,
'4406' ,
'4407' ,
'4408' ,
'4409' ,
'4410' ,
'4411' ,
'4412' ,
'4413' ,
'4414' ,
'4415' ,
'4417' ,
'4418' ,
'4419' ,
'4420' ,
'4421' ,
'4422' ,
'4423' ,
'4424' ,
'4425' ,
'4426' ,
'4427' ,
'4428' ,
'4429' ,
'4430' ,
'4431' ,
'4432' ,
'4433' ,
'4434' ,
'4437' ,
'4438' ,
'4439' ,
'4440' ,
'4455' ,
'4456' ,
'4457' ,
'4458' ,
'4462' ,
'4463' ,
'4465' ,
'4466' ,
'4467' ,
'4468' ,
'4469' ,
'4470' ,
'4471' ,
'4472' ,
'4473' ,
'4474' ,
'4475' ,
'4479' ,
'4480' ,
'4481' ,
'4482' ,
'4483' ,
'4484' ,
'4485' ,
'4486' ,
'4487' ,
'4488' ,
'4489' ,
'4490' ,
'4491' ,
'4492' ,
'4493' ,
'4494' ,
'4495' ,
'4496' ,
'4497' ,
'4498' ,
'4499' ,
'4500' ,
'4501' ,
'4502' ,
'4503' ,
'4504' ,
'4505' ,
'4506' ,
'4507' ,
'4508' ,
'4509' ,
'4510' ,
'4511' ,
'4512' ,
'4513' ,
'4514' ,
'4515' ,
'4516' ,
'4517' ,
'4518' ,
'4519' ,
'4520' ,
'4521' ,
'4522' ,
'4523' ,
'4524' ,
'4525' ,
'4526' ,
'4527' ,
'4528' ,
'4529' ,
'4530' ,
'4531' ,
'4532' ,
'4533' ,
'4534' ,
'4535' ,
'4536' ,
'4537' ,
'4538' ,
'4539' ,
'4540' ,
'4541' ,
'4542' ,
'4543' ,
'4544' ,
'4545' ,
'4546' ,
'4547' ,
'4548' ,
'4549' ,
'4550' ,
'4551' ,
'4552' ,
'4553' ,
'4554' ,
'4555' ,
'4556' ,
'4557' ,
'4558' ,
'4559' ,
'4568' ,
'4569' ,
'4570' ,
'4571' ,
'4572' ,
'4573' ,
'4574' ,
'4575' ,
'4576' ,
'4577' ,
'4578' ,
'4579' ,
'4580' ,
'4581' ,
'4582' ,
'4583' ,
'4584' ,
'4585' ,
'4586' ,
'4587' ,
'4588' ,
'4589' ,
'4600' ,
'4601' ,
'4602' ,
'4603' ,
'4604' ,
'4605' ,
'4606' ,
'4607' ,
'4608' ,
'4609' ,
'4610' ,
'4611' ,
'4612' ,
'4613' ,
'4614' ,
'4615' ,
'4616' ,
'4617' ,
'4618' ,
'4619' ,
'4620' ,
'4621' ,
'4622' ,
'4623' ,
'4624' ,
'4625' ,
'4626' ,
'4627' ,
'4628' ,
'4629' ,
'4630' ,
'4631' ,
'4632' ,
'4633' ,
'4634' ,
'4635' ,
'4636' ,
'4637' ,
'4638' ,
'4639' ,
'4640' ,
'4641' ,
'4642' ,
'4643' ,
'4644' ,
'4645' ,
'4646' ,
'4647' ,
'4652' ,
'4653' ,
'4654' ,
'4655' ,
'4656' ,
'4657' ,
'4658' ,
'4659' ,
'4660' ,
'4661' ,
'4662' ,
'4663' ,
'4664' ,
'4665' ,
'4666' ,
'4667' ,
'4668' ,
'4669' ,
'4670' ,
'4671' ,
'4672' ,
'4673' ,
'4674' ,
'4675' ,
'4676' ,
'4677' ,
'4678' ,
'4679' ,
'4680' ,
'4681' ,
'4682' ,
'4683' ,
'4684' ,
'4685' ,
'4686' ,
'4687' ,
'4688' ,
'4689' ,
'4690' ,
'4691' ,
'4692' ,
'4693' ,
'4694' ,
'4695' ,
'4696' ,
'4697' ,
'4698' ,
'4699' ,
'4700' ,
'4701' ,
'4702' ,
'4703' ,
'4704' ,
'4705' ,
'4706' ,
'4707' ,
'4708' ,
'4709' ,
'4710' ,
'4711' ,
'4712' ,
'4713' ,
'4714' ,
'4715' ,
'4716' ,
'4717' ,
'4718' ,
'4719' ,
'4720' ,
'4721' ,
'4722' ,
'4723' ,
'4724' ,
'4725' ,
'4726' ,
'4727' ,
'4728' ,
'4729' ,
'4730' ,
'4731' ,
'4732' ,
'4733' ,
'4734' ,
'4735' ,
'4736' ,
'4737' ,
'4738' ,
'4739' ,
'4740' ,
'4741' ,
'4742' ,
'4743' ,
'4744' ,
'4745' ,
'4746' ,
'4747' ,
'4748' ,
'4749' ,
'4750' ,
'4751' ,
'4752' ,
'4753' ,
'4754' ,
'4755' ,
'4756' ,
'4757' ,
'4758' ,
'4759' ,
'4760' ,
'4761' ,
'4762' ,
'4763' ,
'4764' ,
'4765' ,
'4766' ,
'4767' ,
'4768' ,
'4769' ,
'4770' ,
'4771' ,
'4772' ,
'4773' ,
'4774' ,
'4775' ,
'4776' ,
'4777' ,
'4778' ,
'4779' ,
'4780' ,
'4781' ,
'4782' ,
'4783' ,
'4784' ,
'4785' ,
'4786' ,
'4787' ,
'4788' ,
'4789' ,
'4790' ,
'4791' ,
'4792' ,
'4793' ,
'4794' ,
'4795' ,
'4796' ,
'4797' ,
'4798' ,
'4799' ,
'4800' ,
'4801' ,
'4802' ,
'4803' ,
'4804' ,
'4805' ,
'4806' ,
'4807' ,
'4808' ,
'4809' ,
'4810' ,
'4811' ,
'4812' ,
'4813' ,
'4814' ,
'4815' ,
'4816' ,
'4817' ,
'4818' ,
'4819' ,
'4820' ,
'4821' ,
'4822' ,
'4823' ,
'4824' ,
'4826' ,
'4839' ,
'4855' ,
'4856' ,
'4857' ,
'4858' ,
'4859' ,
'4860' ,
'4861' ,
'4862' ,
'4863' ,
'4864' ,
'4865' ,
'4866' ,
'4867' ,
'4868' ,
'4869' ,
'4870' ,
'4871' ,
'4872' ,
'4873' ,
'4874' ,
'4875' ,
'4876' ,
'4877' ,
'4878' ,
'4879' ,
'4880' ,
'4882' ,
'4883' ,
'4884' ,
'4885' ,
'4886' ,
'4887' ,
'4888' ,
'4889' ,
'4890' ,
'4891' ,
'4892' ,
'4893' ,
'4894' ,
'4895' ,
'4896' ,
'4897' ,
'4898' ,
'4899' ,
'4900' ,
'4901' ,
'4902' ,
'4903' ,
'4904' ,
'4906' ,
'4907' ,
'4908' ,
'4909' ,
'4910' ,
'4911' ,
'4912' ,
'4913' ,
'4914' ,
'4915' ,
'4916' ,
'4917' ,
'4918' ,
'4919' ,
'4920' ,
'4921' ,
'4922' ,
'4923' ,
'4924' ,
'4925' ,
'4926' ,
'4927' ,
'4928' ,
'4929' ,
'4930' ,
'4931' ,
'4932' ,
'4933' ,
'4934' ,
'4935' ,
'4936' ,
'4937' ,
'4938' ,
'4939' ,
'4940' ,
'4941' ,
'4942' ,
'4943' ,
'4944' ,
'4945' ,
'4946' ,
'4947' ,
'4948' ,
'4949' ,
'4950' ,
'4951' ,
'4952' ,
'4953' ,
'4954' ,
'4955' ,
'4956' ,
'4957' ,
'4958' ,
'4959' ,
'4960' ,
'4961' ,
'4962' ,
'4963' ,
'4964' ,
'4965' ,
'4966' ,
'4967' ,
'4968' ,
'4969' ,
'4970' ,
'4971' ,
'4972' ,
'4973' ,
'4974' ,
'4975' ,
'4976' ,
'4977' ,
'4978' ,
'4979' ,
'4980' ,
'4981' ,
'4982' ,
'4983' ,
'4984' ,
'4985' ,
'4986' ,
'4987' ,
'4988' ,
'4989' ,
'4990' ,
'4991' ,
'4992' ,
'4993' ,
'4994' ,
'4995' ,
'4996' ,
'4997' ,
'4998' ,
'4999' ,
'5011' ,
'5012' ,
'5013' ,
'5014' ,
'5015' ,
'5016' ,
'5017' ,
'5018' ,
'5041' ,
'5042' ,
'5048' ,
'5069' ,
'5070' ,
'5071' ,
'5072' ,
'5105' ,
'5106' ,
'5107' ,
'5108' ,
'5109' ,
'5110' ,
'5111' ,
'5112' ,
'5113' ,
'5114' ,
'5115' ,
'5116' ,
'5117' ,
'5118' ,
'5119' ,
'5120' ,
'5121' ,
'5122' ,
'5123' ,
'5124' ,
'5125' ,
'5126' ,
'5127' ,
'5128' ,
'5129' ,
'5130' ,
'5132' ,
'5167' ,
'5168' ,
'5169' ,
'5170' ,
'5171' ,
'5172' ,
'5173' ,
'5174' ,
'5175' ,
'5176' ,
'5177' ,
'5178' ,
'5179' ,
'5180' ,
'5181' ,
'5182' ,
'5183' ,
'5184' ,
'5185' ,
'5186' ,
'5187' ,
'5188' ,
'5193' ,
'5195' ,
'5214' ,
'5221' ,
'5223' ,
'5224' ,
'5225' ,
'5228' ,
'5229' ,
'5233' ,
'5234' ,
'5235' ,
'5237' ,
'5243' ,
'5244' ,
'5245' ,
'5246' ,
'5247' ,
'5250' ,
'5251' ,
'5252' ,
'5253' ,
'5254' ,
'5255' ,
'5256' ,
'5257' ,
'5258' ,
'5259' ,
'5262' ,
'5263' ,
'5264' ,
'5266' ,
'5269' ,
'5270' ,
'5271' ,
'5272' ,
'5273' ,
'5274' ,
'5275' ,
'5292' ,
'5293' ,
'5294' ,
'5295' ,
'5296' ,
'5297' ,
'5298' ,
'5299' ,
'5300' ,
'5301' ,
'5302' ,
'5303' ,
'5304' ,
'5305' ,
'5306' ,
'5307' ,
'5308' ,
'5309' ,
'5310' ,
'5311' ,
'5316' ,
'5317' ,
'5318' ,
'5320' ,
'5321' ,
'5322' ,
'5323' ,
'5324' ,
'5325' ,
'5329' ,
'5330' ,
'5331' ,
'5332' ,
'5336' ,
'5337' ,
'5340' ,
'5341' ,
'5342' ,
'5343' ,
'5344' ,
'5345' ,
'5346' ,
'5347' ,
'5348' ,
'5349' ,
'5352' ,
'5353' ,
'5354' ,
'5355' ,
'5356' ,
'5357' ,
'5358' ,
'5359' ,
'5360' ,
'5361' ,
'5362' ,
'5363' ,
'5364' ,
'5365' ,
'5367' ,
'5368' ,
'5369' ,
'5370' ,
'5371' ,
'5372' ,
'5373' ,
'5379' ,
'5380' ,
'5381' ,
'5382' ,
'5383' ,
'5387' ,
'5388' ,
'5389' ,
'5391' ,
'5392' ,
'5393' ,
'5396' ,
'5451' ,
'5456' ,
'5457' ,
'5458' ,
'5459' ,
'5460' ,
'5461' ,
'5462' ,
'5463' ,
'5464' ,
'5466' ,
'5467' ,
'5469' ,
'5472' ,
'5479' ,
'5480' ,
'5481' ,
'5482' ,
'5487' ,
'5488' ,
'5489' ,
'5490' ,
'5498' ,
'5499' ,
'5500' ,
'5513' ,
'5514' ,
'5515' ,
'5516' ,
'5518' ,
'5519' ,
'5520' ,
'5523' ,
'5524' ,
'5527' ,
'5530' ,
'5531' ,
'5532' ,
'5533' ,
'5534' ,
'5535' ,
'5536' ,
'5537' ,
'5538' ,
'5539' ,
'5544' ,
'5545' ,
'5546' ,
'5550' ,
'5551' ,
'5552' ,
'5554' ,
'5555' ,
'5556' ,
'5558' ,
'5559' ,
'5560' ,
'5561' ,
'5562' ,
'5563' ,
'5564' ,
'5565' ,
'5566' ,
'5567' ,
'5568' ,
'5569' ,
'5570' ,
'5571' ,
'5572' ,
'5573' ,
'5574' ,
'5575' ,
'5576' ,
'5577' ,
'5578' ,
'5579' ,
'5580' ,
'5581' ,
'5582' ,
'5583' ,
'5588' ,
'5589' ,
'5591' ,
'5592' ,
'5593' ,
'5596' ,
'5597' ,
'5598' ,
'5600' ,
'5601' ,
'5602' ,
'5603' ,
'5604' ,
'5605' ,
'5606' ,
'5607' ,
'5608' ,
'5609' ,
'5610' ,
'5611' ,
'5612' ,
'5613' ,
'5614' ,
'5615' ,
'5616' ,
'5617' ,
'5618' ,
'5619' ,
'5620' ,
'5621' ,
'5623' ,
'5624' ,
'5625' ,
'5627' ,
'5628' ,
'5629' ,
'5631' ,
'5632' ,
'5633' ,
'5634' ,
'5635' ,
'5636' ,
'5637' ,
'5638' ,
'5639' ,
'5641' ,
'5643' ,
'5644' ,
'5646' ,
'5649' ,
'5650' ,
'5651' ,
'5652' ,
'5653' ,
'5654' ,
'5655' ,
'5659' ,
'5663' ,
'5664' ,
'5665' ,
'5666' ,
'5667' ,
'5668' ,
'5669' ,
'5670' ,
'5671' ,
'5672' ,
'5673' ,
'5674' ,
'5675' ,
'5676' ,
'5677' ,
'5678' ,
'5679' ,
'5680' ,
'5681' ,
'5682' ,
'5683' ,
'5684' ,
'5685' ,
'5698' ,
'5699' ,
'5700' ,
'5701' ,
'5702' ,
'5703' ,
'5704' ,
'5705' ,
'5706' ,
'5707' ,
'5708' ,
'5709' ,
'5710' ,
'5711' ,
'5712' ,
'5713' ,
'5714' ,
'5715' ,
'5716' ,
'5717' ,
'5718' ,
'5719' ,
'5720' ,
'5721' ,
'5722' ,
'5723' ,
'5724' ,
'5725' ,
'5726' ,
'5727' ,
'5728' ,
'5729' ,
'5730' ,
'5731' ,
'5732' ,
'5733' ,
'5734' ,
'5735' ,
'5736' ,
'5737' ,
'5738' ,
'5739' ,
'5740' ,
'5741' ,
'5742' ,
'5743' ,
'5744' ,
'5745' ,
'5746' ,
'5747' ,
'5748' ,
'5749' ,
'5750' ,
'5751' ,
'5752' ,
'5753' ,
'5754' ,
'5755' ,
'5756' ,
'5757' ,
'5758' ,
'5759' ,
'5760' ,
'5761' ,
'5762' ,
'5763' ,
'5764' ,
'5765' ,
'5766' ,
'5767' ,
'5768' ,
'5769' ,
'5770' ,
'5771' ,
'5772' ,
'5773' ,
'5774' ,
'5775' ,
'5776' ,
'5777' ,
'5778' ,
'5779' ,
'5780' ,
'5781' ,
'5782' ,
'5783' ,
'5784' ,
'5785' ,
'5786' ,
'5787' ,
'5788' ,
'5789' ,
'5790' ,
'5791' ,
'5792' ,
'5793' ,
'5794' ,
'5795' ,
'5796' ,
'5797' ,
'5798' ,
'5799' ,
'5800' ,
'5801' ,
'5802' ,
'5803' ,
'5804' ,
'5805' ,
'5806' ,
'5807' ,
'5808' ,
'5809' ,
'5810' ,
'5811' ,
'5812' ,
'5813' ,
'5814' ,
'5815' ,
'5816' ,
'5817' ,
'5818' ,
'5819' ,
'5820' ,
'5821' ,
'5825' ,
'5828' ,
'5829' ,
'5830' ,
'5831' ,
'5832' ,
'5833' ,
'5834' ,
'5835' ,
'5836' ,
'5837' ,
'5839' ,
'5842' ,
'5843' ,
'5844' ,
'5845' ,
'5846' ,
'5847' ,
'5848' ,
'5849' ,
'5850' ,
'5851' ,
'5852' ,
'5853' ,
'5854' ,
'5855' ,
'5856' ,
'5857' ,
'5858' ,
'5859' ,
'5861' ,
'5862' ,
'5863' ,
'5864' ,
'5865' ,
'5866' ,
'5867' ,
'5868' ,
'5869' ,
'5870' ,
'5871' ,
'5872' ,
'5873' ,
'5874' ,
'5875' ,
'5876' ,
'5877' ,
'5879' ,
'5880' ,
'5884' ,
'5885' ,
'5886' ,
'5887' ,
'5890' ,
'5921' ,
'5922' ,
'5923' ,
'5924' ,
'5925' ,
'5926' ,
'5927' ,
'5928' ,
'5929' ,
'5930' ,
'5931' ,
'5932' ,
'5933' ,
'5934' ,
'5935' ,
'5936' ,
'5937' ,
'5938' ,
'5939' ,
'5940' ,
'5941' ,
'5942' ,
'5945' ,
'5946' ,
'5947' ,
'5948' ,
'5949' ,
'5950' ,
'5951' ,
'5952' ,
'5953' ,
'5954' ,
'5955' ,
'5956' ,
'5957' ,
'5958' ,
'5959' ,
'5960' ,
'5961' ,
'5962' ,
'5963' ,
'5964' ,
'5965' ,
'5966' ,
'5967' ,
'5968' ,
'5969' ,
'5970' ,
'5971' ,
'5972' ,
'5973' ,
'5974' ,
'5975' ,
'5976' ,
'6050' ,
'6051' ,
'6052' ,
'6053' ,
'6054' ,
'6055' ,
'6056' ,
'6057' ,
'6058' ,
'6059' ,
'6060' ,
'6061' ,
'6062' ,
'6063' ,
'6064' ,
'6065' ,
'6066' ,
'6067' ,
'6068' ,
'6069' ,
'6070' ,
'6071' ,
'6072' ,
'6073' ,
'6074' ,
'6075' ,
'6076' ,
'6077' ,
'6078' ,
'6079' ,
'6080' ,
'6081' ,
'6082' ,
'6083' ,
'6084' ,
'6085' ,
'6086' ,
'6087' ,
'6088' ,
'6089' ,
'6090' ,
'6091' ,
'6092' ,
'6093' ,
'6094' ,
'6095' ,
'6096' ,
'6097' ,
'6098' ,
'6099' ,
'6100' ,
'6101' ,
'6102' ,
'6103' ,
'6104' ,
'6105' ,
'6106' ,
'6107' ,
'6108' ,
'6109' ,
'6110' ,
'6111' ,
'6112' ,
'6113' ,
'6114' ,
'6115' ,
'6116' ,
'6117' ,
'6118' ,
'6119' ,
'6120' ,
'6121' ,
'6122' ,
'6123' ,
'6124' ,
'6125' ,
'6128' ,
'6129' ,
'6130' ,
'6131' ,
'6132' ,
'6133' ,
'6134' ,
'6135' ,
'6141' ,
'6144' ,
'6145' ,
'6146' ,
'6147' ,
'6148' ,
'6149' ,
'6150' ,
'6151' ,
'6152' ,
'6153' ,
'6154' ,
'6155' ,
'6156' ,
'6157' ,
'6158' ,
'6159' ,
'6160' ,
'6161' ,
'6162' ,
'6163' ,
'6164' ,
'6165' ,
'6166' ,
'6167' ,
'6168' ,
'6169' ,
'6170' ,
'6171' ,
'6172' ,
'6173' ,
'6174' ,
'6175' ,
'6176' ,
'6178' ,
'6179' ,
'6180' ,
'6181' ,
'6182' ,
'6183' ,
'6184' ,
'6185' ,
'6186' ,
'6187' ,
'6190' ,
'6200' ,
'6201' ,
'6202' ,
'6204' ,
'6207' ,
'6210' ,
'6211' ,
'6244' ,
'6245' ,
'6246' ,
'6247' ,
'6248' ,
'6249' ,
'6250' ,
'6251' ,
'6252' ,
'6253' ,
'6254' ,
'6255' ,
'6256' ,
'6257' ,
'6258' ,
'6259' ,
'6260' ,
'6261' ,
'6262' ,
'6263' ,
'6264' ,
'6265' ,
'6266' ,
'6267' ,
'6268' ,
'6269' ,
'6270' ,
'6271' ,
'6272' ,
'6273' ,
'6274' ,
'6275' ,
'6307' ,
'6309' ,
'6310' ,
'6311' ,
'6312' ,
'6316' ,
'6317' ,
'6318' ,
'6319' ,
'6320' ,
'6321' ,
'6322' ,
'6323' ,
'6324' ,
'6325' ,
'6328' ,
'6329' ,
'6330' ,
'6331' ,
'6332' ,
'6333' ,
'6334' ,
'6335' ,
'6336' ,
'6337' ,
'6338' ,
'6339' ,
'6340' ,
'6341' ,
'6342' ,
'6343' ,
'6344' ,
'6345' ,
'6346' ,
'6347' ,
'6348' ,
'6349' ,
'6350' ,
'6351' ,
'6352' ,
'6353' ,
'6354' ,
'6355' ,
'6356' ,
'6357' ,
'6358' ,
'6359' ,
'6360' ,
'6362' ,
'6363' ,
'6364' ,
'6365' ,
'6366' ,
'6367' ,
'6368' ,
'6369' ,
'6370' ,
'6371' ,
'6372' ,
'6381' ,
'6382' ,
'6383' ,
'6384' ,
'6385' ,
'6386' ,
'6387' ,
'6391' ,
'6393' ,
'6394' ,
'6395' ,
'6396' ,
'6397' ,
'6398' ,
'6399' ,
'6400' ,
'6401' ,
'6402' ,
'6403' ,
'6404' ,
'6405' ,
'6406' ,
'6407' ,
'6408' ,
'6409' ,
'6410' ,
'6411' ,
'6412' ,
'6413' ,
'6414' ,
'6415' ,
'6416' ,
'6417' ,
'6418' ,
'6419' ,
'6420' ,
'6421' ,
'6422' ,
'6423' ,
'6424' ,
'6425' ,
'6426' ,
'6427' ,
'6428' ,
'6429' ,
'6430' ,
'6431' ,
'6432' ,
'6433' ,
'6434' ,
'6435' ,
'6436' ,
'6437' ,
'6438' ,
'6439' ,
'6440' ,
'6441' ,
'6442' ,
'6443' ,
'6444' ,
'6445' ,
'6446' ,
'6447' ,
'6448' ,
'6449' ,
'6450' ,
'6451' ,
'6452' ,
'6453' ,
'6454' ,
'6455' ,
'6456' ,
'6457' ,
'6458' ,
'6459' ,
'6460' ,
'6461' ,
'6462' ,
'6463' ,
'6464' ,
'6465' ,
'6466' ,
'6467' ,
'6468' ,
'6469' ,
'6470' ,
'6471' ,
'6472' ,
'6473' ,
'6474' ,
'6475' ,
'6476' ,
'6477' ,
'6478' ,
'6479' ,
'6480' ,
'6481' ,
'6482' ,
'6483' ,
'6484' ,
'6485' ,
'6486' ,
'6487' ,
'6488' ,
'6489' ,
'6490' ,
'6491' ,
'6492' ,
'6493' ,
'6494' ,
'6495' ,
'6496' ,
'6497' ,
'6498' ,
'6499' ,
'6500' ,
'6501' ,
'6502' ,
'6503' ,
'6504' ,
'6505' ,
'6506' ,
'6507' ,
'6508' ,
'6509' ,
'6510' ,
'6511' ,
'6512' ,
'6513' ,
'6514' ,
'6515' ,
'6516' ,
'6517' ,
'6518' ,
'6519' ,
'6520' ,
'6521' ,
'6522' ,
'6523' ,
'6524' ,
'6525' ,
'6526' ,
'6527' ,
'6528' ,
'6529' ,
'6530' ,
'6531' ,
'6532' ,
'6533' ,
'6534' ,
'6535' ,
'6536' ,
'6537' ,
'6538' ,
'6539' ,
'6540' ,
'6541' ,
'6542' ,
'6543' ,
'6544' ,
'6545' ,
'6546' ,
'6547' ,
'6548' ,
'6549' ,
'6550' ,
'6551' ,
'6552' ,
'6553' ,
'6554' ,
'6555' ,
'6556' ,
'6557' ,
'6558' ,
'6559' ,
'6560' ,
'6561' ,
'6562' ,
'6563' ,
'6564' ,
'6565' ,
'6566' ,
'6567' ,
'6568' ,
'6569' ,
'6570' ,
'6571' ,
'6572' ,
'6573' ,
'6574' ,
'6575' ,
'6576' ,
'6577' ,
'6578' ,
'6579' ,
'6580' ,
'6581' ,
'6582' ,
'6583' ,
'6584' ,
'6585' ,
'6586' ,
'6587' ,
'6588' ,
'6589' ,
'6590' ,
'6591' ,
'6592' ,
'6593' ,
'6594' ,
'6595' ,
'6596' ,
'6597' ,
'6598' ,
'6599' ,
'6600' ,
'6601' ,
'6602' ,
'6603' ,
'6604' ,
'6605' ,
'6606' ,
'6607' ,
'6608' ,
'6609' ,
'6610' ,
'6611' ,
'6612' ,
'6613' ,
'6614' ,
'6615' ,
'6616' ,
'6617' ,
'6618' ,
'6619' ,
'6620' ,
'6621' ,
'6622' ,
'6623' ,
'6624' ,
'6625' ,
'6626' ,
'6627' ,
'6628' ,
'6629' ,
'6630' ,
'6631' ,
'6632' ,
'6633' ,
'6634' ,
'6635' ,
'6636' ,
'6637' ,
'6638' ,
'6639' ,
'6640' ,
'6641' ,
'6642' ,
'6643' ,
'6644' ,
'6646' ,
'6647' ,
'6649' ,
'6650' ,
'6651' ,
'6652' ,
'6653' ,
'6654' ,
'6655' ,
'6656' ,
'6657' ,
'6658' ,
'6659' ,
'6660' ,
'6661' ,
'6662' ,
'6663' ,
'6664' ,
'6665' ,
'6666' ,
'6667' ,
'6668' ,
'6669' ,
'6670' ,
'6671' ,
'6672' ,
'6673' ,
'6674' ,
'6675' ,
'6676' ,
'6677' ,
'6678' ,
'6679' ,
'6680' ,
'6681' ,
'6682' ,
'6683' ,
'6684' ,
'6685' ,
'6686' ,
'6687' ,
'6688' ,
'6689' ,
'6690' ,
'6691' ,
'6692' ,
'6693' ,
'6694' ,
'6695' ,
'6696' ,
'6697' ,
'6700' ,
'6703' ,
'6704' ,
'6705' ,
'6706' ,
'6707' ,
'6708' ,
'6709' ,
'6715' ,
'6720' ,
'6721' ,
'6722' ,
'6723' ,
'6732' ,
'6733' ,
'6734' ,
'6735' ,
'6736' ,
'6737' ,
'6738' ,
'6781' ,
'6782' ,
'6783' ,
'6784' ,
'6785' ,
'6786' ,
'6787' ,
'6788' ,
'6789' ,
'6790' ,
'6791' ,
'6792' ,
'6793' ,
'6794' ,
'6795' ,
'6796' ,
'6797' ,
'6798' ,
'6799' ,
'6800' ,
'6801' ,
'6802' ,
'6803' ,
'6804' ,
'6805' ,
'6806' ,
'6807' ,
'6808' ,
'6809' ,
'6810' ,
'6811' ,
'6812' ,
'6813' ,
'6814' ,
'6815' ,
'6816' ,
'6817' ,
'6818' ,
'6819' ,
'6820' ,
'6821' ,
'6822' ,
'6823' ,
'6824' ,
'6825' ,
'6826' ,
'6827' ,
'6828' ,
'6829' ,
'6830' ,
'6831' ,
'6832' ,
'6833' ,
'6834' ,
'6835' ,
'6836' ,
'6837' ,
'6838' ,
'6839' ,
'6840' ,
'6841' ,
'6842' ,
'6843' ,
'6844' ,
'6845' ,
'6846' ,
'6847' ,
'6848' ,
'6849' ,
'6850' ,
'6851' ,
'6852' ,
'6853' ,
'6854' ,
'6855' ,
'6856' ,
'6857' ,
'6858' ,
'6859' ,
'6860' ,
'6861' ,
'6862' ,
'6863' ,
'6867' ,
'6868' ,
'6870' ,
'6871' ,
'6875' ,
'6876' ,
'6879' ,
'6880' ,
'6881' ,
'6882' ,
'6883' ,
'6884' ,
'6885' ,
'6886' ,
'6887' ,
'6892' ,
'6893' ,
'6894' ,
'6915' ,
'6916' ,
'6917' ,
'6922' ,
'6923' ,
'6924' ,
'6925' ,
'6927' ,
'6931' ,
'6932' ,
'6933' ,
'6934' ,
'6956' ,
'6957' ,
'6958' ,
'6959' ,
'6962' ,
'6966' ,
'6978' ,
'6979' ,
'6980' ,
'6981' ,
'6982' ,
'6983' ,
'6984' ,
'6985' ,
'6986' ,
'6987' ,
'6988' ,
'6989' ,
'6990' ,
'6991' ,
'6996' ,
'6997' ,
'7005' ,
'7006' ,
'7007' ,
'7034' ,
'7035' ,
'7036' ,
'7037' ,
'7038' ,
'7039' ,
'7040' ,
'7041' ,
'7042' ,
'7057' ,
'7058' ,
'7059' ,
'7060' ,
'7061' ,
'7062' ,
'7063' ,
'7064' ,
'7065' ,
'7066' ,
'7067' ,
'7068' ,
'7069' ,
'7070' ,
'7071' ,
'7072' ,
'7073' ,
'7074' ,
'7075' ,
'7076' ,
'7077' ,
'7078' ,
'7079' ,
'7080' ,
'7081' ,
'7082' ,
'7084' ,
'7085' ,
'7086' ,
'7087' ,
'7088' ,
'7109' ,
'7110' ,
'7111' ,
'7112' ,
'7113' ,
'7114' ,
'7115' ,
'7116' ,
'7117' ,
'7118' ,
'7119' ,
'7120' ,
'7121' ,
'7122' ,
'7123' ,
'7124' ,
'7125' ,
'7126' ,
'7127' ,
'7128' ,
'7131' ,
'7132' ,
'7133' ,
'7134' ,
'7135' ,
'7136' ,
'7137' ,
'7138' ,
'7139' ,
'7142' ,
'7257' ,
'7258' ,
'7259' ,
'7260' ,
'7261' ,
'7262' ,
'7263' ,
'7264' ,
'7265' ,
'7266' ,
'7267' ,
'7268' ,
'7269' ,
'7270' ,
'7271' ,
'7272' ,
'7273' ,
'7274' ,
'7275' ,
'7276' ,
'7277' ,
'7278' ,
'7279' ,
'7280' ,
'7281' ,
'7282' ,
'7283' ,
'7284' ,
'7285' ,
'7286' ,
'7287' ,
'7288' ,
'7289' ,
'7290' ,
'7291' ,
'7292' ,
'7293' ,
'7294' ,
'7295' ,
'7296' ,
'7297' ,
'7298' ,
'7299' ,
'7300' ,
'7301' ,
'7302' ,
'7303' ,
'7304' ,
'7305' ,
'7306' ,
'7307' ,
'7308' ,
'7309' ,
'7310' ,
'7311' ,
'7312' ,
'7313' ,
'7314' ,
'7315' ,
'7316' ,
'7317' ,
'7318' ,
'7319' ,
'7320' ,
'7321' ,
'7322' ,
'7323' ,
'7324' ,
'7325' ,
'7326' ,
'7327' ,
'7328' ,
'7329' ,
'7330' ,
'7331' ,
'7332' ,
'7333' ,
'7334' ,
'7335' ,
'7336' ,
'7337' ,
'7338' ,
'7339' ,
'7340' ,
'7341' ,
'7342' ,
'7343' ,
'7344' ,
'7345' ,
'7346' ,
'7347' ,
'7348' ,
'7349' ,
'7350' ,
'7351' ,
'7352' ,
'7353' ,
'7354' ,
'7355' ,
'7356' ,
'7357' ,
'7358' ,
'7359' ,
'7360' ,
'7361' ,
'7362' ,
'7363' ,
'7364' ,
'7365' ,
'7366' ,
'7367' ,
'7368' ,
'7369' ,
'7370' ,
'7371' ,
'7372' ,
'7373' ,
'7374' ,
'7375' ,
'7376' ,
'7400' ,
'7401' ,
'7402' ,
'7403' ,
'7404' ,
'7405' ,
'7406' ,
'7407' ,
'7408' ,
'7409' ,
'7410' ,
'7411' ,
'7412' ,
'7413' ,
'7414' ,
'7415' ,
'7416' ,
'7417' ,
'7418' ,
'7419' ,
'7420' ,
'7421' ,
'7422' ,
'7423' ,
'7446' ,
'7447' ,
'7528' ,
'7529' ,
'7530' ,
'7531' ,
'7532' ,
'7533' ,
'7534' ,
'7535' ,
'7536' ,
'7537' ,
'7538' ,
'7539' ,
'7540' ,
'7541' ,
'7542' ,
'7543' ,
'7544' ,
'7545' ,
'7546' ,
'7547' ,
'7548' ,
'7549' ,
'7550' ,
'7551' ,
'7552' ,
'7553' ,
'7554' ,
'7555' ,
'7556' ,
'7557' ,
'7558' ,
'7559' ,
'7560' ,
'7561' ,
'7562' ,
'7563' ,
'7564' ,
'7565' ,
'7566' ,
'7567' ,
'7568' ,
'7569' ,
'7570' ,
'7571' ,
'7572' ,
'7573' ,
'7574' ,
'7575' ,
'7576' ,
'7577' ,
'7578' ,
'7579' ,
'7580' ,
'7581' ,
'7582' ,
'7583' ,
'7584' ,
'7585' ,
'7586' ,
'7587' ,
'7588' ,
'7589' ,
'7590' ,
'7591' ,
'7592' ,
'7593' ,
'7594' ,
'7595' ,
'7596' ,
'7597' ,
'7598' ,
'7599' ,
'7600' ,
'7601' ,
'7602' ,
'7603' ,
'7604' ,
'7605' ,
'7606' ,
'7607' ,
'7608' ,
'7609' ,
'7610' ,
'7611' ,
'7612' ,
'7613' ,
'7614' ,
'7615' ,
'7616' ,
'7617' ,
'7618' ,
'7619' ,
'7620' ,
'7621' ,
'7622' ,
'7623' ,
'7624' ,
'7625' ,
'7626' ,
'7627' ,
'7628' ,
'7629' ,
'7630' ,
'7631' ,
'7632' ,
'7633' ,
'7634' ,
'7635' ,
'7636' ,
'7637' ,
'7638' ,
'7639' ,
'7640' ,
'7641' ,
'7642' ,
'7643' ,
'7644' ,
'7645' ,
'7651' ,
'7652' ,
'7656' ,
'7657' ,
'7658' ,
'7659' ,
'7660' ,
'7661' ,
'7662' ,
'7663' ,
'7664' ,
'7665' ,
'7677' ,
'7678' ,
'7679' ,
'7680' ,
'7681' ,
'7682' ,
'7683' ,
'7684' ,
'7685' ,
'7686' ,
'7692' ,
'7693' ,
'7694' ,
'7695' ,
'7696' ,
'7699' ,
'7700' ,
'7706' ,
'7707' ,
'7755' ,
'7756' ,
'7757' ,
'7758' ,
'7759' ,
'7760' ,
'7761' ,
'7762' ,
'7763' ,
'7764' ,
'7765' ,
'7766' ,
'7767' ,
'7768' ,
'7769' ,
'7770' ,
'7771' ,
'7772' ,
'7773' ,
'7774' ,
'7775' ,
'7776' ,
'7777' ,
'7778' ,
'7779' ,
'7780' ,
'7781' ,
'7782' ,
'7783' ,
'7784' ,
'7785' ,
'7786' ,
'7787' ,
'7789' ,
'7791' ,
'7792' ,
'7793' ,
'7794' ,
'7795' ,
'7796' ,
'7797' ,
'7798' ,
'7799' ,
'7800' ,
'7801' ,
'7803' ,
'7804' ,
'7805' ,
'7815' ,
'7816' ,
'7825' ,
'7826' ,
'7827' ,
'7828' ,
'7829' ,
'7830' ,
'7831' ,
'7832' ,
'7837' ,
'7839' ,
'7841' ,
'7842' ,
'7843' ,
'7844' ,
'7845' ,
'7846' ,
'7847' ,
'7848' ,
'7849' ,
'7850' ,
'7851' ,
'7852' ,
'7853' ,
'7854' ,
'7855' ,
'7856' ,
'7857' ,
'7858' ,
'7859' ,
'7877' ,
'7878' ,
'7879' ,
'7880' ,
'7881' ,
'7882' ,
'7883' ,
'7884' ,
'7885' ,
'7886' ,
'7887' ,
'7888' ,
'7889' ,
'7890' ,
'7899' ,
'7900' ,
'7901' ,
'7902' ,
'7903' ,
'7904' ,
'7905' ,
'7906' ,
'7907' ,
'7908' ,
'7909' ,
'7910' ,
'7911' ,
'7912' ,
'7914' ,
'7915' ,
'7916' ,
'7917' ,
'7918' ,
'7919' ,
'7920' ,
'7921' ,
'7922' ,
'7923' ,
'7924' ,
'7925' ,
'7926' ,
'7927' ,
'7928' ,
'7929' ,
'7930' ,
'7931' ,
'7954' ,
'7955' ,
'7956' ,
'7962' ,
'7968' ,
'7976' ,
'7979' ,
'7991' ,
'7992' ,
'8013' ,
'8014' ,
'8015' ,
'8016' ,
'8017' ,
'8018' ,
'8019' ,
'8020' ,
'8021' ,
'8022' ,
'8023' ,
'8024' ,
'8025' ,
'8026' ,
'8027' ,
'8028' ,
'8029' ,
'8030' ,
'8031' ,
'8032' ,
'8035' ,
'8036' ,
'8042' ,
'8043' ,
'8044' ,
'8045' ,
'8050' ,
'8051' ,
'8052' ,
'8053' ,
'8058' ,
'8059' ,
'8065' ,
'8066' ,
'8067' ,
'8068' ,
'8082' ,
'8083' ,
'8084' ,
'8085' ,
'8086' ,
'8088' ,
'8089' ,
'8090' ,
'8091' ,
'8092' ,
'8093' ,
'8095' ,
'8096' ,
'8097' ,
'8098' ,
'8099' ,
'8100' ,
'8101' ,
'8102' ,
'8103' ,
'8104' ,
'8105' ,
'8106' ,
'8107' ,
'8108' ,
'8109' ,
'8110' ,
'8111' ,
'8112' ,
'8113' ,
'8114' ,
'8115' ,
'8116' ,
'8117' ,
'8118' ,
'8119' ,
'8120' ,
'8121' ,
'8122' ,
'8123' ,
'8124' ,
'8125' ,
'8126' ,
'8127' ,
'8128' ,
'8129' ,
'8130' ,
'8131' ,
'8132' ,
'8133' ,
'8134' ,
'8135' ,
'8136' ,
'8137' ,
'8138' ,
'8139' ,
'8140' ,
'8141' ,
'8142' ,
'8143' ,
'8144' ,
'8145' ,
'8146' ,
'8147' ,
'8148' ,
'8149' ,
'8150' ,
'8151' ,
'8152' ,
'8153' ,
'8154' ,
'8155' ,
'8156' ,
'8157' ,
'8158' ,
'8159' ,
'8160' ,
'8161' ,
'8162' ,
'8163' ,
'8164' ,
'8165' ,
'8166' ,
'8167' ,
'8168' ,
'8169' ,
'8170' ,
'8171' ,
'8172' ,
'8173' ,
'8177' ,
'8179' ,
'8180' ,
'8181' ,
'8182' ,
'8184' ,
'8185' ,
'8187' ,
'8189' ,
'8191' ,
'8193' ,
'8196' ,
'8197' ,
'8198' ,
'8200' ,
'8201' ,
'8202' ,
'8203' ,
'8204' ,
'8205' ,
'8206' ,
'8207' ,
'8208' ,
'8209' ,
'8210' ,
'8212' ,
'8213' ,
'8214' ,
'8216' ,
'8218' ,
'8220' ,
'8222' ,
'8224' ,
'8225' ,
'8226' ,
'8227' ,
'8228' ,
'8230' ,
'8231' ,
'8232' ,
'8233' ,
'8235' ,
'8237' ,
'8238' ,
'8239' ,
'8240' ,
'8242' ,
'8244' ,
'8246' ,
'8247' ,
'8248' ,
'8249' ,
'8250' ,
'8251' ,
'8252' ,
'8253' ,
'8254' ,
'8255' ,
'8266' ,
'8267' ,
'8311' ,
'8312' ,
'8313' ,
'8314' ,
'8315' ,
'8316' ,
'8317' ,
'8318' ,
'8319' ,
'8320' ,
'8321' ,
'8322' ,
'8323' ,
'8324' ,
'8325' ,
'8326' ,
'8327' ,
'8328' ,
'8329' ,
'8330' ,
'8331' ,
'8332' ,
'8333' ,
'8334' ,
'8335' ,
'8336' ,
'8337' ,
'8338' ,
'8339' ,
'8340' ,
'8341' ,
'8342' ,
'8343' ,
'8344' ,
'8345' ,
'8346' ,
'8347' ,
'8348' ,
'8349' ,
'8350' ,
'20004' ,
'20005' ,
'20006' ,
'20007' ,
'20008' ,
'20009' ,
'20010' ,
'20011' ,
'20012' ,
'20013' ,
'20014' ,
'20015' ,
'20016' ,
'20017' ,
'20018' ,
'20019' ,
'20020' ,
'20021' ,
'20022' ,
'20023' ,
'20024' ,
'20025' ,
'20026' ,
'20027' ,
'20028' ,
'20029' ,
'20030' ,
'20031' ,
'20032' ,
'20064' ,
'20065' ,
'20066' ,
'20067' ,
'20068' ,
'20069' ,
'20070' ,
'20071' ,
'20072' ,
'20073' ,
'20074' ,
'20075' ,
'20076' ,
'20077' ,
'20078' ,
'20079' ,
'20080' ,
'20081' ,
'20082' ,
'20083' ,
'20084' ,
'20085' ,
'20086' ,
'20087' ,
'20088' ,
'20089' ,
'20090' ,
'20091' ,
'20092' ,
'20135' ,
'20136' ,
'20137' ,
'20138' ,
'20248' ,
'20249' ,
'20250' ,
'20251' ,
'20252' ,
'20253' ,
'20254' ,
'20255' ,
'20256' ,
'20257' ,
'20258' ,
'20348' ,
'20349' ,
'20350' ,
'20351' ,
'20352' ,
'20353' ,
'20354' ,
'20355' ,
'20356' ,
'20357' ,
'20358' ,
'20436' ,
'20437' ,
'20438' ,
'20439' ,
'20440' ,
'20499' ,
'20538' ,
'20539' ,
'20790' ,
'20791' ,
'20822' ,
'20823' ,
'20824' ,
'20934' ,
'20935' ,
'20936' ,
'21035' ,
'21036' ,
'21037' ,
'21095' ,
'21096' ,
'21097' ,
'21100' ,
'21148' ,
'21149' ,
'21150' ,
'21291' ,
'21292' ,
'21413' ,
'21414' ,
'21415' ,
'21416' ,
'21417' ,
'21418' ,
'21419' ,
'21420' ,
'21421' ,
'21422' ,
'21423' ,
'21453' ,
'21454' ,
'21455' ,
'21456' ,
'21457' ,
'21458' ,
'21459' ,
'21460' ,
'21461' ,
'21462' ,
'21463' ,
'21473' ,
'21474' ,
'21475' ,
'21476' ,
'21477' ,
'21478' ,
'21479' ,
'21480' ,
'21481' ,
'21482' ,
'21483' ,
'21500' ,
'21780' ,
'21781' ,
'21782' ,
'21817' ,
'21818' ,
'21891' ,
'21892' ,
'21893' ,
'21894' ,
'21896' ,
'21897' ,
'21898' ,
'21899' ,
'22032' ,
'22033' ,
'22091' ,
'22092' ,
'22171' ,
'22172' ,
'22173' ,
'22174' ,
'22175' ,
'22176' ,
'22177' ,
'22181' ,
'22182' ,
'22183' ,
'22184' ,
'22185' ,
'22186' ,
'22187' ,
'22191' ,
'22192' ,
'22193' ,
'22194' ,
'22195' ,
'22196' ,
'22197' ,
'22234' ,
'22235' ,
'22236' ,
'22275' ,
'22277' ,
'22279' ,
'22281' ,
'22283' ,
'22285' ,
'22287' ,
'22289' ,
'22291' ,
'22293' ,
'22300' ,
'22332' ,
'22391' ,
'22392' ,
'22521' ,
'22522' ,
'22523' ,
'22524' ,
'22525' ,
'22700' ,
'22770' ,
'22780' ,
'22832' ,
'22991' ,
'22992' ,
'22993' ,
'22994' ,
'23028' ,
'23029' ,
'23030' ,
'23031' ,
'23032' ,
'23033' ,
'23034' ,
'23035' ,
'23036' ,
'23037' ,
'23038' ,
'23090' ,
'23095' ,
'23239' ,
'23240' ,
'23433' ,
'23700' ,
'23830' ,
'23831' ,
'23832' ,
'23833' ,
'23834' ,
'23835' ,
'23836' ,
'23837' ,
'23838' ,
'23839' ,
'23840' ,
'23841' ,
'23842' ,
'23843' ,
'23844' ,
'23845' ,
'23846' ,
'23847' ,
'23848' ,
'23849' ,
'23850' ,
'23851' ,
'23852' ,
'23853' ,
'23866' ,
'23867' ,
'23868' ,
'23869' ,
'23870' ,
'23871' ,
'23872' ,
'23877' ,
'23878' ,
'23879' ,
'23880' ,
'23881' ,
'23882' ,
'23883' ,
'23884' ,
'23886' ,
'23887' ,
'23888' ,
'23889' ,
'23890' ,
'23891' ,
'23892' ,
'23893' ,
'23894' ,
'23946' ,
'23947' ,
'23948' ,
'24047' ,
'24048' ,
'24100' ,
'24200' ,
'24305' ,
'24306' ,
'24311' ,
'24312' ,
'24313' ,
'24342' ,
'24343' ,
'24344' ,
'24345' ,
'24346' ,
'24347' ,
'24370' ,
'24371' ,
'24372' ,
'24373' ,
'24374' ,
'24375' ,
'24376' ,
'24377' ,
'24378' ,
'24379' ,
'24380' ,
'24381' ,
'24382' ,
'24383' ,
'24500' ,
'24547' ,
'24548' ,
'24571' ,
'24600' ,
'24718' ,
'24719' ,
'24720' ,
'24817' ,
'24818' ,
'24819' ,
'24820' ,
'24821' ,
'24877' ,
'24878' ,
'24879' ,
'24880' ,
'24881' ,
'24882' ,
'24891' ,
'24892' ,
'24893' ,
'25000' ,
'25231' ,
'25391' ,
'25392' ,
'25393' ,
'25394' ,
'25395' ,
'25700' ,
'25828' ,
'25829' ,
'25830' ,
'25831' ,
'25832' ,
'25833' ,
'25834' ,
'25835' ,
'25836' ,
'25837' ,
'25838' ,
'25884' ,
'25932' ,
'26191' ,
'26192' ,
'26193' ,
'26194' ,
'26195' ,
'26237' ,
'26331' ,
'26332' ,
'26391' ,
'26392' ,
'26393' ,
'26432' ,
'26591' ,
'26592' ,
'26632' ,
'26692' ,
'26701' ,
'26702' ,
'26703' ,
'26704' ,
'26705' ,
'26706' ,
'26707' ,
'26708' ,
'26709' ,
'26710' ,
'26711' ,
'26712' ,
'26713' ,
'26714' ,
'26715' ,
'26716' ,
'26717' ,
'26718' ,
'26719' ,
'26720' ,
'26721' ,
'26722' ,
'26729' ,
'26730' ,
'26731' ,
'26732' ,
'26733' ,
'26734' ,
'26735' ,
'26736' ,
'26737' ,
'26738' ,
'26739' ,
'26740' ,
'26741' ,
'26742' ,
'26743' ,
'26744' ,
'26745' ,
'26746' ,
'26747' ,
'26748' ,
'26749' ,
'26750' ,
'26751' ,
'26752' ,
'26753' ,
'26754' ,
'26755' ,
'26756' ,
'26757' ,
'26758' ,
'26759' ,
'26760' ,
'26766' ,
'26767' ,
'26768' ,
'26769' ,
'26770' ,
'26771' ,
'26772' ,
'26773' ,
'26774' ,
'26775' ,
'26776' ,
'26777' ,
'26778' ,
'26779' ,
'26780' ,
'26781' ,
'26782' ,
'26783' ,
'26784' ,
'26785' ,
'26786' ,
'26787' ,
'26791' ,
'26792' ,
'26793' ,
'26794' ,
'26795' ,
'26796' ,
'26797' ,
'26798' ,
'26799' ,
'26801' ,
'26802' ,
'26803' ,
'26811' ,
'26812' ,
'26813' ,
'26814' ,
'26815' ,
'26819' ,
'26820' ,
'26821' ,
'26822' ,
'26823' ,
'26824' ,
'26825' ,
'26826' ,
'26830' ,
'26831' ,
'26832' ,
'26833' ,
'26834' ,
'26835' ,
'26836' ,
'26837' ,
'26841' ,
'26842' ,
'26843' ,
'26844' ,
'26845' ,
'26846' ,
'26847' ,
'26848' ,
'26849' ,
'26850' ,
'26851' ,
'26852' ,
'26853' ,
'26854' ,
'26855' ,
'26856' ,
'26857' ,
'26858' ,
'26859' ,
'26860' ,
'26861' ,
'26862' ,
'26863' ,
'26864' ,
'26865' ,
'26866' ,
'26867' ,
'26868' ,
'26869' ,
'26870' ,
'26891' ,
'26892' ,
'26893' ,
'26894' ,
'26895' ,
'26896' ,
'26897' ,
'26898' ,
'26899' ,
'26901' ,
'26902' ,
'26903' ,
'26904' ,
'26905' ,
'26906' ,
'26907' ,
'26908' ,
'26909' ,
'26910' ,
'26911' ,
'26912' ,
'26913' ,
'26914' ,
'26915' ,
'26916' ,
'26917' ,
'26918' ,
'26919' ,
'26920' ,
'26921' ,
'26922' ,
'26923' ,
'26929' ,
'26930' ,
'26931' ,
'26932' ,
'26933' ,
'26934' ,
'26935' ,
'26936' ,
'26937' ,
'26938' ,
'26939' ,
'26940' ,
'26941' ,
'26942' ,
'26943' ,
'26944' ,
'26945' ,
'26946' ,
'26948' ,
'26949' ,
'26950' ,
'26951' ,
'26952' ,
'26953' ,
'26954' ,
'26955' ,
'26956' ,
'26957' ,
'26958' ,
'26959' ,
'26960' ,
'26961' ,
'26962' ,
'26963' ,
'26964' ,
'26965' ,
'26966' ,
'26967' ,
'26968' ,
'26969' ,
'26970' ,
'26971' ,
'26972' ,
'26973' ,
'26974' ,
'26975' ,
'26976' ,
'26977' ,
'26978' ,
'26979' ,
'26980' ,
'26981' ,
'26982' ,
'26983' ,
'26984' ,
'26985' ,
'26986' ,
'26987' ,
'26988' ,
'26989' ,
'26990' ,
'26991' ,
'26992' ,
'26993' ,
'26994' ,
'26995' ,
'26996' ,
'26997' ,
'26998' ,
'27037' ,
'27038' ,
'27039' ,
'27040' ,
'27120' ,
'27200' ,
'27205' ,
'27206' ,
'27207' ,
'27208' ,
'27209' ,
'27210' ,
'27211' ,
'27212' ,
'27213' ,
'27214' ,
'27215' ,
'27216' ,
'27217' ,
'27218' ,
'27219' ,
'27220' ,
'27221' ,
'27222' ,
'27223' ,
'27224' ,
'27225' ,
'27226' ,
'27227' ,
'27228' ,
'27229' ,
'27230' ,
'27231' ,
'27232' ,
'27258' ,
'27259' ,
'27260' ,
'27291' ,
'27292' ,
'27391' ,
'27392' ,
'27393' ,
'27394' ,
'27395' ,
'27396' ,
'27397' ,
'27398' ,
'27429' ,
'27492' ,
'27493' ,
'27500' ,
'27561' ,
'27562' ,
'27563' ,
'27564' ,
'27571' ,
'27572' ,
'27573' ,
'27574' ,
'27581' ,
'27582' ,
'27583' ,
'27584' ,
'27591' ,
'27592' ,
'27593' ,
'27594' ,
'27700' ,
'28191' ,
'28192' ,
'28193' ,
'28232' ,
'28348' ,
'28349' ,
'28350' ,
'28351' ,
'28352' ,
'28353' ,
'28354' ,
'28355' ,
'28356' ,
'28357' ,
'28358' ,
'28402' ,
'28403' ,
'28404' ,
'28405' ,
'28406' ,
'28407' ,
'28408' ,
'28409' ,
'28410' ,
'28411' ,
'28412' ,
'28413' ,
'28414' ,
'28415' ,
'28416' ,
'28417' ,
'28418' ,
'28419' ,
'28420' ,
'28421' ,
'28422' ,
'28423' ,
'28424' ,
'28425' ,
'28426' ,
'28427' ,
'28428' ,
'28429' ,
'28430' ,
'28431' ,
'28432' ,
'28462' ,
'28463' ,
'28464' ,
'28465' ,
'28466' ,
'28467' ,
'28468' ,
'28469' ,
'28470' ,
'28471' ,
'28472' ,
'28473' ,
'28474' ,
'28475' ,
'28476' ,
'28477' ,
'28478' ,
'28479' ,
'28480' ,
'28481' ,
'28482' ,
'28483' ,
'28484' ,
'28485' ,
'28486' ,
'28487' ,
'28488' ,
'28489' ,
'28490' ,
'28491' ,
'28492' ,
'28600' ,
'28991' ,
'28992' ,
'29100' ,
'29101' ,
'29118' ,
'29119' ,
'29120' ,
'29121' ,
'29122' ,
'29168' ,
'29169' ,
'29170' ,
'29171' ,
'29172' ,
'29177' ,
'29178' ,
'29179' ,
'29180' ,
'29181' ,
'29182' ,
'29183' ,
'29184' ,
'29185' ,
'29187' ,
'29188' ,
'29189' ,
'29190' ,
'29191' ,
'29192' ,
'29193' ,
'29194' ,
'29195' ,
'29220' ,
'29221' ,
'29333' ,
'29371' ,
'29373' ,
'29375' ,
'29377' ,
'29379' ,
'29381' ,
'29383' ,
'29385' ,
'29635' ,
'29636' ,
'29700' ,
'29701' ,
'29702' ,
'29738' ,
'29739' ,
'29849' ,
'29850' ,
'29871' ,
'29872' ,
'29873' ,
'29900' ,
'29901' ,
'29902' ,
'29903' ,
'30161' ,
'30162' ,
'30163' ,
'30164' ,
'30165' ,
'30166' ,
'30167' ,
'30168' ,
'30169' ,
'30170' ,
'30171' ,
'30172' ,
'30173' ,
'30174' ,
'30175' ,
'30176' ,
'30177' ,
'30178' ,
'30179' ,
'30200' ,
'30339' ,
'30340' ,
'30491' ,
'30492' ,
'30493' ,
'30494' ,
'30729' ,
'30730' ,
'30731' ,
'30732' ,
'30791' ,
'30792' ,
'30800' ,
'31028' ,
'31121' ,
'31154' ,
'31170' ,
'31171' ,
'31251' ,
'31252' ,
'31253' ,
'31254' ,
'31255' ,
'31256' ,
'31257' ,
'31258' ,
'31259' ,
'31265' ,
'31266' ,
'31267' ,
'31268' ,
'31275' ,
'31276' ,
'31277' ,
'31278' ,
'31279' ,
'31281' ,
'31282' ,
'31283' ,
'31284' ,
'31285' ,
'31286' ,
'31287' ,
'31288' ,
'31289' ,
'31290' ,
'31291' ,
'31292' ,
'31293' ,
'31294' ,
'31295' ,
'31296' ,
'31297' ,
'31300' ,
'31370' ,
'31461' ,
'31462' ,
'31463' ,
'31464' ,
'31465' ,
'31466' ,
'31467' ,
'31468' ,
'31469' ,
'31528' ,
'31529' ,
'31600' ,
'31700' ,
'31838' ,
'31839' ,
'31900' ,
'31901' ,
'31965' ,
'31966' ,
'31967' ,
'31968' ,
'31969' ,
'31970' ,
'31971' ,
'31972' ,
'31973' ,
'31974' ,
'31975' ,
'31976' ,
'31977' ,
'31978' ,
'31979' ,
'31980' ,
'31981' ,
'31982' ,
'31983' ,
'31984' ,
'31985' ,
'31986' ,
'31987' ,
'31988' ,
'31989' ,
'31990' ,
'31991' ,
'31992' ,
'31993' ,
'31994' ,
'31995' ,
'31996' ,
'31997' ,
'31998' ,
'31999' ,
'32000' ,
'32001' ,
'32002' ,
'32003' ,
'32005' ,
'32006' ,
'32007' ,
'32008' ,
'32009' ,
'32010' ,
'32011' ,
'32012' ,
'32013' ,
'32014' ,
'32015' ,
'32016' ,
'32017' ,
'32018' ,
'32019' ,
'32020' ,
'32021' ,
'32022' ,
'32023' ,
'32024' ,
'32025' ,
'32026' ,
'32027' ,
'32028' ,
'32029' ,
'32030' ,
'32031' ,
'32033' ,
'32034' ,
'32035' ,
'32036' ,
'32037' ,
'32038' ,
'32039' ,
'32040' ,
'32041' ,
'32042' ,
'32043' ,
'32044' ,
'32045' ,
'32046' ,
'32047' ,
'32048' ,
'32049' ,
'32050' ,
'32051' ,
'32052' ,
'32053' ,
'32054' ,
'32055' ,
'32056' ,
'32057' ,
'32058' ,
'32061' ,
'32062' ,
'32064' ,
'32065' ,
'32066' ,
'32067' ,
'32074' ,
'32075' ,
'32076' ,
'32077' ,
'32081' ,
'32082' ,
'32083' ,
'32084' ,
'32085' ,
'32086' ,
'32098' ,
'32099' ,
'32100' ,
'32104' ,
'32107' ,
'32108' ,
'32109' ,
'32110' ,
'32111' ,
'32112' ,
'32113' ,
'32114' ,
'32115' ,
'32116' ,
'32117' ,
'32118' ,
'32119' ,
'32120' ,
'32121' ,
'32122' ,
'32123' ,
'32124' ,
'32125' ,
'32126' ,
'32127' ,
'32128' ,
'32129' ,
'32130' ,
'32133' ,
'32134' ,
'32135' ,
'32136' ,
'32137' ,
'32138' ,
'32139' ,
'32140' ,
'32141' ,
'32142' ,
'32143' ,
'32144' ,
'32145' ,
'32146' ,
'32147' ,
'32148' ,
'32149' ,
'32150' ,
'32151' ,
'32152' ,
'32153' ,
'32154' ,
'32155' ,
'32156' ,
'32157' ,
'32158' ,
'32161' ,
'32164' ,
'32165' ,
'32166' ,
'32167' ,
'32180' ,
'32181' ,
'32182' ,
'32183' ,
'32184' ,
'32185' ,
'32186' ,
'32187' ,
'32188' ,
'32189' ,
'32190' ,
'32191' ,
'32192' ,
'32193' ,
'32194' ,
'32195' ,
'32196' ,
'32197' ,
'32198' ,
'32199' ,
'32201' ,
'32202' ,
'32203' ,
'32204' ,
'32205' ,
'32206' ,
'32207' ,
'32208' ,
'32209' ,
'32210' ,
'32211' ,
'32212' ,
'32213' ,
'32214' ,
'32215' ,
'32216' ,
'32217' ,
'32218' ,
'32219' ,
'32220' ,
'32221' ,
'32222' ,
'32223' ,
'32224' ,
'32225' ,
'32226' ,
'32227' ,
'32228' ,
'32229' ,
'32230' ,
'32231' ,
'32232' ,
'32233' ,
'32234' ,
'32235' ,
'32236' ,
'32237' ,
'32238' ,
'32239' ,
'32240' ,
'32241' ,
'32242' ,
'32243' ,
'32244' ,
'32245' ,
'32246' ,
'32247' ,
'32248' ,
'32249' ,
'32250' ,
'32251' ,
'32252' ,
'32253' ,
'32254' ,
'32255' ,
'32256' ,
'32257' ,
'32258' ,
'32259' ,
'32260' ,
'32301' ,
'32302' ,
'32303' ,
'32304' ,
'32305' ,
'32306' ,
'32307' ,
'32308' ,
'32309' ,
'32310' ,
'32311' ,
'32312' ,
'32313' ,
'32314' ,
'32315' ,
'32316' ,
'32317' ,
'32318' ,
'32319' ,
'32320' ,
'32321' ,
'32322' ,
'32323' ,
'32324' ,
'32325' ,
'32326' ,
'32327' ,
'32328' ,
'32329' ,
'32330' ,
'32331' ,
'32332' ,
'32333' ,
'32334' ,
'32335' ,
'32336' ,
'32337' ,
'32338' ,
'32339' ,
'32340' ,
'32341' ,
'32342' ,
'32343' ,
'32344' ,
'32345' ,
'32346' ,
'32347' ,
'32348' ,
'32349' ,
'32350' ,
'32351' ,
'32352' ,
'32353' ,
'32354' ,
'32355' ,
'32356' ,
'32357' ,
'32358' ,
'32359' ,
'32360' ,
'32401' ,
'32402' ,
'32403' ,
'32404' ,
'32405' ,
'32406' ,
'32407' ,
'32408' ,
'32409' ,
'32410' ,
'32411' ,
'32412' ,
'32413' ,
'32414' ,
'32415' ,
'32416' ,
'32417' ,
'32418' ,
'32419' ,
'32420' ,
'32421' ,
'32422' ,
'32423' ,
'32424' ,
'32425' ,
'32426' ,
'32427' ,
'32428' ,
'32429' ,
'32430' ,
'32431' ,
'32432' ,
'32433' ,
'32434' ,
'32435' ,
'32436' ,
'32437' ,
'32438' ,
'32439' ,
'32440' ,
'32441' ,
'32442' ,
'32443' ,
'32444' ,
'32445' ,
'32446' ,
'32447' ,
'32448' ,
'32449' ,
'32450' ,
'32451' ,
'32452' ,
'32453' ,
'32454' ,
'32455' ,
'32456' ,
'32457' ,
'32458' ,
'32459' ,
'32460' ,
'32501' ,
'32502' ,
'32503' ,
'32504' ,
'32505' ,
'32506' ,
'32507' ,
'32508' ,
'32509' ,
'32510' ,
'32511' ,
'32512' ,
'32513' ,
'32514' ,
'32515' ,
'32516' ,
'32517' ,
'32518' ,
'32519' ,
'32520' ,
'32521' ,
'32522' ,
'32523' ,
'32524' ,
'32525' ,
'32526' ,
'32527' ,
'32528' ,
'32529' ,
'32530' ,
'32531' ,
'32532' ,
'32533' ,
'32534' ,
'32535' ,
'32536' ,
'32537' ,
'32538' ,
'32539' ,
'32540' ,
'32541' ,
'32542' ,
'32543' ,
'32544' ,
'32545' ,
'32546' ,
'32547' ,
'32548' ,
'32549' ,
'32550' ,
'32551' ,
'32552' ,
'32553' ,
'32554' ,
'32555' ,
'32556' ,
'32557' ,
'32558' ,
'32559' ,
'32560' ,
'32600' ,
'32601' ,
'32602' ,
'32603' ,
'32604' ,
'32605' ,
'32606' ,
'32607' ,
'32608' ,
'32609' ,
'32610' ,
'32611' ,
'32612' ,
'32613' ,
'32614' ,
'32615' ,
'32616' ,
'32617' ,
'32618' ,
'32619' ,
'32620' ,
'32621' ,
'32622' ,
'32623' ,
'32624' ,
'32625' ,
'32626' ,
'32627' ,
'32628' ,
'32629' ,
'32630' ,
'32631' ,
'32632' ,
'32633' ,
'32634' ,
'32635' ,
'32636' ,
'32637' ,
'32638' ,
'32639' ,
'32640' ,
'32641' ,
'32642' ,
'32643' ,
'32644' ,
'32645' ,
'32646' ,
'32647' ,
'32648' ,
'32649' ,
'32650' ,
'32651' ,
'32652' ,
'32653' ,
'32654' ,
'32655' ,
'32656' ,
'32657' ,
'32658' ,
'32659' ,
'32660' ,
'32661' ,
'32662' ,
'32663' ,
'32664' ,
'32665' ,
'32666' ,
'32667' ,
'32700' ,
'32701' ,
'32702' ,
'32703' ,
'32704' ,
'32705' ,
'32706' ,
'32707' ,
'32708' ,
'32709' ,
'32710' ,
'32711' ,
'32712' ,
'32713' ,
'32714' ,
'32715' ,
'32716' ,
'32717' ,
'32718' ,
'32719' ,
'32720' ,
'32721' ,
'32722' ,
'32723' ,
'32724' ,
'32725' ,
'32726' ,
'32727' ,
'32728' ,
'32729' ,
'32730' ,
'32731' ,
'32732' ,
'32733' ,
'32734' ,
'32735' ,
'32736' ,
'32737' ,
'32738' ,
'32739' ,
'32740' ,
'32741' ,
'32742' ,
'32743' ,
'32744' ,
'32745' ,
'32746' ,
'32747' ,
'32748' ,
'32749' ,
'32750' ,
'32751' ,
'32752' ,
'32753' ,
'32754' ,
'32755' ,
'32756' ,
'32757' ,
'32758' ,
'32759' ,
'32760' ,
'32761' ,
'32766' ,
'61206405' ,
'61216405' ,
'61226405' ,
'61236405' ,
'61246405' ,
'61266405' ,
'61266413' ,
'61276405' ,
'61286405' ,
'61296405' ,
'61306405' ,
'61306413' ,
'61316405' ,
'61326405' ,
'61336405' ,
'61346405' ,
'61356405' ,
'61366405' ,
'61376405' ,
'61386405' ,
'61396405' ,
'61406405' ,
'61406413' ,
'61416405' ,
'61426405' ,
'61436405' ,
'61446405' ,
'61456405' ,
'61466405' ,
'61476405' ,
'61486405' ,
'61486413' ,
'61496405' ,
'61506405' ,
'61516405' ,
'61516413' ,
'61526405' ,
'61526413' ,
'61536405' ,
'61546405' ,
'61556405' ,
'61566405' ,
'61576405' ,
'61586405' ,
'61596405' ,
'61606405' ,
'61616405' ,
'61626405' ,
'61636405' ,
'61636413' ,
'61646405' ,
'61656405' ,
'61666405' ,
'61676405' ,
'61676413' ,
'61686405' ,
'61696405' ,
'61706405' ,
'61706413' ,
'61716405' ,
'61716413' ,
'61736405' ,
'61736413' ,
'61746405' ,
'61756405' ,
'61766405' ,
'61766413' ,
'61786405' ,
'61796405' ,
'61806405' ,
'61806413' ,
'61816405' ,
'61826405' ,
'61836405' ,
'61846405' ,
'61886405' ,
'61896405' ,
'61896413' ,
'61906405' ,
'61906413' ,
'61916405' ,
'61926405' ,
'61936405' ,
'61946405' ,
'61956405' ,
'61966405' ,
'61976405' ,
'61986405' ,
'61996405' ,
'62006405' ,
'62016405' ,
'62026405' ,
'62036405' ,
'62046405' ,
'62056405' ,
'62066405' ,
'62076405' ,
'62086405' ,
'62096405' ,
'62106405' ,
'62116405' ,
'62126405' ,
'62136405' ,
'62146405' ,
'62156405' ,
'62166405' ,
'62186405' ,
'62196405' ,
'62206405' ,
'62216405' ,
'62226405' ,
'62236405' ,
'62246405' ,
'62256405' ,
'62276405' ,
'62296405' ,
'62306405' ,
'62316405' ,
'62326405' ,
'62336405' ,
'62366405' ,
'62376405' ,
'62386405' ,
'62396405' ,
'62406405' ,
'62416405' ,
'62426405' ,
'62436405' ,
'62446405' ,
'62456405' ,
'62466405' ,
'62476405' ,
'62486405' ,
'62496405' ,
'62506405' ,
'62516405' ,
'62526405' ,
'62536405' ,
'62546405' ,
'62556405' ,
'62566405' ,
'62576405' ,
'62586405' ,
'62586413' ,
'62596405' ,
'62616405' ,
'62626405' ,
'62636405' ,
'62646405' ,
'62656405' ,
'62666405' ,
'62676405' ,
'62686405' ,
'62696405' ,
'62706405' ,
'62716405' ,
'62726405' ,
'62736405' ,
'62746405' ,
'62756405' ,
'62766405' ,
'62776405' ,
'62786405' ,
'62796405' ,
'62806405' ,
'62816405' ,
'62826405' ,
'62836405' ,
'62836413' ,
'62846405' ,
'62856405' ,
'62866405' ,
'62886405' ,
'62896405' ,
'62926405' ,
'62936405' ,
'62956405' ,
'62976405' ,
'62986405' ,
'62996405' ,
'63006405' ,
'63016405' ,
'63026405' ,
'63036405' ,
'63046405' ,
'63066405' ,
'63076405' ,
'63086405' ,
'63096405' ,
'63106405' ,
'63116405' ,
'63126405' ,
'63136405' ,
'63146405' ,
'63156405' ,
'63166405' ,
'63176405' ,
'63186405' ,
'63196405' ,
'63226405' ,
'63246405' ,
'63266405' ,
'63266406' ,
'63266407' ,
'63266408' ,
'63266409' ,
'63266410' ,
'63266411' ,
'63266412' ,
'63266413' ,
'63266414' ,
'63266415' ,
'63266416' ,
'63266417' ,
'63266418' ,
'63266419' ,
'63266420' ,
'66006405' ,
'66016405' ,
'66026405' ,
'66036405' ,
'66046405' ,
'66056405' ,
'66066405' ,
'66076405' ,
'66086405' ,
'66096405' ,
'66106405' ,
'66116405' ,
'66126405' ,
'66126413' ,
'66136405' ,
'66146405' ,
'66156405' ,
'66166405' ,
'66186405' ,
'66196405' ,
'66196413' ,
'66206405' ,
'66216405' ,
'66226405' ,
'66236405' ,
'66246405' ,
'66246413' ,
'66256405' ,
'66266405' ,
'66276405' ,
'66276413' ,
'66286405' ,
'66296405' ,
'66306405' ,
'66316405' ,
'66326405' ,
'66336405' ,
'66346405' ,
'66356405' ,
'66366405' ,
'66376405' ,
'66386405' ,
'66396405' ,
'66406405' ,
'66406413' ,
'66416405' ,
'66426405' ,
'66436405' ,
'66446405' ,
'66456405' ,
'66456413' ,
'66466405' ,
'66576405' ,
'66586405' ,
'66596405' ,
'66596413' ,
'66606405' ,
'66616405' ,
'66616413' ,
'66636405' ,
'66646405' ,
'66656405' ,
'66666405' ,
'66676405' ,
'68016405' ,
'68026405' ,
'68036405' ,
'68046405' ,
'68056405' ,
'68066405' ,
'68086405' ,
'68096405' ,
'68136405' ,
'68146405' ,
'68156405' ,
'68186405' ,
'68206405' ,
'69036405')

inputNumbers = (
'Anguilla 1957 / British West Indies Grid' ,
'Antigua 1943 / British West Indies Grid' ,
'Dominica 1945 / British West Indies Grid' ,
'Grenada 1953 / British West Indies Grid' ,
'Montserrat 1958 / British West Indies Grid' ,
'St. Kitts 1955 / British West Indies Grid' ,
'St. Lucia 1955 / British West Indies Grid' ,
'St. Vincent 45 / British West Indies Grid' ,
'NAD27(CGQ77) / SCoPQ zone 2' ,
'NAD27(CGQ77) / SCoPQ zone 3' ,
'NAD27(CGQ77) / SCoPQ zone 4' ,
'NAD27(CGQ77) / SCoPQ zone 5' ,
'NAD27(CGQ77) / SCoPQ zone 6' ,
'NAD27(CGQ77) / SCoPQ zone 7' ,
'NAD27(CGQ77) / SCoPQ zone 8' ,
'NAD27(CGQ77) / SCoPQ zone 9' ,
'NAD27(CGQ77) / SCoPQ zone 10' ,
'NAD27(76) / MTM zone 8' ,
'NAD27(76) / MTM zone 9' ,
'NAD27(76) / MTM zone 10' ,
'NAD27(76) / MTM zone 11' ,
'NAD27(76) / MTM zone 12' ,
'NAD27(76) / MTM zone 13' ,
'NAD27(76) / MTM zone 14' ,
'NAD27(76) / MTM zone 15' ,
'NAD27(76) / MTM zone 16' ,
'NAD27(76) / MTM zone 17' ,
'NAD27(76) / UTM zone 15N' ,
'NAD27(76) / UTM zone 16N' ,
'NAD27(76) / UTM zone 17N' ,
'NAD27(76) / UTM zone 18N' ,
'NAD27(CGQ77) / UTM zone 17N' ,
'NAD27(CGQ77) / UTM zone 18N' ,
'NAD27(CGQ77) / UTM zone 19N' ,
'NAD27(CGQ77) / UTM zone 20N' ,
'NAD27(CGQ77) / UTM zone 21N' ,
'NAD83(CSRS98) / New Brunswick Stereo' ,
'NAD83(CSRS98) / UTM zone 19N' ,
'NAD83(CSRS98) / UTM zone 20N' ,
'Israel 1993 / Israeli TM Grid' ,
'Locodjo 1965 / UTM zone 30N' ,
'Abidjan 1987 / UTM zone 30N' ,
'Locodjo 1965 / UTM zone 29N' ,
'Abidjan 1987 / UTM zone 29N' ,
'Hanoi 1972 / Gauss-Kruger zone 18' ,
'Hanoi 1972 / Gauss-Kruger zone 19' ,
'Hartebeesthoek94 / Lo15' ,
'Hartebeesthoek94 / Lo17' ,
'Hartebeesthoek94 / Lo19' ,
'Hartebeesthoek94 / Lo21' ,
'Hartebeesthoek94 / Lo23' ,
'Hartebeesthoek94 / Lo25' ,
'Hartebeesthoek94 / Lo27' ,
'Hartebeesthoek94 / Lo29' ,
'Hartebeesthoek94 / Lo31' ,
'Hartebeesthoek94 / Lo33' ,
'CH1903+ / LV95' ,
'Rassadiran / Nakhl e Taqi' ,
'ED50(ED77) / UTM zone 38N' ,
'ED50(ED77) / UTM zone 39N' ,
'ED50(ED77) / UTM zone 40N' ,
'ED50(ED77) / UTM zone 41N' ,
'Madrid 1870 (Madrid) / Spain' ,
'Dabola 1981 / UTM zone 28N' ,
'Dabola 1981 / UTM zone 29N' ,
'S-JTSK (Ferro) / Krovak' ,
'Mount Dillon / Tobago Grid' ,
'Naparima 1955 / UTM zone 20N' ,
'ELD79 / Libya zone 5' ,
'ELD79 / Libya zone 6' ,
'ELD79 / Libya zone 7' ,
'ELD79 / Libya zone 8' ,
'ELD79 / Libya zone 9' ,
'ELD79 / Libya zone 10' ,
'ELD79 / Libya zone 11' ,
'ELD79 / Libya zone 12' ,
'ELD79 / Libya zone 13' ,
'ELD79 / UTM zone 32N' ,
'ELD79 / UTM zone 33N' ,
'ELD79 / UTM zone 34N' ,
'ELD79 / UTM zone 35N' ,
'Chos Malal 1914 / Argentina 2' ,
'Pampa del Castillo / Argentina 2' ,
'Hito XVIII 1963 / Argentina 2' ,
'Hito XVIII 1963 / UTM zone 19S' ,
'NAD27 / Cuba Norte' ,
'NAD27 / Cuba Sur' ,
'ELD79 / TM 12 NE' ,
'Carthage / TM 11 NE' ,
'Yemen NGN96 / UTM zone 38N' ,
'Yemen NGN96 / UTM zone 39N' ,
'South Yemen / Gauss Kruger zone 8' ,
'South Yemen / Gauss Kruger zone 9' ,
'Hanoi 1972 / GK 106 NE' ,
'WGS 72BE / TM 106 NE' ,
'Bissau / UTM zone 28N' ,
'Korean 1985 / East Belt' ,
'Korean 1985 / Central Belt' ,
'Korean 1985 / West Belt' ,
'Qatar 1948 / Qatar Grid' ,
'GGRS87 / Greek Grid' ,
'Lake / Maracaibo Grid M1' ,
'Lake / Maracaibo Grid' ,
'Lake / Maracaibo Grid M3' ,
'Lake / Maracaibo La Rosa Grid' ,
'NZGD2000 / Mount Eden 2000' ,
'NZGD2000 / Bay of Plenty 2000' ,
'NZGD2000 / Poverty Bay 2000' ,
'NZGD2000 / Hawkes Bay 2000' ,
'NZGD2000 / Taranaki 2000' ,
'NZGD2000 / Tuhirangi 2000' ,
'NZGD2000 / Wanganui 2000' ,
'NZGD2000 / Wairarapa 2000' ,
'NZGD2000 / Wellington 2000' ,
'NZGD2000 / Collingwood 2000' ,
'NZGD2000 / Nelson 2000' ,
'NZGD2000 / Karamea 2000' ,
'NZGD2000 / Buller 2000' ,
'NZGD2000 / Grey 2000' ,
'NZGD2000 / Amuri 2000' ,
'NZGD2000 / Marlborough 2000' ,
'NZGD2000 / Hokitika 2000' ,
'NZGD2000 / Okarito 2000' ,
'NZGD2000 / Jacksons Bay 2000' ,
'NZGD2000 / Mount Pleasant 2000' ,
'NZGD2000 / Gawler 2000' ,
'NZGD2000 / Timaru 2000' ,
'NZGD2000 / Lindis Peak 2000' ,
'NZGD2000 / Mount Nicholas 2000' ,
'NZGD2000 / Mount York 2000' ,
'NZGD2000 / Observation Point 2000' ,
'NZGD2000 / North Taieri 2000' ,
'NZGD2000 / Bluff 2000' ,
'NZGD2000 / UTM zone 58S' ,
'NZGD2000 / UTM zone 59S' ,
'NZGD2000 / UTM zone 60S' ,
'Accra / Ghana National Grid' ,
'Accra / TM 1 NW' ,
'NAD27(CGQ77) / Quebec Lambert' ,
'NAD83(CSRS98) / SCoPQ zone 2' ,
'NAD83(CSRS98) / MTM zone 3' ,
'NAD83(CSRS98) / MTM zone 4' ,
'NAD83(CSRS98) / MTM zone 5' ,
'NAD83(CSRS98) / MTM zone 6' ,
'NAD83(CSRS98) / MTM zone 7' ,
'NAD83(CSRS98) / MTM zone 8' ,
'NAD83(CSRS98) / MTM zone 9' ,
'NAD83(CSRS98) / MTM zone 10' ,
'NAD83(CSRS98) / UTM zone 21N' ,
'NAD83(CSRS98) / UTM zone 18N' ,
'NAD83(CSRS98) / UTM zone 17N' ,
'NAD83(CSRS98) / UTM zone 13N' ,
'NAD83(CSRS98) / UTM zone 12N' ,
'NAD83(CSRS98) / UTM zone 11N' ,
'RGF93 / Lambert-93' ,
'American Samoa 1962 / American Samoa Lambert' ,
'NAD83(HARN) / UTM zone 59S' ,
'IRENET95 / Irish Transverse Mercator' ,
'IRENET95 / UTM zone 29N' ,
'Sierra Leone 1924 / New Colony Grid' ,
'Sierra Leone 1924 / New War Office Grid' ,
'Sierra Leone 1968 / UTM zone 28N' ,
'Sierra Leone 1968 / UTM zone 29N' ,
'US National Atlas Equal Area' ,
'Locodjo 1965 / TM 5 NW' ,
'Abidjan 1987 / TM 5 NW' ,
'Pulkovo 1942(83) / Gauss Kruger zone 3' ,
'Pulkovo 1942(83) / Gauss Kruger zone 4' ,
'Pulkovo 1942(83) / Gauss Kruger zone 5' ,
'Luxembourg 1930 / Gauss' ,
'MGI / Slovenia Grid' ,
'Pulkovo 1942(58) / Poland zone I' ,
'Pulkovo 1942(58) / Poland zone II' ,
'Pulkovo 1942(58) / Poland zone III' ,
'Pulkovo 1942(58) / Poland zone IV' ,
'Pulkovo 1942(58) / Poland zone V' ,
'ETRS89 / Poland CS2000 zone 5' ,
'ETRS89 / Poland CS2000 zone 6' ,
'ETRS89 / Poland CS2000 zone 7' ,
'ETRS89 / Poland CS2000 zone 8' ,
'ETRS89 / Poland CS92' ,
'Azores Occidental 1939 / UTM zone 25N' ,
'Azores Central 1948 / UTM zone 26N' ,
'Azores Oriental 1940 / UTM zone 26N' ,
'Madeira 1936 / UTM zone 28N' ,
'ED50 / France EuroLambert' ,
'NZGD2000 / New Zealand Transverse Mercator 2000' ,
'American Samoa 1962 / American Samoa Lambert' ,
'NAD83(HARN) / UTM zone 2S' ,
'ETRS89 / Kp2000 Jutland' ,
'ETRS89 / Kp2000 Zealand' ,
'ETRS89 / Kp2000 Bornholm' ,
'Albanian 1987 / Gauss Kruger zone 4' ,
'ATS77 / New Brunswick Stereographic (ATS77)' ,
'REGVEN / UTM zone 18N' ,
'REGVEN / UTM zone 19N' ,
'REGVEN / UTM zone 20N' ,
'NAD27 / Tennessee' ,
'NAD83 / Kentucky North' ,
'ED50 / 3-degree Gauss-Kruger zone 9' ,
'ED50 / 3-degree Gauss-Kruger zone 10' ,
'ED50 / 3-degree Gauss-Kruger zone 11' ,
'ED50 / 3-degree Gauss-Kruger zone 12' ,
'ED50 / 3-degree Gauss-Kruger zone 13' ,
'ED50 / 3-degree Gauss-Kruger zone 14' ,
'ED50 / 3-degree Gauss-Kruger zone 15' ,
'ETRS89 / TM 30 NE' ,
'Douala 1948 / AOF west' ,
'Manoca 1962 / UTM zone 32N' ,
'Qornoq 1927 / UTM zone 22N' ,
'Qornoq 1927 / UTM zone 23N' ,
'Scoresbysund 1952 / Greenland zone 5 east' ,
'ATS77 / UTM zone 19N' ,
'ATS77 / UTM zone 20N' ,
'Scoresbysund 1952 / Greenland zone 6 east' ,
'NAD83 / Arizona East (ft)' ,
'NAD83 / Arizona Central (ft)' ,
'NAD83 / Arizona West (ft)' ,
'NAD83 / California zone 1 (ftUS)' ,
'NAD83 / California zone 2 (ftUS)' ,
'NAD83 / California zone 3 (ftUS)' ,
'NAD83 / California zone 4 (ftUS)' ,
'NAD83 / California zone 5 (ftUS)' ,
'NAD83 / California zone 6 (ftUS)' ,
'NAD83 / Colorado North (ftUS)' ,
'NAD83 / Colorado Central (ftUS)' ,
'NAD83 / Colorado South (ftUS)' ,
'NAD83 / Connecticut (ftUS)' ,
'NAD83 / Delaware (ftUS)' ,
'NAD83 / Florida East (ftUS)' ,
'NAD83 / Florida West (ftUS)' ,
'NAD83 / Florida North (ftUS)' ,
'NAD83 / Georgia East (ftUS)' ,
'NAD83 / Georgia West (ftUS)' ,
'NAD83 / Idaho East (ftUS)' ,
'NAD83 / Idaho Central (ftUS)' ,
'NAD83 / Idaho West (ftUS)' ,
'NAD83 / Indiana East (ftUS)' ,
'NAD83 / Indiana West (ftUS)' ,
'NAD83 / Kentucky North (ftUS)' ,
'NAD83 / Kentucky South (ftUS)' ,
'NAD83 / Maryland (ftUS)' ,
'NAD83 / Massachusetts Mainland (ftUS)' ,
'NAD83 / Massachusetts Island (ftUS)' ,
'NAD83 / Michigan North (ft)' ,
'NAD83 / Michigan Central (ft)' ,
'NAD83 / Michigan South (ft)' ,
'NAD83 / Mississippi East (ftUS)' ,
'NAD83 / Mississippi West (ftUS)' ,
'NAD83 / Montana (ft)' ,
'NAD83 / New Mexico East (ftUS)' ,
'NAD83 / New Mexico Central (ftUS)' ,
'NAD83 / New Mexico West (ftUS)' ,
'NAD83 / New York East (ftUS)' ,
'NAD83 / New York Central (ftUS)' ,
'NAD83 / New York West (ftUS)' ,
'NAD83 / New York Long Island (ftUS)' ,
'NAD83 / North Carolina (ftUS)' ,
'NAD83 / North Dakota North (ft)' ,
'NAD83 / North Dakota South (ft)' ,
'NAD83 / Oklahoma North (ftUS)' ,
'NAD83 / Oklahoma South (ftUS)' ,
'NAD83 / Oregon North (ft)' ,
'NAD83 / Oregon South (ft)' ,
'NAD83 / Pennsylvania North (ftUS)' ,
'NAD83 / Pennsylvania South (ftUS)' ,
'NAD83 / South Carolina (ft)' ,
'NAD83 / Tennessee (ftUS)' ,
'NAD83 / Texas North (ftUS)' ,
'NAD83 / Texas North Central (ftUS)' ,
'NAD83 / Texas Central (ftUS)' ,
'NAD83 / Texas South Central (ftUS)' ,
'NAD83 / Texas South (ftUS)' ,
'NAD83 / Utah North (ft)' ,
'NAD83 / Utah Central (ft)' ,
'NAD83 / Utah South (ft)' ,
'NAD83 / Virginia North (ftUS)' ,
'NAD83 / Virginia South (ftUS)' ,
'NAD83 / Washington North (ftUS)' ,
'NAD83 / Washington South (ftUS)' ,
'NAD83 / Wisconsin North (ftUS)' ,
'NAD83 / Wisconsin Central (ftUS)' ,
'NAD83 / Wisconsin South (ftUS)' ,
'ATS77 / Prince Edward Isl. Stereographic (ATS77)' ,
'NAD83(CSRS98) / Prince Edward Isl. Stereographic (NAD83)' ,
'NAD83(CSRS98) / Prince Edward Isl. Stereographic (NAD83)' ,
'ATS77 / MTM Nova Scotia zone 4' ,
'ATS77 / MTM Nova Scotia zone 5' ,
'Ammassalik 1958 / Greenland zone 7 east' ,
'Qornoq 1927 / Greenland zone 1 east' ,
'Qornoq 1927 / Greenland zone 2 east' ,
'Qornoq 1927 / Greenland zone 2 west' ,
'Qornoq 1927 / Greenland zone 3 east' ,
'Qornoq 1927 / Greenland zone 3 west' ,
'Qornoq 1927 / Greenland zone 4 east' ,
'Qornoq 1927 / Greenland zone 4 west' ,
'Qornoq 1927 / Greenland zone 5 west' ,
'Qornoq 1927 / Greenland zone 6 west' ,
'Qornoq 1927 / Greenland zone 7 west' ,
'Qornoq 1927 / Greenland zone 8 east' ,
'Batavia / TM 109 SE' ,
'WGS 84 / TM 116 SE' ,
'WGS 84 / TM 132 SE' ,
'WGS 84 / TM 6 NE' ,
'Garoua / UTM zone 33N' ,
'Kousseri / UTM zone 33N' ,
'Trinidad 1903 / Trinidad Grid (ftCla)' ,
'Campo Inchauspe / UTM zone 19S' ,
'Campo Inchauspe / UTM zone 20S' ,
'PSAD56 / ICN Regional' ,
'Ain el Abd / Aramco Lambert' ,
'ED50 / TM27' ,
'ED50 / TM30' ,
'ED50 / TM33' ,
'ED50 / TM36' ,
'ED50 / TM39' ,
'ED50 / TM42' ,
'ED50 / TM45' ,
'Hong Kong 1980 Grid System' ,
'Xian 1980 / Gauss-Kruger zone 13' ,
'Xian 1980 / Gauss-Kruger zone 14' ,
'Xian 1980 / Gauss-Kruger zone 15' ,
'Xian 1980 / Gauss-Kruger zone 16' ,
'Xian 1980 / Gauss-Kruger zone 17' ,
'Xian 1980 / Gauss-Kruger zone 18' ,
'Xian 1980 / Gauss-Kruger zone 19' ,
'Xian 1980 / Gauss-Kruger zone 20' ,
'Xian 1980 / Gauss-Kruger zone 21' ,
'Xian 1980 / Gauss-Kruger zone 22' ,
'Xian 1980 / Gauss-Kruger zone 23' ,
'Xian 1980 / Gauss-Kruger CM 75E' ,
'Xian 1980 / Gauss-Kruger CM 81E' ,
'Xian 1980 / Gauss-Kruger CM 87E' ,
'Xian 1980 / Gauss-Kruger CM 93E' ,
'Xian 1980 / Gauss-Kruger CM 99E' ,
'Xian 1980 / Gauss-Kruger CM 105E' ,
'Xian 1980 / Gauss-Kruger CM 111E' ,
'Xian 1980 / Gauss-Kruger CM 117E' ,
'Xian 1980 / Gauss-Kruger CM 123E' ,
'Xian 1980 / Gauss-Kruger CM 129E' ,
'Xian 1980 / Gauss-Kruger CM 135E' ,
'Xian 1980 / 3-degree Gauss-Kruger zone 25' ,
'Xian 1980 / 3-degree Gauss-Kruger zone 26' ,
'Xian 1980 / 3-degree Gauss-Kruger zone 27' ,
'Xian 1980 / 3-degree Gauss-Kruger zone 28' ,
'Xian 1980 / 3-degree Gauss-Kruger zone 29' ,
'Xian 1980 / 3-degree Gauss-Kruger zone 30' ,
'Xian 1980 / 3-degree Gauss-Kruger zone 31' ,
'Xian 1980 / 3-degree Gauss-Kruger zone 32' ,
'Xian 1980 / 3-degree Gauss-Kruger zone 33' ,
'Xian 1980 / 3-degree Gauss-Kruger zone 34' ,
'Xian 1980 / 3-degree Gauss-Kruger zone 35' ,
'Xian 1980 / 3-degree Gauss-Kruger zone 36' ,
'Xian 1980 / 3-degree Gauss-Kruger zone 37' ,
'Xian 1980 / 3-degree Gauss-Kruger zone 38' ,
'Xian 1980 / 3-degree Gauss-Kruger zone 39' ,
'Xian 1980 / 3-degree Gauss-Kruger zone 40' ,
'Xian 1980 / 3-degree Gauss-Kruger zone 41' ,
'Xian 1980 / 3-degree Gauss-Kruger zone 42' ,
'Xian 1980 / 3-degree Gauss-Kruger zone 43' ,
'Xian 1980 / 3-degree Gauss-Kruger zone 44' ,
'Xian 1980 / 3-degree Gauss-Kruger zone 45' ,
'Xian 1980 / 3-degree Gauss-Kruger CM 75E' ,
'Xian 1980 / 3-degree Gauss-Kruger CM 78E' ,
'Xian 1980 / 3-degree Gauss-Kruger CM 81E' ,
'Xian 1980 / 3-degree Gauss-Kruger CM 84E' ,
'Xian 1980 / 3-degree Gauss-Kruger CM 87E' ,
'Xian 1980 / 3-degree Gauss-Kruger CM 90E' ,
'Xian 1980 / 3-degree Gauss-Kruger CM 93E' ,
'Xian 1980 / 3-degree Gauss-Kruger CM 96E' ,
'Xian 1980 / 3-degree Gauss-Kruger CM 99E' ,
'Xian 1980 / 3-degree Gauss-Kruger CM 102E' ,
'Xian 1980 / 3-degree Gauss-Kruger CM 105E' ,
'Xian 1980 / 3-degree Gauss-Kruger CM 108E' ,
'Xian 1980 / 3-degree Gauss-Kruger CM 111E' ,
'Xian 1980 / 3-degree Gauss-Kruger CM 114E' ,
'Xian 1980 / 3-degree Gauss-Kruger CM 117E' ,
'Xian 1980 / 3-degree Gauss-Kruger CM 120E' ,
'Xian 1980 / 3-degree Gauss-Kruger CM 123E' ,
'Xian 1980 / 3-degree Gauss-Kruger CM 126E' ,
'Xian 1980 / 3-degree Gauss-Kruger CM 129E' ,
'Xian 1980 / 3-degree Gauss-Kruger CM 132E' ,
'Xian 1980 / 3-degree Gauss-Kruger CM 135E' ,
'KKJ / Finland zone 1' ,
'KKJ / Finland zone 2' ,
'KKJ / Finland Uniform Coordinate System' ,
'KKJ / Finland zone 4' ,
'South Yemen / Gauss-Kruger zone 8' ,
'South Yemen / Gauss-Kruger zone 9' ,
'Pulkovo 1942(83) / 3-degree Gauss-Kruger zone 3' ,
'Pulkovo 1942(83) / 3-degree Gauss-Kruger zone 4' ,
'Pulkovo 1942(83) / 3-degree Gauss-Kruger zone 5' ,
'RT90 2.5 gon W' ,
'Beijing 1954 / 3-degree Gauss-Kruger zone 25' ,
'Beijing 1954 / 3-degree Gauss-Kruger zone 26' ,
'Beijing 1954 / 3-degree Gauss-Kruger zone 27' ,
'Beijing 1954 / 3-degree Gauss-Kruger zone 28' ,
'Beijing 1954 / 3-degree Gauss-Kruger zone 29' ,
'Beijing 1954 / 3-degree Gauss-Kruger zone 30' ,
'Beijing 1954 / 3-degree Gauss-Kruger zone 31' ,
'Beijing 1954 / 3-degree Gauss-Kruger zone 32' ,
'Beijing 1954 / 3-degree Gauss-Kruger zone 33' ,
'Beijing 1954 / 3-degree Gauss-Kruger zone 34' ,
'Beijing 1954 / 3-degree Gauss-Kruger zone 35' ,
'Beijing 1954 / 3-degree Gauss-Kruger zone 36' ,
'Beijing 1954 / 3-degree Gauss-Kruger zone 37' ,
'Beijing 1954 / 3-degree Gauss-Kruger zone 38' ,
'Beijing 1954 / 3-degree Gauss-Kruger zone 39' ,
'Beijing 1954 / 3-degree Gauss-Kruger zone 40' ,
'Beijing 1954 / 3-degree Gauss-Kruger zone 41' ,
'Beijing 1954 / 3-degree Gauss-Kruger zone 42' ,
'Beijing 1954 / 3-degree Gauss-Kruger zone 43' ,
'Beijing 1954 / 3-degree Gauss-Kruger zone 44' ,
'Beijing 1954 / 3-degree Gauss-Kruger zone 45' ,
'Beijing 1954 / 3-degree Gauss-Kruger CM 75E' ,
'Beijing 1954 / 3-degree Gauss-Kruger CM 78E' ,
'Beijing 1954 / 3-degree Gauss-Kruger CM 81E' ,
'Beijing 1954 / 3-degree Gauss-Kruger CM 84E' ,
'Beijing 1954 / 3-degree Gauss-Kruger CM 87E' ,
'Beijing 1954 / 3-degree Gauss-Kruger CM 90E' ,
'Beijing 1954 / 3-degree Gauss-Kruger CM 93E' ,
'Beijing 1954 / 3-degree Gauss-Kruger CM 96E' ,
'Beijing 1954 / 3-degree Gauss-Kruger CM 99E' ,
'Beijing 1954 / 3-degree Gauss-Kruger CM 102E' ,
'Beijing 1954 / 3-degree Gauss-Kruger CM 105E' ,
'Beijing 1954 / 3-degree Gauss-Kruger CM 108E' ,
'Beijing 1954 / 3-degree Gauss-Kruger CM 111E' ,
'Beijing 1954 / 3-degree Gauss-Kruger CM 114E' ,
'Beijing 1954 / 3-degree Gauss-Kruger CM 117E' ,
'Beijing 1954 / 3-degree Gauss-Kruger CM 120E' ,
'Beijing 1954 / 3-degree Gauss-Kruger CM 123E' ,
'Beijing 1954 / 3-degree Gauss-Kruger CM 126E' ,
'Beijing 1954 / 3-degree Gauss-Kruger CM 129E' ,
'Beijing 1954 / 3-degree Gauss-Kruger CM 132E' ,
'Beijing 1954 / 3-degree Gauss-Kruger CM 135E' ,
'JGD2000 / Japan Plane Rectangular CS I' ,
'JGD2000 / Japan Plane Rectangular CS II' ,
'JGD2000 / Japan Plane Rectangular CS III' ,
'JGD2000 / Japan Plane Rectangular CS IV' ,
'JGD2000 / Japan Plane Rectangular CS V' ,
'JGD2000 / Japan Plane Rectangular CS VI' ,
'JGD2000 / Japan Plane Rectangular CS VII' ,
'JGD2000 / Japan Plane Rectangular CS VIII' ,
'JGD2000 / Japan Plane Rectangular CS IX' ,
'JGD2000 / Japan Plane Rectangular CS X' ,
'JGD2000 / Japan Plane Rectangular CS XI' ,
'JGD2000 / Japan Plane Rectangular CS XII' ,
'JGD2000 / Japan Plane Rectangular CS XIII' ,
'JGD2000 / Japan Plane Rectangular CS XIV' ,
'JGD2000 / Japan Plane Rectangular CS XV' ,
'JGD2000 / Japan Plane Rectangular CS XVI' ,
'JGD2000 / Japan Plane Rectangular CS XVII' ,
'JGD2000 / Japan Plane Rectangular CS XVIII' ,
'JGD2000 / Japan Plane Rectangular CS XIX' ,
'Albanian 1987 / Gauss-Kruger zone 4' ,
'Pulkovo 1995 / Gauss-Kruger CM 21E' ,
'Pulkovo 1995 / Gauss-Kruger CM 27E' ,
'Pulkovo 1995 / Gauss-Kruger CM 33E' ,
'Pulkovo 1995 / Gauss-Kruger CM 39E' ,
'Pulkovo 1995 / Gauss-Kruger CM 45E' ,
'Pulkovo 1995 / Gauss-Kruger CM 51E' ,
'Pulkovo 1995 / Gauss-Kruger CM 57E' ,
'Pulkovo 1995 / Gauss-Kruger CM 63E' ,
'Pulkovo 1995 / Gauss-Kruger CM 69E' ,
'Pulkovo 1995 / Gauss-Kruger CM 75E' ,
'Pulkovo 1995 / Gauss-Kruger CM 81E' ,
'Pulkovo 1995 / Gauss-Kruger CM 87E' ,
'Pulkovo 1995 / Gauss-Kruger CM 93E' ,
'Pulkovo 1995 / Gauss-Kruger CM 99E' ,
'Pulkovo 1995 / Gauss-Kruger CM 105E' ,
'Pulkovo 1995 / Gauss-Kruger CM 111E' ,
'Pulkovo 1995 / Gauss-Kruger CM 117E' ,
'Pulkovo 1995 / Gauss-Kruger CM 123E' ,
'Pulkovo 1995 / Gauss-Kruger CM 129E' ,
'Pulkovo 1995 / Gauss-Kruger CM 135E' ,
'Pulkovo 1995 / Gauss-Kruger CM 141E' ,
'Pulkovo 1995 / Gauss-Kruger CM 147E' ,
'Pulkovo 1995 / Gauss-Kruger CM 153E' ,
'Pulkovo 1995 / Gauss-Kruger CM 159E' ,
'Pulkovo 1995 / Gauss-Kruger CM 165E' ,
'Pulkovo 1995 / Gauss-Kruger CM 171E' ,
'Pulkovo 1995 / Gauss-Kruger CM 177E' ,
'Pulkovo 1995 / Gauss-Kruger CM 177W' ,
'Pulkovo 1995 / Gauss-Kruger CM 171W' ,
'Pulkovo 1942 / Gauss-Kruger CM 9E' ,
'Pulkovo 1942 / Gauss-Kruger CM 15E' ,
'Pulkovo 1942 / Gauss-Kruger CM 21E' ,
'Pulkovo 1942 / Gauss-Kruger CM 27E' ,
'Pulkovo 1942 / Gauss-Kruger CM 33E' ,
'Pulkovo 1942 / Gauss-Kruger CM 39E' ,
'Pulkovo 1942 / Gauss-Kruger CM 45E' ,
'Pulkovo 1942 / Gauss-Kruger CM 51E' ,
'Pulkovo 1942 / Gauss-Kruger CM 57E' ,
'Pulkovo 1942 / Gauss-Kruger CM 63E' ,
'Pulkovo 1942 / Gauss-Kruger CM 69E' ,
'Pulkovo 1942 / Gauss-Kruger CM 75E' ,
'Pulkovo 1942 / Gauss-Kruger CM 81E' ,
'Pulkovo 1942 / Gauss-Kruger CM 87E' ,
'Pulkovo 1942 / Gauss-Kruger CM 93E' ,
'Pulkovo 1942 / Gauss-Kruger CM 99E' ,
'Pulkovo 1942 / Gauss-Kruger CM 105E' ,
'Pulkovo 1942 / Gauss-Kruger CM 111E' ,
'Pulkovo 1942 / Gauss-Kruger CM 117E' ,
'Pulkovo 1942 / Gauss-Kruger CM 123E' ,
'Pulkovo 1942 / Gauss-Kruger CM 129E' ,
'Pulkovo 1942 / Gauss-Kruger CM 135E' ,
'Pulkovo 1942 / Gauss-Kruger CM 141E' ,
'Pulkovo 1942 / Gauss-Kruger CM 147E' ,
'Pulkovo 1942 / Gauss-Kruger CM 153E' ,
'Pulkovo 1942 / Gauss-Kruger CM 159E' ,
'Pulkovo 1942 / Gauss-Kruger CM 165E' ,
'Pulkovo 1942 / Gauss-Kruger CM 171E' ,
'Pulkovo 1942 / Gauss-Kruger CM 177E' ,
'Pulkovo 1942 / Gauss-Kruger CM 177W' ,
'Pulkovo 1942 / Gauss-Kruger CM 171W' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 7' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 8' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 9' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 10' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 11' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 12' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 13' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 14' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 15' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 16' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 17' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 18' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 19' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 20' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 21' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 22' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 23' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 24' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 25' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 26' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 27' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 28' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 29' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 30' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 31' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 32' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 33' ,
'Samboja / UTM zone 50S' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 34' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 35' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 36' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 37' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 38' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 39' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 40' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 41' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 42' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 43' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 44' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 45' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 46' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 47' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 48' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 49' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 50' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 51' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 52' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 53' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 54' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 55' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 56' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 57' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 58' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 59' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 60' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 61' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 62' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 63' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 64' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 21E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 24E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 27E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 30E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 33E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 36E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 39E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 42E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 45E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 48E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 51E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 54E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 57E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 60E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 63E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 66E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 69E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 72E' ,
'Lietuvos Koordinoei Sistema 1994' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 75E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 78E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 81E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 84E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 87E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 90E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 93E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 96E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 99E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 102E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 105E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 108E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 111E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 114E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 117E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 120E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 123E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 126E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 129E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 132E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 135E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 138E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 141E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 144E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 147E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 150E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 153E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 156E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 159E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 162E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 165E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 168E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 171E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 174E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 177E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 180E' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 177W' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 174W' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 171W' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 168W' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 7' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 8' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 9' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 10' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 11' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 12' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 13' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 14' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 15' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 16' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 17' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 18' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 19' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 20' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 21' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 22' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 23' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 24' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 25' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 26' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 27' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 28' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 29' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 30' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 31' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 32' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 33' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 34' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 35' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 36' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 37' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 38' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 39' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 40' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 41' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 42' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 43' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 44' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 45' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 46' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 47' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 48' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 49' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 50' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 51' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 52' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 53' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 54' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 55' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 56' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 57' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 58' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 59' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 60' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 61' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 62' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 63' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 64' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 21E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 24E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 27E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 30E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 33E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 36E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 39E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 42E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 45E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 48E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 51E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 54E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 57E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 60E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 63E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 66E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 69E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 72E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 75E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 78E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 81E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 84E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 87E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 90E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 93E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 96E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 99E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 102E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 105E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 108E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 111E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 114E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 117E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 120E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 123E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 126E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 129E' ,
'Tete / UTM zone 36S' ,
'Tete / UTM zone 37S' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 132E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 135E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 138E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 141E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 144E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 147E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 150E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 153E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 156E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 159E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 162E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 165E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 168E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 171E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 174E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 177E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 180E' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 177W' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 174W' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 171W' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 168W' ,
'NAD83(HARN) / Alabama East' ,
'NAD83(HARN) / Alabama West' ,
'NAD83(HARN) / Arizona East' ,
'NAD83(HARN) / Arizona Central' ,
'NAD83(HARN) / Arizona West' ,
'NAD83(HARN) / Arkansas North' ,
'NAD83(HARN) / Arkansas South' ,
'NAD83(HARN) / California zone 1' ,
'NAD83(HARN) / California zone 2' ,
'NAD83(HARN) / California zone 3' ,
'NAD83(HARN) / California zone 4' ,
'NAD83(HARN) / California zone 5' ,
'NAD83(HARN) / California zone 6' ,
'NAD83(HARN) / Colorado North' ,
'NAD83(HARN) / Colorado Central' ,
'NAD83(HARN) / Colorado South' ,
'NAD83(HARN) / Connecticut' ,
'NAD83(HARN) / Delaware' ,
'NAD83(HARN) / Florida East' ,
'NAD83(HARN) / Florida West' ,
'NAD83(HARN) / Florida North' ,
'NAD83(HARN) / Georgia East' ,
'NAD83(HARN) / Georgia West' ,
'NAD83(HARN) / Hawaii zone 1' ,
'NAD83(HARN) / Hawaii zone 2' ,
'NAD83(HARN) / Hawaii zone 3' ,
'NAD83(HARN) / Hawaii zone 4' ,
'NAD83(HARN) / Hawaii zone 5' ,
'NAD83(HARN) / Idaho East' ,
'NAD83(HARN) / Idaho Central' ,
'NAD83(HARN) / Idaho West' ,
'NAD83(HARN) / Illinois East' ,
'NAD83(HARN) / Illinois West' ,
'NAD83(HARN) / Indiana East' ,
'NAD83(HARN) / Indiana West' ,
'NAD83(HARN) / Iowa North' ,
'NAD83(HARN) / Iowa South' ,
'NAD83(HARN) / Kansas North' ,
'NAD83(HARN) / Kansas South' ,
'NAD83(HARN) / Kentucky North' ,
'NAD83(HARN) / Kentucky South' ,
'NAD83(HARN) / Louisiana North' ,
'NAD83(HARN) / Louisiana South' ,
'NAD83(HARN) / Maine East' ,
'NAD83(HARN) / Maine West' ,
'NAD83(HARN) / Maryland' ,
'NAD83(HARN) / Massachusetts Mainland' ,
'NAD83(HARN) / Massachusetts Island' ,
'NAD83(HARN) / Michigan North' ,
'NAD83(HARN) / Michigan Central' ,
'NAD83(HARN) / Michigan South' ,
'NAD83(HARN) / Minnesota North' ,
'NAD83(HARN) / Minnesota Central' ,
'NAD83(HARN) / Minnesota South' ,
'NAD83(HARN) / Mississippi East' ,
'NAD83(HARN) / Mississippi West' ,
'NAD83(HARN) / Missouri East' ,
'NAD83(HARN) / Missouri Central' ,
'NAD83(HARN) / Missouri West' ,
'NAD83(HARN) / Montana' ,
'NAD83(HARN) / Nebraska' ,
'NAD83(HARN) / Nevada East' ,
'NAD83(HARN) / Nevada Central' ,
'NAD83(HARN) / Nevada West' ,
'NAD83(HARN) / New Hampshire' ,
'NAD83(HARN) / New Jersey' ,
'NAD83(HARN) / New Mexico East' ,
'NAD83(HARN) / New Mexico Central' ,
'NAD83(HARN) / New Mexico West' ,
'NAD83(HARN) / New York East' ,
'NAD83(HARN) / New York Central' ,
'NAD83(HARN) / New York West' ,
'NAD83(HARN) / New York Long Island' ,
'NAD83(HARN) / North Dakota North' ,
'NAD83(HARN) / North Dakota South' ,
'NAD83(HARN) / Ohio North' ,
'NAD83(HARN) / Ohio South' ,
'NAD83(HARN) / Oklahoma North' ,
'NAD83(HARN) / Oklahoma South' ,
'NAD83(HARN) / Oregon North' ,
'NAD83(HARN) / Oregon South' ,
'NAD83(HARN) / Rhode Island' ,
'NAD83(HARN) / South Dakota North' ,
'NAD83(HARN) / South Dakota South' ,
'NAD83(HARN) / Tennessee' ,
'NAD83(HARN) / Texas North' ,
'NAD83(HARN) / Texas North Central' ,
'NAD83(HARN) / Texas Central' ,
'NAD83(HARN) / Texas South Central' ,
'NAD83(HARN) / Texas South' ,
'NAD83(HARN) / Utah North' ,
'NAD83(HARN) / Utah Central' ,
'NAD83(HARN) / Utah South' ,
'NAD83(HARN) / Vermont' ,
'NAD83(HARN) / Virginia North' ,
'NAD83(HARN) / Virginia South' ,
'NAD83(HARN) / Washington North' ,
'NAD83(HARN) / Washington South' ,
'NAD83(HARN) / West Virginia North' ,
'NAD83(HARN) / West Virginia South' ,
'NAD83(HARN) / Wisconsin North' ,
'NAD83(HARN) / Wisconsin Central' ,
'NAD83(HARN) / Wisconsin South' ,
'NAD83(HARN) / Wyoming East' ,
'NAD83(HARN) / Wyoming East Central' ,
'NAD83(HARN) / Wyoming West Central' ,
'NAD83(HARN) / Wyoming West' ,
'NAD83(HARN) / Puerto Rico and Virgin Is.' ,
'NAD83(HARN) / Arizona East (ft)' ,
'NAD83(HARN) / Arizona Central (ft)' ,
'NAD83(HARN) / Arizona West (ft)' ,
'NAD83(HARN) / California zone 1 (ftUS)' ,
'NAD83(HARN) / California zone 2 (ftUS)' ,
'NAD83(HARN) / California zone 3 (ftUS)' ,
'NAD83(HARN) / California zone 4 (ftUS)' ,
'NAD83(HARN) / California zone 5 (ftUS)' ,
'NAD83(HARN) / California zone 6 (ftUS)' ,
'NAD83(HARN) / Colorado North (ftUS)' ,
'NAD83(HARN) / Colorado Central (ftUS)' ,
'NAD83(HARN) / Colorado South (ftUS)' ,
'NAD83(HARN) / Connecticut (ftUS)' ,
'NAD83(HARN) / Delaware (ftUS)' ,
'NAD83(HARN) / Florida East (ftUS)' ,
'NAD83(HARN) / Florida West (ftUS)' ,
'NAD83(HARN) / Florida North (ftUS)' ,
'NAD83(HARN) / Georgia East (ftUS)' ,
'NAD83(HARN) / Georgia West (ftUS)' ,
'NAD83(HARN) / Idaho East (ftUS)' ,
'NAD83(HARN) / Idaho Central (ftUS)' ,
'NAD83(HARN) / Idaho West (ftUS)' ,
'NAD83(HARN) / Indiana East (ftUS)' ,
'NAD83(HARN) / Indiana West (ftUS)' ,
'NAD83(HARN) / Kentucky North (ftUS)' ,
'NAD83(HARN) / Kentucky South (ftUS)' ,
'NAD83(HARN) / Maryland (ftUS)' ,
'NAD83(HARN) / Massachusetts Mainland (ftUS)' ,
'NAD83(HARN) / Massachusetts Island (ftUS)' ,
'NAD83(HARN) / Michigan North (ft)' ,
'NAD83(HARN) / Michigan Central (ft)' ,
'NAD83(HARN) / Michigan South (ft)' ,
'NAD83(HARN) / Mississippi East (ftUS)' ,
'NAD83(HARN) / Mississippi West (ftUS)' ,
'NAD83(HARN) / Montana (ft)' ,
'NAD83(HARN) / New Mexico East (ftUS)' ,
'NAD83(HARN) / New Mexico Central (ftUS)' ,
'NAD83(HARN) / New Mexico West (ftUS)' ,
'NAD83(HARN) / New York East (ftUS)' ,
'NAD83(HARN) / New York Central (ftUS)' ,
'NAD83(HARN) / New York West (ftUS)' ,
'NAD83(HARN) / New York Long Island (ftUS)' ,
'NAD83(HARN) / North Dakota North (ft)' ,
'NAD83(HARN) / North Dakota South (ft)' ,
'NAD83(HARN) / Oklahoma North (ftUS)' ,
'NAD83(HARN) / Oklahoma South (ftUS)' ,
'NAD83(HARN) / Oregon North (ft)' ,
'NAD83(HARN) / Oregon South (ft)' ,
'NAD83(HARN) / Tennessee (ftUS)' ,
'NAD83(HARN) / Texas North (ftUS)' ,
'NAD83(HARN) / Texas North Central (ftUS)' ,
'NAD83(HARN) / Texas Central (ftUS)' ,
'NAD83(HARN) / Texas South Central (ftUS)' ,
'NAD83(HARN) / Texas South (ftUS)' ,
'NAD83(HARN) / Utah North (ft)' ,
'NAD83(HARN) / Utah Central (ft)' ,
'NAD83(HARN) / Utah South (ft)' ,
'NAD83(HARN) / Virginia North (ftUS)' ,
'NAD83(HARN) / Virginia South (ftUS)' ,
'NAD83(HARN) / Washington North (ftUS)' ,
'NAD83(HARN) / Washington South (ftUS)' ,
'NAD83(HARN) / Wisconsin North (ftUS)' ,
'NAD83(HARN) / Wisconsin Central (ftUS)' ,
'NAD83(HARN) / Wisconsin South (ftUS)' ,
'Beduaram / TM 13 NE' ,
'QND95 / Qatar National Grid' ,
'Segara / UTM zone 50S' ,
'Segara (Jakarta) / NEIEZ' ,
'Pulkovo 1942 / CS63 zone A1' ,
'Pulkovo 1942 / CS63 zone A2' ,
'Pulkovo 1942 / CS63 zone A3' ,
'Pulkovo 1942 / CS63 zone A4' ,
'Pulkovo 1942 / CS63 zone K2' ,
'Pulkovo 1942 / CS63 zone K3' ,
'Pulkovo 1942 / CS63 zone K4' ,
'Porto Santo / UTM zone 28N' ,
'Selvagem Grande / UTM zone 28N' ,
'NAD83(CSRS) / SCoPQ zone 2' ,
'NAD83(CSRS) / MTM zone 3' ,
'NAD83(CSRS) / MTM zone 4' ,
'NAD83(CSRS) / MTM zone 5' ,
'NAD83(CSRS) / MTM zone 6' ,
'NAD83(CSRS) / MTM zone 7' ,
'NAD83(CSRS) / MTM zone 8' ,
'NAD83(CSRS) / MTM zone 9' ,
'NAD83(CSRS) / MTM zone 10' ,
'NAD83(CSRS) / New Brunswick Stereographic' ,
'NAD83(CSRS) / Prince Edward Isl. Stereographic (NAD83)' ,
'NAD83(CSRS) / UTM zone 11N' ,
'NAD83(CSRS) / UTM zone 12N' ,
'NAD83(CSRS) / UTM zone 13N' ,
'NAD83(CSRS) / UTM zone 17N' ,
'NAD83(CSRS) / UTM zone 18N' ,
'NAD83(CSRS) / UTM zone 19N' ,
'NAD83(CSRS) / UTM zone 20N' ,
'NAD83(CSRS) / UTM zone 21N' ,
'Lisbon 1890 (Lisbon) / Portugal Bonne' ,
'NAD27 / Alaska Albers' ,
'NAD83 / Indiana East (ftUS)' ,
'NAD83 / Indiana West (ftUS)' ,
'NAD83(HARN) / Indiana East (ftUS)' ,
'NAD83(HARN) / Indiana West (ftUS)' ,
'Fort Marigot / UTM zone 20N' ,
'Guadeloupe 1948 / UTM zone 20N' ,
'CSG67 / UTM zone 22N' ,
'RGFG95 / UTM zone 22N' ,
'Martinique 1938 / UTM zone 20N' ,
'RGR92 / UTM zone 40S' ,
'Tahiti 52 / UTM zone 6S' ,
'Tahaa 54 / UTM zone 5S' ,
'IGN72 Nuku Hiva / UTM zone 7S' ,
'K0 1949 / UTM zone 42S' ,
'Combani 1950 / UTM zone 38S' ,
'IGN56 Lifou / UTM zone 58S' ,
'IGN72 Grand Terre / UTM zone 58S' ,
'ST87 Ouvea / UTM zone 58S' ,
'RGNC 1991 / Lambert New Caledonia' ,
'Petrels 1972 / Terre Adelie Polar Stereographic' ,
'Perroud 1950 / Terre Adelie Polar Stereographic' ,
'Saint Pierre et Miquelon 1950 / UTM zone 21N' ,
'MOP78 / UTM zone 1S' ,
'RRAF 1991 / UTM zone 20N' ,
'Reunion 1947 / TM Reunion' ,
'NAD83 / Oregon LCC (m)' ,
'NAD83 / Oregon GIC Lambert (ft)' ,
'NAD83(HARN) / Oregon LCC (m)' ,
'NAD83(HARN) / Oregon GIC Lambert (ft)' ,
'IGN53 Mare / UTM zone 58S' ,
'ST84 Ile des Pins / UTM zone 58S' ,
'ST71 Belep / UTM zone 58S' ,
'NEA74 Noumea / UTM zone 58S' ,
'Grand Comoros / UTM zone 38S' ,
'Segara / NEIEZ' ,
'Batavia / NEIEZ' ,
'Makassar / NEIEZ' ,
'Monte Mario / Italy zone 1' ,
'Monte Mario / Italy zone 2' ,
'NAD83 / BC Albers' ,
'SWEREF99 TM' ,
'SWEREF99 12 00' ,
'SWEREF99 13 30' ,
'SWEREF99 15 00' ,
'SWEREF99 16 30' ,
'SWEREF99 18 00' ,
'SWEREF99 14 15' ,
'SWEREF99 15 45' ,
'SWEREF99 17 15' ,
'SWEREF99 18 45' ,
'SWEREF99 20 15' ,
'SWEREF99 21 45' ,
'SWEREF99 23 15' ,
'RT90 7.5 gon V' ,
'RT90 5 gon V' ,
'RT90 2.5 gon V' ,
'RT90 0 gon' ,
'RT90 2.5 gon O' ,
'RT90 5 gon O' ,
'RT38 7.5 gon V' ,
'RT38 5 gon V' ,
'RT38 2.5 gon V' ,
'RT38 0 gon' ,
'RT38 2.5 gon O' ,
'RT38 5 gon O' ,
'WGS 84 / Antarctic Polar Stereographic' ,
'WGS 84 / Australian Antarctic Polar Stereographic' ,
'WGS 84 / Australian Antarctic Lambert' ,
'ETRS89 / LCC Europe' ,
'ETRS89 / LAEA Europe' ,
'Moznet / UTM zone 36S' ,
'Moznet / UTM zone 37S' ,
'ETRS89 / TM26' ,
'ETRS89 / TM27' ,
'ETRS89 / UTM zone 28N (N-E)' ,
'ETRS89 / UTM zone 29N (N-E)' ,
'ETRS89 / UTM zone 30N (N-E)' ,
'ETRS89 / UTM zone 31N (N-E)' ,
'ETRS89 / UTM zone 32N (N-E)' ,
'ETRS89 / UTM zone 33N (N-E)' ,
'ETRS89 / UTM zone 34N (N-E)' ,
'ETRS89 / UTM zone 35N (N-E)' ,
'ETRS89 / UTM zone 36N (N-E)' ,
'ETRS89 / UTM zone 37N (N-E)' ,
'ETRS89 / TM38' ,
'ETRS89 / TM39' ,
'Reykjavik 1900 / Lambert 1900' ,
'Hjorsey 1955 / Lambert 1955' ,
'Hjorsey 1955 / UTM zone 26N' ,
'Hjorsey 1955 / UTM zone 27N' ,
'Hjorsey 1955 / UTM zone 28N' ,
'ISN93 / Lambert 1993' ,
'Helle 1954 / Jan Mayen Grid' ,
'LKS92 / Latvia TM' ,
'IGN72 Grande Terre / UTM zone 58S' ,
'Porto Santo 1995 / UTM zone 28N' ,
'Azores Oriental 1995 / UTM zone 26N' ,
'Azores Central 1995 / UTM zone 26N' ,
'IGM95 / UTM zone 32N' ,
'IGM95 / UTM zone 33N' ,
'ED50 / Jordan TM' ,
'ETRS89 / TM35FIN(E,N)' ,
'DHDN / Soldner Berlin' ,
'NAD27 / Wisconsin Transverse Mercator' ,
'NAD83 / Wisconsin Transverse Mercator' ,
'NAD83(HARN) / Wisconsin Transverse Mercator' ,
'NAD83 / Maine CS2000 East' ,
'NAD83 / Maine CS2000 Central' ,
'NAD83 / Maine CS2000 West' ,
'NAD83(HARN) / Maine CS2000 East' ,
'NAD83(HARN) / Maine CS2000 Central' ,
'NAD83(HARN) / Maine CS2000 West' ,
'NAD83 / Michigan Oblique Mercator' ,
'NAD83(HARN) / Michigan Oblique Mercator' ,
'NAD27 / Shackleford' ,
'NAD83 / Texas State Mapping System' ,
'NAD83 / Texas Centric Lambert Conformal' ,
'NAD83 / Texas Centric Albers Equal Area' ,
'NAD83(HARN) / Texas Centric Lambert Conformal' ,
'NAD83(HARN) / Texas Centric Albers Equal Area' ,
'NAD83 / Florida GDL Albers' ,
'NAD83(HARN) / Florida GDL Albers' ,
'NAD83 / Kentucky Single Zone' ,
'NAD83 / Kentucky Single Zone (ftUS)' ,
'NAD83(HARN) / Kentucky Single Zone' ,
'NAD83(HARN) / Kentucky Single Zone (ftUS)' ,
'Tokyo / UTM zone 51N' ,
'Tokyo / UTM zone 52N' ,
'Tokyo / UTM zone 53N' ,
'Tokyo / UTM zone 54N' ,
'Tokyo / UTM zone 55N' ,
'JGD2000 / UTM zone 51N' ,
'JGD2000 / UTM zone 52N' ,
'JGD2000 / UTM zone 53N' ,
'JGD2000 / UTM zone 54N' ,
'JGD2000 / UTM zone 55N' ,
'American Samoa 1962 / American Samoa Lambert' ,
'Mauritania 1999 / UTM zone 28N' ,
'Mauritania 1999 / UTM zone 29N' ,
'Mauritania 1999 / UTM zone 30N' ,
'Gulshan 303 / Bangladesh Transverse Mercator' ,
'GDA94 / SA Lambert' ,
'ETRS89 / Guernsey Grid' ,
'ETRS89 / Jersey Transverse Mercator' ,
'AGD66 / Vicgrid66' ,
'GDA94 / Vicgrid' ,
'GDA94 / Geoscience Australia Lambert' ,
'GDA94 / BCSG02' ,
'MAGNA-SIRGAS / Colombia Far West zone' ,
'MAGNA-SIRGAS / Colombia West zone' ,
'MAGNA-SIRGAS / Colombia Bogota zone' ,
'MAGNA-SIRGAS / Colombia East Central zone' ,
'MAGNA-SIRGAS / Colombia East zone' ,
'Douala 1948 / AEF west' ,
'Pulkovo 1942(58) / Poland zone I' ,
'PRS92 / Philippines zone 1' ,
'PRS92 / Philippines zone 2' ,
'PRS92 / Philippines zone 3' ,
'PRS92 / Philippines zone 4' ,
'PRS92 / Philippines zone 5' ,
'ETRS89 / ETRS-GK19FIN' ,
'ETRS89 / ETRS-GK20FIN' ,
'ETRS89 / ETRS-GK21FIN' ,
'ETRS89 / ETRS-GK22FIN' ,
'ETRS89 / ETRS-GK23FIN' ,
'ETRS89 / ETRS-GK24FIN' ,
'ETRS89 / ETRS-GK25FIN' ,
'ETRS89 / ETRS-GK26FIN' ,
'ETRS89 / ETRS-GK27FIN' ,
'ETRS89 / ETRS-GK28FIN' ,
'ETRS89 / ETRS-GK29FIN' ,
'ETRS89 / ETRS-GK30FIN' ,
'ETRS89 / ETRS-GK31FIN' ,
'Vanua Levu 1915 / Vanua Levu Grid' ,
'Viti Levu 1912 / Viti Levu Grid' ,
'Fiji 1956 / UTM zone 60S' ,
'Fiji 1956 / UTM zone 1S' ,
'Fiji 1986 / Fiji Map Grid' ,
'FD54 / Faroe Lambert' ,
'ETRS89 / Faroe Lambert' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 6' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger CM 18E' ,
'Indian 1960 / UTM zone 48N' ,
'Indian 1960 / UTM zone 49N' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 6' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger CM 18E' ,
'ST74' ,
'NAD83(CSRS) / BC Albers' ,
'NAD83(CSRS) / UTM zone 7N' ,
'NAD83(CSRS) / UTM zone 8N' ,
'NAD83(CSRS) / UTM zone 9N' ,
'NAD83(CSRS) / UTM zone 10N' ,
'NAD83(CSRS) / UTM zone 14N' ,
'NAD83(CSRS) / UTM zone 15N' ,
'NAD83(CSRS) / UTM zone 16N' ,
'NAD83 / Ontario MNR Lambert' ,
'NAD83(CSRS) / Ontario MNR Lambert' ,
'RGNC91-93 / Lambert New Caledonia' ,
'ST87 Ouvea / UTM zone 58S' ,
'NEA74 Noumea / Noumea Lambert' ,
'NEA74 Noumea / Noumea Lambert 2' ,
'Kertau (RSO) / RSO Malaya (ch)' ,
'Kertau (RSO) / RSO Malaya (m)' ,
'RGNC91-93 / UTM zone 57S' ,
'RGNC91-93 / UTM zone 58S' ,
'RGNC91-93 / UTM zone 59S' ,
'IGN53 Mare / UTM zone 59S' ,
'fk89 / Faroe Lambert FK89' ,
'NAD83 / Great Lakes Albers' ,
'NAD83 / Great Lakes and St Lawrence Albers' ,
'Indian 1960 / TM 106 NE' ,
'LGD2006 / Libya TM' ,
'GR96 / UTM zone 18N' ,
'GR96 / UTM zone 19N' ,
'GR96 / UTM zone 20N' ,
'GR96 / UTM zone 21N' ,
'GR96 / UTM zone 22N' ,
'GR96 / UTM zone 23N' ,
'GR96 / UTM zone 24N' ,
'GR96 / UTM zone 25N' ,
'GR96 / UTM zone 26N' ,
'GR96 / UTM zone 27N' ,
'GR96 / UTM zone 28N' ,
'GR96 / UTM zone 29N' ,
'LGD2006 / Libya TM zone 5' ,
'LGD2006 / Libya TM zone 6' ,
'LGD2006 / Libya TM zone 7' ,
'LGD2006 / Libya TM zone 8' ,
'LGD2006 / Libya TM zone 9' ,
'LGD2006 / Libya TM zone 10' ,
'LGD2006 / Libya TM zone 11' ,
'LGD2006 / Libya TM zone 12' ,
'LGD2006 / Libya TM zone 13' ,
'LGD2006 / UTM zone 32N' ,
'FD58 / Iraq zone' ,
'LGD2006 / UTM zone 33N' ,
'LGD2006 / UTM zone 34N' ,
'LGD2006 / UTM zone 35N' ,
'WGS 84 / SCAR IMW SP19-20' ,
'WGS 84 / SCAR IMW SP21-22' ,
'WGS 84 / SCAR IMW SP23-24' ,
'WGS 84 / SCAR IMW SQ01-02' ,
'WGS 84 / SCAR IMW SQ19-20' ,
'WGS 84 / SCAR IMW SQ21-22' ,
'WGS 84 / SCAR IMW SQ37-38' ,
'WGS 84 / SCAR IMW SQ39-40' ,
'WGS 84 / SCAR IMW SQ41-42' ,
'WGS 84 / SCAR IMW SQ43-44' ,
'WGS 84 / SCAR IMW SQ45-46' ,
'WGS 84 / SCAR IMW SQ47-48' ,
'WGS 84 / SCAR IMW SQ49-50' ,
'WGS 84 / SCAR IMW SQ51-52' ,
'WGS 84 / SCAR IMW SQ53-54' ,
'WGS 84 / SCAR IMW SQ55-56' ,
'WGS 84 / SCAR IMW SQ57-58' ,
'WGS 84 / SCAR IMW SR13-14' ,
'WGS 84 / SCAR IMW SR15-16' ,
'WGS 84 / SCAR IMW SR17-18' ,
'WGS 84 / SCAR IMW SR19-20' ,
'WGS 84 / SCAR IMW SR27-28' ,
'WGS 84 / SCAR IMW SR29-30' ,
'WGS 84 / SCAR IMW SR31-32' ,
'WGS 84 / SCAR IMW SR33-34' ,
'WGS 84 / SCAR IMW SR35-36' ,
'WGS 84 / SCAR IMW SR37-38' ,
'WGS 84 / SCAR IMW SR39-40' ,
'WGS 84 / SCAR IMW SR41-42' ,
'WGS 84 / SCAR IMW SR43-44' ,
'WGS 84 / SCAR IMW SR45-46' ,
'WGS 84 / SCAR IMW SR47-48' ,
'WGS 84 / SCAR IMW SR49-50' ,
'WGS 84 / SCAR IMW SR51-52' ,
'WGS 84 / SCAR IMW SR53-54' ,
'WGS 84 / SCAR IMW SR55-56' ,
'WGS 84 / SCAR IMW SR57-58' ,
'WGS 84 / SCAR IMW SR59-60' ,
'WGS 84 / SCAR IMW SS04-06' ,
'WGS 84 / SCAR IMW SS07-09' ,
'WGS 84 / SCAR IMW SS10-12' ,
'WGS 84 / SCAR IMW SS13-15' ,
'WGS 84 / SCAR IMW SS16-18' ,
'WGS 84 / SCAR IMW SS19-21' ,
'WGS 84 / SCAR IMW SS25-27' ,
'WGS 84 / SCAR IMW SS28-30' ,
'WGS 84 / SCAR IMW SS31-33' ,
'WGS 84 / SCAR IMW SS34-36' ,
'WGS 84 / SCAR IMW SS37-39' ,
'WGS 84 / SCAR IMW SS40-42' ,
'WGS 84 / SCAR IMW SS43-45' ,
'WGS 84 / SCAR IMW SS46-48' ,
'WGS 84 / SCAR IMW SS49-51' ,
'WGS 84 / SCAR IMW SS52-54' ,
'WGS 84 / SCAR IMW SS55-57' ,
'WGS 84 / SCAR IMW SS58-60' ,
'WGS 84 / SCAR IMW ST01-04' ,
'WGS 84 / SCAR IMW ST05-08' ,
'WGS 84 / SCAR IMW ST09-12' ,
'WGS 84 / SCAR IMW ST13-16' ,
'WGS 84 / SCAR IMW ST17-20' ,
'WGS 84 / SCAR IMW ST21-24' ,
'WGS 84 / SCAR IMW ST25-28' ,
'WGS 84 / SCAR IMW ST29-32' ,
'WGS 84 / SCAR IMW ST33-36' ,
'WGS 84 / SCAR IMW ST37-40' ,
'WGS 84 / SCAR IMW ST41-44' ,
'WGS 84 / SCAR IMW ST45-48' ,
'WGS 84 / SCAR IMW ST49-52' ,
'WGS 84 / SCAR IMW ST53-56' ,
'WGS 84 / SCAR IMW ST57-60' ,
'WGS 84 / SCAR IMW SU01-05' ,
'WGS 84 / SCAR IMW SU06-10' ,
'WGS 84 / SCAR IMW SU11-15' ,
'WGS 84 / SCAR IMW SU16-20' ,
'WGS 84 / SCAR IMW SU21-25' ,
'WGS 84 / SCAR IMW SU26-30' ,
'WGS 84 / SCAR IMW SU31-35' ,
'WGS 84 / SCAR IMW SU36-40' ,
'WGS 84 / SCAR IMW SU41-45' ,
'WGS 84 / SCAR IMW SU46-50' ,
'WGS 84 / SCAR IMW SU51-55' ,
'WGS 84 / SCAR IMW SU56-60' ,
'WGS 84 / SCAR IMW SV01-10' ,
'WGS 84 / SCAR IMW SV11-20' ,
'WGS 84 / SCAR IMW SV21-30' ,
'WGS 84 / SCAR IMW SV31-40' ,
'WGS 84 / SCAR IMW SV41-50' ,
'WGS 84 / SCAR IMW SV51-60' ,
'WGS 84 / SCAR IMW SW01-60' ,
'WGS 84 / USGS Transantarctic Mountains' ,
'Guam 1963 / Yap Islands' ,
'RGPF / UTM zone 5S' ,
'RGPF / UTM zone 6S' ,
'RGPF / UTM zone 7S' ,
'RGPF / UTM zone 8S' ,
'Estonian Coordinate System of 1992' ,
'Estonian Coordinate System of 1997' ,
'IGN63 Hiva Oa / UTM zone 7S' ,
'Fatu Iva 72 / UTM zone 7S' ,
'Tahiti 79 / UTM zone 6S' ,
'Moorea 87 / UTM zone 6S' ,
'Maupiti 83 / UTM zone 5S' ,
'Nakhl-e Ghanem / UTM zone 39N' ,
'GDA94 / NSW Lambert' ,
'NAD27 / California Albers' ,
'NAD83 / California Albers' ,
'NAD83(HARN) / California Albers' ,
'CSG67 / UTM zone 21N' ,
'RGFG95 / UTM zone 21N' ,
'Katanga 1955 / Katanga Lambert' ,
'Katanga 1955 / Katanga TM' ,
'Kasai 1953 / Congo TM zone 22' ,
'Kasai 1953 / Congo TM zone 24' ,
'IGC 1962 / Congo TM zone 12' ,
'IGC 1962 / Congo TM zone 14' ,
'IGC 1962 / Congo TM zone 16' ,
'IGC 1962 / Congo TM zone 18' ,
'IGC 1962 / Congo TM zone 20' ,
'IGC 1962 / Congo TM zone 22' ,
'IGC 1962 / Congo TM zone 24' ,
'IGC 1962 / Congo TM zone 26' ,
'IGC 1962 / Congo TM zone 28' ,
'IGC 1962 / Congo TM zone 30' ,
'Pulkovo 1942(58) / GUGiK-80' ,
'Pulkovo 1942(58) / 3-degree Gauss-Kruger zone 5' ,
'Pulkovo 1942(58) / 3-degree Gauss-Kruger zone 6' ,
'Pulkovo 1942(58) / 3-degree Gauss-Kruger zone 7' ,
'Pulkovo 1942(58) / 3-degree Gauss-Kruger zone 8' ,
'Pulkovo 1942(58) / Gauss-Kruger zone 3' ,
'Pulkovo 1942(58) / Gauss-Kruger zone 4' ,
'Pulkovo 1942(58) / Gauss-Kruger zone 5' ,
'IGN 1962 Kerguelen / UTM zone 42S' ,
'Le Pouce 1934 / Mauritius Grid' ,
'NAD83 / Alaska Albers' ,
'IGCB 1955 / Congo TM zone 12' ,
'IGCB 1955 / Congo TM zone 14' ,
'IGCB 1955 / Congo TM zone 16' ,
'IGCB 1955 / UTM zone 33S' ,
'Mauritania 1999 / UTM zone 28N' ,
'Mauritania 1999 / UTM zone 29N' ,
'Mauritania 1999 / UTM zone 30N' ,
'LKS94 / Lithuania TM' ,
'NAD83 / Statistics Canada Lambert' ,
'NAD83(CSRS) / Statistics Canada Lambert' ,
'WGS 84 / PDC Mercator' ,
'Pulkovo 1942 / CS63 zone C0' ,
'Pulkovo 1942 / CS63 zone C1' ,
'Pulkovo 1942 / CS63 zone C2' ,
'Mhast (onshore) / UTM zone 32S' ,
'Mhast (offshore) / UTM zone 32S' ,
'Egypt Gulf of Suez S-650 TL / Red Belt' ,
'Grand Cayman 1959 / UTM zone 17N' ,
'Little Cayman 1961 / UTM zone 17N' ,
'NAD83(HARN) / North Carolina' ,
'NAD83(HARN) / North Carolina (ftUS)' ,
'NAD83(HARN) / South Carolina' ,
'NAD83(HARN) / South Carolina (ft)' ,
'NAD83(HARN) / Pennsylvania North' ,
'NAD83(HARN) / Pennsylvania North (ftUS)' ,
'NAD83(HARN) / Pennsylvania South' ,
'NAD83(HARN) / Pennsylvania South (ftUS)' ,
'Hong Kong 1963 Grid System' ,
'IGN Astro 1960 / UTM zone 28N' ,
'IGN Astro 1960 / UTM zone 29N' ,
'IGN Astro 1960 / UTM zone 30N' ,
'NAD27 / UTM zone 59N' ,
'NAD27 / UTM zone 60N' ,
'NAD83 / UTM zone 59N' ,
'NAD83 / UTM zone 60N' ,
'FD54 / UTM zone 29N' ,
'GDM2000 / Peninsula RSO' ,
'GDM2000 / East Malaysia BRSO' ,
'GDM2000 / Johor Grid' ,
'GDM2000 / Sembilan and Melaka Grid' ,
'GDM2000 / Pahang Grid' ,
'GDM2000 / Selangor Grid' ,
'GDM2000 / Terengganu Grid' ,
'GDM2000 / Pinang Grid' ,
'GDM2000 / Kedah and Perlis Grid' ,
'GDM2000 / Perak Grid' ,
'GDM2000 / Kelantan Grid' ,
'KKJ / Finland zone 0' ,
'KKJ / Finland zone 5' ,
'Pulkovo 1942 / Caspian Sea Mercator' ,
'Pulkovo 1942 / 3-degree Gauss-Kruger zone 60' ,
'Pulkovo 1995 / 3-degree Gauss-Kruger zone 60' ,
'Karbala 1979 / UTM zone 37N' ,
'Karbala 1979 / UTM zone 38N' ,
'Karbala 1979 / UTM zone 39N' ,
'Nahrwan 1934 / Iraq zone' ,
'WGS 84 / World Mercator' ,
'PD/83 / 3-degree Gauss-Kruger zone 3' ,
'PD/83 / 3-degree Gauss-Kruger zone 4' ,
'RD/83 / 3-degree Gauss-Kruger zone 4' ,
'RD/83 / 3-degree Gauss-Kruger zone 5' ,
'NAD83 / Alberta 10-TM (Forest)' ,
'NAD83 / Alberta 10-TM (Resource)' ,
'NAD83(CSRS) / Alberta 10-TM (Forest)' ,
'NAD83(CSRS) / Alberta 10-TM (Resource)' ,
'NAD83(HARN) / North Carolina (ftUS)' ,
'VN-2000 / UTM zone 48N' ,
'VN-2000 / UTM zone 49N' ,
'Hong Kong 1963 Grid System' ,
'NSIDC EASE-Grid North' ,
'NSIDC EASE-Grid South' ,
'NSIDC EASE-Grid Global' ,
'NSIDC Sea Ice Polar Stereographic North' ,
'NSIDC Sea Ice Polar Stereographic South' ,
'WGS 84 / NSIDC Sea Ice Polar Stereographic North' ,
'SVY21 / Singapore TM' ,
'WGS 72BE / South China Sea Lambert' ,
'ETRS89 / Austria Lambert' ,
'NAD83 / Iowa North (ftUS)' ,
'NAD83 / Iowa South (ftUS)' ,
'NAD83 / Kansas North (ftUS)' ,
'NAD83 / Kansas South (ftUS)' ,
'NAD83 / Nevada East (ftUS)' ,
'NAD83 / Nevada Central (ftUS)' ,
'NAD83 / Nevada West (ftUS)' ,
'NAD83 / New Jersey (ftUS)' ,
'NAD83(HARN) / Iowa North (ftUS)' ,
'NAD83(HARN) / Iowa South (ftUS)' ,
'NAD83(HARN) / Kansas North (ftUS)' ,
'NAD83(HARN) / Kansas South (ftUS)' ,
'NAD83(HARN) / Nevada East (ftUS)' ,
'NAD83(HARN) / Nevada Central (ftUS)' ,
'NAD83(HARN) / Nevada West (ftUS)' ,
'NAD83(HARN) / New Jersey (ftUS)' ,
'NAD83 / Arkansas North (ftUS)' ,
'NAD83 / Arkansas South (ftUS)' ,
'NAD83 / Illinois East (ftUS)' ,
'NAD83 / Illinois West (ftUS)' ,
'NAD83 / New Hampshire (ftUS)' ,
'NAD83 / Rhode Island (ftUS)' ,
'PSD93 / UTM zone 39N' ,
'PSD93 / UTM zone 40N' ,
'NAD83(HARN) / Arkansas North (ftUS)' ,
'NAD83(HARN) / Arkansas South (ftUS)' ,
'NAD83(HARN) / Illinois East (ftUS)' ,
'NAD83(HARN) / Illinois West (ftUS)' ,
'NAD83(HARN) / New Hampshire (ftUS)' ,
'NAD83(HARN) / Rhode Island (ftUS)' ,
'ETRS89 / Belgian Lambert 2005' ,
'JAD2001 / Jamaica Metric Grid' ,
'JAD2001 / UTM zone 17N' ,
'JAD2001 / UTM zone 18N' ,
'NAD83 / Louisiana North (ftUS)' ,
'NAD83 / Louisiana South (ftUS)' ,
'NAD83 / Louisiana Offshore (ftUS)' ,
'NAD83 / South Dakota North (ftUS)' ,
'NAD83 / South Dakota South (ftUS)' ,
'NAD83(HARN) / Louisiana North (ftUS)' ,
'NAD83(HARN) / Louisiana South (ftUS)' ,
'NAD83(HARN) / South Dakota North (ftUS)' ,
'NAD83(HARN) / South Dakota South (ftUS)' ,
'Fiji 1986 / Fiji Map Grid' ,
'Dabola 1981 / UTM zone 28N' ,
'Dabola 1981 / UTM zone 29N' ,
'NAD83 / Maine CS2000 Central' ,
'NAD83(HARN) / Maine CS2000 Central' ,
'NAD83(NSRS2007) / Alabama East' ,
'NAD83(NSRS2007) / Alabama West' ,
'NAD83(NSRS2007) / Alaska Albers' ,
'NAD83(NSRS2007) / Alaska zone 1' ,
'NAD83(NSRS2007) / Alaska zone 2' ,
'NAD83(NSRS2007) / Alaska zone 3' ,
'NAD83(NSRS2007) / Alaska zone 4' ,
'NAD83(NSRS2007) / Alaska zone 5' ,
'NAD83(NSRS2007) / Alaska zone 6' ,
'NAD83(NSRS2007) / Alaska zone 7' ,
'NAD83(NSRS2007) / Alaska zone 8' ,
'NAD83(NSRS2007) / Alaska zone 9' ,
'NAD83(NSRS2007) / Alaska zone 10' ,
'NAD83(NSRS2007) / Arizona Central' ,
'NAD83(NSRS2007) / Arizona Central (ft)' ,
'NAD83(NSRS2007) / Arizona East' ,
'NAD83(NSRS2007) / Arizona East (ft)' ,
'NAD83(NSRS2007) / Arizona West' ,
'NAD83(NSRS2007) / Arizona West (ft)' ,
'NAD83(NSRS2007) / Arkansas North' ,
'NAD83(NSRS2007) / Arkansas North (ftUS)' ,
'NAD83(NSRS2007) / Arkansas South' ,
'NAD83(NSRS2007) / Arkansas South (ftUS)' ,
'NAD83(NSRS2007) / California Albers' ,
'NAD83(NSRS2007) / California zone 1' ,
'NAD83(NSRS2007) / California zone 1 (ftUS)' ,
'NAD83(NSRS2007) / California zone 2' ,
'NAD83(NSRS2007) / California zone 2 (ftUS)' ,
'NAD83(NSRS2007) / California zone 3' ,
'NAD83(NSRS2007) / California zone 3 (ftUS)' ,
'NAD83(NSRS2007) / California zone 4' ,
'NAD83(NSRS2007) / California zone 4 (ftUS)' ,
'NAD83(NSRS2007) / California zone 5' ,
'NAD83(NSRS2007) / California zone 5 (ftUS)' ,
'NAD83(NSRS2007) / California zone 6' ,
'NAD83(NSRS2007) / California zone 6 (ftUS)' ,
'NAD83(NSRS2007) / Colorado Central' ,
'NAD83(NSRS2007) / Colorado Central (ftUS)' ,
'NAD83(NSRS2007) / Colorado North' ,
'NAD83(NSRS2007) / Colorado North (ftUS)' ,
'NAD83(NSRS2007) / Colorado South' ,
'NAD83(NSRS2007) / Colorado South (ftUS)' ,
'NAD83(NSRS2007) / Connecticut' ,
'NAD83(NSRS2007) / Connecticut (ftUS)' ,
'NAD83(NSRS2007) / Delaware' ,
'NAD83(NSRS2007) / Delaware (ftUS)' ,
'NAD83(NSRS2007) / Florida East' ,
'NAD83(NSRS2007) / Florida East (ftUS)' ,
'NAD83(NSRS2007) / Florida GDL Albers' ,
'NAD83(NSRS2007) / Florida North' ,
'NAD83(NSRS2007) / Florida North (ftUS)' ,
'NAD83(NSRS2007) / Florida West' ,
'NAD83(NSRS2007) / Florida West (ftUS)' ,
'NAD83(NSRS2007) / Georgia East' ,
'NAD83(NSRS2007) / Georgia East (ftUS)' ,
'NAD83(NSRS2007) / Georgia West' ,
'NAD83(NSRS2007) / Georgia West (ftUS)' ,
'NAD83(NSRS2007) / Idaho Central' ,
'NAD83(NSRS2007) / Idaho Central (ftUS)' ,
'NAD83(NSRS2007) / Idaho East' ,
'NAD83(NSRS2007) / Idaho East (ftUS)' ,
'NAD83(NSRS2007) / Idaho West' ,
'NAD83(NSRS2007) / Idaho West (ftUS)' ,
'NAD83(NSRS2007) / Illinois East' ,
'NAD83(NSRS2007) / Illinois East (ftUS)' ,
'NAD83(NSRS2007) / Illinois West' ,
'NAD83(NSRS2007) / Illinois West (ftUS)' ,
'NAD83(NSRS2007) / Indiana East' ,
'NAD83(NSRS2007) / Indiana East (ftUS)' ,
'NAD83(NSRS2007) / Indiana West' ,
'NAD83(NSRS2007) / Indiana West (ftUS)' ,
'NAD83(NSRS2007) / Iowa North' ,
'NAD83(NSRS2007) / Iowa North (ftUS)' ,
'NAD83(NSRS2007) / Iowa South' ,
'NAD83(NSRS2007) / Iowa South (ftUS)' ,
'NAD83(NSRS2007) / Kansas North' ,
'NAD83(NSRS2007) / Kansas North (ftUS)' ,
'NAD83(NSRS2007) / Kansas South' ,
'NAD83(NSRS2007) / Kansas South (ftUS)' ,
'NAD83(NSRS2007) / Kentucky North' ,
'NAD83(NSRS2007) / Kentucky North (ftUS)' ,
'NAD83(NSRS2007) / Kentucky Single Zone' ,
'NAD83(NSRS2007) / Kentucky Single Zone (ftUS)' ,
'NAD83(NSRS2007) / Kentucky South' ,
'NAD83(NSRS2007) / Kentucky South (ftUS)' ,
'NAD83(NSRS2007) / Louisiana North' ,
'NAD83(NSRS2007) / Louisiana North (ftUS)' ,
'NAD83(NSRS2007) / Louisiana South' ,
'NAD83(NSRS2007) / Louisiana South (ftUS)' ,
'NAD83(NSRS2007) / Maine CS2000 Central' ,
'NAD83(NSRS2007) / Maine CS2000 East' ,
'NAD83(NSRS2007) / Maine CS2000 West' ,
'NAD83(NSRS2007) / Maine East' ,
'NAD83(NSRS2007) / Maine West' ,
'NAD83(NSRS2007) / Maryland' ,
'NAD83 / Utah North (ftUS)' ,
'Old Hawaiian / Hawaii zone 1' ,
'Old Hawaiian / Hawaii zone 2' ,
'Old Hawaiian / Hawaii zone 3' ,
'Old Hawaiian / Hawaii zone 4' ,
'Old Hawaiian / Hawaii zone 5' ,
'NAD83 / Utah Central (ftUS)' ,
'NAD83 / Utah South (ftUS)' ,
'NAD83(HARN) / Utah North (ftUS)' ,
'NAD83(HARN) / Utah Central (ftUS)' ,
'NAD83(HARN) / Utah South (ftUS)' ,
'WGS 84 / North Pole LAEA Bering Sea' ,
'WGS 84 / North Pole LAEA Alaska' ,
'WGS 84 / North Pole LAEA Canada' ,
'WGS 84 / North Pole LAEA Atlantic' ,
'WGS 84 / North Pole LAEA Europe' ,
'WGS 84 / North Pole LAEA Russia' ,
'GDA94 / Australian Albers' ,
'NAD83 / Yukon Albers' ,
'NAD83(CSRS) / Yukon Albers' ,
'NAD83 / NWT Lambert' ,
'NAD83(CSRS) / NWT Lambert' ,
'NAD83(NSRS2007) / Maryland (ftUS)' ,
'NAD83(NSRS2007) / Massachusetts Island' ,
'NAD83(NSRS2007) / Massachusetts Island (ftUS)' ,
'NAD83(NSRS2007) / Massachusetts Mainland' ,
'NAD83(NSRS2007) / Massachusetts Mainland (ftUS)' ,
'NAD83(NSRS2007) / Michigan Central' ,
'NAD83(NSRS2007) / Michigan Central (ft)' ,
'NAD83(NSRS2007) / Michigan North' ,
'NAD83(NSRS2007) / Michigan North (ft)' ,
'NAD83(NSRS2007) / Michigan Oblique Mercator' ,
'NAD83(NSRS2007) / Michigan South' ,
'NAD83(NSRS2007) / Michigan South (ft)' ,
'NAD83(NSRS2007) / Minnesota Central' ,
'NAD83(NSRS2007) / Minnesota North' ,
'NAD83(NSRS2007) / Minnesota South' ,
'NAD83(NSRS2007) / Mississippi East' ,
'NAD83(NSRS2007) / Mississippi East (ftUS)' ,
'NAD83(NSRS2007) / Mississippi West' ,
'NAD83(NSRS2007) / Mississippi West (ftUS)' ,
'NAD83(NSRS2007) / Missouri Central' ,
'NAD83(NSRS2007) / Missouri East' ,
'NAD83(NSRS2007) / Missouri West' ,
'NAD83(NSRS2007) / Montana' ,
'NAD83(NSRS2007) / Montana (ft)' ,
'NAD83(NSRS2007) / Nebraska' ,
'NAD83(NSRS2007) / Nevada Central' ,
'NAD83(NSRS2007) / Nevada Central (ftUS)' ,
'NAD83(NSRS2007) / Nevada East' ,
'NAD83(NSRS2007) / Nevada East (ftUS)' ,
'NAD83(NSRS2007) / Nevada West' ,
'NAD83(NSRS2007) / Nevada West (ftUS)' ,
'NAD83(NSRS2007) / New Hampshire' ,
'NAD83(NSRS2007) / New Hampshire (ftUS)' ,
'NAD83(NSRS2007) / New Jersey' ,
'NAD83(NSRS2007) / New Jersey (ftUS)' ,
'NAD83(NSRS2007) / New Mexico Central' ,
'NAD83(NSRS2007) / New Mexico Central (ftUS)' ,
'NAD83(NSRS2007) / New Mexico East' ,
'NAD83(NSRS2007) / New Mexico East (ftUS)' ,
'NAD83(NSRS2007) / New Mexico West' ,
'NAD83(NSRS2007) / New Mexico West (ftUS)' ,
'NAD83(NSRS2007) / New York Central' ,
'NAD83(NSRS2007) / New York Central (ftUS)' ,
'NAD83(NSRS2007) / New York East' ,
'NAD83(NSRS2007) / New York East (ftUS)' ,
'NAD83(NSRS2007) / New York Long Island' ,
'NAD83(NSRS2007) / New York Long Island (ftUS)' ,
'NAD83(NSRS2007) / New York West' ,
'NAD83(NSRS2007) / New York West (ftUS)' ,
'NAD83(NSRS2007) / North Carolina' ,
'NAD83(NSRS2007) / North Carolina (ftUS)' ,
'NAD83(NSRS2007) / North Dakota North' ,
'NAD83(NSRS2007) / North Dakota North (ft)' ,
'NAD83(NSRS2007) / North Dakota South' ,
'NAD83(NSRS2007) / North Dakota South (ft)' ,
'NAD83(NSRS2007) / Ohio North' ,
'NAD83(NSRS2007) / Ohio South' ,
'NAD83(NSRS2007) / Oklahoma North' ,
'NAD83(NSRS2007) / Oklahoma North (ftUS)' ,
'NAD83(NSRS2007) / Oklahoma South' ,
'NAD83(NSRS2007) / Oklahoma South (ftUS)' ,
'NAD83(NSRS2007) / Oregon LCC (m)' ,
'NAD83(NSRS2007) / Oregon GIC Lambert (ft)' ,
'NAD83(NSRS2007) / Oregon North' ,
'NAD83(NSRS2007) / Oregon North (ft)' ,
'NAD83(NSRS2007) / Oregon South' ,
'NAD83(NSRS2007) / Oregon South (ft)' ,
'NAD83(NSRS2007) / Pennsylvania North' ,
'NAD83(NSRS2007) / Pennsylvania North (ftUS)' ,
'NAD83(NSRS2007) / Pennsylvania South' ,
'NAD83(NSRS2007) / Pennsylvania South (ftUS)' ,
'NAD83(NSRS2007) / Rhode Island' ,
'NAD83(NSRS2007) / Rhode Island (ftUS)' ,
'NAD83(NSRS2007) / South Carolina' ,
'NAD83(NSRS2007) / South Carolina (ft)' ,
'NAD83(NSRS2007) / South Dakota North' ,
'NAD83(NSRS2007) / South Dakota North (ftUS)' ,
'NAD83(NSRS2007) / South Dakota South' ,
'NAD83(NSRS2007) / South Dakota South (ftUS)' ,
'NAD83(NSRS2007) / Tennessee' ,
'NAD83(NSRS2007) / Tennessee (ftUS)' ,
'NAD83(NSRS2007) / Texas Central' ,
'NAD83(NSRS2007) / Texas Central (ftUS)' ,
'NAD83(NSRS2007) / Texas Centric Albers Equal Area' ,
'NAD83(NSRS2007) / Texas Centric Lambert Conformal' ,
'NAD83(NSRS2007) / Texas North' ,
'NAD83(NSRS2007) / Texas North (ftUS)' ,
'NAD83(NSRS2007) / Texas North Central' ,
'NAD83(NSRS2007) / Texas North Central (ftUS)' ,
'NAD83(NSRS2007) / Texas South' ,
'NAD83(NSRS2007) / Texas South (ftUS)' ,
'NAD83(NSRS2007) / Texas South Central' ,
'NAD83(NSRS2007) / Texas South Central (ftUS)' ,
'NAD83(NSRS2007) / Utah Central' ,
'NAD83(NSRS2007) / Utah Central (ft)' ,
'NAD83(NSRS2007) / Utah Central (ftUS)' ,
'NAD83(NSRS2007) / Utah North' ,
'NAD83(NSRS2007) / Utah North (ft)' ,
'NAD83(NSRS2007) / Utah North (ftUS)' ,
'NAD83(NSRS2007) / Utah South' ,
'NAD83(NSRS2007) / Utah South (ft)' ,
'NAD83(NSRS2007) / Utah South (ftUS)' ,
'NAD83(NSRS2007) / Vermont' ,
'NAD83(NSRS2007) / Virginia North' ,
'NAD83(NSRS2007) / Virginia North (ftUS)' ,
'NAD83(NSRS2007) / Virginia South' ,
'NAD83(NSRS2007) / Virginia South (ftUS)' ,
'NAD83(NSRS2007) / Washington North' ,
'NAD83(NSRS2007) / Washington North (ftUS)' ,
'NAD83(NSRS2007) / Washington South' ,
'NAD83(NSRS2007) / Washington South (ftUS)' ,
'NAD83(NSRS2007) / West Virginia North' ,
'NAD83(NSRS2007) / West Virginia South' ,
'NAD83(NSRS2007) / Wisconsin Central' ,
'NAD83(NSRS2007) / Wisconsin Central (ftUS)' ,
'NAD83(NSRS2007) / Wisconsin North' ,
'NAD83(NSRS2007) / Wisconsin North (ftUS)' ,
'NAD83(NSRS2007) / Wisconsin South' ,
'NAD83(NSRS2007) / Wisconsin South (ftUS)' ,
'NAD83(NSRS2007) / Wisconsin Transverse Mercator' ,
'NAD83(NSRS2007) / Wyoming East' ,
'NAD83(NSRS2007) / Wyoming East Central' ,
'NAD83(NSRS2007) / Wyoming West Central' ,
'NAD83(NSRS2007) / Wyoming West' ,
'NAD83(NSRS2007) / UTM zone 59N' ,
'NAD83(NSRS2007) / UTM zone 60N' ,
'NAD83(NSRS2007) / UTM zone 1N' ,
'NAD83(NSRS2007) / UTM zone 2N' ,
'NAD83(NSRS2007) / UTM zone 3N' ,
'NAD83(NSRS2007) / UTM zone 4N' ,
'NAD83(NSRS2007) / UTM zone 5N' ,
'NAD83(NSRS2007) / UTM zone 6N' ,
'NAD83(NSRS2007) / UTM zone 7N' ,
'NAD83(NSRS2007) / UTM zone 8N' ,
'NAD83(NSRS2007) / UTM zone 9N' ,
'NAD83(NSRS2007) / UTM zone 10N' ,
'NAD83(NSRS2007) / UTM zone 11N' ,
'NAD83(NSRS2007) / UTM zone 12N' ,
'NAD83(NSRS2007) / UTM zone 13N' ,
'NAD83(NSRS2007) / UTM zone 14N' ,
'NAD83(NSRS2007) / UTM zone 15N' ,
'NAD83(NSRS2007) / UTM zone 16N' ,
'NAD83(NSRS2007) / UTM zone 17N' ,
'NAD83(NSRS2007) / UTM zone 18N' ,
'NAD83(NSRS2007) / UTM zone 19N' ,
'Reunion 1947 / TM Reunion' ,
'NAD83(NSRS2007) / Ohio North (ftUS)' ,
'NAD83(NSRS2007) / Ohio South (ftUS)' ,
'NAD83(NSRS2007) / Wyoming East (ftUS)' ,
'NAD83(NSRS2007) / Wyoming East Central (ftUS)' ,
'NAD83(NSRS2007) / Wyoming West Central (ftUS)' ,
'NAD83(NSRS2007) / Wyoming West (ftUS)' ,
'NAD83 / Ohio North (ftUS)' ,
'NAD83 / Ohio South (ftUS)' ,
'NAD83 / Wyoming East (ftUS)' ,
'NAD83 / Wyoming East Central (ftUS)' ,
'NAD83 / Wyoming West Central (ftUS)' ,
'NAD83 / Wyoming West (ftUS)' ,
'NAD83(HARN) / UTM zone 10N' ,
'NAD83(HARN) / UTM zone 11N' ,
'NAD83(HARN) / UTM zone 12N' ,
'NAD83(HARN) / UTM zone 13N' ,
'NAD83(HARN) / UTM zone 14N' ,
'NAD83(HARN) / UTM zone 15N' ,
'NAD83(HARN) / UTM zone 16N' ,
'NAD83(HARN) / UTM zone 17N' ,
'NAD83(HARN) / UTM zone 18N' ,
'NAD83(HARN) / UTM zone 19N' ,
'NAD83(HARN) / UTM zone 4N' ,
'NAD83(HARN) / UTM zone 5N' ,
'WGS 84 / Mercator 41' ,
'NAD83(HARN) / Ohio North (ftUS)' ,
'NAD83(HARN) / Ohio South (ftUS)' ,
'NAD83(HARN) / Wyoming East (ftUS)' ,
'NAD83(HARN) / Wyoming East Central (ftUS)' ,
'NAD83(HARN) / Wyoming West Central (ftUS)' ,
'NAD83(HARN) / Wyoming West (ftUS)' ,
'NAD83 / Hawaii zone 3 (ftUS)' ,
'NAD83(HARN) / Hawaii zone 3 (ftUS)' ,
'NAD83(CSRS) / UTM zone 22N' ,
'WGS 84 / South Georgia Lambert' ,
'ETRS89 / Portugal TM06' ,
'NZGD2000 / Chatham Island Circuit 2000' ,
'HTRS96 / Croatia TM' ,
'HTRS96 / Croatia LCC' ,
'HTRS96 / UTM zone 33N' ,
'HTRS96 / UTM zone 34N' ,
'Bermuda 1957 / UTM zone 20N' ,
'BDA2000 / Bermuda 2000 National Grid' ,
'NAD27 / Alberta 3TM ref merid 111 W' ,
'NAD27 / Alberta 3TM ref merid 114 W' ,
'NAD27 / Alberta 3TM ref merid 117 W' ,
'NAD27 / Alberta 3TM ref merid 120 W' ,
'NAD83 / Alberta 3TM ref merid 111 W' ,
'NAD83 / Alberta 3TM ref merid 114 W' ,
'NAD83 / Alberta 3TM ref merid 117 W' ,
'NAD83 / Alberta 3TM ref merid 120 W' ,
'NAD83(CSRS) / Alberta 3TM ref merid 111 W' ,
'NAD83(CSRS) / Alberta 3TM ref merid 114 W' ,
'NAD83(CSRS) / Alberta 3TM ref merid 117 W' ,
'NAD83(CSRS) / Alberta 3TM ref merid 120 W' ,
'Pitcairn 2006 / Pitcairn TM 2006' ,
'Pitcairn 1967 / UTM zone 9S' ,
'Popular Visualisation CRS / Mercator' ,
'World Equidistant Cylindrical (Sphere)' ,
'MGI / Slovene National Grid' ,
'NZGD2000 / Auckland Islands TM 2000' ,
'NZGD2000 / Campbell Island TM 2000' ,
'NZGD2000 / Antipodes Islands TM 2000' ,
'NZGD2000 / Raoul Island TM 2000' ,
'NZGD2000 / Chatham Islands TM 2000' ,
'Slovenia 1996 / Slovene National Grid' ,
'NAD27 / Cuba Norte' ,
'NAD27 / Cuba Sur' ,
'NAD27 / MTQ Lambert' ,
'NAD83 / MTQ Lambert' ,
'NAD83(CSRS) / MTQ Lambert' ,
'NAD27 / Alberta 3TM ref merid 120 W' ,
'NAD83 / Alberta 3TM ref merid 120 W' ,
'NAD83(CSRS) / Alberta 3TM ref merid 120 W' ,
'ETRS89 / Belgian Lambert 2008' ,
'NAD83 / Mississippi TM' ,
'NAD83(HARN) / Mississippi TM' ,
'NAD83(NSRS2007) / Mississippi TM' ,
'HD1909' ,
'TWD67' ,
'TWD97' ,
'TWD97' ,
'TWD97' ,
'TWD97 / TM2 zone 119' ,
'TWD97 / TM2 zone 121' ,
'TWD67 / TM2 zone 119' ,
'TWD67 / TM2 zone 121' ,
'Hu Tzu Shan 1950 / UTM zone 51N' ,
'WGS 84 / PDC Mercator' ,
'Pulkovo 1942(58) / Gauss-Kruger zone 2' ,
'Pulkovo 1942(83) / Gauss-Kruger zone 2' ,
'Pulkovo 1942(83) / Gauss-Kruger zone 3' ,
'Pulkovo 1942(83) / Gauss-Kruger zone 4' ,
'Pulkovo 1942(58) / 3-degree Gauss-Kruger zone 3' ,
'Pulkovo 1942(58) / 3-degree Gauss-Kruger zone 4' ,
'Pulkovo 1942(58) / 3-degree Gauss-Kruger zone 9' ,
'Pulkovo 1942(58) / 3-degree Gauss-Kruger zone 10' ,
'Pulkovo 1942(83) / 3-degree Gauss-Kruger zone 6' ,
'Pulkovo 1942(83) / 3-degree Gauss-Kruger zone 7' ,
'Pulkovo 1942(83) / 3-degree Gauss-Kruger zone 8' ,
'Pulkovo 1942(58) / Stereo70' ,
'SWEREF99 / RT90 7.5 gon V emulation' ,
'SWEREF99 / RT90 5 gon V emulation' ,
'SWEREF99 / RT90 2.5 gon V emulation' ,
'SWEREF99 / RT90 0 gon emulation' ,
'SWEREF99 / RT90 2.5 gon O emulation' ,
'SWEREF99 / RT90 5 gon O emulation' ,
'NZGD2000 / NZCS2000' ,
'RSRGD2000 / DGLC2000' ,
'County ST74' ,
'EGM2008 height' ,
'WGS 84 / Pseudo-Mercator' ,
'ETRS89 / GK19FIN' ,
'ETRS89 / GK20FIN' ,
'ETRS89 / GK21FIN' ,
'ETRS89 / GK22FIN' ,
'ETRS89 / GK23FIN' ,
'ETRS89 / GK24FIN' ,
'ETRS89 / GK25FIN' ,
'ETRS89 / GK26FIN' ,
'ETRS89 / GK27FIN' ,
'ETRS89 / GK28FIN' ,
'ETRS89 / GK29FIN' ,
'ETRS89 / GK30FIN' ,
'ETRS89 / GK31FIN' ,
'Fao 1979 height' ,
'IGRS' ,
'IGRS' ,
'IGRS' ,
'IGRS / UTM zone 37N' ,
'IGRS / UTM zone 38N' ,
'IGRS / UTM zone 39N' ,
'ED50 / Iraq National Grid' ,
'N2000 height' ,
'KKJ / Finland Uniform Coordinate System + N60 height' ,
'ETRS89 / TM35FIN(N,E) + N60 height' ,
'ETRS89 / TM35FIN(N,E) + N2000 height' ,
'MGI 1901' ,
'MGI 1901 / Balkans zone 5' ,
'MGI 1901 / Balkans zone 6' ,
'MGI 1901 / Balkans zone 7' ,
'MGI 1901 / Balkans zone 8' ,
'MGI 1901 / Slovenia Grid' ,
'MGI 1901 / Slovene National Grid' ,
'Puerto Rico / UTM zone 20N' ,
'RGF93 / CC42' ,
'RGF93 / CC43' ,
'RGF93 / CC44' ,
'RGF93 / CC45' ,
'RGF93 / CC46' ,
'RGF93 / CC47' ,
'RGF93 / CC48' ,
'RGF93 / CC49' ,
'RGF93 / CC50' ,
'NAD83 / Virginia Lambert' ,
'NAD83(HARN) / Virginia Lambert' ,
'NAD83(NSRS2007) / Virginia Lambert' ,
'WGS 84 / NSIDC EASE-Grid North' ,
'WGS 84 / NSIDC EASE-Grid South' ,
'WGS 84 / NSIDC EASE-Grid Global' ,
'WGS 84 / NSIDC Sea Ice Polar Stereographic South' ,
'NAD83 / Canada Atlas Lambert' ,
'NAD83(CSRS) / Canada Atlas Lambert' ,
'Katanga 1955 / Katanga Lambert' ,
'Katanga 1955 / Katanga Gauss zone A' ,
'Katanga 1955 / Katanga Gauss zone B' ,
'Katanga 1955 / Katanga Gauss zone C' ,
'Katanga 1955 / Katanga Gauss zone D' ,
'Puerto Rico State Plane CS of 1927' ,
'Puerto Rico / St. Croix' ,
'Guam 1963 / Guam SPCS' ,
'WGS 84 / Mercator 41' ,
'WGS 84 / Arctic Polar Stereographic' ,
'WGS 84 / IBCAO Polar Stereographic' ,
'WGS 84 / Dubai Local TM' ,
'MOLDREF99' ,
'Unknown datum based upon the Airy 1830 ellipsoid' ,
'Unknown datum based upon the Airy Modified 1849 ellipsoid' ,
'Unknown datum based upon the Australian National Spheroid' ,
'Unknown datum based upon the Bessel 1841 ellipsoid' ,
'Unknown datum based upon the Bessel Modified ellipsoid' ,
'Unknown datum based upon the Bessel Namibia ellipsoid' ,
'Unknown datum based upon the Clarke 1858 ellipsoid' ,
'Unknown datum based upon the Clarke 1866 ellipsoid' ,
'Unknown datum based upon the Clarke 1866 Michigan ellipsoid' ,
'Unknown datum based upon the Clarke 1880 (Benoit) ellipsoid' ,
'Unknown datum based upon the Clarke 1880 (IGN) ellipsoid' ,
'Unknown datum based upon the Clarke 1880 (RGS) ellipsoid' ,
'Unknown datum based upon the Clarke 1880 (Arc) ellipsoid' ,
'Unknown datum based upon the Clarke 1880 (SGA 1922) ellipsoid' ,
'Unknown datum based upon the Everest 1830 (1937 Adjustment) ellipsoid' ,
'Unknown datum based upon the Everest 1830 (1967 Definition) ellipsoid' ,
'MOLDREF99' ,
'Unknown datum based upon the Everest 1830 Modified ellipsoid' ,
'Unknown datum based upon the GRS 1980 ellipsoid' ,
'Unknown datum based upon the Helmert 1906 ellipsoid' ,
'Unknown datum based upon the Indonesian National Spheroid' ,
'Unknown datum based upon the International 1924 ellipsoid' ,
'MOLDREF99' ,
'Unknown datum based upon the Krassowsky 1940 ellipsoid' ,
'Unknown datum based upon the NWL 9D ellipsoid' ,
'MOLDREF99 / Moldova TM' ,
'Unknown datum based upon the Plessis 1817 ellipsoid' ,
'Unknown datum based upon the Struve 1860 ellipsoid' ,
'Unknown datum based upon the War Office ellipsoid' ,
'Unknown datum based upon the WGS 84 ellipsoid' ,
'Unknown datum based upon the GEM 10C ellipsoid' ,
'Unknown datum based upon the OSU86F ellipsoid' ,
'Unknown datum based upon the OSU91A ellipsoid' ,
'Unknown datum based upon the Clarke 1880 ellipsoid' ,
'Unknown datum based upon the Authalic Sphere' ,
'Unknown datum based upon the GRS 1967 ellipsoid' ,
'WGS 84 / TMzn35N' ,
'WGS 84 / TMzn36N' ,
'RGRDC 2005' ,
'RGRDC 2005' ,
'Unknown datum based upon the Average Terrestrial System 1977 ellipsoid' ,
'Unknown datum based upon the Everest (1830 Definition) ellipsoid' ,
'Unknown datum based upon the WGS 72 ellipsoid' ,
'Unknown datum based upon the Everest 1830 (1962 Definition) ellipsoid' ,
'Unknown datum based upon the Everest 1830 (1975 Definition) ellipsoid' ,
'RGRDC 2005' ,
'Unspecified datum based upon the GRS 1980 Authalic Sphere' ,
'RGRDC 2005 / Congo TM zone 12' ,
'RGRDC 2005 / Congo TM zone 14' ,
'RGRDC 2005 / Congo TM zone 16' ,
'RGRDC 2005 / Congo TM zone 18' ,
'Unspecified datum based upon the Clarke 1866 Authalic Sphere' ,
'Unspecified datum based upon the International 1924 Authalic Sphere' ,
'Unspecified datum based upon the Hughes 1980 ellipsoid' ,
'Popular Visualisation CRS' ,
'RGRDC 2005 / Congo TM zone 20' ,
'RGRDC 2005 / Congo TM zone 22' ,
'RGRDC 2005 / Congo TM zone 24' ,
'RGRDC 2005 / Congo TM zone 26' ,
'RGRDC 2005 / Congo TM zone 28' ,
'RGRDC 2005 / UTM zone 33S' ,
'RGRDC 2005 / UTM zone 34S' ,
'RGRDC 2005 / UTM zone 35S' ,
'Chua / UTM zone 23S' ,
'SREF98' ,
'SREF98' ,
'SREF98' ,
'REGCAN95' ,
'REGCAN95' ,
'REGCAN95' ,
'REGCAN95 / UTM zone 27N' ,
'REGCAN95 / UTM zone 28N' ,
'WGS 84 / World Equidistant Cylindrical' ,
'World Equidistant Cylindrical (Sphere)' ,
'ETRS89 / DKTM1' ,
'ETRS89 / DKTM2' ,
'ETRS89 / DKTM3' ,
'ETRS89 / DKTM4' ,
'ETRS89 / DKTM1 + DVR90 height' ,
'ETRS89 / DKTM2 + DVR90 height' ,
'ETRS89 / DKTM3 + DVR90 height' ,
'ETRS89 / DKTM4 + DVR90 height' ,
'Greek' ,
'GGRS87' ,
'ATS77' ,
'KKJ' ,
'RT90' ,
'Samboja' ,
'LKS94 (ETRS89)' ,
'Tete' ,
'Madzansua' ,
'Observatario' ,
'Moznet' ,
'Indian 1960' ,
'FD58' ,
'EST92' ,
'PSD93' ,
'Old Hawaiian' ,
'St. Lawrence Island' ,
'St. Paul Island' ,
'St. George Island' ,
'Puerto Rico' ,
'NAD83(CSRS98)' ,
'Israel 1993' ,
'Locodjo 1965' ,
'Abidjan 1987' ,
'Kalianpur 1937' ,
'Kalianpur 1962' ,
'Kalianpur 1975' ,
'Hanoi 1972' ,
'Hartebeesthoek94' ,
'CH1903' ,
'CH1903+' ,
'CHTRF95' ,
'NAD83(HARN)' ,
'Rassadiran' ,
'ED50(ED77)' ,
'Dabola 1981' ,
'S-JTSK' ,
'Mount Dillon' ,
'Naparima 1955' ,
'ELD79' ,
'Chos Malal 1914' ,
'Pampa del Castillo' ,
'Korean 1985' ,
'Yemen NGN96' ,
'South Yemen' ,
'Bissau' ,
'Korean 1995' ,
'NZGD2000' ,
'Accra' ,
'American Samoa 1962' ,
'SIRGAS 1995' ,
'RGF93' ,
'POSGAR' ,
'IRENET95' ,
'Sierra Leone 1924' ,
'Sierra Leone 1968' ,
'Australian Antarctic' ,
'Pulkovo 1942(83)' ,
'Pulkovo 1942(58)' ,
'EST97' ,
'Luxembourg 1930' ,
'Azores Occidental 1939' ,
'Azores Central 1948' ,
'Azores Oriental 1940' ,
'Madeira 1936' ,
'OSNI 1952' ,
'REGVEN' ,
'POSGAR 98' ,
'Albanian 1987' ,
'Douala 1948' ,
'Manoca 1962' ,
'Qornoq 1927' ,
'Scoresbysund 1952' ,
'Ammassalik 1958' ,
'Garoua' ,
'Kousseri' ,
'Egypt 1930' ,
'Pulkovo 1995' ,
'Adindan' ,
'AGD66' ,
'AGD84' ,
'Ain el Abd' ,
'Afgooye' ,
'Agadez' ,
'Lisbon' ,
'Aratu' ,
'Arc 1950' ,
'Arc 1960' ,
'Batavia' ,
'Barbados 1938' ,
'Beduaram' ,
'Beijing 1954' ,
'Belge 1950' ,
'Bermuda 1957' ,
'NAD83 / BLM 59N (ftUS)' ,
'Bogota 1975' ,
'Bukit Rimpah' ,
'Camacupa' ,
'Campo Inchauspe' ,
'Cape' ,
'Carthage' ,
'Chua' ,
'Corrego Alegre 1970-72' ,
'Cote d Ivoire' ,
'Deir ez Zor' ,
'Douala' ,
'Egypt 1907' ,
'ED50' ,
'ED87' ,
'Fahud' ,
'Gandajika 1970' ,
'Garoua' ,
'Guyane Francaise' ,
'Hu Tzu Shan 1950' ,
'HD72' ,
'ID74' ,
'Indian 1954' ,
'Indian 1975' ,
'Jamaica 1875' ,
'JAD69' ,
'Kalianpur 1880' ,
'Kandawala' ,
'Kertau 1968' ,
'KOC' ,
'La Canoa' ,
'PSAD56' ,
'Lake' ,
'Leigon' ,
'Liberia 1964' ,
'Lome' ,
'Luzon 1911' ,
'Hito XVIII 1963' ,
'Herat North' ,
'Mahe 1971' ,
'Makassar' ,
'ETRS89' ,
'Malongo 1987' ,
'Manoca' ,
'Merchich' ,
'Massawa' ,
'Minna' ,
'Mhast' ,
'Monte Mario' ,
'M poraloko' ,
'NAD27' ,
'NAD27 Michigan' ,
'NAD83' ,
'Nahrwan 1967' ,
'Naparima 1972' ,
'NZGD49' ,
'NGO 1948' ,
'Datum 73' ,
'NTF' ,
'NSWC 9Z-2' ,
'OSGB 1936' ,
'OSGB70' ,
'OS(SN)80' ,
'Padang' ,
'Palestine 1923' ,
'Pointe Noire' ,
'GDA94' ,
'Pulkovo 1942' ,
'Qatar 1974' ,
'Qatar 1948' ,
'Qornoq' ,
'Loma Quintana' ,
'Amersfoort' ,
'SAD69' ,
'Sapper Hill 1943' ,
'Schwarzeck' ,
'Segora' ,
'Serindung' ,
'Sudan' ,
'Tananarive' ,
'Timbalai 1948' ,
'TM65' ,
'TM75' ,
'Tokyo' ,
'Trinidad 1903' ,
'TC(1948)' ,
'Voirol 1875' ,
'Bern 1938' ,
'Nord Sahara 1959' ,
'RT38' ,
'Yacare' ,
'Yoff' ,
'Zanderij' ,
'MGI' ,
'Belge 1972' ,
'DHDN' ,
'Conakry 1905' ,
'Dealul Piscului 1930' ,
'Dealul Piscului 1970' ,
'NGN' ,
'KUDAMS' ,
'WGS 72' ,
'WGS 72BE' ,
'WGS 84' ,
'WGS 84 (geographic 3D)' ,
'WGS 84 (geocentric)' ,
'WGS 84 (3D)' ,
'ITRF88 (geocentric)' ,
'ITRF89 (geocentric)' ,
'ITRF90 (geocentric)' ,
'ITRF91 (geocentric)' ,
'ITRF92 (geocentric)' ,
'ITRF93 (geocentric)' ,
'ITRF94 (geocentric)' ,
'ITRF96 (geocentric)' ,
'ITRF97 (geocentric)' ,
'Australian Antarctic (3D)' ,
'Australian Antarctic (geocentric)' ,
'EST97 (3D)' ,
'EST97 (geocentric)' ,
'CHTRF95 (3D)' ,
'CHTRF95 (geocentric)' ,
'ETRS89 (3D)' ,
'ETRS89 (geocentric)' ,
'GDA94 (3D)' ,
'GDA94 (geocentric)' ,
'Hartebeesthoek94 (3D)' ,
'Hartebeesthoek94 (geocentric)' ,
'IRENET95 (3D)' ,
'IRENET95 (geocentric)' ,
'JGD2000 (3D)' ,
'JGD2000 (geocentric)' ,
'LKS94 (ETRS89) (3D)' ,
'LKS94 (ETRS89) (geocentric)' ,
'Moznet (3D)' ,
'Moznet (geocentric)' ,
'NAD83(CSRS) (3D)' ,
'NAD83(CSRS) (geocentric)' ,
'NAD83(HARN) (3D)' ,
'NAD83(HARN) (geocentric)' ,
'NZGD2000 (3D)' ,
'NZGD2000 (geocentric)' ,
'POSGAR 98 (3D)' ,
'POSGAR 98 (geocentric)' ,
'REGVEN (3D)' ,
'REGVEN (geocentric)' ,
'RGF93 (3D)' ,
'RGF93 (geocentric)' ,
'RGFG95 (3D)' ,
'RGFG95 (geocentric)' ,
'RGR92 (3D)' ,
'RGR92 (geocentric)' ,
'SIRGAS (3D)' ,
'SIRGAS (geocentric)' ,
'SWEREF99 (3D)' ,
'SWEREF99 (geocentric)' ,
'Yemen NGN96 (3D)' ,
'Yemen NGN96 (geocentric)' ,
'RGNC 1991 (3D)' ,
'RGNC 1991 (geocentric)' ,
'RRAF 1991 (3D)' ,
'RRAF 1991 (geocentric)' ,
'ITRF2000 (geocentric)' ,
'ISN93 (3D)' ,
'ISN93 (geocentric)' ,
'LKS92 (3D)' ,
'LKS92 (geocentric)' ,
'Kertau 1968 / Johor Grid' ,
'Kertau 1968 / Sembilan and Melaka Grid' ,
'Kertau 1968 / Pahang Grid' ,
'Kertau 1968 / Selangor Grid' ,
'Kertau 1968 / Terengganu Grid' ,
'Kertau 1968 / Pinang Grid' ,
'Kertau 1968 / Kedah and Perlis Grid' ,
'Kertau 1968 / Perak Revised Grid' ,
'Kertau 1968 / Kelantan Grid' ,
'NAD27 / BLM 59N (ftUS)' ,
'NAD27 / BLM 60N (ftUS)' ,
'NAD27 / BLM 1N (ftUS)' ,
'NAD27 / BLM 2N (ftUS)' ,
'NAD27 / BLM 3N (ftUS)' ,
'NAD27 / BLM 4N (ftUS)' ,
'NAD27 / BLM 5N (ftUS)' ,
'NAD27 / BLM 6N (ftUS)' ,
'NAD27 / BLM 7N (ftUS)' ,
'NAD27 / BLM 8N (ftUS)' ,
'NAD27 / BLM 9N (ftUS)' ,
'NAD27 / BLM 10N (ftUS)' ,
'NAD27 / BLM 11N (ftUS)' ,
'NAD27 / BLM 12N (ftUS)' ,
'NAD27 / BLM 13N (ftUS)' ,
'NAD83(HARN) / Guam Map Grid' ,
'Katanga 1955 / Katanga Lambert' ,
'Pulkovo 1942(83) / 3-degree Gauss-Kruger zone 7' ,
'NAD27 / BLM 18N (ftUS)' ,
'NAD27 / BLM 19N (ftUS)' ,
'NAD83 / BLM 60N (ftUS)' ,
'NAD83 / BLM 1N (ftUS)' ,
'NAD83 / BLM 2N (ftUS)' ,
'NAD83 / BLM 3N (ftUS)' ,
'NAD83 / BLM 4N (ftUS)' ,
'NAD83 / BLM 5N (ftUS)' ,
'NAD83 / BLM 6N (ftUS)' ,
'NAD83 / BLM 7N (ftUS)' ,
'NAD83 / BLM 8N (ftUS)' ,
'NAD83 / BLM 9N (ftUS)' ,
'NAD83 / BLM 10N (ftUS)' ,
'NAD83 / BLM 11N (ftUS)' ,
'NAD83 / BLM 12N (ftUS)' ,
'NAD83 / BLM 13N (ftUS)' ,
'Pulkovo 1942(83) / 3-degree Gauss-Kruger zone 8' ,
'NAD83(NSRS2007) / Puerto Rico and Virgin Is.' ,
'NAD83 / BLM 18N (ftUS)' ,
'NAD83 / BLM 19N (ftUS)' ,
'NZVD2009 height' ,
'NAD27 / Pennsylvania South' ,
'NAD27 / New York Long Island' ,
'NAD83 / South Dakota North (ftUS)' ,
'Dunedin-Bluff 1960 height' ,
'WGS 84 / Australian Centre for Remote Sensing Lambert' ,
'RGSPM06' ,
'RGSPM06' ,
'RGSPM06' ,
'RGSPM06 / UTM zone 21N' ,
'RGM04' ,
'RGM04' ,
'RGM04' ,
'RGM04 / UTM zone 38S' ,
'Cadastre 1997' ,
'Cadastre 1997' ,
'Cadastre 1997 / UTM zone 38S' ,
'Cadastre 1997' ,
'China Geodetic Coordinate System 2000' ,
'China Geodetic Coordinate System 2000' ,
'Mexico ITRF92' ,
'Mexico ITRF92' ,
'Mexico ITRF92' ,
'Mexico ITRF92 / UTM zone 11N' ,
'Mexico ITRF92 / UTM zone 12N' ,
'Mexico ITRF92 / UTM zone 13N' ,
'Mexico ITRF92 / UTM zone 14N' ,
'Mexico ITRF92 / UTM zone 15N' ,
'Mexico ITRF92 / UTM zone 16N' ,
'China Geodetic Coordinate System 2000' ,
'CGCS2000 / Gauss-Kruger zone 13' ,
'CGCS2000 / Gauss-Kruger zone 14' ,
'CGCS2000 / Gauss-Kruger zone 15' ,
'CGCS2000 / Gauss-Kruger zone 16' ,
'CGCS2000 / Gauss-Kruger zone 17' ,
'CGCS2000 / Gauss-Kruger zone 18' ,
'CGCS2000 / Gauss-Kruger zone 19' ,
'CGCS2000 / Gauss-Kruger zone 20' ,
'CGCS2000 / Gauss-Kruger zone 21' ,
'CGCS2000 / Gauss-Kruger zone 22' ,
'CGCS2000 / Gauss-Kruger zone 23' ,
'CGCS2000 / Gauss-Kruger CM 75E' ,
'CGCS2000 / Gauss-Kruger CM 81E' ,
'CGCS2000 / Gauss-Kruger CM 87E' ,
'CGCS2000 / Gauss-Kruger CM 93E' ,
'CGCS2000 / Gauss-Kruger CM 99E' ,
'CGCS2000 / Gauss-Kruger CM 105E' ,
'CGCS2000 / Gauss-Kruger CM 111E' ,
'CGCS2000 / Gauss-Kruger CM 117E' ,
'CGCS2000 / Gauss-Kruger CM 123E' ,
'CGCS2000 / Gauss-Kruger CM 129E' ,
'CGCS2000 / Gauss-Kruger CM 135E' ,
'CGCS2000 / 3-degree Gauss-Kruger zone 25' ,
'CGCS2000 / 3-degree Gauss-Kruger zone 26' ,
'CGCS2000 / 3-degree Gauss-Kruger zone 27' ,
'CGCS2000 / 3-degree Gauss-Kruger zone 28' ,
'CGCS2000 / 3-degree Gauss-Kruger zone 29' ,
'CGCS2000 / 3-degree Gauss-Kruger zone 30' ,
'CGCS2000 / 3-degree Gauss-Kruger zone 31' ,
'CGCS2000 / 3-degree Gauss-Kruger zone 32' ,
'CGCS2000 / 3-degree Gauss-Kruger zone 33' ,
'CGCS2000 / 3-degree Gauss-Kruger zone 34' ,
'CGCS2000 / 3-degree Gauss-Kruger zone 35' ,
'CGCS2000 / 3-degree Gauss-Kruger zone 36' ,
'CGCS2000 / 3-degree Gauss-Kruger zone 37' ,
'CGCS2000 / 3-degree Gauss-Kruger zone 38' ,
'CGCS2000 / 3-degree Gauss-Kruger zone 39' ,
'CGCS2000 / 3-degree Gauss-Kruger zone 40' ,
'CGCS2000 / 3-degree Gauss-Kruger zone 41' ,
'CGCS2000 / 3-degree Gauss-Kruger zone 42' ,
'CGCS2000 / 3-degree Gauss-Kruger zone 43' ,
'CGCS2000 / 3-degree Gauss-Kruger zone 44' ,
'CGCS2000 / 3-degree Gauss-Kruger zone 45' ,
'CGCS2000 / 3-degree Gauss-Kruger CM 75E' ,
'CGCS2000 / 3-degree Gauss-Kruger CM 78E' ,
'CGCS2000 / 3-degree Gauss-Kruger CM 81E' ,
'CGCS2000 / 3-degree Gauss-Kruger CM 84E' ,
'CGCS2000 / 3-degree Gauss-Kruger CM 87E' ,
'CGCS2000 / 3-degree Gauss-Kruger CM 90E' ,
'CGCS2000 / 3-degree Gauss-Kruger CM 93E' ,
'CGCS2000 / 3-degree Gauss-Kruger CM 96E' ,
'CGCS2000 / 3-degree Gauss-Kruger CM 99E' ,
'CGCS2000 / 3-degree Gauss-Kruger CM 102E' ,
'CGCS2000 / 3-degree Gauss-Kruger CM 105E' ,
'CGCS2000 / 3-degree Gauss-Kruger CM 108E' ,
'CGCS2000 / 3-degree Gauss-Kruger CM 111E' ,
'CGCS2000 / 3-degree Gauss-Kruger CM 114E' ,
'CGCS2000 / 3-degree Gauss-Kruger CM 117E' ,
'CGCS2000 / 3-degree Gauss-Kruger CM 120E' ,
'CGCS2000 / 3-degree Gauss-Kruger CM 123E' ,
'CGCS2000 / 3-degree Gauss-Kruger CM 126E' ,
'CGCS2000 / 3-degree Gauss-Kruger CM 129E' ,
'CGCS2000 / 3-degree Gauss-Kruger CM 132E' ,
'CGCS2000 / 3-degree Gauss-Kruger CM 135E' ,
'New Beijing' ,
'RRAF 1991' ,
'RRAF 1991' ,
'RRAF 1991' ,
'RRAF 1991 / UTM zone 20N' ,
'New Beijing / Gauss-Kruger zone 13' ,
'New Beijing / Gauss-Kruger zone 14' ,
'New Beijing / Gauss-Kruger zone 15' ,
'New Beijing / Gauss-Kruger zone 16' ,
'New Beijing / Gauss-Kruger zone 17' ,
'New Beijing / Gauss-Kruger zone 18' ,
'New Beijing / Gauss-Kruger zone 19' ,
'New Beijing / Gauss-Kruger zone 20' ,
'New Beijing / Gauss-Kruger zone 21' ,
'New Beijing / Gauss-Kruger zone 22' ,
'New Beijing / Gauss-Kruger zone 23' ,
'New Beijing / Gauss-Kruger CM 75E' ,
'New Beijing / Gauss-Kruger CM 81E' ,
'New Beijing / Gauss-Kruger CM 87E' ,
'New Beijing / Gauss-Kruger CM 93E' ,
'New Beijing / Gauss-Kruger CM 99E' ,
'New Beijing / Gauss-Kruger CM 105E' ,
'New Beijing / Gauss-Kruger CM 111E' ,
'New Beijing / Gauss-Kruger CM 117E' ,
'New Beijing / Gauss-Kruger CM 123E' ,
'New Beijing / Gauss-Kruger CM 129E' ,
'New Beijing / Gauss-Kruger CM 135E' ,
'Anguilla 1957' ,
'Antigua 1943' ,
'Dominica 1945' ,
'Grenada 1953' ,
'Montserrat 1958' ,
'St. Kitts 1955' ,
'St. Lucia 1955' ,
'St. Vincent 1945' ,
'NAD27(76)' ,
'NAD27(CGQ77)' ,
'Xian 1980' ,
'Hong Kong 1980' ,
'JGD2000' ,
'Segara' ,
'QND95' ,
'Porto Santo' ,
'Selvagem Grande' ,
'NAD83(CSRS)' ,
'SAD69' ,
'SWEREF99' ,
'Point 58' ,
'Fort Marigot' ,
'Guadeloupe 1948' ,
'CSG67' ,
'RGFG95' ,
'Martinique 1938' ,
'Reunion 1947' ,
'RGR92' ,
'Tahiti 52' ,
'Tahaa 54' ,
'IGN72 Nuku Hiva' ,
'K0 1949' ,
'Combani 1950' ,
'IGN56 Lifou' ,
'IGN72 Grand Terre' ,
'ST87 Ouvea' ,
'Petrels 1972' ,
'Perroud 1950' ,
'Saint Pierre et Miquelon 1950' ,
'MOP78' ,
'RRAF 1991' ,
'IGN53 Mare' ,
'ST84 Ile des Pins' ,
'ST71 Belep' ,
'NEA74 Noumea' ,
'RGNC 1991' ,
'Grand Comoros' ,
'ETRS89 / UTM zone 32N (zE-N)' ,
'New Beijing / 3-degree Gauss-Kruger zone 25' ,
'New Beijing / 3-degree Gauss-Kruger zone 26' ,
'New Beijing / 3-degree Gauss-Kruger zone 27' ,
'New Beijing / 3-degree Gauss-Kruger zone 28' ,
'New Beijing / 3-degree Gauss-Kruger zone 29' ,
'Reykjavik 1900' ,
'Hjorsey 1955' ,
'ISN93' ,
'Helle 1954' ,
'LKS92' ,
'IGN72 Grande Terre' ,
'Porto Santo 1995' ,
'Azores Oriental 1995' ,
'Azores Central 1995' ,
'Lisbon 1890' ,
'IKBD-92' ,
'ED79' ,
'LKS94' ,
'IGM95' ,
'Voirol 1879' ,
'Chatham Islands 1971' ,
'Chatham Islands 1979' ,
'SIRGAS 2000' ,
'Guam 1963' ,
'Vientiane 1982' ,
'Lao 1993' ,
'Lao 1997' ,
'Jouik 1961' ,
'Nouakchott 1965' ,
'Mauritania 1999' ,
'Gulshan 303' ,
'PRS92' ,
'Gan 1970' ,
'Gandajika' ,
'MAGNA-SIRGAS' ,
'RGPF' ,
'Fatu Iva 72' ,
'IGN63 Hiva Oa' ,
'Tahiti 79' ,
'Moorea 87' ,
'Maupiti 83' ,
'Nakhl-e Ghanem' ,
'POSGAR 94' ,
'Katanga 1955' ,
'Kasai 1953' ,
'IGC 1962 6th Parallel South' ,
'IGN 1962 Kerguelen' ,
'Le Pouce 1934' ,
'IGN Astro 1960' ,
'IGCB 1955' ,
'Mauritania 1999' ,
'Mhast 1951' ,
'Mhast (onshore)' ,
'Mhast (offshore)' ,
'Egypt Gulf of Suez S-650 TL' ,
'Tern Island 1961' ,
'Cocos Islands 1965' ,
'Iwo Jima 1945' ,
'Astro DOS 71' ,
'Marcus Island 1952' ,
'Ascension Island 1958' ,
'Ayabelle Lighthouse' ,
'Bellevue' ,
'Camp Area Astro' ,
'Phoenix Islands 1966' ,
'Cape Canaveral' ,
'Solomon 1968' ,
'Easter Island 1967' ,
'Fiji 1986' ,
'Fiji 1956' ,
'South Georgia 1968' ,
'GCGD59' ,
'Diego Garcia 1969' ,
'Johnston Island 1961' ,
'SIGD61' ,
'Midway 1961' ,
'Pico de las Nieves 1984' ,
'Pitcairn 1967' ,
'Santo 1965' ,
'Viti Levu 1916' ,
'Marshall Islands 1960' ,
'Wake Island 1952' ,
'Tristan 1968' ,
'Kusaie 1951' ,
'Deception Island' ,
'Korea 2000' ,
'Hong Kong 1963' ,
'Hong Kong 1963(67)' ,
'PZ-90' ,
'FD54' ,
'GDM2000' ,
'Karbala 1979' ,
'Nahrwan 1934' ,
'RD/83' ,
'PD/83' ,
'GR96' ,
'Vanua Levu 1915' ,
'RGNC91-93' ,
'ST87 Ouvea' ,
'Kertau (RSO)' ,
'Viti Levu 1912' ,
'fk89' ,
'LGD2006' ,
'DGN95' ,
'VN-2000' ,
'SVY21' ,
'JAD2001' ,
'NAD83(NSRS2007)' ,
'WGS 66' ,
'HTRS96' ,
'BDA2000' ,
'Pitcairn 2006' ,
'RSRGD2000' ,
'Slovenia 1996' ,
'New Beijing / 3-degree Gauss-Kruger zone 30' ,
'New Beijing / 3-degree Gauss-Kruger zone 31' ,
'New Beijing / 3-degree Gauss-Kruger zone 32' ,
'New Beijing / 3-degree Gauss-Kruger zone 33' ,
'New Beijing / 3-degree Gauss-Kruger zone 34' ,
'New Beijing / 3-degree Gauss-Kruger zone 35' ,
'New Beijing / 3-degree Gauss-Kruger zone 36' ,
'New Beijing / 3-degree Gauss-Kruger zone 37' ,
'New Beijing / 3-degree Gauss-Kruger zone 38' ,
'New Beijing / 3-degree Gauss-Kruger zone 39' ,
'New Beijing / 3-degree Gauss-Kruger zone 40' ,
'New Beijing / 3-degree Gauss-Kruger zone 41' ,
'New Beijing / 3-degree Gauss-Kruger zone 42' ,
'New Beijing / 3-degree Gauss-Kruger zone 43' ,
'New Beijing / 3-degree Gauss-Kruger zone 44' ,
'New Beijing / 3-degree Gauss-Kruger zone 45' ,
'New Beijing / 3-degree Gauss-Kruger CM 75E' ,
'New Beijing / 3-degree Gauss-Kruger CM 78E' ,
'New Beijing / 3-degree Gauss-Kruger CM 81E' ,
'New Beijing / 3-degree Gauss-Kruger CM 84E' ,
'New Beijing / 3-degree Gauss-Kruger CM 87E' ,
'New Beijing / 3-degree Gauss-Kruger CM 90E' ,
'New Beijing / 3-degree Gauss-Kruger CM 93E' ,
'New Beijing / 3-degree Gauss-Kruger CM 96E' ,
'New Beijing / 3-degree Gauss-Kruger CM 99E' ,
'New Beijing / 3-degree Gauss-Kruger CM 102E' ,
'New Beijing / 3-degree Gauss-Kruger CM 105E' ,
'New Beijing / 3-degree Gauss-Kruger CM 108E' ,
'New Beijing / 3-degree Gauss-Kruger CM 111E' ,
'New Beijing / 3-degree Gauss-Kruger CM 114E' ,
'New Beijing / 3-degree Gauss-Kruger CM 117E' ,
'New Beijing / 3-degree Gauss-Kruger CM 120E' ,
'New Beijing / 3-degree Gauss-Kruger CM 123E' ,
'New Beijing / 3-degree Gauss-Kruger CM 126E' ,
'New Beijing / 3-degree Gauss-Kruger CM 129E' ,
'Bern 1898 (Bern)' ,
'Bogota 1975 (Bogota)' ,
'Lisbon (Lisbon)' ,
'Makassar (Jakarta)' ,
'MGI (Ferro)' ,
'Monte Mario (Rome)' ,
'NTF (Paris)' ,
'Padang (Jakarta)' ,
'Belge 1950 (Brussels)' ,
'Tananarive (Paris)' ,
'Voirol 1875 (Paris)' ,
'New Beijing / 3-degree Gauss-Kruger CM 132E' ,
'Batavia (Jakarta)' ,
'RT38 (Stockholm)' ,
'Greek (Athens)' ,
'Carthage (Paris)' ,
'NGO 1948 (Oslo)' ,
'S-JTSK (Ferro)' ,
'Nord Sahara 1959 (Paris)' ,
'Segara (Jakarta)' ,
'Voirol 1879 (Paris)' ,
'New Beijing / 3-degree Gauss-Kruger CM 135E' ,
'Sao Tome' ,
'Principe' ,
'WGS 84 / Cape Verde National' ,
'ETRS89 / LCC Germany (N-E)' ,
'ETRS89 / NTM zone 5' ,
'ETRS89 / NTM zone 6' ,
'ETRS89 / NTM zone 7' ,
'ETRS89 / NTM zone 8' ,
'ETRS89 / NTM zone 9' ,
'ETRS89 / NTM zone 10' ,
'ETRS89 / NTM zone 11' ,
'ETRS89 / NTM zone 12' ,
'ETRS89 / NTM zone 13' ,
'ETRS89 / NTM zone 14' ,
'ETRS89 / NTM zone 15' ,
'ETRS89 / NTM zone 16' ,
'ETRS89 / NTM zone 17' ,
'ETRS89 / NTM zone 18' ,
'ETRS89 / NTM zone 19' ,
'ETRS89 / NTM zone 20' ,
'ETRS89 / NTM zone 21' ,
'ETRS89 / NTM zone 22' ,
'ETRS89 / NTM zone 23' ,
'ETRS89 / NTM zone 24' ,
'ETRS89 / NTM zone 25' ,
'ETRS89 / NTM zone 26' ,
'ETRS89 / NTM zone 27' ,
'ETRS89 / NTM zone 28' ,
'ETRS89 / NTM zone 29' ,
'ETRS89 / NTM zone 30' ,
'Slovenia 1996' ,
'Slovenia 1996' ,
'RSRGD2000' ,
'RSRGD2000' ,
'BDA2000' ,
'BDA2000' ,
'HTRS96' ,
'HTRS96' ,
'WGS 66' ,
'WGS 66' ,
'NAD83(NSRS2007)' ,
'NAD83(NSRS2007)' ,
'JAD2001' ,
'JAD2001' ,
'ITRF2005' ,
'DGN95' ,
'DGN95' ,
'LGD2006' ,
'LGD2006' ,
'ATF (Paris)' ,
'NDG (Paris)' ,
'Madrid 1870 (Madrid)' ,
'Lisbon 1890 (Lisbon)' ,
'RGNC91-93' ,
'RGNC91-93' ,
'GR96' ,
'GR96' ,
'ITRF88' ,
'ITRF89' ,
'ITRF90' ,
'ITRF91' ,
'ITRF92' ,
'ITRF93' ,
'ITRF94' ,
'ITRF96' ,
'ITRF97' ,
'ITRF2000' ,
'GDM2000' ,
'GDM2000' ,
'PZ-90' ,
'PZ-90' ,
'Mauritania 1999' ,
'Mauritania 1999' ,
'Korea 2000' ,
'Korea 2000' ,
'POSGAR 94' ,
'POSGAR 94' ,
'Australian Antarctic' ,
'Australian Antarctic' ,
'CHTRF95' ,
'CHTRF95' ,
'EST97' ,
'EST97' ,
'ETRS89' ,
'ETRS89' ,
'GDA94' ,
'GDA94' ,
'Hartebeesthoek94' ,
'Hartebeesthoek94' ,
'IRENET95' ,
'IRENET95' ,
'ISN93' ,
'ISN93' ,
'JGD2000' ,
'JGD2000' ,
'LKS92' ,
'LKS92' ,
'LKS94' ,
'LKS94' ,
'Moznet' ,
'Moznet' ,
'NAD83(CSRS)' ,
'NAD83(CSRS)' ,
'NAD83(HARN)' ,
'NAD83(HARN)' ,
'NZGD2000' ,
'NZGD2000' ,
'POSGAR 98' ,
'POSGAR 98' ,
'REGVEN' ,
'REGVEN' ,
'RGF93' ,
'RGF93' ,
'RGFG95' ,
'RGFG95' ,
'RGNC 1991' ,
'RGNC 1991' ,
'RGR92' ,
'RGR92' ,
'RRAF 1991' ,
'RRAF 1991' ,
'SIRGAS 1995' ,
'SIRGAS 1995' ,
'SWEREF99' ,
'SWEREF99' ,
'WGS 84' ,
'WGS 84' ,
'Yemen NGN96' ,
'Yemen NGN96' ,
'IGM95' ,
'IGM95' ,
'WGS 72' ,
'WGS 72' ,
'WGS 72BE' ,
'WGS 72BE' ,
'SIRGAS 2000' ,
'SIRGAS 2000' ,
'Lao 1993' ,
'Lao 1993' ,
'Lao 1997' ,
'Lao 1997' ,
'PRS92' ,
'PRS92' ,
'MAGNA-SIRGAS' ,
'MAGNA-SIRGAS' ,
'RGPF' ,
'RGPF' ,
'PTRA08' ,
'PTRA08' ,
'PTRA08' ,
'PTRA08 / UTM zone 25N' ,
'PTRA08 / UTM zone 26N' ,
'PTRA08 / UTM zone 28N' ,
'Lisbon 1890 / Portugal Bonne New' ,
'Lisbon / Portuguese Grid New' ,
'WGS 84 / UPS North (E,N)' ,
'WGS 84 / UPS South (E,N)' ,
'ETRS89 / TM35FIN(N,E)' ,
'NAD27 / Conus Albers' ,
'NAD83 / Conus Albers' ,
'NAD83(HARN) / Conus Albers' ,
'NAD83(NSRS2007) / Conus Albers' ,
'ETRS89 / NTM zone 5' ,
'ETRS89 / NTM zone 6' ,
'ETRS89 / NTM zone 7' ,
'ETRS89 / NTM zone 8' ,
'ETRS89 / NTM zone 9' ,
'ETRS89 / NTM zone 10' ,
'ETRS89 / NTM zone 11' ,
'ETRS89 / NTM zone 12' ,
'ETRS89 / NTM zone 13' ,
'ETRS89 / NTM zone 14' ,
'ETRS89 / NTM zone 15' ,
'ETRS89 / NTM zone 16' ,
'ETRS89 / NTM zone 17' ,
'ETRS89 / NTM zone 18' ,
'ETRS89 / NTM zone 19' ,
'ETRS89 / NTM zone 20' ,
'ETRS89 / NTM zone 21' ,
'ETRS89 / NTM zone 22' ,
'ETRS89 / NTM zone 23' ,
'ETRS89 / NTM zone 24' ,
'ETRS89 / NTM zone 25' ,
'ETRS89 / NTM zone 26' ,
'ETRS89 / NTM zone 27' ,
'ETRS89 / NTM zone 28' ,
'ETRS89 / NTM zone 29' ,
'ETRS89 / NTM zone 30' ,
'Tokyo 1892' ,
'Korean 1985 / East Sea Belt' ,
'Korean 1985 / Central Belt Jeju' ,
'Tokyo 1892 / Korea West Belt' ,
'Tokyo 1892 / Korea Central Belt' ,
'Tokyo 1892 / Korea East Belt' ,
'Tokyo 1892 / Korea East Sea Belt' ,
'Korean 1985 / Modified West Belt' ,
'Korean 1985 / Modified Central Belt' ,
'Korean 1985 / Modified Central Belt Jeju' ,
'Korean 1985 / Modified East Belt' ,
'Korean 1985 / Modified East Sea Belt' ,
'Korean 1985 / Unified CS' ,
'Korea 2000 / Unified CS' ,
'Korea 2000 / West Belt' ,
'Korea 2000 / Central Belt' ,
'Korea 2000 / Central Belt Jeju' ,
'Korea 2000 / East Belt' ,
'Korea 2000 / East Sea Belt' ,
'Korea 2000 / West Belt 2010' ,
'Korea 2000 / Central Belt 2010' ,
'Korea 2000 / East Belt 2010' ,
'Korea 2000 / East Sea Belt 2010' ,
'Incheon height' ,
'Trieste height' ,
'Genoa height' ,
'S-JTSK (Ferro) / Krovak East North' ,
'WGS 84 / Gabon TM' ,
'S-JTSK/05 (Ferro) / Modified Krovak' ,
'S-JTSK/05 (Ferro) / Modified Krovak East North' ,
'S-JTSK/05' ,
'S-JTSK/05 (Ferro)' ,
'SLD99' ,
'Kandawala / Sri Lanka Grid' ,
'SLD99 / Sri Lanka Grid 1999' ,
'SLVD height' ,
'ETRS89 / LCC Germany (E-N)' ,
'GDBD2009' ,
'GDBD2009' ,
'GDBD2009' ,
'GDBD2009 / Brunei BRSO' ,
'TUREF' ,
'TUREF' ,
'TUREF' ,
'TUREF / TM27' ,
'TUREF / TM30' ,
'TUREF / TM33' ,
'TUREF / TM36' ,
'TUREF / TM39' ,
'TUREF / TM42' ,
'TUREF / TM45' ,
'DRUKREF 03' ,
'DRUKREF 03' ,
'DRUKREF 03' ,
'DRUKREF 03 / Bhutan National Grid' ,
'TUREF / 3-degree Gauss-Kruger zone 9' ,
'TUREF / 3-degree Gauss-Kruger zone 10' ,
'TUREF / 3-degree Gauss-Kruger zone 11' ,
'TUREF / 3-degree Gauss-Kruger zone 12' ,
'TUREF / 3-degree Gauss-Kruger zone 13' ,
'TUREF / 3-degree Gauss-Kruger zone 14' ,
'TUREF / 3-degree Gauss-Kruger zone 15' ,
'DRUKREF 03 / Bumthang TM' ,
'DRUKREF 03 / Chhukha TM' ,
'DRUKREF 03 / Dagana TM' ,
'DRUKREF 03 / Gasa TM' ,
'DRUKREF 03 / Ha TM' ,
'DRUKREF 03 / Lhuentse TM' ,
'DRUKREF 03 / Mongar TM' ,
'DRUKREF 03 / Paro TM' ,
'DRUKREF 03 / Pemagatshel TM' ,
'DRUKREF 03 / Punakha TM' ,
'DRUKREF 03 / Samdrup Jongkhar TM' ,
'DRUKREF 03 / Samtse TM' ,
'DRUKREF 03 / Sarpang TM' ,
'DRUKREF 03 / Thimphu TM' ,
'DRUKREF 03 / Trashigang TM' ,
'DRUKREF 03 / Trongsa TM' ,
'DRUKREF 03 / Tsirang TM' ,
'DRUKREF 03 / Wangdue Phodrang TM' ,
'DRUKREF 03 / Yangtse TM' ,
'DRUKREF 03 / Zhemgang TM' ,
'ETRS89 / Faroe TM' ,
'FVR09 height' ,
'ETRS89 / Faroe TM + FVR09 height' ,
'NAD83 / Teranet Ontario Lambert' ,
'NAD83(CSRS) / Teranet Ontario Lambert' ,
'ISN2004' ,
'ISN2004' ,
'ISN2004' ,
'ISN2004 / Lambert 2004' ,
'Segara (Jakarta) / NEIEZ' ,
'Batavia (Jakarta) / NEIEZ' ,
'Makassar (Jakarta) / NEIEZ' ,
'ITRF2008' ,
'Black Sea depth' ,
'Aratu / UTM zone 25S' ,
'POSGAR 2007' ,
'POSGAR 2007' ,
'POSGAR 2007' ,
'POSGAR 2007 / Argentina 1' ,
'POSGAR 2007 / Argentina 2' ,
'POSGAR 2007 / Argentina 3' ,
'POSGAR 2007 / Argentina 4' ,
'POSGAR 2007 / Argentina 5' ,
'POSGAR 2007 / Argentina 6' ,
'POSGAR 2007 / Argentina 7' ,
'MARGEN' ,
'MARGEN' ,
'MARGEN' ,
'MARGEN / UTM zone 20S' ,
'MARGEN / UTM zone 19S' ,
'MARGEN / UTM zone 21S' ,
'SIRGAS-Chile' ,
'SIRGAS-Chile' ,
'SIRGAS-Chile' ,
'SIRGAS-Chile / UTM zone 19S' ,
'SIRGAS-Chile / UTM zone 18S' ,
'CR05' ,
'CR05' ,
'CR05' ,
'CR05 / CRTM05' ,
'MACARIO SOLIS' ,
'Peru96' ,
'MACARIO SOLIS' ,
'MACARIO SOLIS' ,
'Peru96' ,
'Peru96' ,
'SIRGAS-ROU98' ,
'SIRGAS-ROU98' ,
'SIRGAS-ROU98' ,
'SIRGAS-ROU98 / UTM zone 21S' ,
'SIRGAS-ROU98 / UTM zone 22S' ,
'Peru96 / UTM zone 18S' ,
'Peru96 / UTM zone 17S' ,
'Peru96 / UTM zone 19S' ,
'SIRGAS_ES2007.8' ,
'SIRGAS_ES2007.8' ,
'SIRGAS_ES2007.8' ,
'SIRGAS 2000 / UTM zone 26S' ,
'Ocotepeque 1935' ,
'Ocotepeque 1935 / Costa Rica Norte' ,
'Ocotepeque 1935 / Costa Rica Sur' ,
'Ocotepeque 1935 / Guatemala Norte' ,
'Ocotepeque 1935 / Guatemala Sur' ,
'Ocotepeque 1935 / El Salvador Lambert' ,
'Ocotepeque 1935 / Nicaragua Norte' ,
'Ocotepeque 1935 / Nicaragua Sur' ,
'SAD69 / UTM zone 17N' ,
'Sibun Gorge 1922' ,
'Sibun Gorge 1922 / Colony Grid' ,
'Panama-Colon 1911' ,
'Panama-Colon 1911 / Panama Lambert' ,
'Panama-Colon 1911 / Panama Polyconic' ,
'RSRGD2000 / MSLC2000' ,
'RSRGD2000 / BCLC2000' ,
'RSRGD2000 / PCLC2000' ,
'RSRGD2000 / RSPS2000' ,
'RGAF09' ,
'RGAF09' ,
'RGAF09' ,
'RGAF09 / UTM zone 20N' ,
'NAD83 + NAVD88 height' ,
'NAD83(HARN) + NAVD88 height' ,
'NAD83(NSRS2007) + NAVD88 height' ,
'S-JTSK / Krovak' ,
'S-JTSK / Krovak East North' ,
'S-JTSK/05 / Modified Krovak' ,
'S-JTSK/05 / Modified Krovak East North' ,
'CI1971 / Chatham Islands Map Grid' ,
'CI1979 / Chatham Islands Map Grid' ,
'DHDN / 3-degree Gauss-Kruger zone 1' ,
'WGS 84 / Gabon TM 2011' ,
'Corrego Alegre 1961' ,
'SAD69(96)' ,
'SAD69(96) / Brazil Polyconic' ,
'SAD69(96) / UTM zone 21S' ,
'SAD69(96) / UTM zone 22S' ,
'SAD69(96) / UTM zone 23S' ,
'SAD69(96) / UTM zone 24S' ,
'SAD69(96) / UTM zone 25S' ,
'Corrego Alegre 1961 / UTM zone 21S' ,
'Corrego Alegre 1961 / UTM zone 22S' ,
'Corrego Alegre 1961 / UTM zone 23S' ,
'Corrego Alegre 1961 / UTM zone 24S' ,
'PNG94' ,
'PNG94' ,
'PNG94' ,
'PNG94 / PNGMG94 zone 54' ,
'PNG94 / PNGMG94 zone 55' ,
'PNG94 / PNGMG94 zone 56' ,
'ETRS89 / UTM zone 31N + DHHN92 height' ,
'ETRS89 / UTM zone 32N + DHHN92 height' ,
'ETRS89 / UTM zone 33N + DHHN92 height' ,
'UCS-2000' ,
'Ocotepeque 1935 / Guatemala Norte' ,
'UCS-2000' ,
'UCS-2000' ,
'UCS-2000 / Gauss-Kruger zone 4' ,
'UCS-2000 / Gauss-Kruger zone 5' ,
'UCS-2000 / Gauss-Kruger zone 6' ,
'UCS-2000 / Gauss-Kruger zone 7' ,
'UCS-2000 / Gauss-Kruger CM 21E' ,
'UCS-2000 / Gauss-Kruger CM 27E' ,
'UCS-2000 / Gauss-Kruger CM 33E' ,
'UCS-2000 / Gauss-Kruger CM 39E' ,
'UCS-2000 / 3-degree Gauss-Kruger zone 7' ,
'UCS-2000 / 3-degree Gauss-Kruger zone 8' ,
'UCS-2000 / 3-degree Gauss-Kruger zone 9' ,
'UCS-2000 / 3-degree Gauss-Kruger zone 10' ,
'UCS-2000 / 3-degree Gauss-Kruger zone 11' ,
'UCS-2000 / 3-degree Gauss-Kruger zone 12' ,
'UCS-2000 / 3-degree Gauss-Kruger zone 13' ,
'UCS-2000 / 3-degree Gauss-Kruger CM 21E' ,
'UCS-2000 / 3-degree Gauss-Kruger CM 24E' ,
'UCS-2000 / 3-degree Gauss-Kruger CM 27E' ,
'UCS-2000 / 3-degree Gauss-Kruger CM 30E' ,
'UCS-2000 / 3-degree Gauss-Kruger CM 33E' ,
'UCS-2000 / 3-degree Gauss-Kruger CM 36E' ,
'UCS-2000 / 3-degree Gauss-Kruger CM 39E' ,
'NAD27 / New Brunswick Stereographic (NAD27)' ,
'Sibun Gorge 1922 / Colony Grid' ,
'FEH2010' ,
'FEH2010' ,
'FEH2010' ,
'FEH2010 / Fehmarnbelt TM' ,
'FCSVR10 height' ,
'FEH2010 / Fehmarnbelt TM + FCSVR10 height' ,
'NGPF height' ,
'IGN 1966 height' ,
'Moorea SAU 1981 height' ,
'Raiatea SAU 2001 height' ,
'Maupiti SAU 2001 height' ,
'Huahine SAU 2001 height' ,
'Tahaa SAU 2001 height' ,
'Bora Bora SAU 2001 height' ,
'IGLD 1955 height' ,
'IGLD 1985 height' ,
'HVRS71 height' ,
'Caspian height' ,
'Baltic depth' ,
'RH2000 height' ,
'KOC WD depth (ft)' ,
'RH00 height' ,
'IGN 1988 LS height' ,
'IGN 1988 MG height' ,
'IGN 1992 LD height' ,
'IGN 1988 SB height' ,
'IGN 1988 SM height' ,
'EVRF2007 height' ,
'NAD27 / Michigan East' ,
'NAD27 / Michigan Old Central' ,
'NAD27 / Michigan West' ,
'ED50 / TM 6 NE' ,
'SWEREF99 + RH2000 height' ,
'Moznet / UTM zone 38S' ,
'Pulkovo 1942(58) / Gauss-Kruger zone 2 (E-N)' ,
'PTRA08 / LCC Europe' ,
'PTRA08 / LAEA Europe' ,
'REGCAN95 / LCC Europe' ,
'REGCAN95 / LAEA Europe' ,
'TUREF / LAEA Europe' ,
'TUREF / LCC Europe' ,
'ISN2004 / LAEA Europe' ,
'ISN2004 / LCC Europe' ,
'SIRGAS 2000 / Brazil Mercator' ,
'ED50 / SPBA LCC' ,
'RGR92 / UTM zone 39S' ,
'NAD83 / Vermont (ftUS)' ,
'ETRS89 / UTM zone 31N (zE-N)' ,
'ETRS89 / UTM zone 33N (zE-N)' ,
'ETRS89 / UTM zone 31N (N-zE)' ,
'ETRS89 / UTM zone 32N (N-zE)' ,
'ETRS89 / UTM zone 33N (N-zE)' ,
'NAD83(HARN) / Vermont (ftUS)' ,
'NAD83(NSRS2007) / Vermont (ftUS)' ,
'Monte Mario / TM Emilia-Romagna' ,
'Pulkovo 1942(58) / Gauss-Kruger zone 3 (E-N)' ,
'Pulkovo 1942(83) / Gauss-Kruger zone 2 (E-N)' ,
'Pulkovo 1942(83) / Gauss-Kruger zone 3 (E-N)' ,
'PD/83 / 3-degree Gauss-Kruger zone 3 (E-N)' ,
'PD/83 / 3-degree Gauss-Kruger zone 4 (E-N)' ,
'RD/83 / 3-degree Gauss-Kruger zone 4 (E-N)' ,
'RD/83 / 3-degree Gauss-Kruger zone 5 (E-N)' ,
'Pulkovo 1942(58) / 3-degree Gauss-Kruger zone 3 (E-N)' ,
'Pulkovo 1942(58) / 3-degree Gauss-Kruger zone 4 (E-N)' ,
'Pulkovo 1942(58) / 3-degree Gauss-Kruger zone 5 (E-N)' ,
'Pulkovo 1942(83) / 3-degree Gauss-Kruger zone 3 (E-N)' ,
'Pulkovo 1942(83) / 3-degree Gauss-Kruger zone 4 (E-N)' ,
'Pulkovo 1942(83) / 3-degree Gauss-Kruger zone 5 (E-N)' ,
'DHDN / 3-degree Gauss-Kruger zone 2 (E-N)' ,
'DHDN / 3-degree Gauss-Kruger zone 3 (E-N)' ,
'DHDN / 3-degree Gauss-Kruger zone 4 (E-N)' ,
'DHDN / 3-degree Gauss-Kruger zone 5 (E-N)' ,
'DHDN / 3-degree Gauss-Kruger zone 1 (E-N)' ,
'DB_REF' ,
'DB_REF / 3-degree Gauss-Kruger zone 2 (E-N)' ,
'DB_REF / 3-degree Gauss-Kruger zone 3 (E-N)' ,
'DB_REF / 3-degree Gauss-Kruger zone 4 (E-N)' ,
'DB_REF / 3-degree Gauss-Kruger zone 5 (E-N)' ,
'RGF93 / Lambert-93 + NGF-IGN69 height' ,
'RGF93 / Lambert-93 + NGF-IGN78 height' ,
'NZGD2000 / UTM zone 1S' ,
'ODN height' ,
'NGVD29 height (ftUS)' ,
'NAVD88 height' ,
'Yellow Sea' ,
'Baltic height' ,
'Caspian depth' ,
'NTF (Paris) / Lambert zone I + NGF-IGN69 height' ,
'NTF (Paris) / Lambert zone IV + NGF-IGN78 height' ,
'NAP height' ,
'Ostend height' ,
'AHD height' ,
'AHD (Tasmania) height' ,
'CGVD28 height' ,
'MSL height' ,
'MSL depth' ,
'Piraeus height' ,
'N60 height' ,
'RH70 height' ,
'NGF Lallemand height' ,
'NGF-IGN69 height' ,
'NGF-IGN78 height' ,
'Maputo height' ,
'JSLD69 height' ,
'PHD93 height' ,
'Fahud HD height' ,
'Ha Tien 1960 height' ,
'Hon Dau 1992 height' ,
'LN02 height' ,
'LHN95 height' ,
'EVRF2000 height' ,
'Malin Head height' ,
'Belfast height' ,
'DNN height' ,
'AIOC95 depth' ,
'Black Sea height' ,
'Yellow Sea 1956 height' ,
'Yellow Sea 1985 height' ,
'HKPD height' ,
'HKCD depth' ,
'ODN Orkney height' ,
'Fair Isle height' ,
'Lerwick height' ,
'Foula height' ,
'Sule Skerry height' ,
'North Rona height' ,
'Stornoway height' ,
'St Kilda height' ,
'Flannan Isles height' ,
'St Marys height' ,
'Douglas height' ,
'Fao height' ,
'Bandar Abbas height' ,
'NGNC height' ,
'Poolbeg height (ft(Br36))' ,
'NGG1977 height' ,
'Martinique 1987 height' ,
'Guadeloupe 1988 height' ,
'Reunion 1989 height' ,
'Auckland 1946 height' ,
'Bluff 1955 height' ,
'Dunedin 1958 height' ,
'Gisborne 1926 height' ,
'Lyttelton 1937 height' ,
'Moturiki 1953 height' ,
'Napier 1962 height' ,
'Nelson 1955 height' ,
'One Tree Point 1964 height' ,
'Tararu 1952 height' ,
'Taranaki 1970 height' ,
'Wellington 1953 height' ,
'Chatham Island 1959 height' ,
'Stewart Island 1977 height' ,
'EGM96 height' ,
'NG-L height' ,
'Antalya height' ,
'NN54 height' ,
'Durres height' ,
'GHA height' ,
'NVN99 height' ,
'Cascais height' ,
'Constanta height' ,
'Alicante height' ,
'DHHN92 height' ,
'DHHN85 height' ,
'SNN76 height' ,
'Baltic 1982 height' ,
'EOMA 1980 height' ,
'Kuwait PWD height' ,
'KOC WD depth' ,
'KOC CD height' ,
'NGC 1948 height' ,
'Danger 1950 height' ,
'Mayotte 1950 height' ,
'Martinique 1955 height' ,
'Guadeloupe 1951 height' ,
'Lagos 1955 height' ,
'AIOC95 height' ,
'EGM84 height' ,
'DVR90 height' ,
'Astra Minas Grid' ,
'Barcelona Grid B1' ,
'Barcelona Grid B2' ,
'Maturin Grid' ,
'EPSG seismic bin grid example A' ,
'EPSG seismic bin grid example B' ,
'EPSG local engineering grid example A' ,
'EPSG local engineering grid example B' ,
'Maracaibo Cross Grid M4' ,
'Maracaibo Cross Grid M5' ,
'La Rosa Grid' ,
'Mene Grande' ,
'El Cubo' ,
'Dabajuro' ,
'Tucupita' ,
'Santa Maria de Ipire' ,
'Barinas west base' ,
'Tombak LNG plant' ,
'bin grid namechanged 1' ,
'EPSG topocentric example A' ,
'EPSG topocentric example B' ,
'EPSG vertical perspective example' ,
'AGD66 / ACT Standard Grid' ,
'DB_REF' ,
'Instantaneous Water Level height' ,
'DB_REF' ,
'Instantaneous Water Level depth' ,
'DB_REF / 3-degree Gauss-Kruger zone 2 (E-N) + DHHN92 height' ,
'DB_REF / 3-degree Gauss-Kruger zone 3 (E-N) + DHHN92 height' ,
'DB_REF / 3-degree Gauss-Kruger zone 4 (E-N) + DHHN92 height' ,
'DB_REF / 3-degree Gauss-Kruger zone 5 (E-N) + DHHN92 height' ,
'Yemen NGN96 / UTM zone 37N' ,
'Yemen NGN96 / UTM zone 40N' ,
'Peru96 / UTM zone 17S' ,
'WGS 84 / TM 12 SE' ,
'Ras Ghumays height' ,
'RGRDC 2005 / Congo TM zone 30' ,
'SWEREF99 TM + RH2000 height' ,
'SWEREF99 12 00 + RH2000 height' ,
'SWEREF99 13 30 + RH2000 height' ,
'SWEREF99 15 00 + RH2000 height' ,
'SWEREF99 16 30 + RH2000 height' ,
'SWEREF99 18 00 + RH2000 height' ,
'SWEREF99 14 15 + RH2000 height' ,
'SWEREF99 15 45 + RH2000 height' ,
'SWEREF99 17 15 + RH2000 height' ,
'SWEREF99 18 45 + RH2000 height' ,
'SWEREF99 20 15 + RH2000 height' ,
'SWEREF99 21 45 + RH2000 height' ,
'SWEREF99 23 15 + RH2000 height' ,
'SAD69(96) / UTM zone 22S' ,
'bin grid namechanged 2' ,
'LAT depth' ,
'LLWLT depth' ,
'ISLW depth' ,
'MLLWS depth' ,
'MLWS depth' ,
'MLLW depth' ,
'MLW depth' ,
'MHW height' ,
'MHHW height' ,
'MHWS height' ,
'HHWLT height' ,
'HAT height' ,
'Low Water depth' ,
'High Water height' ,
'SAD69(96) / UTM zone 18S' ,
'SAD69(96) / UTM zone 19S' ,
'SAD69(96) / UTM zone 20S' ,
'Cadastre 1997 / UTM zone 38S' ,
'SIRGAS 2000 / Brazil Polyconic' ,
'TGD2005' ,
'TGD2005' ,
'TGD2005' ,
'TGD2005 / Tonga Map Grid' ,
'JAXA Snow Depth Polar Stereographic North' ,
'WGS 84 / EPSG Arctic Regional zone A1' ,
'WGS 84 / EPSG Arctic Regional zone A2' ,
'WGS 84 / EPSG Arctic Regional zone A3' ,
'WGS 84 / EPSG Arctic Regional zone A4' ,
'WGS 84 / EPSG Arctic Regional zone A5' ,
'WGS 84 / EPSG Arctic Regional zone B1' ,
'WGS 84 / EPSG Arctic Regional zone B2' ,
'WGS 84 / EPSG Arctic Regional zone B3' ,
'WGS 84 / EPSG Arctic Regional zone B4' ,
'WGS 84 / EPSG Arctic Regional zone B5' ,
'WGS 84 / EPSG Arctic Regional zone C1' ,
'WGS 84 / EPSG Arctic Regional zone C2' ,
'WGS 84 / EPSG Arctic Regional zone C3' ,
'WGS 84 / EPSG Arctic Regional zone C4' ,
'WGS 84 / EPSG Arctic Regional zone C5' ,
'WGS 84 / EPSG Alaska Polar Stereographic' ,
'WGS 84 / EPSG Canada Polar Stereographic' ,
'WGS 84 / EPSG Greenland Polar Stereographic' ,
'WGS 84 / EPSG Norway Polar Stereographic' ,
'WGS 84 / EPSG Russia Polar Stereographic' ,
'NN2000 height' ,
'ETRS89 + NN2000 height' ,
'ETRS89 / NTM zone 5 + NN2000 height' ,
'ETRS89 / NTM zone 6 + NN2000 height' ,
'ETRS89 / NTM zone 7 + NN2000 height' ,
'ETRS89 / NTM zone 8 + NN2000 height' ,
'ETRS89 / NTM zone 9 + NN2000 height' ,
'ETRS89 / NTM zone 10 + NN2000 height' ,
'ETRS89 / NTM zone 11 + NN2000 height' ,
'ETRS89 / NTM zone 12 + NN2000 height' ,
'ETRS89 / NTM zone 13 + NN2000 height' ,
'ETRS89 / NTM zone 14 + NN2000 height' ,
'ETRS89 / NTM zone 15 + NN2000 height' ,
'ETRS89 / NTM zone 16 + NN2000 height' ,
'ETRS89 / NTM zone 17 + NN2000 height' ,
'ETRS89 / NTM zone 18 + NN2000 height' ,
'ETRS89 / NTM zone 19 + NN2000 height' ,
'ETRS89 / NTM zone 20 + NN2000 height' ,
'ETRS89 / NTM zone 21 + NN2000 height' ,
'ETRS89 / NTM zone 22 + NN2000 height' ,
'ETRS89 / NTM zone 23 + NN2000 height' ,
'ETRS89 / NTM zone 24 + NN2000 height' ,
'ETRS89 / NTM zone 25 + NN2000 height' ,
'ETRS89 / NTM zone 26 + NN2000 height' ,
'ETRS89 / NTM zone 27 + NN2000 height' ,
'ETRS89 / NTM zone 28 + NN2000 height' ,
'ETRS89 / NTM zone 29 + NN2000 height' ,
'ETRS89 / NTM zone 30 + NN2000 height' ,
'ETRS89 / UTM zone 31 + NN2000 height' ,
'ETRS89 / UTM zone 32 + NN2000 height' ,
'ETRS89 / UTM zone 33 + NN2000 height' ,
'ETRS89 / UTM zone 34 + NN2000 height' ,
'ETRS89 / UTM zone 35 + NN2000 height' ,
'ETRS89 / UTM zone 36 + NN2000 height' ,
'GR96 / EPSG Arctic zone 1-25' ,
'GR96 / EPSG Arctic zone 2-18' ,
'GR96 / EPSG Arctic zone 2-20' ,
'GR96 / EPSG Arctic zone 3-29' ,
'GR96 / EPSG Arctic zone 3-31' ,
'GR96 / EPSG Arctic zone 3-33' ,
'GR96 / EPSG Arctic zone 4-20' ,
'GR96 / EPSG Arctic zone 4-22' ,
'GR96 / EPSG Arctic zone 4-24' ,
'GR96 / EPSG Arctic zone 5-41' ,
'GR96 / EPSG Arctic zone 5-43' ,
'GR96 / EPSG Arctic zone 5-45' ,
'GR96 / EPSG Arctic zone 6-26' ,
'GR96 / EPSG Arctic zone 6-28' ,
'GR96 / EPSG Arctic zone 6-30' ,
'GR96 / EPSG Arctic zone 7-11' ,
'GR96 / EPSG Arctic zone 7-13' ,
'GR96 / EPSG Arctic zone 8-20' ,
'GR96 / EPSG Arctic zone 8-22' ,
'ETRS89 / EPSG Arctic zone 2-22' ,
'ETRS89 / EPSG Arctic zone 3-11' ,
'ETRS89 / EPSG Arctic zone 4-26' ,
'ETRS89 / EPSG Arctic zone 4-28' ,
'ETRS89 / EPSG Arctic zone 5-11' ,
'ETRS89 / EPSG Arctic zone 5-13' ,
'WGS 84 / EPSG Arctic zone 2-24' ,
'WGS 84 / EPSG Arctic zone 2-26' ,
'WGS 84 / EPSG Arctic zone 3-13' ,
'WGS 84 / EPSG Arctic zone 3-15' ,
'WGS 84 / EPSG Arctic zone 3-17' ,
'WGS 84 / EPSG Arctic zone 3-19' ,
'WGS 84 / EPSG Arctic zone 4-30' ,
'WGS 84 / EPSG Arctic zone 4-32' ,
'WGS 84 / EPSG Arctic zone 4-34' ,
'WGS 84 / EPSG Arctic zone 4-36' ,
'WGS 84 / EPSG Arctic zone 4-38' ,
'WGS 84 / EPSG Arctic zone 4-40' ,
'WGS 84 / EPSG Arctic zone 5-15' ,
'WGS 84 / EPSG Arctic zone 5-17' ,
'WGS 84 / EPSG Arctic zone 5-19' ,
'WGS 84 / EPSG Arctic zone 5-21' ,
'WGS 84 / EPSG Arctic zone 5-23' ,
'WGS 84 / EPSG Arctic zone 5-25' ,
'WGS 84 / EPSG Arctic zone 5-27' ,
'NAD83(NSRS2007) / EPSG Arctic zone 5-29' ,
'NAD83(NSRS2007) / EPSG Arctic zone 5-31' ,
'NAD83(NSRS2007) / EPSG Arctic zone 6-14' ,
'NAD83(NSRS2007) / EPSG Arctic zone 6-16' ,
'NAD83(CSRS) / EPSG Arctic zone 1-23' ,
'NAD83(CSRS) / EPSG Arctic zone 2-14' ,
'NAD83(CSRS) / EPSG Arctic zone 2-16' ,
'NAD83(CSRS) / EPSG Arctic zone 3-25' ,
'NAD83(CSRS) / EPSG Arctic zone 3-27' ,
'NAD83(CSRS) / EPSG Arctic zone 3-29' ,
'NAD83(CSRS) / EPSG Arctic zone 4-14' ,
'NAD83(CSRS) / EPSG Arctic zone 4-16' ,
'NAD83(CSRS) / EPSG Arctic zone 4-18' ,
'NAD83(CSRS) / EPSG Arctic zone 5-33' ,
'NAD83(CSRS) / EPSG Arctic zone 5-35' ,
'NAD83(CSRS) / EPSG Arctic zone 5-37' ,
'NAD83(CSRS) / EPSG Arctic zone 5-39' ,
'NAD83(CSRS) / EPSG Arctic zone 6-18' ,
'NAD83(CSRS) / EPSG Arctic zone 6-20' ,
'NAD83(CSRS) / EPSG Arctic zone 6-22' ,
'NAD83(CSRS) / EPSG Arctic zone 6-24' ,
'WGS 84 / EPSG Arctic zone 1-27' ,
'WGS 84 / EPSG Arctic zone 1-29' ,
'WGS 84 / EPSG Arctic zone 1-31' ,
'WGS 84 / EPSG Arctic zone 1-21' ,
'WGS 84 / EPSG Arctic zone 2-28' ,
'WGS 84 / EPSG Arctic zone 2-10' ,
'WGS 84 / EPSG Arctic zone 2-12' ,
'WGS 84 / EPSG Arctic zone 3-21' ,
'WGS 84 / EPSG Arctic zone 3-23' ,
'WGS 84 / EPSG Arctic zone 4-12' ,
'ETRS89 / EPSG Arctic zone 5-47' ,
'Grand Cayman National Grid 1959' ,
'Sister Islands National Grid 1961' ,
'GCVD54 height (ft)' ,
'LCVD61 height (ft)' ,
'CBVD61 height (ft)' ,
'CIGD11' ,
'CIGD11' ,
'CIGD11' ,
'Cayman Islands National Grid 2011' ,
'ETRS89 + NN54 height' ,
'ETRS89 / NTM zone 5 + NN54 height' ,
'ETRS89 / NTM zone 6 + NN54 height' ,
'ETRS89 / NTM zone 7 + NN54 height' ,
'ETRS89 / NTM zone 8 + NN54 height' ,
'ETRS89 / NTM zone 9 + NN54 height' ,
'ETRS89 / NTM zone 10 + NN54 height' ,
'ETRS89 / NTM zone 11 + NN54 height' ,
'ETRS89 / NTM zone 12 + NN54 height' ,
'ETRS89 / NTM zone 13 + NN54 height' ,
'ETRS89 / NTM zone 14 + NN54 height' ,
'ETRS89 / NTM zone 15 + NN54 height' ,
'ETRS89 / NTM zone 16 + NN54 height' ,
'ETRS89 / NTM zone 17 + NN54 height' ,
'ETRS89 / NTM zone 18 + NN54 height' ,
'ETRS89 / NTM zone 19 + NN54 height' ,
'ETRS89 / NTM zone 20 + NN54 height' ,
'ETRS89 / NTM zone 21 + NN54 height' ,
'ETRS89 / NTM zone 22 + NN54 height' ,
'ETRS89 / NTM zone 23 + NN54 height' ,
'ETRS89 / NTM zone 24 + NN54 height' ,
'ETRS89 / NTM zone 25 + NN54 height' ,
'ETRS89 / NTM zone 26 + NN54 height' ,
'ETRS89 / NTM zone 27 + NN54 height' ,
'ETRS89 / NTM zone 28 + NN54 height' ,
'ETRS89 / NTM zone 29 + NN54 height' ,
'ETRS89 / NTM zone 30 + NN54 height' ,
'ETRS89 / UTM zone 31 + NN54 height' ,
'ETRS89 / UTM zone 32 + NN54 height' ,
'ETRS89 / UTM zone 33 + NN54 height' ,
'ETRS89 / UTM zone 34 + NN54 height' ,
'ETRS89 / UTM zone 35 + NN54 height' ,
'ETRS89 / UTM zone 36 + NN54 height' ,
'Cais da Pontinha - Funchal height' ,
'Cais da Vila - Porto Santo height' ,
'Cais das Velas height' ,
'Horta height' ,
'Cais da Madalena height' ,
'Santa Cruz da Graciosa height' ,
'Cais da Figueirinha - Angra do Heroismo height' ,
'Santa Cruz das Flores height' ,
'Cais da Vila do Porto height' ,
'Ponta Delgada height' ,
'Belge 1972 / Belgian Lambert 72 + Ostend height' ,
'NAD27 / Michigan North' ,
'NAD27 / Michigan Central' ,
'NAD27 / Michigan South' ,
'Macedonia State Coordinate System' ,
'Nepal 1981' ,
'SIRGAS 2000 / UTM zone 23N' ,
'SIRGAS 2000 / UTM zone 24N' ,
'MAGNA-SIRGAS / Arauca urban grid' ,
'MAGNA-SIRGAS / Armenia urban grid' ,
'MAGNA-SIRGAS / Barranquilla urban grid' ,
'MAGNA-SIRGAS / Bogota urban grid' ,
'MAGNA-SIRGAS / Bucaramanga urban grid' ,
'MAGNA-SIRGAS / Cali urban grid' ,
'MAGNA-SIRGAS / Cartagena urban grid' ,
'MAGNA-SIRGAS / Cucuta urban grid' ,
'MAGNA-SIRGAS / Florencia urban grid' ,
'MAGNA-SIRGAS / Ibague urban grid' ,
'MAGNA-SIRGAS / Inirida urban grid' ,
'MAGNA-SIRGAS / Leticia urban grid' ,
'MAGNA-SIRGAS / Manizales urban grid' ,
'MAGNA-SIRGAS / Medellin urban grid' ,
'MAGNA-SIRGAS / Mitu urban grid' ,
'MAGNA-SIRGAS / Mocoa urban grid' ,
'MAGNA-SIRGAS / Monteria urban grid' ,
'MAGNA-SIRGAS / Neiva urban grid' ,
'MAGNA-SIRGAS / Pasto urban grid' ,
'MAGNA-SIRGAS / Pereira urban grid' ,
'MAGNA-SIRGAS / Popayan urban grid' ,
'MAGNA-SIRGAS / Puerto Carreno urban grid' ,
'MAGNA-SIRGAS / Quibdo urban grid' ,
'MAGNA-SIRGAS / Riohacha urban grid' ,
'MAGNA-SIRGAS / San Andres urban grid' ,
'MAGNA-SIRGAS / San Jose del Guaviare urban grid' ,
'MAGNA-SIRGAS / Santa Marta urban grid' ,
'MAGNA-SIRGAS / Sucre urban grid' ,
'MAGNA-SIRGAS / Tunja urban grid' ,
'MAGNA-SIRGAS / Valledupar urban grid' ,
'MAGNA-SIRGAS / Villavicencio urban grid' ,
'MAGNA-SIRGAS / Yopal urban grid' ,
'NAD83(CORS96) / Puerto Rico and Virgin Is.' ,
'CGRS93' ,
'CGRS93' ,
'CGRS93' ,
'CGRS93 / Cyprus Local Transverse Mercator' ,
'Macedonia State Coordinate System zone 7' ,
'NAD83(2011)' ,
'NAD83(2011)' ,
'NAD83(2011)' ,
'NAD83(PA11)' ,
'NAD83(PA11)' ,
'NAD83(PA11)' ,
'NAD83(MA11)' ,
'NAD83(MA11)' ,
'NAD83(MA11)' ,
'NAD83(2011) / UTM zone 59N' ,
'NAD83(2011) / UTM zone 60N' ,
'NAD83(2011) / UTM zone 1N' ,
'NAD83(2011) / UTM zone 2N' ,
'NAD83(2011) / UTM zone 3N' ,
'NAD83(2011) / UTM zone 4N' ,
'NAD83(2011) / UTM zone 5N' ,
'NAD83(2011) / UTM zone 6N' ,
'NAD83(2011) / UTM zone 7N' ,
'NAD83(2011) / UTM zone 8N' ,
'NAD83(2011) / UTM zone 9N' ,
'NAD83(2011) / UTM zone 10N' ,
'NAD83(2011) / UTM zone 11N' ,
'NAD83(2011) / UTM zone 12N' ,
'NAD83(2011) / UTM zone 13N' ,
'NAD83(2011) / UTM zone 14N' ,
'NAD83(2011) / UTM zone 15N' ,
'NAD83(2011) / UTM zone 16N' ,
'NAD83(2011) / UTM zone 17N' ,
'NAD83(2011) / UTM zone 18N' ,
'NAD83(2011) / UTM zone 19N' ,
'NAD83(2011) + NAVD88 height' ,
'NAD83(2011) / Conus Albers' ,
'NAD83(2011) / EPSG Arctic zone 5-29' ,
'NAD83(2011) / EPSG Arctic zone 5-31' ,
'NAD83(2011) / EPSG Arctic zone 6-14' ,
'NAD83(2011) / EPSG Arctic zone 6-16' ,
'NAD83(2011) / Alabama East' ,
'NAD83(2011) / Alabama West' ,
'NAVD88 depth' ,
'NAVD88 depth (ftUS)' ,
'NGVD29 depth (ftUS)' ,
'NAVD88 height (ftUS)' ,
'Mexico ITRF92 / LCC' ,
'Mexico ITRF2008' ,
'Mexico ITRF2008' ,
'Mexico ITRF2008' ,
'Mexico ITRF2008 / UTM zone 11N' ,
'Mexico ITRF2008 / UTM zone 12N' ,
'Mexico ITRF2008 / UTM zone 13N' ,
'Mexico ITRF2008 / UTM zone 14N' ,
'Mexico ITRF2008 / UTM zone 15N' ,
'Mexico ITRF2008 / UTM zone 16N' ,
'Mexico ITRF2008 / LCC' ,
'UCS-2000 / Ukraine TM zone 7' ,
'UCS-2000 / Ukraine TM zone 8' ,
'UCS-2000 / Ukraine TM zone 9' ,
'UCS-2000 / Ukraine TM zone 10' ,
'UCS-2000 / Ukraine TM zone 11' ,
'UCS-2000 / Ukraine TM zone 12' ,
'UCS-2000 / Ukraine TM zone 13' ,
'Cayman Islands National Grid 2011' ,
'NAD83(2011) / Alaska Albers' ,
'NAD83(2011) / Alaska zone 1' ,
'NAD83(2011) / Alaska zone 2' ,
'NAD83(2011) / Alaska zone 3' ,
'NAD83(2011) / Alaska zone 4' ,
'NAD83(2011) / Alaska zone 5' ,
'NAD83(2011) / Alaska zone 6' ,
'NAD83(2011) / Alaska zone 7' ,
'NAD83(2011) / Alaska zone 8' ,
'NAD83(2011) / Alaska zone 9' ,
'NAD83(2011) / Alaska zone 10' ,
'NAD83(2011) / Arizona Central' ,
'NAD83(2011) / Arizona Central (ft)' ,
'NAD83(2011) / Arizona East' ,
'NAD83(2011) / Arizona East (ft)' ,
'NAD83(2011) / Arizona West' ,
'NAD83(2011) / Arizona West (ft)' ,
'NAD83(2011) / Arkansas North' ,
'NAD83(2011) / Arkansas North (ftUS)' ,
'NAD83(2011) / Arkansas South' ,
'NAD83(2011) / Arkansas South (ftUS)' ,
'NAD83(2011) / California Albers' ,
'NAD83(2011) / California zone 1' ,
'NAD83(2011) / California zone 1 (ftUS)' ,
'NAD83(2011) / California zone 2' ,
'NAD83(2011) / California zone 2 (ftUS)' ,
'NAD83(2011) / California zone 3' ,
'NAD83(2011) / California zone 3 (ftUS)' ,
'NAD83(2011) / California zone 4' ,
'NAD83(2011) / California zone 4 (ftUS)' ,
'NAD83(2011) / California zone 5' ,
'NAD83(2011) / California zone 5 (ftUS)' ,
'NAD83(2011) / California zone 6' ,
'NAD83(2011) / California zone 6 (ftUS)' ,
'NAD83(2011) / Colorado Central' ,
'NAD83(2011) / Colorado Central (ftUS)' ,
'NAD83(2011) / Colorado North' ,
'NAD83(2011) / Colorado North (ftUS)' ,
'NAD83(2011) / Colorado South' ,
'NAD83(2011) / Colorado South (ftUS)' ,
'NAD83(2011) / Connecticut' ,
'NAD83(2011) / Connecticut (ftUS)' ,
'NAD83(2011) / Delaware' ,
'NAD83(2011) / Delaware (ftUS)' ,
'NAD83(2011) / Florida East' ,
'NAD83(2011) / Florida East (ftUS)' ,
'NAD83(2011) / Florida GDL Albers' ,
'NAD83(2011) / Florida North' ,
'NAD83(2011) / Florida North (ftUS)' ,
'NAD83(2011) / Florida West' ,
'NAD83(2011) / Florida West (ftUS)' ,
'NAD83(2011) / Georgia East' ,
'NAD83(2011) / Georgia East (ftUS)' ,
'NAD83(2011) / Georgia West' ,
'NAD83(2011) / Georgia West (ftUS)' ,
'NAD83(2011) / Idaho Central' ,
'NAD83(2011) / Idaho Central (ftUS)' ,
'NAD83(2011) / Idaho East' ,
'NAD83(2011) / Idaho East (ftUS)' ,
'NAD83(2011) / Idaho West' ,
'NAD83(2011) / Idaho West (ftUS)' ,
'NAD83(2011) / Illinois East' ,
'NAD83(2011) / Illinois East (ftUS)' ,
'NAD83(2011) / Illinois West' ,
'NAD83(2011) / Illinois West (ftUS)' ,
'NAD83(2011) / Indiana East' ,
'NAD83(2011) / Indiana East (ftUS)' ,
'NAD83(2011) / Indiana West' ,
'NAD83(2011) / Indiana West (ftUS)' ,
'NAD83(2011) / Iowa North' ,
'NAD83(2011) / Iowa North (ftUS)' ,
'NAD83(2011) / Iowa South' ,
'NAD83(2011) / Iowa South (ftUS)' ,
'NAD83(2011) / Kansas North' ,
'NAD83(2011) / Kansas North (ftUS)' ,
'NAD83(2011) / Kansas South' ,
'NAD83(2011) / Kansas South (ftUS)' ,
'NAD83(2011) / Kentucky North' ,
'NAD83(2011) / Kentucky North (ftUS)' ,
'NAD83(2011) / Kentucky Single Zone' ,
'NAD83(2011) / Kentucky Single Zone (ftUS)' ,
'NAD83(2011) / Kentucky South' ,
'NAD83(2011) / Kentucky South (ftUS)' ,
'NAD83(2011) / Louisiana North' ,
'NAD83(2011) / Louisiana North (ftUS)' ,
'NAD83(2011) / Louisiana South' ,
'NAD83(2011) / Louisiana South (ftUS)' ,
'NAD83(2011) / Maine CS2000 Central' ,
'NAD83(2011) / Maine CS2000 East' ,
'NAD83(2011) / Maine CS2000 West' ,
'NAD83(2011) / Maine East' ,
'NAD83(2011) / Maine East (ftUS)' ,
'NAD83(2011) / Maine West' ,
'NAD83(2011) / Maine West (ftUS)' ,
'NAD83(2011) / Maryland' ,
'NAD83(2011) / Maryland (ftUS)' ,
'NAD83(2011) / Massachusetts Island' ,
'NAD83(2011) / Massachusetts Island (ftUS)' ,
'NAD83(2011) / Massachusetts Mainland' ,
'NAD83(2011) / Massachusetts Mainland (ftUS)' ,
'NAD83(2011) / Michigan Central' ,
'NAD83(2011) / Michigan Central (ft)' ,
'NAD83(2011) / Michigan North' ,
'NAD83(2011) / Michigan North (ft)' ,
'NAD83(2011) / Michigan Oblique Mercator' ,
'NAD83(2011) / Michigan South' ,
'NAD83(2011) / Michigan South (ft)' ,
'NAD83(2011) / Minnesota Central' ,
'NAD83(2011) / Minnesota Central (ftUS)' ,
'NAD83(2011) / Minnesota North' ,
'NAD83(2011) / Minnesota North (ftUS)' ,
'NAD83(2011) / Minnesota South' ,
'NAD83(2011) / Minnesota South (ftUS)' ,
'NAD83(2011) / Mississippi East' ,
'NAD83(2011) / Mississippi East (ftUS)' ,
'NAD83(2011) / Mississippi TM' ,
'NAD83(2011) / Mississippi West' ,
'NAD83(2011) / Mississippi West (ftUS)' ,
'NAD83(2011) / Missouri Central' ,
'NAD83(2011) / Missouri East' ,
'NAD83(2011) / Missouri West' ,
'NAD83(2011) / Montana' ,
'NAD83(2011) / Montana (ft)' ,
'NAD83(2011) / Nebraska' ,
'NAD83(2011) / Nebraska (ftUS)' ,
'NAD83(2011) / Nevada Central' ,
'NAD83(2011) / Nevada Central (ftUS)' ,
'NAD83(2011) / Nevada East' ,
'NAD83(2011) / Nevada East (ftUS)' ,
'NAD83(2011) / Nevada West' ,
'NAD83(2011) / Nevada West (ftUS)' ,
'NAD83(2011) / New Hampshire' ,
'NAD83(2011) / New Hampshire (ftUS)' ,
'NAD83(2011) / New Jersey' ,
'NAD83(2011) / New Jersey (ftUS)' ,
'NAD83(2011) / New Mexico Central' ,
'NAD83(2011) / New Mexico Central (ftUS)' ,
'NAD83(2011) / New Mexico East' ,
'NAD83(2011) / New Mexico East (ftUS)' ,
'NAD83(2011) / New Mexico West' ,
'NAD83(2011) / New Mexico West (ftUS)' ,
'NAD83(2011) / New York Central' ,
'NAD83(2011) / New York Central (ftUS)' ,
'NAD83(2011) / New York East' ,
'NAD83(2011) / New York East (ftUS)' ,
'NAD83(2011) / New York Long Island' ,
'NAD83(2011) / New York Long Island (ftUS)' ,
'NAD83(2011) / New York West' ,
'NAD83(2011) / New York West (ftUS)' ,
'NAD83(2011) / North Carolina' ,
'NAD83(2011) / North Carolina (ftUS)' ,
'NAD83(2011) / North Dakota North' ,
'NAD83(2011) / North Dakota North (ft)' ,
'NAD83(2011) / North Dakota South' ,
'NAD83(2011) / North Dakota South (ft)' ,
'NAD83(2011) / Ohio North' ,
'NAD83(2011) / Ohio North (ftUS)' ,
'NAD83(2011) / Ohio South' ,
'NAD83(2011) / Ohio South (ftUS)' ,
'NAD83(2011) / Oklahoma North' ,
'NAD83(2011) / Oklahoma North (ftUS)' ,
'NAD83(2011) / Oklahoma South' ,
'NAD83(2011) / Oklahoma South (ftUS)' ,
'NAD83(2011) / Oregon LCC (m)' ,
'NAD83(2011) / Oregon GIC Lambert (ft)' ,
'NAD83(2011) / Oregon North' ,
'NAD83(2011) / Oregon North (ft)' ,
'NAD83(2011) / Oregon South' ,
'NAD83(2011) / Oregon South (ft)' ,
'NAD83(2011) / Pennsylvania North' ,
'NAD83(2011) / Pennsylvania North (ftUS)' ,
'NAD83(2011) / Pennsylvania South' ,
'NAD83(2011) / Pennsylvania South (ftUS)' ,
'NAD83(2011) / Puerto Rico and Virgin Is.' ,
'NAD83(2011) / Rhode Island' ,
'NAD83(2011) / Rhode Island (ftUS)' ,
'NAD83(2011) / South Carolina' ,
'NAD83(2011) / South Carolina (ft)' ,
'NAD83(2011) / South Dakota North' ,
'NAD83(2011) / South Dakota North (ftUS)' ,
'NAD83(2011) / South Dakota South' ,
'NAD83(2011) / South Dakota South (ftUS)' ,
'NAD83(2011) / Tennessee' ,
'NAD83(2011) / Tennessee (ftUS)' ,
'NAD83(2011) / Texas Central' ,
'NAD83(2011) / Texas Central (ftUS)' ,
'NAD83(2011) / Texas Centric Albers Equal Area' ,
'NAD83(2011) / Texas Centric Lambert Conformal' ,
'NAD83(2011) / Texas North' ,
'NAD83(2011) / Texas North (ftUS)' ,
'NAD83(2011) / Texas North Central' ,
'NAD83(2011) / Texas North Central (ftUS)' ,
'NAD83(2011) / Texas South' ,
'NAD83(2011) / Texas South (ftUS)' ,
'NAD83(2011) / Texas South Central' ,
'NAD83(2011) / Texas South Central (ftUS)' ,
'NAD83(2011) / Vermont' ,
'NAD83(2011) / Vermont (ftUS)' ,
'NAD83(2011) / Virginia Lambert' ,
'NAD83(2011) / Virginia North' ,
'NAD83(2011) / Virginia North (ftUS)' ,
'NAD83(2011) / Virginia South' ,
'NAD83(2011) / Virginia South (ftUS)' ,
'NAD83(2011) / Washington North' ,
'NAD83(2011) / Washington North (ftUS)' ,
'NAD83(2011) / Washington South' ,
'NAD83(2011) / Washington South (ftUS)' ,
'NAD83(2011) / West Virginia North' ,
'NAD83(2011) / West Virginia North (ftUS)' ,
'NAD83(2011) / West Virginia South' ,
'NAD83(2011) / West Virginia South (ftUS)' ,
'NAD83(2011) / Wisconsin Central' ,
'NAD83(2011) / Wisconsin Central (ftUS)' ,
'NAD83(2011) / Wisconsin North' ,
'NAD83(2011) / Wisconsin North (ftUS)' ,
'NAD83(2011) / Wisconsin South' ,
'NAD83(2011) / Wisconsin South (ftUS)' ,
'NAD83(2011) / Wisconsin Transverse Mercator' ,
'NAD83(2011) / Wyoming East' ,
'NAD83(2011) / Wyoming East (ftUS)' ,
'NAD83(2011) / Wyoming East Central' ,
'NAD83(2011) / Wyoming East Central (ftUS)' ,
'NAD83(2011) / Wyoming West' ,
'NAD83(2011) / Wyoming West (ftUS)' ,
'NAD83(2011) / Wyoming West Central' ,
'NAD83(2011) / Wyoming West Central (ftUS)' ,
'NAD83(2011) / Utah Central' ,
'NAD83(2011) / Utah North' ,
'NAD83(2011) / Utah South' ,
'NAD83(CSRS) / Quebec Lambert' ,
'NAD83 / Quebec Albers' ,
'NAD83(CSRS) / Quebec Albers' ,
'NAD83(2011) / Utah Central (ftUS)' ,
'NAD83(2011) / Utah North (ftUS)' ,
'NAD83(2011) / Utah South (ftUS)' ,
'NAD83(PA11) / Hawaii zone 1' ,
'NAD83(PA11) / Hawaii zone 2' ,
'NAD83(PA11) / Hawaii zone 3' ,
'NAD83(PA11) / Hawaii zone 4' ,
'NAD83(PA11) / Hawaii zone 5' ,
'NAD83(PA11) / Hawaii zone 3 (ftUS)' ,
'NAD83(PA11) / UTM zone 4N' ,
'NAD83(PA11) / UTM zone 5N' ,
'NAD83(PA11) / UTM zone 2S' ,
'NAD83(MA11) / Guam Map Grid' ,
'Tutuila 1962 height' ,
'Guam 1963 height' ,
'NMVD03 height' ,
'PRVD02 height' ,
'VIVD09 height' ,
'ASVD02 height' ,
'GUVD04 height' ,
'Karbala 1979 / Iraq National Grid' ,
'CGVD2013 height' ,
'NAD83(CSRS) + CGVD2013 height' ,
'NAD83(CSRS) / UTM zone 7N + CGVD2013 height' ,
'NAD83(CSRS) / UTM zone 8N + CGVD2013 height' ,
'NAD83(CSRS) / UTM zone 9N + CGVD2013 height' ,
'NAD83(CSRS) / UTM zone 10N + CGVD2013 height' ,
'NAD83(CSRS) / UTM zone 11N + CGVD2013 height' ,
'NAD83(CSRS) / UTM zone 12N + CGVD2013 height' ,
'NAD83(CSRS) / UTM zone 13N + CGVD2013 height' ,
'NAD83(CSRS) / UTM zone 14N + CGVD2013 height' ,
'NAD83(CSRS) / UTM zone 15N + CGVD2013 height' ,
'NAD83(CSRS) / UTM zone 16N + CGVD2013 height' ,
'NAD83(CSRS) / UTM zone 17N + CGVD2013 height' ,
'NAD83(CSRS) / UTM zone 18N + CGVD2013 height' ,
'NAD83(CSRS) / UTM zone 19N + CGVD2013 height' ,
'NAD83(CSRS) / UTM zone 20N + CGVD2013 height' ,
'NAD83(CSRS) / UTM zone 21N + CGVD2013 height' ,
'NAD83(CSRS) / UTM zone 22N + CGVD2013 height' ,
'JGD2011' ,
'JGD2011' ,
'JGD2011' ,
'JGD2011 / Japan Plane Rectangular CS I' ,
'JGD2011 / Japan Plane Rectangular CS II' ,
'JGD2011 / Japan Plane Rectangular CS III' ,
'JGD2011 / Japan Plane Rectangular CS IV' ,
'JGD2011 / Japan Plane Rectangular CS V' ,
'JGD2011 / Japan Plane Rectangular CS VI' ,
'JGD2011 / Japan Plane Rectangular CS VII' ,
'JGD2011 / Japan Plane Rectangular CS VIII' ,
'JGD2011 / Japan Plane Rectangular CS IX' ,
'JGD2011 / Japan Plane Rectangular CS X' ,
'JGD2011 / Japan Plane Rectangular CS XI' ,
'JGD2011 / Japan Plane Rectangular CS XII' ,
'JGD2011 / Japan Plane Rectangular CS XIII' ,
'JGD2011 / Japan Plane Rectangular CS XIV' ,
'JGD2011 / Japan Plane Rectangular CS XV' ,
'JGD2011 / Japan Plane Rectangular CS XVI' ,
'JGD2011 / Japan Plane Rectangular CS XVII' ,
'JGD2011 / Japan Plane Rectangular CS XVIII' ,
'JGD2011 / Japan Plane Rectangular CS XIX' ,
'JGD2011 / UTM zone 51N' ,
'JGD2011 / UTM zone 52N' ,
'JGD2011 / UTM zone 53N' ,
'JGD2011 / UTM zone 54N' ,
'JGD2011 / UTM zone 55N' ,
'JSLD72 height' ,
'JGD2000 (vertical) height' ,
'JGD2011 (vertical) height' ,
'JGD2000 + JGD2000 (vertical) height' ,
'JGD2011 + JGD2011 (vertical) height' ,
'Tokyo + JSLD72 height' ,
'WGS 84 / TM 60 SW' ,
'RDN2008' ,
'RDN2008' ,
'RDN2008' ,
'RDN2008 / UTM zone 32N (N-E)' ,
'RDN2008 / UTM zone 33N (N-E)' ,
'RDN2008 / UTM zone 34N (N-E)' ,
'Christmas Island Grid 1985' ,
'WGS 84 / CIG92' ,
'GDA94 / CIG94' ,
'WGS 84 / CKIG92' ,
'GDA94 / CKIG94' ,
'GDA94 / MGA zone 41' ,
'GDA94 / MGA zone 42' ,
'GDA94 / MGA zone 43' ,
'GDA94 / MGA zone 44' ,
'GDA94 / MGA zone 46' ,
'GDA94 / MGA zone 47' ,
'GDA94 / MGA zone 59' ,
'NAD83(CORS96)' ,
'NAD83(CORS96)' ,
'NAD83(CORS96)' ,
'NAD83(CORS96) / Oregon Baker zone (m)' ,
'NAD83(CORS96) / Oregon Baker zone (ft)' ,
'NAD83(2011) / Oregon Baker zone (m)' ,
'NAD83(2011) / Oregon Baker zone (ft)' ,
'NAD83(CORS96) / Oregon Bend-Klamath Falls zone (m)' ,
'NAD83(CORS96) / Oregon Bend-Klamath Falls zone (ft)' ,
'NAD83(2011) / Oregon Bend-Klamath Falls zone (m)' ,
'NAD83(2011) / Oregon Bend-Klamath Falls zone (ft)' ,
'NAD83(CORS96) / Oregon Bend-Redmond-Prineville zone (m)' ,
'NAD83(CORS96) / Oregon Bend-Redmond-Prineville zone (ft)' ,
'NAD83(2011) / Oregon Bend-Redmond-Prineville zone (m)' ,
'NAD83(2011) / Oregon Bend-Redmond-Prineville zone (ft)' ,
'NAD83(CORS96) / Oregon Bend-Burns zone (m)' ,
'NAD83(CORS96) / Oregon Bend-Burns zone (ft)' ,
'NAD83(2011) / Oregon Bend-Burns zone (m)' ,
'NAD83(2011) / Oregon Bend-Burns zone (ft)' ,
'NAD83(CORS96) / Oregon Canyonville-Grants Pass zone (m)' ,
'NAD83(CORS96) / Oregon Canyonville-Grants Pass zone (ft)' ,
'NAD83(2011) / Oregon Canyonville-Grants Pass zone (m)' ,
'NAD83(2011) / Oregon Canyonville-Grants Pass zone (ft)' ,
'NAD83(CORS96) / Oregon Columbia River East zone (m)' ,
'NAD83(CORS96) / Oregon Columbia River East zone (ft)' ,
'NAD83(2011) / Oregon Columbia River East zone (m)' ,
'NAD83(2011) / Oregon Columbia River East zone (ft)' ,
'NAD83(CORS96) / Oregon Columbia River West zone (m)' ,
'NAD83(CORS96) / Oregon Columbia River West zone (ft)' ,
'NAD83(2011) / Oregon Columbia River West zone (m)' ,
'NAD83(2011) / Oregon Columbia River West zone (ft)' ,
'NAD83(CORS96) / Oregon Cottage Grove-Canyonville zone (m)' ,
'NAD83(CORS96) / Oregon Cottage Grove-Canyonville zone (ft)' ,
'NAD83(2011) / Oregon Cottage Grove-Canyonville zone (m)' ,
'NAD83(2011) / Oregon Cottage Grove-Canyonville zone (ft)' ,
'NAD83(CORS96) / Oregon Dufur-Madras zone (m)' ,
'NAD83(CORS96) / Oregon Dufur-Madras zone (ft)' ,
'NAD83(2011) / Oregon Dufur-Madras zone (m)' ,
'NAD83(2011) / Oregon Dufur-Madras zone (ft)' ,
'NAD83(CORS96) / Oregon Eugene zone (m)' ,
'NAD83(CORS96) / Oregon Eugene zone (ft)' ,
'NAD83(2011) / Oregon Eugene zone (m)' ,
'NAD83(2011) / Oregon Eugene zone (ft)' ,
'NAD83(CORS96) / Oregon Grants Pass-Ashland zone (m)' ,
'NAD83(CORS96) / Oregon Grants Pass-Ashland zone (ft)' ,
'NAD83(2011) / Oregon Grants Pass-Ashland zone (m)' ,
'NAD83(2011) / Oregon Grants Pass-Ashland zone (ft)' ,
'NAD83(CORS96) / Oregon Gresham-Warm Springs zone (m)' ,
'NAD83(CORS96) / Oregon Gresham-Warm Springs zone (ft)' ,
'NAD83(2011) / Oregon Gresham-Warm Springs zone (m)' ,
'NAD83(2011) / Oregon Gresham-Warm Springs zone (ft)' ,
'NAD83(CORS96) / Oregon La Grande zone (m)' ,
'NAD83(CORS96) / Oregon La Grande zone (ft)' ,
'NAD83(2011) / Oregon La Grande zone (m)' ,
'NAD83(2011) / Oregon La Grande zone (ft)' ,
'NAD83(CORS96) / Oregon Ontario zone (m)' ,
'NAD83(CORS96) / Oregon Ontario zone (ft)' ,
'NAD83(2011) / Oregon Ontario zone (m)' ,
'NAD83(2011) / Oregon Ontario zone (ft)' ,
'NAD83(CORS96) / Oregon Coast zone (m)' ,
'NAD83(CORS96) / Oregon Coast zone (ft)' ,
'NAD83(2011) / Oregon Coast zone (m)' ,
'NAD83(2011) / Oregon Coast zone (ft)' ,
'NAD83(CORS96) / Oregon Pendleton zone (m)' ,
'NAD83(CORS96) / Oregon Pendleton zone (ft)' ,
'NAD83(2011) / Oregon Pendleton zone (m)' ,
'NAD83(2011) / Oregon Pendleton zone (ft)' ,
'NAD83(CORS96) / Oregon Pendleton-La Grande zone (m)' ,
'NAD83(CORS96) / Oregon Pendleton-La Grande zone (ft)' ,
'NAD83(2011) / Oregon Pendleton-La Grande zone (m)' ,
'NAD83(2011) / Oregon Pendleton-La Grande zone (ft)' ,
'NAD83(CORS96) / Oregon Portland zone (m)' ,
'NAD83(CORS96) / Oregon Portland zone (ft)' ,
'NAD83(2011) / Oregon Portland zone (m)' ,
'NAD83(2011) / Oregon Portland zone (ft)' ,
'NAD83(CORS96) / Oregon Salem zone (m)' ,
'NAD83(CORS96) / Oregon Salem zone (ft)' ,
'NAD83(2011) / Oregon Salem zone (m)' ,
'NAD83(2011) / Oregon Salem zone (ft)' ,
'NAD83(CORS96) / Oregon Santiam Pass zone (m)' ,
'NAD83(CORS96) / Oregon Santiam Pass zone (ft)' ,
'NAD83(2011) / Oregon Santiam Pass zone (m)' ,
'NAD83(2011) / Oregon Santiam Pass zone (ft)' ,
'NAD83(CORS96) / Oregon LCC (m)' ,
'NAD83(CORS96) / Oregon GIC Lambert (ft)' ,
'ETRS89 / Albania TM 2010' ,
'WGS 84 / Pseudo-Mercator +  EGM2008 geoid height' ,
'RDN2008 / Italy zone (N-E)' ,
'RDN2008 / Zone 12 (N-E)' ,
'NAD83(2011) / Wisconsin Central' ,
'NAD83(2011) / Nebraska (ftUS)' ,
'Aden 1925' ,
'Bekaa Valley 1920' ,
'Bioko' ,
'NAD83(CORS96) / Oregon North' ,
'NAD83(CORS96) / Oregon North (ft)' ,
'NAD83(CORS96) / Oregon South' ,
'NAD83(CORS96) / Oregon South (ft)' ,
'South East Island 1943' ,
'WGS 84 / World Mercator +  EGM2008 height' ,
'Gambia' ,
'South East Island 1943 / UTM zone 40N' ,
'SHD height' ,
'SVY21 + SHD height' ,
'NAD83 / Kansas LCC' ,
'NAD83 / Kansas LCC (ftUS)' ,
'NAD83(2011) / Kansas LCC' ,
'NAD83(2011) / Kansas LCC (ftUS)' ,
'SVY21 / Singapore TM + SHD height' ,
'WGS 84 / NSIDC EASE-Grid 2.0 North' ,
'WGS 84 / NSIDC EASE-Grid 2.0 South' ,
'WGS 84 / NSIDC EASE-Grid 2.0 Global' ,
'IGS08' ,
'VN-2000 / TM-3 zone 481' ,
'VN-2000 / TM-3 zone 482' ,
'VN-2000 / TM-3 zone 491' ,
'VN-2000 / TM-3 Da Nang zone' ,
'ETRS89 / Albania LCC 2010' ,
'NAD27 / Michigan North' ,
'IGD05' ,
'IGD05' ,
'IGD05' ,
'IG05 Intermediate CRS' ,
'IG05 Intermediate CRS' ,
'IG05 Intermediate CRS' ,
'Israeli Grid 05' ,
'IGD05/12' ,
'IGD05/12' ,
'IGD05/12' ,
'IG05/12 Intermediate CRS' ,
'IG05/12 Intermediate CRS' ,
'IG05/12 Intermediate CRS' ,
'Israeli Grid 05/12' ,
'NAD83(2011) / San Francisco CS13' ,
'NAD83(2011) / San Francisco CS13 (ftUS)' ,
'Nahrwan 1934 / UTM zone 37N' ,
'Nahrwan 1934 / UTM zone 38N' ,
'Nahrwan 1934 / UTM zone 39N' ,
'RGSPM06 (lon-lat)' ,
'RGSPM06 (lon-lat)' ,
'RGR92 (lon-lat)' ,
'RGR92 (lon-lat)' ,
'RGM04 (lon-lat)' ,
'RGM04 (lon-lat)' ,
'RGFG95 (lon-lat)' ,
'RGFG95 (lon-lat)' ,
'RGF93 (lon-lat)' ,
'NAD83(2011) / IaRCS zone 1' ,
'NAD83(2011) / IaRCS zone 2' ,
'NAD83(2011) / IaRCS zone 3' ,
'NAD83(2011) / IaRCS zone 4' ,
'NAD83(2011) / IaRCS zone 5' ,
'NAD83(2011) / IaRCS zone 6' ,
'NAD83(2011) / IaRCS zone 7' ,
'NAD83(2011) / IaRCS zone 8' ,
'NAD83(2011) / IaRCS zone 9' ,
'NAD83(2011) / IaRCS zone 10' ,
'NAD83(2011) / IaRCS zone 11' ,
'NAD83(2011) / IaRCS zone 12' ,
'NAD83(2011) / IaRCS zone 13' ,
'NAD83(2011) / IaRCS zone 14' ,
'RGTAAF07' ,
'RGTAAF07' ,
'RGTAAF07' ,
'RGTAAF07 / UTM zone 37S' ,
'RGTAAF07 / UTM zone 38S' ,
'RGTAAF07 / UTM zone 39S' ,
'RGTAAF07 / UTM zone 40S' ,
'RGTAAF07 / UTM zone 41S' ,
'RGTAAF07 / UTM zone 42S' ,
'RGTAAF07 / UTM zone 43S' ,
'RGTAAF07 / UTM zone 44S' ,
'RGTAAF07 / Terre Adelie Polar Stereographic' ,
'RGF93 (lon-lat)' ,
'RGAF09 (lon-lat)' ,
'RGAF09 (lon-lat)' ,
'RGTAAF07 (lon-lat)' ,
'RGTAAF07 (lon-lat)' ,
'NAD83(2011) / RMTCRS St Mary (m)' ,
'NAD83(2011) / RMTCRS Blackfeet (m)' ,
'NAD83(2011) / RMTCRS Milk River (m)' ,
'NAD83(2011) / RMTCRS Fort Belknap (m)' ,
'NAD83(2011) / RMTCRS Fort Peck Assiniboine (m)' ,
'NAD83(2011) / RMTCRS Fort Peck Sioux (m)' ,
'NAD83(2011) / RMTCRS Crow (m)' ,
'NAD83(2011) / RMTCRS Bobcat (m)' ,
'NAD83(2011) / RMTCRS Billings (m)' ,
'NAD83(2011) / RMTCRS Wind River (m)' ,
'NAD83(2011) / RMTCRS St Mary (ft)' ,
'NAD83(2011) / RMTCRS Blackfeet (ft)' ,
'NAD83(2011) / RMTCRS Milk River (ft)' ,
'NAD83(2011) / RMTCRS Fort Belknap (ft)' ,
'NAD83(2011) / RMTCRS Fort Peck Assiniboine (ft)' ,
'NAD83(2011) / RMTCRS Fort Peck Sioux (ft)' ,
'NAD83(2011) / RMTCRS Crow (ft)' ,
'NAD83(2011) / RMTCRS Bobcat (ft)' ,
'NAD83(2011) / RMTCRS Billings (ft)' ,
'NAD83(2011) / RMTCRS Wind River (ftUS)' ,
'NAD83(2011) / San Francisco CS13' ,
'NAD83(2011) / San Francisco CS13 (ftUS)' ,
'RGTAAF07 (lon-lat)' ,
'IGD05' ,
'IGD05' ,
'IGD05' ,
'IGD05/12' ,
'IGD05/12' ,
'IGD05/12' ,
'Palestine 1923 / Palestine Grid modified' ,
'NAD83(2011) / InGCS Adams (m)' ,
'NAD83(2011) / InGCS Adams (ftUS)' ,
'NAD83(2011) / InGCS Allen (m)' ,
'NAD83(2011) / InGCS Allen (ftUS)' ,
'NAD83(2011) / InGCS Bartholomew (m)' ,
'NAD83(2011) / InGCS Bartholomew (ftUS)' ,
'NAD83(2011) / InGCS Benton (m)' ,
'NAD83(2011) / InGCS Benton (ftUS)' ,
'NAD83(2011) / InGCS Blackford-Delaware (m)' ,
'NAD83(2011) / InGCS Blackford-Delaware (ftUS)' ,
'NAD83(2011) / InGCS Boone-Hendricks (m)' ,
'NAD83(2011) / InGCS Boone-Hendricks (ftUS)' ,
'NAD83(2011) / InGCS Brown (m)' ,
'NAD83(2011) / InGCS Brown (ftUS)' ,
'NAD83(2011) / InGCS Carroll (m)' ,
'NAD83(2011) / InGCS Carroll (ftUS)' ,
'NAD83(2011) / InGCS Cass (m)' ,
'NAD83(2011) / InGCS Cass (ftUS)' ,
'NAD83(2011) / InGCS Clark-Floyd-Scott (m)' ,
'NAD83(2011) / InGCS Clark-Floyd-Scott (ftUS)' ,
'NAD83(2011) / InGCS Clay (m)' ,
'NAD83(2011) / InGCS Clay (ftUS)' ,
'NAD83(2011) / InGCS Clinton (m)' ,
'NAD83(2011) / InGCS Clinton (ftUS)' ,
'NAD83(2011) / InGCS Crawford-Lawrence-Orange (m)' ,
'NAD83(2011) / InGCS Crawford-Lawrence-Orange (ftUS)' ,
'NAD83(2011) / InGCS Daviess-Greene (m)' ,
'NAD83(2011) / InGCS Daviess-Greene (ftUS)' ,
'NAD83(2011) / InGCS Dearborn-Ohio-Switzerland (m)' ,
'NAD83(2011) / InGCS Dearborn-Ohio-Switzerland (ftUS)' ,
'NAD83(2011) / InGCS Decatur-Rush (m)' ,
'NAD83(2011) / InGCS Decatur-Rush (ftUS)' ,
'NAD83(2011) / InGCS DeKalb (m)' ,
'NAD83(2011) / InGCS DeKalb (ftUS)' ,
'NAD83(2011) / InGCS Dubois-Martin (m)' ,
'NAD83(2011) / InGCS Dubois-Martin (ftUS)' ,
'NAD83(2011) / InGCS Elkhart-Kosciusko-Wabash (m)' ,
'NAD83(2011) / InGCS Elkhart-Kosciusko-Wabash (ftUS)' ,
'NAD83(2011) / InGCS Fayette-Franklin-Union (m)' ,
'NAD83(2011) / InGCS Fayette-Franklin-Union (ftUS)' ,
'NAD83(2011) / InGCS Fountain-Warren (m)' ,
'NAD83(2011) / InGCS Fountain-Warren (ftUS)' ,
'NAD83(2011) / InGCS Fulton-Marshall-St. Joseph (m)' ,
'NAD83(2011) / InGCS Fulton-Marshall-St. Joseph (ftUS)' ,
'NAD83(2011) / InGCS Gibson (m)' ,
'NAD83(2011) / InGCS Gibson (ftUS)' ,
'NAD83(2011) / InGCS Grant (m)' ,
'NAD83(2011) / InGCS Grant (ftUS)' ,
'NAD83(2011) / InGCS Hamilton-Tipton (m)' ,
'NAD83(2011) / InGCS Hamilton-Tipton (ftUS)' ,
'NAD83(2011) / InGCS Hancock-Madison (m)' ,
'NAD83(2011) / InGCS Hancock-Madison (ftUS)' ,
'NAD83(2011) / InGCS Harrison-Washington (m)' ,
'NAD83(2011) / InGCS Harrison-Washington (ftUS)' ,
'NAD83(2011) / InGCS Henry (m)' ,
'NAD83(2011) / InGCS Henry (ftUS)' ,
'NAD83(2011) / InGCS Howard-Miami (m)' ,
'NAD83(2011) / InGCS Howard-Miami (ftUS)' ,
'NAD83(2011) / InGCS Huntington-Whitley (m)' ,
'NAD83(2011) / InGCS Huntington-Whitley (ftUS)' ,
'NAD83(2011) / InGCS Jackson (m)' ,
'NAD83(2011) / InGCS Jackson (ftUS)' ,
'NAD83(2011) / InGCS Jasper-Porter (m)' ,
'NAD83(2011) / InGCS Jasper-Porter (ftUS)' ,
'NAD83(2011) / InGCS Jay (m)' ,
'NAD83(2011) / InGCS Jay (ftUS)' ,
'NAD83(2011) / InGCS Jefferson (m)' ,
'NAD83(2011) / InGCS Jefferson (ftUS)' ,
'NAD83(2011) / InGCS Jennings (m)' ,
'NAD83(2011) / InGCS Jennings (ftUS)' ,
'NAD83(2011) / InGCS Johnson-Marion (m)' ,
'NAD83(2011) / InGCS Johnson-Marion (ftUS)' ,
'NAD83(2011) / InGCS Knox (m)' ,
'NAD83(2011) / InGCS Knox (ftUS)' ,
'NAD83(2011) / InGCS LaGrange-Noble (m)' ,
'NAD83(2011) / InGCS LaGrange-Noble (ftUS)' ,
'NAD83(2011) / InGCS Lake-Newton (m)' ,
'NAD83(2011) / InGCS Lake-Newton (ftUS)' ,
'NAD83(2011) / InGCS LaPorte-Pulaski-Starke (m)' ,
'NAD83(2011) / InGCS LaPorte-Pulaski-Starke (ftUS)' ,
'NAD83(2011) / InGCS Monroe-Morgan (m)' ,
'NAD83(2011) / InGCS Monroe-Morgan (ftUS)' ,
'NAD83(2011) / InGCS Montgomery-Putnam (m)' ,
'NAD83(2011) / InGCS Montgomery-Putnam (ftUS)' ,
'NAD83(2011) / InGCS Owen (m)' ,
'NAD83(2011) / InGCS Owen (ftUS)' ,
'NAD83(2011) / InGCS Parke-Vermillion (m)' ,
'NAD83(2011) / InGCS Parke-Vermillion (ftUS)' ,
'NAD83(2011) / InGCS Perry (m)' ,
'NAD83(2011) / InGCS Perry (ftUS)' ,
'NAD83(2011) / InGCS Pike-Warrick (m)' ,
'NAD83(2011) / InGCS Pike-Warrick (ftUS)' ,
'NAD83(2011) / InGCS Posey (m)' ,
'NAD83(2011) / InGCS Posey (ftUS)' ,
'NAD83(2011) / InGCS Randolph-Wayne (m)' ,
'NAD83(2011) / InGCS Randolph-Wayne (ftUS)' ,
'NAD83(2011) / InGCS Ripley (m)' ,
'NAD83(2011) / InGCS Ripley (ftUS)' ,
'NAD83(2011) / InGCS Shelby (m)' ,
'NAD83(2011) / InGCS Shelby (ftUS)' ,
'NAD83(2011) / InGCS Spencer (m)' ,
'NAD83(2011) / InGCS Spencer (ftUS)' ,
'NAD83(2011) / InGCS Steuben (m)' ,
'NAD83(2011) / InGCS Steuben (ftUS)' ,
'NAD83(2011) / InGCS Sullivan (m)' ,
'NAD83(2011) / InGCS Sullivan (ftUS)' ,
'NAD83(2011) / InGCS Tippecanoe-White (m)' ,
'NAD83(2011) / InGCS Tippecanoe-White (ftUS)' ,
'NAD83(2011) / InGCS Vanderburgh (m)' ,
'NAD83(2011) / InGCS Vanderburgh (ftUS)' ,
'NAD83(2011) / InGCS Vigo (m)' ,
'NAD83(2011) / InGCS Vigo (ftUS)' ,
'NAD83(2011) / InGCS Wells (m)' ,
'NAD83(2011) / InGCS Wells (ftUS)' ,
'ONGD14' ,
'ONGD14' ,
'ONGD14' ,
'ONGD14 / UTM zone 39N' ,
'ONGD14 / UTM zone 40N' ,
'ONGD14 / UTM zone 41N' ,
'NTF (Paris) + NGF IGN69 height' ,
'NTF (Paris) / France II + NGF Lallemand' ,
'NTF (Paris) / France II + NGF IGN69' ,
'NTF (Paris) / France III + NGF IGN69' ,
'RT90 + RH70 height' ,
'OSGB 1936 / British National Grid + ODN height' ,
'NAD27 + NGVD29 height' ,
'NAD27 / Texas North + NGVD29 height' ,
'RD/NAP' ,
'ETRS89 + EVRF2000 height' ,
'PSHD93' ,
'NTF (Paris) / Lambert zone II + NGF Lallemand height' ,
'NTF (Paris) / Lambert zone II + NGF IGN69' ,
'NTF (Paris) / Lambert zone III + NGF IGN69' ,
'Tokyo + JSLD69 height' ,
'Amersfoort / RD New + NAP height' ,
'ETRS89 / UTM zone 32N + DVR90 height' ,
'ETRS89 / UTM zone 33N + DVR90 height' ,
'ETRS89 / Kp2000 Jutland + DVR90 height' ,
'ETRS89 / Kp2000 Zealand + DVR90 height' ,
'ETRS89 / Kp2000 Bornholm + DVR90 height' ,
'NTF (Paris) / Lambert zone II + NGF-IGN69 height' ,
'NTF (Paris) / Lambert zone III + NGF-IGN69 height' ,
'ETRS89 + EVRF2007 height' ,
'Famagusta 1960 height' ,
'PNG08 height' ,
'NAD83(2011) / WISCRS Adams and Juneau (m)' ,
'NAD83(2011) / WISCRS Ashland (m)' ,
'NAD83(2011) / WISCRS Barron (m)' ,
'NAD83(2011) / WISCRS Bayfield (m)' ,
'NAD83(2011) / WISCRS Brown (m)' ,
'NAD83(2011) / WISCRS Buffalo (m)' ,
'NAD83(2011) / WISCRS Burnett (m)' ,
'NAD83(2011) / WISCRS Calumet, Fond du Lac, Outagamie and Winnebago (m)' ,
'NAD83(2011) / WISCRS Chippewa (m)' ,
'NAD83(2011) / WISCRS Clark (m)' ,
'NAD83(2011) / WISCRS Columbia (m)' ,
'NAD83(2011) / WISCRS Crawford (m)' ,
'NAD83(2011) / WISCRS Dane (m)' ,
'NAD83(2011) / WISCRS Dodge and Jefferson (m)' ,
'NAD83(2011) / WISCRS Door (m)' ,
'NAD83(2011) / WISCRS Douglas (m)' ,
'NAD83(2011) / WISCRS Dunn (m)' ,
'NAD83(2011) / WISCRS Eau Claire (m)' ,
'NAD83(2011) / WISCRS Florence (m)' ,
'NAD83(2011) / WISCRS Forest (m)' ,
'NAD83(2011) / WISCRS Grant (m)' ,
'NAD83(2011) / WISCRS Green and Lafayette (m)' ,
'NAD83(2011) / WISCRS Green Lake and Marquette (m)' ,
'NAD83(2011) / WISCRS Iowa (m)' ,
'NAD83(2011) / WISCRS Iron (m)' ,
'NAD83(2011) / WISCRS Jackson (m)' ,
'NAD83(2011) / WISCRS Kenosha, Milwaukee, Ozaukee and Racine (m)' ,
'NAD83(2011) / WISCRS Kewaunee, Manitowoc and Sheboygan (m)' ,
'NAD83(2011) / WISCRS La Crosse (m)' ,
'NAD83(2011) / WISCRS Langlade (m)' ,
'NAD83(2011) / WISCRS Lincoln (m)' ,
'NAD83(2011) / WISCRS Marathon (m)' ,
'NAD83(2011) / WISCRS Marinette (m)' ,
'NAD83(2011) / WISCRS Menominee (m)' ,
'NAD83(2011) / WISCRS Monroe (m)' ,
'NAD83(2011) / WISCRS Oconto (m)' ,
'NAD83(2011) / WISCRS Oneida (m)' ,
'NAD83(2011) / WISCRS Pepin and Pierce (m)' ,
'NAD83(2011) / WISCRS Polk (m)' ,
'NAD83(2011) / WISCRS Portage (m)' ,
'NAD83(2011) / WISCRS Price (m)' ,
'NAD83(2011) / WISCRS Richland (m)' ,
'NAD83(2011) / WISCRS Rock (m)' ,
'NAD83(2011) / WISCRS Rusk (m)' ,
'NAD83(2011) / WISCRS Sauk (m)' ,
'NAD83(2011) / WISCRS Sawyer (m)' ,
'NAD83(2011) / WISCRS Shawano (m)' ,
'NAD83(2011) / WISCRS St. Croix (m)' ,
'NAD83(2011) / WISCRS Taylor (m)' ,
'NAD83(2011) / WISCRS Trempealeau (m)' ,
'NAD83(2011) / WISCRS Vernon (m)' ,
'NAD83(2011) / WISCRS Vilas (m)' ,
'NAD83(2011) / WISCRS Walworth (m)' ,
'NAD83(2011) / WISCRS Washburn (m)' ,
'NAD83(2011) / WISCRS Washington (m)' ,
'NAD83(2011) / WISCRS Waukesha (m)' ,
'NAD83(2011) / WISCRS Waupaca (m)' ,
'NAD83(2011) / WISCRS Waushara (m)' ,
'NAD83(2011) / WISCRS Wood (m)' ,
'NAD83(2011) / WISCRS Adams and Juneau (ftUS)' ,
'NAD83(2011) / WISCRS Ashland (ftUS)' ,
'NAD83(2011) / WISCRS Barron (ftUS)' ,
'NAD83(2011) / WISCRS Bayfield (ftUS)' ,
'NAD83(2011) / WISCRS Brown (ftUS)' ,
'NAD83(2011) / WISCRS Buffalo (ftUS)' ,
'NAD83(2011) / WISCRS Burnett (ftUS)' ,
'NAD83(2011) / WISCRS Calumet, Fond du Lac, Outagamie and Winnebago (ftUS)' ,
'NAD83(2011) / WISCRS Chippewa (ftUS)' ,
'NAD83(2011) / WISCRS Clark (ftUS)' ,
'NAD83(2011) / WISCRS Columbia (ftUS)' ,
'NAD83(2011) / WISCRS Crawford (ftUS)' ,
'NAD83(2011) / WISCRS Dane (ftUS)' ,
'NAD83(2011) / WISCRS Dodge and Jefferson (ftUS)' ,
'NAD83(2011) / WISCRS Door (ftUS)' ,
'NAD83(2011) / WISCRS Douglas (ftUS)' ,
'NAD83(2011) / WISCRS Dunn (ftUS)' ,
'NAD83(2011) / WISCRS Eau Claire (ftUS)' ,
'NAD83(2011) / WISCRS Florence (ftUS)' ,
'NAD83(2011) / WISCRS Forest (ftUS)' ,
'NAD83(2011) / WISCRS Grant (ftUS)' ,
'NAD83(2011) / WISCRS Green and Lafayette (ftUS)' ,
'NAD83(2011) / WISCRS Green Lake and Marquette (ftUS)' ,
'NAD83(2011) / WISCRS Iowa (ftUS)' ,
'NAD83(2011) / WISCRS Iron (ftUS)' ,
'NAD83(2011) / WISCRS Jackson (ftUS)' ,
'NAD83(2011) / WISCRS Kenosha, Milwaukee, Ozaukee and Racine (ftUS)' ,
'NAD83(2011) / WISCRS Kewaunee, Manitowoc and Sheboygan (ftUS)' ,
'NAD83(2011) / WISCRS La Crosse (ftUS)' ,
'NAD83(2011) / WISCRS Langlade (ftUS)' ,
'NAD83(2011) / WISCRS Lincoln (ftUS)' ,
'NAD83(2011) / WISCRS Marathon (ftUS)' ,
'NAD83(2011) / WISCRS Marinette (ftUS)' ,
'NAD83(2011) / WISCRS Menominee (ftUS)' ,
'NAD83(2011) / WISCRS Monroe (ftUS)' ,
'NAD83(2011) / WISCRS Oconto (ftUS)' ,
'NAD83(2011) / WISCRS Oneida (ftUS)' ,
'NAD83(2011) / WISCRS Pepin and Pierce (ftUS)' ,
'NAD83(2011) / WISCRS Polk (ftUS)' ,
'NAD83(2011) / WISCRS Portage (ftUS)' ,
'NAD83(2011) / WISCRS Price (ftUS)' ,
'NAD83(2011) / WISCRS Richland (ftUS)' ,
'NAD83(2011) / WISCRS Rock (ftUS)' ,
'NAD83(2011) / WISCRS Rusk (ftUS)' ,
'NAD83(2011) / WISCRS Sauk (ftUS)' ,
'NAD83(2011) / WISCRS Sawyer (ftUS)' ,
'NAD83(2011) / WISCRS Shawano (ftUS)' ,
'NAD83(2011) / WISCRS St. Croix (ftUS)' ,
'NAD83(2011) / WISCRS Taylor (ftUS)' ,
'NAD83(2011) / WISCRS Trempealeau (ftUS)' ,
'NAD83(2011) / WISCRS Vernon (ftUS)' ,
'NAD83(2011) / WISCRS Vilas (ftUS)' ,
'NAD83(2011) / WISCRS Walworth (ftUS)' ,
'NAD83(2011) / WISCRS Washburn (ftUS)' ,
'NAD83(2011) / WISCRS Washington (ftUS)' ,
'NAD83(2011) / WISCRS Waukesha (ftUS)' ,
'NAD83(2011) / WISCRS Waupaca (ftUS)' ,
'NAD83(2011) / WISCRS Waushara (ftUS)' ,
'NAD83(2011) / WISCRS Wood (ftUS)' ,
'Kumul 34 height' ,
'Kiunga height' ,
'WGS 84 (G730)' ,
'WGS 84 (G730)' ,
'WGS 84 (G873)' ,
'WGS 84 (G873)' ,
'WGS 84 (G1150)' ,
'WGS 84 (G1150)' ,
'WGS 84 (G1674)' ,
'WGS 84 (G1674)' ,
'WGS 84 (G1762)' ,
'WGS 84 (G1762)' ,
'PZ-90.02' ,
'PZ-90.02' ,
'PZ-90.11' ,
'PZ-90.11' ,
'GSK-2011' ,
'GSK-2011' ,
'GSK-2011' ,
'Kyrg-06' ,
'Kyrg-06' ,
'Kyrg-06' ,
'Kyrg-06 / zone 1' ,
'Kyrg-06 / zone 2' ,
'Kyrg-06 / zone 3' ,
'Kyrg-06 / zone 4' ,
'Kyrg-06 / zone 5' ,
'DHHN12 height' ,
'Latvia 2000 height' ,
'EPSG moving platform example' ,
'ODN (Offshore) height' ,
'WGS 84 / India NSF LCC' ,
'WGS 84 / Andhra Pradesh' ,
'WGS 84 / Arunachal Pradesh' ,
'WGS 84 / Assam' ,
'WGS 84 / Bihar' ,
'WGS 84 / Delhi' ,
'WGS 84 / Gujarat' ,
'WGS 84 / Haryana' ,
'WGS 84 / Himachal Pradesh' ,
'WGS 84 / Jammu and Kashmir' ,
'WGS 84 / Jharkhand' ,
'WGS 84 / Madhya Pradesh' ,
'WGS 84 / Maharashtra' ,
'WGS 84 / Manipur' ,
'WGS 84 / Meghalaya' ,
'WGS 84 / Nagaland' ,
'WGS 84 / India Northeast' ,
'WGS 84 / Orissa' ,
'WGS 84 / Punjab' ,
'WGS 84 / Rajasthan' ,
'WGS 84 / Uttar Pradesh' ,
'WGS 84 / Uttaranchal' ,
'WGS 84 / Andaman and Nicobar' ,
'WGS 84 / Chhattisgarh' ,
'WGS 84 / Goa' ,
'WGS 84 / Karnataka' ,
'WGS 84 / Kerala' ,
'WGS 84 / Lakshadweep' ,
'WGS 84 / Mizoram' ,
'WGS 84 / Sikkim' ,
'WGS 84 / Tamil Nadu' ,
'WGS 84 / Tripura' ,
'WGS 84 / West Bengal' ,
'ITRF2014' ,
'RDN2008 / UTM zone 32N' ,
'RDN2008 / UTM zone 33N' ,
'RDN2008 / UTM zone 34N' ,
'RDN2008 / Italy zone (E-N)' ,
'RDN2008 / Zone 12 (E-N)' ,
'BGS2005' ,
'BGS2005' ,
'BGS2005' ,
'BGS2005 / UTM zone 34N (N-E)' ,
'BGS2005 / UTM zone 35N (N-E)' ,
'BGS2005 / CCS2005' ,
'BGS2005 / UTM zone 34N' ,
'BGS2005 / UTM zone 35N' ,
'BGS2005 / UTM zone 36N' ,
'WGS 84 (Transit)' ,
'WGS 84 (Transit)' ,
'Pulkovo 1942 / CS63 zone X1' ,
'Pulkovo 1942 / CS63 zone X2' ,
'Pulkovo 1942 / CS63 zone X3' ,
'Pulkovo 1942 / CS63 zone X4' ,
'Pulkovo 1942 / CS63 zone X5' ,
'Pulkovo 1942 / CS63 zone X6' ,
'Pulkovo 1942 / CS63 zone X7' ,
'POM96 height' ,
'DHHN2016 height' ,
'NZVD2016 height' ,
'POM08 height' ,
'GDA2020' ,
'GDA2020' ,
'GDA2020' ,
'GDA2020 / GA LCC' ,
'GDA2020 / MGA zone 46' ,
'GDA2020 / MGA zone 47' ,
'GDA2020 / MGA zone 48' ,
'GDA2020 / MGA zone 49' ,
'GDA2020 / MGA zone 50' ,
'GDA2020 / MGA zone 51' ,
'GDA2020 / MGA zone 52' ,
'GDA2020 / MGA zone 53' ,
'GDA2020 / MGA zone 54' ,
'GDA2020 / MGA zone 55' ,
'GDA2020 / MGA zone 56' ,
'GDA2020 / MGA zone 57' ,
'GDA2020 / MGA zone 58' ,
'GDA2020 / MGA zone 59' ,
'Astro DOS 71 / SHLG71' ,
'Astro DOS 71 / UTM zone 30S' ,
'St. Helena Tritan' ,
'St. Helena Tritan' ,
'St. Helena Tritan' ,
'St. Helena Tritan / SHLG(Tritan)' ,
'St. Helena Tritan / UTM zone 30S' ,
'SHGD2015' ,
'SHGD2015' ,
'SHGD2015' ,
'SHMG2015' ,
'Jamestown 1971 height' ,
'St. Helena Tritan 2011 height' ,
'SHVD2015 height' ,
'GDA2020 / Vicgrid' ,
'ITRF88' ,
'ITRF89' ,
'ITRF90' ,
'ITRF91' ,
'ITRF92' ,
'ITRF93' ,
'ITRF94' ,
'ITRF96' ,
'ITRF97' ,
'ITRF2000' ,
'ITRF2005' ,
'ITRF2008' ,
'ITRF2014' ,
'ETRF89' ,
'ETRF89' ,
'ETRF90' ,
'ETRF90' ,
'ETRF91' ,
'ETRF91' ,
'ETRF92' ,
'ETRF92' ,
'ETRF93' ,
'ETRF93' ,
'ETRF94' ,
'ETRF94' ,
'ETRF96' ,
'ETRF96' ,
'ETRF97' ,
'ETRF97' ,
'ETRF2000' ,
'ETRF2000' ,
'Astro DOS 71 / UTM zone 30S + Jamestown 1971 height' ,
'St. Helena Tritan / UTM zone 30S +  Tritan 2011 height' ,
'SHMG2015 +  SHVD2015 height' ,
'Poolbeg height (m)' ,
'NGVD29 height (m)' ,
'HKPD depth' ,
'KOC WD height' ,
'NAD27 / MTM zone 10' ,
'Malongo 1987 / UTM zone 33S' ,
'GDA2020 / ALB2020' ,
'GDA2020 / BIO2020' ,
'GDA2020 / BRO2020' ,
'GDA2020 / BCG2020' ,
'GDA2020 / CARN2020' ,
'GDA2020 / CIG2020' ,
'GDA2020 / CKIG2020' ,
'GDA2020 / COL2020' ,
'GDA2020 / ESP2020' ,
'GDA2020 / EXM2020' ,
'GDA2020 / GCG2020' ,
'GDA2020 / GOLD2020' ,
'GDA2020 / JCG2020' ,
'GDA2020 / KALB2020' ,
'GDA2020 / KAR2020' ,
'GDA2020 / KUN2020' ,
'GDA2020 / LCG2020' ,
'GDA2020 / MRCG2020' ,
'GDA2020 / PCG2020' ,
'GDA2020 / PHG2020' ,
'WGS 84 / TM Zone 20N (ftUS)' ,
'WGS 84 / TM Zone 21N (ftUS)' ,
'Gusterberg (Ferro)' ,
'St. Stephen (Ferro)' ,
'Gusterberg Grid (Ferro)' ,
'St. Stephen Grid (Ferro)' ,
'MSL height (ft)' ,
'MSL depth (ft)' ,
'MSL height (ftUS)' ,
'MSL depth (ftUS)' ,
'GDA2020 / NSW Lambert' ,
'GDA2020 / SA Lambert' ,
'NAD83(2011) / PCCS zone 1 (ft)' ,
'NAD83(2011) / PCCS zone 2 (ft)' ,
'NAD83(2011) / PCCS zone 3 (ft)' ,
'NAD83(2011) / PCCS zone 4 (ft)' ,
'NAD83(CSRS)v6 / MTM Nova Scotia zone 4' ,
'NAD83(CSRS)v6 / MTM Nova Scotia zone 5' ,
'ISN2016' ,
'ISN2016' ,
'ISN2016' ,
'ISN2016 / Lambert 2016' ,
'ISH2004 height' ,
'NAD83(HARN) / WISCRS Florence (m)' ,
'NAD83(HARN) / WISCRS Florence (ftUS)' ,
'NAD83(HARN) / WISCRS Eau Claire (m)' ,
'NAD83(HARN) / WISCRS Eau Claire (ftUS)' ,
'NAD83(HARN) / WISCRS Wood (m)' ,
'NAD83(HARN) / WISCRS Wood (ftUS)' ,
'NAD83(HARN) / WISCRS Waushara (m)' ,
'NAD83(HARN) / WISCRS Waushara (ftUS)' ,
'NAD83(HARN) / WISCRS Waupaca (m)' ,
'NAD83(HARN) / WISCRS Waupaca (ftUS)' ,
'NAD83(HARN) / WISCRS Waukesha (m)' ,
'NAD83(HARN) / WISCRS Waukesha (ftUS)' ,
'NAD83(HARN) / WISCRS Washington (m)' ,
'NAD83(HARN) / WISCRS Washington (ftUS)' ,
'NAD83(HARN) / WISCRS Washburn (m)' ,
'NAD83(HARN) / WISCRS Washburn (ftUS)' ,
'NAD83(HARN) / WISCRS Walworth (m)' ,
'NAD83(HARN) / WISCRS Walworth (ftUS)' ,
'NAD83(HARN) / WISCRS Vilas (m)' ,
'NAD83(HARN) / WISCRS Vilas (ftUS)' ,
'NAD83(HARN) / WISCRS Vernon (m)' ,
'NAD83(HARN) / WISCRS Vernon (ftUS)' ,
'NAD83(HARN) / WISCRS Trempealeau (m)' ,
'NAD83(HARN) / WISCRS Trempealeau (ftUS)' ,
'NAD83(HARN) / WISCRS Taylor (m)' ,
'NAD83(HARN) / WISCRS Taylor (ftUS)' ,
'NAD83(HARN) / WISCRS St. Croix (m)' ,
'NAD83(HARN) / WISCRS St. Croix (ftUS)' ,
'NAD83(HARN) / WISCRS Shawano (m)' ,
'NAD83(HARN) / WISCRS Shawano (ftUS)' ,
'NAD83(HARN) / WISCRS Sawyer (m)' ,
'NAD83(HARN) / WISCRS Sawyer (ftUS)' ,
'NAD83(HARN) / WISCRS Sauk (m)' ,
'NAD83(HARN) / WISCRS Sauk (ftUS)' ,
'NAD83(HARN) / WISCRS Rusk (m)' ,
'NAD83(HARN) / WISCRS Rusk (ftUS)' ,
'NAD83(HARN) / WISCRS Rock (m)' ,
'NAD83(HARN) / WISCRS Rock (ftUS)' ,
'NAD83(HARN) / WISCRS Richland (m)' ,
'NAD83(HARN) / WISCRS Richland (ftUS)' ,
'NAD83(HARN) / WISCRS Price (m)' ,
'NAD83(HARN) / WISCRS Price (ftUS)' ,
'NAD83(HARN) / WISCRS Portage (m)' ,
'NAD83(HARN) / WISCRS Portage (ftUS)' ,
'NAD83(HARN) / WISCRS Polk (m)' ,
'NAD83(HARN) / WISCRS Polk (ftUS)' ,
'NAD83(HARN) / WISCRS Pepin and Pierce (m)' ,
'NAD83(HARN) / WISCRS Pepin and Pierce (ftUS)' ,
'NAD83(HARN) / WISCRS Oneida (m)' ,
'NAD83(HARN) / WISCRS Oneida (ftUS)' ,
'NAD83(HARN) / WISCRS Oconto (m)' ,
'NAD83(HARN) / WISCRS Oconto (ftUS)' ,
'NAD83(HARN) / WISCRS Monroe (m)' ,
'NAD83(HARN) / WISCRS Monroe (ftUS)' ,
'NAD83(HARN) / WISCRS Menominee (m)' ,
'NAD83(HARN) / WISCRS Menominee (ftUS)' ,
'NAD83(HARN) / WISCRS Marinette (m)' ,
'NAD83(HARN) / WISCRS Marinette (ftUS)' ,
'NAD83(HARN) / WISCRS Marathon (m)' ,
'NAD83(HARN) / WISCRS Marathon (ftUS)' ,
'NAD83(HARN) / WISCRS Lincoln (m)' ,
'NAD83(HARN) / WISCRS Lincoln (ftUS)' ,
'NAD83(HARN) / WISCRS Langlade (m)' ,
'NAD83(HARN) / WISCRS Langlade (ftUS)' ,
'NAD83(HARN) / WISCRS La Crosse (m)' ,
'NAD83(HARN) / WISCRS La Crosse (ftUS)' ,
'NAD83(HARN) / WISCRS Kewaunee, Manitowoc and Sheboygan (m)' ,
'NAD83(HARN) / WISCRS Kewaunee, Manitowoc and Sheboygan (ftUS)' ,
'NAD83(HARN) / WISCRS Kenosha, Milwaukee, Ozaukee and Racine (m)' ,
'NAD83(HARN) / WISCRS Kenosha, Milwaukee, Ozaukee and Racine (ftUS)' ,
'NAD83(HARN) / WISCRS Jackson (m)' ,
'NAD83(HARN) / WISCRS Jackson (ftUS)' ,
'NAD83(HARN) / WISCRS Iron (m)' ,
'NAD83(HARN) / WISCRS Iron (ftUS)' ,
'NAD83(HARN) / WISCRS Iowa (m)' ,
'NAD83(HARN) / WISCRS Iowa (ftUS)' ,
'NAD83(HARN) / WISCRS Green Lake and Marquette (m)' ,
'NAD83(HARN) / WISCRS Green Lake and Marquette (ftUS)' ,
'NAD83(HARN) / WISCRS Green and Lafayette (m)' ,
'NAD83(HARN) / WISCRS Green and Lafayette (ftUS)' ,
'NAD83(HARN) / WISCRS Grant (m)' ,
'NAD83(HARN) / WISCRS Grant (ftUS)' ,
'NAD83(HARN) / WISCRS Forest (m)' ,
'NAD83(HARN) / WISCRS Forest (ftUS)' ,
'NAD83(HARN) / WISCRS Dunn (m)' ,
'NAD83(HARN) / WISCRS Dunn (ftUS)' ,
'NAD83(HARN) / WISCRS Douglas (m)' ,
'NAD83(HARN) / WISCRS Douglas (ftUS)' ,
'NAD83(HARN) / WISCRS Door (m)' ,
'NAD83(HARN) / WISCRS Door (ftUS)' ,
'NAD83(HARN) / WISCRS Dodge and Jefferson (m)' ,
'NAD83(HARN) / WISCRS Dodge and Jefferson (ftUS)' ,
'NAD83(HARN) / WISCRS Dane (m)' ,
'NAD83(HARN) / WISCRS Dane (ftUS)' ,
'NAD83(HARN) / WISCRS Crawford (m)' ,
'NAD83(HARN) / WISCRS Crawford (ftUS)' ,
'NAD83(HARN) / WISCRS Columbia (m)' ,
'NAD83(HARN) / WISCRS Columbia (ftUS)' ,
'NAD83(HARN) / WISCRS Clark (m)' ,
'NAD83(HARN) / WISCRS Clark (ftUS)' ,
'NAD83(HARN) / WISCRS Chippewa (m)' ,
'NAD83(HARN) / WISCRS Chippewa (ftUS)' ,
'NAD83(HARN) / WISCRS Calumet, Fond du Lac, Outagamie and Winnebago (m)' ,
'NAD83(HARN) / WISCRS Calumet, Fond du Lac, Outagamie and Winnebago (ftUS)' ,
'NAD83(HARN) / WISCRS Burnett (m)' ,
'NAD83(HARN) / WISCRS Burnett (ftUS)' ,
'NAD83(HARN) / WISCRS Buffalo (m)' ,
'NAD83(HARN) / WISCRS Buffalo (ftUS)' ,
'NAD83(HARN) / WISCRS Brown (m)' ,
'NAD83(HARN) / WISCRS Brown (ftUS)' ,
'NAD83(HARN) / WISCRS Bayfield (m)' ,
'NAD83(HARN) / WISCRS Bayfield (ftUS)' ,
'NAD83(HARN) / WISCRS Barron (m)' ,
'NAD83(HARN) / WISCRS Barron (ftUS)' ,
'NAD83(HARN) / WISCRS Ashland (m)' ,
'NAD83(HARN) / WISCRS Ashland (ftUS)' ,
'NAD83(HARN) / WISCRS Adams and Juneau (m)' ,
'NAD83(HARN) / WISCRS Adams and Juneau (ftUS)' ,
'IGS14' ,
'NAVD88 height (ft)' ,
'NAD83(CSRS96)' ,
'NAD83(CSRS96)' ,
'NAD83(CSRS96)' ,
'NAD83(CSRS)v2' ,
'NAD83(CSRS)v2' ,
'NAD83(CSRS)v2' ,
'NAD83(CSRS)v3' ,
'NAD83(CSRS)v3' ,
'NAD83(CSRS)v3' ,
'NAD83(CSRS)v4' ,
'NAD83(CSRS)v4' ,
'NAD83(CSRS)v4' ,
'NAD83(CSRS)v5' ,
'NAD83(CSRS)v5' ,
'NAD83(CSRS)v5' ,
'NAD83(CSRS)v6' ,
'NAD83(CSRS)v6' ,
'NAD83(CSRS)v6' ,
'NAD83(CSRS)v7' ,
'NAD83(CSRS)v7' ,
'NAD83(CSRS)v7' ,
'GVR2000 height' ,
'GVR2016 height' ,
'NAD83(2011) / Oregon Burns-Harper zone (m)' ,
'NAD83(2011) / Oregon Burns-Harper zone (ft)' ,
'NAD83(2011) / Oregon Canyon City-Burns zone (m)' ,
'NAD83(2011) / Oregon Canyon City-Burns zone (ft)' ,
'NAD83(2011) / Oregon Coast Range North zone (m)' ,
'NAD83(2011) / Oregon Coast Range North zone (ft)' ,
'NAD83(2011) / Oregon Dayville-Prairie City zone (m)' ,
'NAD83(2011) / Oregon Dayville-Prairie City zone (ft)' ,
'NAD83(2011) / Oregon Denio-Burns zone (m)' ,
'NAD83(2011) / Oregon Denio-Burns zone (ft)' ,
'NAD83(2011) / Oregon Halfway zone (m)' ,
'NAD83(2011) / Oregon Halfway zone (ft)' ,
'NAD83(2011) / Oregon Medford-Diamond Lake zone (m)' ,
'NAD83(2011) / Oregon Medford-Diamond Lake zone (ft)' ,
'NAD83(2011) / Oregon Mitchell zone (m)' ,
'NAD83(2011) / Oregon Mitchell zone (ft)' ,
'NAD83(2011) / Oregon North Central zone (m)' ,
'NAD83(2011) / Oregon North Central zone (ft)' ,
'NAD83(2011) / Oregon Ochoco Summit zone (m)' ,
'NAD83(2011) / Oregon Ochoco Summit zone (ft)' ,
'NAD83(2011) / Oregon Owyhee zone (m)' ,
'NAD83(2011) / Oregon Owyhee zone (ft)' ,
'NAD83(2011) / Oregon Pilot Rock-Ukiah zone (m)' ,
'NAD83(2011) / Oregon Pilot Rock-Ukiah zone (ft)' ,
'NAD83(2011) / Oregon Prairie City-Brogan zone (m)' ,
'NAD83(2011) / Oregon Prairie City-Brogan zone (ft)' ,
'NAD83(2011) / Oregon Riley-Lakeview zone (m)' ,
'NAD83(2011) / Oregon Riley-Lakeview zone (ft)' ,
'NAD83(2011) / Oregon Siskiyou Pass zone (m)' ,
'NAD83(2011) / Oregon Siskiyou Pass zone (ft)' ,
'NAD83(2011) / Oregon Ukiah-Fox zone (m)' ,
'NAD83(2011) / Oregon Ukiah-Fox zone (ft)' ,
'NAD83(2011) / Oregon Wallowa zone (m)' ,
'NAD83(2011) / Oregon Wallowa zone (ft)' ,
'NAD83(2011) / Oregon Warner Highway zone (m)' ,
'NAD83(2011) / Oregon Warner Highway zone (ft)' ,
'NAD83(2011) / Oregon Willamette Pass zone (m)' ,
'NAD83(2011) / Oregon Willamette Pass zone (ft)' ,
'GR96 + GVR2000 height' ,
'GR96 + GVR2016 height' ,
'Pulkovo 1995 / Gauss-Kruger zone 4' ,
'Pulkovo 1995 / Gauss-Kruger zone 5' ,
'Pulkovo 1995 / Gauss-Kruger zone 6' ,
'Pulkovo 1995 / Gauss-Kruger zone 7' ,
'Pulkovo 1995 / Gauss-Kruger zone 8' ,
'Pulkovo 1995 / Gauss-Kruger zone 9' ,
'Pulkovo 1995 / Gauss-Kruger zone 10' ,
'Pulkovo 1995 / Gauss-Kruger zone 11' ,
'Pulkovo 1995 / Gauss-Kruger zone 12' ,
'Pulkovo 1995 / Gauss-Kruger zone 13' ,
'Pulkovo 1995 / Gauss-Kruger zone 14' ,
'Pulkovo 1995 / Gauss-Kruger zone 15' ,
'Pulkovo 1995 / Gauss-Kruger zone 16' ,
'Pulkovo 1995 / Gauss-Kruger zone 17' ,
'Pulkovo 1995 / Gauss-Kruger zone 18' ,
'Pulkovo 1995 / Gauss-Kruger zone 19' ,
'Pulkovo 1995 / Gauss-Kruger zone 20' ,
'Pulkovo 1995 / Gauss-Kruger zone 21' ,
'Pulkovo 1995 / Gauss-Kruger zone 22' ,
'Pulkovo 1995 / Gauss-Kruger zone 23' ,
'Pulkovo 1995 / Gauss-Kruger zone 24' ,
'Pulkovo 1995 / Gauss-Kruger zone 25' ,
'Pulkovo 1995 / Gauss-Kruger zone 26' ,
'Pulkovo 1995 / Gauss-Kruger zone 27' ,
'Pulkovo 1995 / Gauss-Kruger zone 28' ,
'Pulkovo 1995 / Gauss-Kruger zone 29' ,
'Pulkovo 1995 / Gauss-Kruger zone 30' ,
'Pulkovo 1995 / Gauss-Kruger zone 31' ,
'Pulkovo 1995 / Gauss-Kruger zone 32' ,
'Pulkovo 1995 / Gauss-Kruger 4N' ,
'Pulkovo 1995 / Gauss-Kruger 5N' ,
'Pulkovo 1995 / Gauss-Kruger 6N' ,
'Pulkovo 1995 / Gauss-Kruger 7N' ,
'Pulkovo 1995 / Gauss-Kruger 8N' ,
'Pulkovo 1995 / Gauss-Kruger 9N' ,
'Pulkovo 1995 / Gauss-Kruger 10N' ,
'Pulkovo 1995 / Gauss-Kruger 11N' ,
'Pulkovo 1995 / Gauss-Kruger 12N' ,
'Pulkovo 1995 / Gauss-Kruger 13N' ,
'Pulkovo 1995 / Gauss-Kruger 14N' ,
'Pulkovo 1995 / Gauss-Kruger 15N' ,
'Pulkovo 1995 / Gauss-Kruger 16N' ,
'Pulkovo 1995 / Gauss-Kruger 17N' ,
'Pulkovo 1995 / Gauss-Kruger 18N' ,
'Pulkovo 1995 / Gauss-Kruger 19N' ,
'Pulkovo 1995 / Gauss-Kruger 20N' ,
'Pulkovo 1995 / Gauss-Kruger 21N' ,
'Pulkovo 1995 / Gauss-Kruger 22N' ,
'Pulkovo 1995 / Gauss-Kruger 23N' ,
'Pulkovo 1995 / Gauss-Kruger 24N' ,
'Pulkovo 1995 / Gauss-Kruger 25N' ,
'Pulkovo 1995 / Gauss-Kruger 26N' ,
'Pulkovo 1995 / Gauss-Kruger 27N' ,
'Pulkovo 1995 / Gauss-Kruger 28N' ,
'Pulkovo 1995 / Gauss-Kruger 29N' ,
'Pulkovo 1995 / Gauss-Kruger 30N' ,
'Pulkovo 1995 / Gauss-Kruger 31N' ,
'Pulkovo 1995 / Gauss-Kruger 32N' ,
'Adindan / UTM zone 35N' ,
'Adindan / UTM zone 36N' ,
'Adindan / UTM zone 37N' ,
'Adindan / UTM zone 38N' ,
'AGD66 / AMG zone 48' ,
'AGD66 / AMG zone 49' ,
'AGD66 / AMG zone 50' ,
'AGD66 / AMG zone 51' ,
'AGD66 / AMG zone 52' ,
'AGD66 / AMG zone 53' ,
'AGD66 / AMG zone 54' ,
'AGD66 / AMG zone 55' ,
'AGD66 / AMG zone 56' ,
'AGD66 / AMG zone 57' ,
'AGD66 / AMG zone 58' ,
'AGD84 / AMG zone 48' ,
'AGD84 / AMG zone 49' ,
'AGD84 / AMG zone 50' ,
'AGD84 / AMG zone 51' ,
'AGD84 / AMG zone 52' ,
'AGD84 / AMG zone 53' ,
'AGD84 / AMG zone 54' ,
'AGD84 / AMG zone 55' ,
'AGD84 / AMG zone 56' ,
'AGD84 / AMG zone 57' ,
'AGD84 / AMG zone 58' ,
'Ain el Abd / UTM zone 36N' ,
'Ain el Abd / UTM zone 37N' ,
'Ain el Abd / UTM zone 38N' ,
'Ain el Abd / UTM zone 39N' ,
'Ain el Abd / UTM zone 40N' ,
'Ain el Abd / Bahrain Grid' ,
'Afgooye / UTM zone 38N' ,
'Afgooye / UTM zone 39N' ,
'Lisbon (Lisbon) / Portuguese National Grid' ,
'Lisbon (Lisbon) / Portuguese Grid' ,
'Aratu / UTM zone 22S' ,
'Aratu / UTM zone 23S' ,
'Aratu / UTM zone 24S' ,
'Arc 1950 / UTM zone 34S' ,
'Arc 1950 / UTM zone 35S' ,
'Arc 1950 / UTM zone 36S' ,
'Arc 1960 / UTM zone 35S' ,
'Arc 1960 / UTM zone 36S' ,
'Arc 1960 / UTM zone 37S' ,
'Arc 1960 / UTM zone 35N' ,
'Arc 1960 / UTM zone 36N' ,
'Arc 1960 / UTM zone 37N' ,
'Batavia (Jakarta) / NEIEZ' ,
'Batavia / UTM zone 48S' ,
'Batavia / UTM zone 49S' ,
'Batavia / UTM zone 50S' ,
'Barbados 1938 / British West Indies Grid' ,
'Barbados 1938 / Barbados National Grid' ,
'Beijing 1954 / Gauss-Kruger zone 13' ,
'Beijing 1954 / Gauss-Kruger zone 14' ,
'Beijing 1954 / Gauss-Kruger zone 15' ,
'Beijing 1954 / Gauss-Kruger zone 16' ,
'Beijing 1954 / Gauss-Kruger zone 17' ,
'Beijing 1954 / Gauss-Kruger zone 18' ,
'Beijing 1954 / Gauss-Kruger zone 19' ,
'Beijing 1954 / Gauss-Kruger zone 20' ,
'Beijing 1954 / Gauss-Kruger zone 21' ,
'Beijing 1954 / Gauss-Kruger zone 22' ,
'Beijing 1954 / Gauss-Kruger zone 23' ,
'Beijing 1954 / Gauss-Kruger CM 75E' ,
'Beijing 1954 / Gauss-Kruger CM 81E' ,
'Beijing 1954 / Gauss-Kruger CM 87E' ,
'Beijing 1954 / Gauss-Kruger CM 93E' ,
'Beijing 1954 / Gauss-Kruger CM 99E' ,
'Beijing 1954 / Gauss-Kruger CM 105E' ,
'Beijing 1954 / Gauss-Kruger CM 111E' ,
'Beijing 1954 / Gauss-Kruger CM 117E' ,
'Beijing 1954 / Gauss-Kruger CM 123E' ,
'Beijing 1954 / Gauss-Kruger CM 129E' ,
'Beijing 1954 / Gauss-Kruger CM 135E' ,
'Beijing 1954 / Gauss-Kruger 13N' ,
'Beijing 1954 / Gauss-Kruger 14N' ,
'Beijing 1954 / Gauss-Kruger 15N' ,
'Beijing 1954 / Gauss-Kruger 16N' ,
'Beijing 1954 / Gauss-Kruger 17N' ,
'Beijing 1954 / Gauss-Kruger 18N' ,
'Beijing 1954 / Gauss-Kruger 19N' ,
'Beijing 1954 / Gauss-Kruger 20N' ,
'Beijing 1954 / Gauss-Kruger 21N' ,
'Beijing 1954 / Gauss-Kruger 22N' ,
'Beijing 1954 / Gauss-Kruger 23N' ,
'Belge 1950 (Brussels) / Belge Lambert 50' ,
'Bern 1898 (Bern) / LV03C' ,
'CH1903 / LV03' ,
'CH1903 / LV03C-G' ,
'Bogota 1975 / UTM zone 17N' ,
'Bogota 1975 / UTM zone 18N' ,
'Bogota 1975 / Colombia West zone' ,
'Bogota 1975 / Colombia Bogota zone' ,
'Bogota 1975 / Colombia East Central zone' ,
'Bogota 1975 / Colombia East' ,
'Bogota 1975 / Colombia West zone' ,
'Bogota 1975 / Colombia Bogota zone' ,
'Bogota 1975 / Colombia East Central zone' ,
'Bogota 1975 / Colombia East' ,
'Camacupa / UTM zone 32S' ,
'Camacupa / UTM zone 33S' ,
'Camacupa / TM 11.30 SE' ,
'Camacupa / TM 12 SE' ,
'POSGAR 98 / Argentina 1' ,
'POSGAR 98 / Argentina 2' ,
'POSGAR 98 / Argentina 3' ,
'POSGAR 98 / Argentina 4' ,
'POSGAR 98 / Argentina 5' ,
'POSGAR 98 / Argentina 6' ,
'POSGAR 98 / Argentina 7' ,
'POSGAR 94 / Argentina 1' ,
'POSGAR 94 / Argentina 2' ,
'POSGAR 94 / Argentina 3' ,
'POSGAR 94 / Argentina 4' ,
'POSGAR 94 / Argentina 5' ,
'POSGAR 94 / Argentina 6' ,
'POSGAR 94 / Argentina 7' ,
'Campo Inchauspe / Argentina 1' ,
'Campo Inchauspe / Argentina 2' ,
'Campo Inchauspe / Argentina 3' ,
'Campo Inchauspe / Argentina 4' ,
'Campo Inchauspe / Argentina 5' ,
'Campo Inchauspe / Argentina 6' ,
'Campo Inchauspe / Argentina 7' ,
'Cape / UTM zone 34S' ,
'Cape / UTM zone 35S' ,
'Cape / UTM zone 36S' ,
'Cape / Lo15' ,
'Cape / Lo17' ,
'Cape / Lo19' ,
'Cape / Lo21' ,
'Cape / Lo23' ,
'Cape / Lo25' ,
'Cape / Lo27' ,
'Cape / Lo29' ,
'Cape / Lo31' ,
'Cape / Lo33' ,
'Carthage (Paris) / Tunisia Mining Grid' ,
'Carthage / UTM zone 32N' ,
'Carthage / Nord Tunisie' ,
'Carthage / Sud Tunisie' ,
'Corrego Alegre 1970-72 / UTM zone 21S' ,
'Corrego Alegre 1970-72 / UTM zone 22S' ,
'Corrego Alegre 1970-72 / UTM zone 23S' ,
'Corrego Alegre 1970-72 / UTM zone 24S' ,
'Corrego Alegre 1970-72 / UTM zone 25S' ,
'Deir ez Zor / Levant Zone' ,
'Deir ez Zor / Syria Lambert' ,
'Deir ez Zor / Levant Stereographic' ,
'Douala / UTM zone 32N' ,
'Egypt 1907 / Blue Belt' ,
'Egypt 1907 / Red Belt' ,
'Egypt 1907 / Purple Belt' ,
'Egypt 1907 / Extended Purple Belt' ,
'ED50 / UTM zone 28N' ,
'ED50 / UTM zone 29N' ,
'ED50 / UTM zone 30N' ,
'ED50 / UTM zone 31N' ,
'ED50 / UTM zone 32N' ,
'ED50 / UTM zone 33N' ,
'ED50 / UTM zone 34N' ,
'ED50 / UTM zone 35N' ,
'ED50 / UTM zone 36N' ,
'ED50 / UTM zone 37N' ,
'ED50 / UTM zone 38N' ,
'ED50 / TM 0 N' ,
'ED50 / TM 5 NE' ,
'Fahud / UTM zone 39N' ,
'Fahud / UTM zone 40N' ,
'Garoua / UTM zone 33N' ,
'HD72 / EOV' ,
'DGN95 / Indonesia TM-3 zone 46.2' ,
'DGN95 / Indonesia TM-3 zone 47.1' ,
'DGN95 / Indonesia TM-3 zone 47.2' ,
'DGN95 / Indonesia TM-3 zone 48.1' ,
'DGN95 / Indonesia TM-3 zone 48.2' ,
'DGN95 / Indonesia TM-3 zone 49.1' ,
'DGN95 / Indonesia TM-3 zone 49.2' ,
'DGN95 / Indonesia TM-3 zone 50.1' ,
'DGN95 / Indonesia TM-3 zone 50.2' ,
'DGN95 / Indonesia TM-3 zone 51.1' ,
'DGN95 / Indonesia TM-3 zone 51.2' ,
'DGN95 / Indonesia TM-3 zone 52.1' ,
'DGN95 / Indonesia TM-3 zone 52.2' ,
'DGN95 / Indonesia TM-3 zone 53.1' ,
'DGN95 / Indonesia TM-3 zone 53.2' ,
'DGN95 / Indonesia TM-3 zone 54.1' ,
'ID74 / UTM zone 46N' ,
'ID74 / UTM zone 47N' ,
'ID74 / UTM zone 48N' ,
'ID74 / UTM zone 49N' ,
'ID74 / UTM zone 50N' ,
'ID74 / UTM zone 51N' ,
'ID74 / UTM zone 52N' ,
'ID74 / UTM zone 53N' ,
'DGN95 / UTM zone 46N' ,
'DGN95 / UTM zone 47N' ,
'DGN95 / UTM zone 48N' ,
'DGN95 / UTM zone 49N' ,
'DGN95 / UTM zone 50N' ,
'DGN95 / UTM zone 51N' ,
'DGN95 / UTM zone 52N' ,
'DGN95 / UTM zone 47S' ,
'DGN95 / UTM zone 48S' ,
'DGN95 / UTM zone 49S' ,
'DGN95 / UTM zone 50S' ,
'DGN95 / UTM zone 51S' ,
'DGN95 / UTM zone 52S' ,
'DGN95 / UTM zone 53S' ,
'DGN95 / UTM zone 54S' ,
'ID74 / UTM zone 46S' ,
'ID74 / UTM zone 47S' ,
'ID74 / UTM zone 48S' ,
'ID74 / UTM zone 49S' ,
'ID74 / UTM zone 50S' ,
'ID74 / UTM zone 51S' ,
'ID74 / UTM zone 52S' ,
'ID74 / UTM zone 53S' ,
'ID74 / UTM zone 54S' ,
'Indian 1954 / UTM zone 46N' ,
'Indian 1954 / UTM zone 47N' ,
'Indian 1954 / UTM zone 48N' ,
'Indian 1975 / UTM zone 47N' ,
'Indian 1975 / UTM zone 48N' ,
'Jamaica 1875 / Jamaica (Old Grid)' ,
'JAD69 / Jamaica National Grid' ,
'Kalianpur 1937 / UTM zone 45N' ,
'Kalianpur 1937 / UTM zone 46N' ,
'Kalianpur 1962 / UTM zone 41N' ,
'Kalianpur 1962 / UTM zone 42N' ,
'Kalianpur 1962 / UTM zone 43N' ,
'Kalianpur 1975 / UTM zone 42N' ,
'Kalianpur 1975 / UTM zone 43N' ,
'Kalianpur 1975 / UTM zone 44N' ,
'Kalianpur 1975 / UTM zone 45N' ,
'Kalianpur 1975 / UTM zone 46N' ,
'Kalianpur 1975 / UTM zone 47N' ,
'Kalianpur 1880 / India zone 0' ,
'Kalianpur 1880 / India zone I' ,
'Kalianpur 1880 / India zone IIa' ,
'Kalianpur 1880 / India zone IIIa' ,
'Kalianpur 1880 / India zone IVa' ,
'Kalianpur 1937 / India zone IIb' ,
'Kalianpur 1962 / India zone I' ,
'Kalianpur 1962 / India zone IIa' ,
'Kalianpur 1975 / India zone I' ,
'Kalianpur 1975 / India zone IIa' ,
'Kalianpur 1975 / India zone IIb' ,
'Kalianpur 1975 / India zone IIIa' ,
'Kalianpur 1880 / India zone IIb' ,
'Kalianpur 1975 / India zone IVa' ,
'Kertau 1968 / Singapore Grid' ,
'Kertau 1968 / UTM zone 47N' ,
'Kertau 1968 / UTM zone 48N' ,
'Kertau / R.S.O. Malaya (ch)' ,
'KOC Lambert' ,
'La Canoa / UTM zone 18N' ,
'La Canoa / UTM zone 19N' ,
'La Canoa / UTM zone 20N' ,
'PSAD56 / UTM zone 17N' ,
'PSAD56 / UTM zone 18N' ,
'PSAD56 / UTM zone 19N' ,
'PSAD56 / UTM zone 20N' ,
'PSAD56 / UTM zone 21N' ,
'PSAD56 / UTM zone 17S' ,
'PSAD56 / UTM zone 18S' ,
'PSAD56 / UTM zone 19S' ,
'PSAD56 / UTM zone 20S' ,
'PSAD56 / UTM zone 21S' ,
'PSAD56 / UTM zone 22S' ,
'PSAD56 / Peru west zone' ,
'PSAD56 / Peru central zone' ,
'PSAD56 / Peru east zone' ,
'Leigon / Ghana Metre Grid' ,
'Lome / UTM zone 31N' ,
'Luzon 1911 / Philippines zone I' ,
'Luzon 1911 / Philippines zone II' ,
'Luzon 1911 / Philippines zone III' ,
'Luzon 1911 / Philippines zone IV' ,
'Luzon 1911 / Philippines zone V' ,
'Makassar (Jakarta) / NEIEZ' ,
'ETRS89 / UTM zone 28N' ,
'ETRS89 / UTM zone 29N' ,
'ETRS89 / UTM zone 30N' ,
'ETRS89 / UTM zone 31N' ,
'ETRS89 / UTM zone 32N' ,
'ETRS89 / UTM zone 33N' ,
'ETRS89 / UTM zone 34N' ,
'ETRS89 / UTM zone 35N' ,
'ETRS89 / UTM zone 36N' ,
'ETRS89 / UTM zone 37N' ,
'ETRS89 / UTM zone 38N' ,
'ETRS89 / TM Baltic93' ,
'Malongo 1987 / UTM zone 32S' ,
'Merchich / Nord Maroc' ,
'Merchich / Sud Maroc' ,
'Merchich / Sahara' ,
'Merchich / Sahara Nord' ,
'Merchich / Sahara Sud' ,
'Massawa / UTM zone 37N' ,
'Minna / UTM zone 31N' ,
'Minna / UTM zone 32N' ,
'Minna / Nigeria West Belt' ,
'Minna / Nigeria Mid Belt' ,
'Minna / Nigeria East Belt' ,
'Mhast / UTM zone 32S' ,
'Monte Mario (Rome) / Italy zone 1' ,
'Monte Mario (Rome) / Italy zone 2' ,
'M poraloko / UTM zone 32N' ,
'M poraloko / UTM zone 32S' ,
'NAD27 / UTM zone 1N' ,
'NAD27 / UTM zone 2N' ,
'NAD27 / UTM zone 3N' ,
'NAD27 / UTM zone 4N' ,
'NAD27 / UTM zone 5N' ,
'NAD27 / UTM zone 6N' ,
'NAD27 / UTM zone 7N' ,
'NAD27 / UTM zone 8N' ,
'NAD27 / UTM zone 9N' ,
'NAD27 / UTM zone 10N' ,
'NAD27 / UTM zone 11N' ,
'NAD27 / UTM zone 12N' ,
'NAD27 / UTM zone 13N' ,
'NAD27 / UTM zone 14N' ,
'NAD27 / UTM zone 15N' ,
'NAD27 / UTM zone 16N' ,
'NAD27 / UTM zone 17N' ,
'NAD27 / UTM zone 18N' ,
'NAD27 / UTM zone 19N' ,
'NAD27 / UTM zone 20N' ,
'NAD27 / UTM zone 21N' ,
'NAD27 / UTM zone 22N' ,
'NAD27 / Alabama East' ,
'NAD27 / Alabama West' ,
'NAD27 / Alaska zone 1' ,
'NAD27 / Alaska zone 2' ,
'NAD27 / Alaska zone 3' ,
'NAD27 / Alaska zone 4' ,
'NAD27 / Alaska zone 5' ,
'NAD27 / Alaska zone 6' ,
'NAD27 / Alaska zone 7' ,
'NAD27 / Alaska zone 8' ,
'NAD27 / Alaska zone 9' ,
'NAD27 / Alaska zone 10' ,
'NAD27 / California zone I' ,
'NAD27 / California zone II' ,
'NAD27 / California zone III' ,
'NAD27 / California zone IV' ,
'NAD27 / California zone V' ,
'NAD27 / California zone VI' ,
'NAD27 / California zone VII' ,
'NAD27 / Arizona East' ,
'NAD27 / Arizona Central' ,
'NAD27 / Arizona West' ,
'NAD27 / Arkansas North' ,
'NAD27 / Arkansas South' ,
'NAD27 / Colorado North' ,
'NAD27 / Colorado Central' ,
'NAD27 / Colorado South' ,
'NAD27 / Connecticut' ,
'NAD27 / Delaware' ,
'NAD27 / Florida East' ,
'NAD27 / Florida West' ,
'NAD27 / Florida North' ,
'NAD27 / Georgia East' ,
'NAD27 / Georgia West' ,
'NAD27 / Idaho East' ,
'NAD27 / Idaho Central' ,
'NAD27 / Idaho West' ,
'NAD27 / Illinois East' ,
'NAD27 / Illinois West' ,
'NAD27 / Indiana East' ,
'NAD27 / Indiana West' ,
'NAD27 / Iowa North' ,
'NAD27 / Iowa South' ,
'NAD27 / Kansas North' ,
'NAD27 / Kansas South' ,
'NAD27 / Kentucky North' ,
'NAD27 / Kentucky South' ,
'NAD27 / Louisiana North' ,
'NAD27 / Louisiana South' ,
'NAD27 / Maine East' ,
'NAD27 / Maine West' ,
'NAD27 / Maryland' ,
'NAD27 / Massachusetts Mainland' ,
'NAD27 / Massachusetts Island' ,
'NAD27 / Minnesota North' ,
'NAD27 / Minnesota Central' ,
'NAD27 / Minnesota South' ,
'NAD27 / Mississippi East' ,
'NAD27 / Mississippi West' ,
'NAD27 / Missouri East' ,
'NAD27 / Missouri Central' ,
'NAD27 / Missouri West' ,
'NAD27 / California zone VII' ,
'NAD Michigan / Michigan East' ,
'NAD Michigan / Michigan Old Central' ,
'NAD Michigan / Michigan West' ,
'NAD Michigan / Michigan North' ,
'NAD Michigan / Michigan Central' ,
'NAD Michigan / Michigan South' ,
'NAD83 / Maine East (ftUS)' ,
'NAD83 / Maine West (ftUS)' ,
'NAD83 / Minnesota North (ftUS)' ,
'NAD83 / Minnesota Central (ftUS)' ,
'NAD83 / Minnesota South (ftUS)' ,
'NAD83 / Nebraska (ftUS)' ,
'NAD83 / West Virginia North (ftUS)' ,
'NAD83 / West Virginia South (ftUS)' ,
'NAD83(HARN) / Maine East (ftUS)' ,
'NAD83(HARN) / Maine West (ftUS)' ,
'NAD83(HARN) / Minnesota North (ftUS)' ,
'NAD83(HARN) / Minnesota Central (ftUS)' ,
'NAD83(HARN) / Minnesota South (ftUS)' ,
'NAD83(HARN) / Nebraska (ftUS)' ,
'NAD83(HARN) / West Virginia North (ftUS)' ,
'NAD83(HARN) / West Virginia South (ftUS)' ,
'NAD83(NSRS2007) / Maine East (ftUS)' ,
'NAD83(NSRS2007) / Maine West (ftUS)' ,
'NAD83(NSRS2007) / Minnesota North (ftUS)' ,
'NAD83(NSRS2007) / Minnesota Central (ftUS)' ,
'NAD83(NSRS2007) / Minnesota South (ftUS)' ,
'NAD83(NSRS2007) / Nebraska (ftUS)' ,
'NAD83(NSRS2007) / West Virginia North (ftUS)' ,
'NAD83(NSRS2007) / West Virginia South (ftUS)' ,
'NAD83 / Maine East (ftUS)' ,
'NAD83 / Maine West (ftUS)' ,
'NAD83 / Minnesota North (ftUS)' ,
'NAD83 / Minnesota Central (ftUS)' ,
'NAD83 / Minnesota South (ftUS)' ,
'NAD83 / Nebraska (ftUS)' ,
'NAD83 / West Virginia North (ftUS)' ,
'NAD83 / West Virginia South (ftUS)' ,
'NAD83(HARN) / Maine East (ftUS)' ,
'NAD83(HARN) / Maine West (ftUS)' ,
'NAD83(HARN) / Minnesota North (ftUS)' ,
'NAD83(HARN) / Minnesota Central (ftUS)' ,
'NAD83(HARN) / Minnesota South (ftUS)' ,
'NAD83(HARN) / Nebraska (ftUS)' ,
'NAD83(HARN) / West Virginia North (ftUS)' ,
'NAD83(HARN) / West Virginia South (ftUS)' ,
'NAD83(NSRS2007) / Maine East (ftUS)' ,
'NAD83(NSRS2007) / Maine West (ftUS)' ,
'NAD83(NSRS2007) / Minnesota North (ftUS)' ,
'NAD83(NSRS2007) / Minnesota Central (ftUS)' ,
'NAD83(NSRS2007) / Minnesota South (ftUS)' ,
'NAD83(NSRS2007) / Nebraska (ftUS)' ,
'NAD83(NSRS2007) / West Virginia North (ftUS)' ,
'NAD83(NSRS2007) / West Virginia South (ftUS)' ,
'NAD83(CSRS) / MTM zone 11' ,
'NAD83(CSRS) / MTM zone 12' ,
'NAD83(CSRS) / MTM zone 13' ,
'NAD83(CSRS) / MTM zone 14' ,
'NAD83(CSRS) / MTM zone 15' ,
'NAD83(CSRS) / MTM zone 16' ,
'NAD83(CSRS) / MTM zone 17' ,
'NAD83(CSRS) / MTM zone 1' ,
'NAD83(CSRS) / MTM zone 2' ,
'NAD83 / UTM zone 1N' ,
'NAD83 / UTM zone 2N' ,
'NAD83 / UTM zone 3N' ,
'NAD83 / UTM zone 4N' ,
'NAD83 / UTM zone 5N' ,
'NAD83 / UTM zone 6N' ,
'NAD83 / UTM zone 7N' ,
'NAD83 / UTM zone 8N' ,
'NAD83 / UTM zone 9N' ,
'NAD83 / UTM zone 10N' ,
'NAD83 / UTM zone 11N' ,
'NAD83 / UTM zone 12N' ,
'NAD83 / UTM zone 13N' ,
'NAD83 / UTM zone 14N' ,
'NAD83 / UTM zone 15N' ,
'NAD83 / UTM zone 16N' ,
'NAD83 / UTM zone 17N' ,
'NAD83 / UTM zone 18N' ,
'NAD83 / UTM zone 19N' ,
'NAD83 / UTM zone 20N' ,
'NAD83 / UTM zone 21N' ,
'NAD83 / UTM zone 22N' ,
'NAD83 / UTM zone 23N' ,
'NAD83 / Alabama East' ,
'NAD83 / Alabama West' ,
'NAD83 / Alaska zone 1' ,
'NAD83 / Alaska zone 2' ,
'NAD83 / Alaska zone 3' ,
'NAD83 / Alaska zone 4' ,
'NAD83 / Alaska zone 5' ,
'NAD83 / Alaska zone 6' ,
'NAD83 / Alaska zone 7' ,
'NAD83 / Alaska zone 8' ,
'NAD83 / Alaska zone 9' ,
'NAD83 / Alaska zone 10' ,
'NAD83 / California zone 1' ,
'NAD83 / California zone 2' ,
'NAD83 / California zone 3' ,
'NAD83 / California zone 4' ,
'NAD83 / California zone 5' ,
'NAD83 / California zone 6' ,
'NAD83 / Arizona East' ,
'NAD83 / Arizona Central' ,
'NAD83 / Arizona West' ,
'NAD83 / Arkansas North' ,
'NAD83 / Arkansas South' ,
'NAD83 / Colorado North' ,
'NAD83 / Colorado Central' ,
'NAD83 / Colorado South' ,
'NAD83 / Connecticut' ,
'NAD83 / Delaware' ,
'NAD83 / Florida East' ,
'NAD83 / Florida West' ,
'NAD83 / Florida North' ,
'NAD83 / Hawaii zone 1' ,
'NAD83 / Hawaii zone 2' ,
'NAD83 / Hawaii zone 3' ,
'NAD83 / Hawaii zone 4' ,
'NAD83 / Hawaii zone 5' ,
'NAD83 / Georgia East' ,
'NAD83 / Georgia West' ,
'NAD83 / Idaho East' ,
'NAD83 / Idaho Central' ,
'NAD83 / Idaho West' ,
'NAD83 / Illinois East' ,
'NAD83 / Illinois West' ,
'NAD83 / Indiana East' ,
'NAD83 / Indiana West' ,
'NAD83 / Iowa North' ,
'NAD83 / Iowa South' ,
'NAD83 / Kansas North' ,
'NAD83 / Kansas South' ,
'NAD83 / Kentucky North' ,
'NAD83 / Kentucky South' ,
'NAD83 / Louisiana North' ,
'NAD83 / Louisiana South' ,
'NAD83 / Maine East' ,
'NAD83 / Maine West' ,
'NAD83 / Maryland' ,
'NAD83 / Massachusetts Mainland' ,
'NAD83 / Massachusetts Island' ,
'NAD83 / Michigan North' ,
'NAD83 / Michigan Central' ,
'NAD83 / Michigan South' ,
'NAD83 / Minnesota North' ,
'NAD83 / Minnesota Central' ,
'NAD83 / Minnesota South' ,
'NAD83 / Mississippi East' ,
'NAD83 / Mississippi West' ,
'NAD83 / Missouri East' ,
'NAD83 / Missouri Central' ,
'NAD83 / Missouri West' ,
'Nahrwan 1967 / UTM zone 37N' ,
'Nahrwan 1967 / UTM zone 38N' ,
'Nahrwan 1967 / UTM zone 39N' ,
'Nahrwan 1967 / UTM zone 40N' ,
'Naparima 1972 / UTM zone 20N' ,
'NZGD49 / New Zealand Map Grid' ,
'NZGD49 / Mount Eden Circuit' ,
'NZGD49 / Bay of Plenty Circuit' ,
'NZGD49 / Poverty Bay Circuit' ,
'NZGD49 / Hawkes Bay Circuit' ,
'NZGD49 / Taranaki Circuit' ,
'NZGD49 / Tuhirangi Circuit' ,
'NZGD49 / Wanganui Circuit' ,
'NZGD49 / Wairarapa Circuit' ,
'NZGD49 / Wellington Circuit' ,
'NZGD49 / Collingwood Circuit' ,
'NZGD49 / Nelson Circuit' ,
'NZGD49 / Karamea Circuit' ,
'NZGD49 / Buller Circuit' ,
'NZGD49 / Grey Circuit' ,
'NZGD49 / Amuri Circuit' ,
'NZGD49 / Marlborough Circuit' ,
'NZGD49 / Hokitika Circuit' ,
'NZGD49 / Okarito Circuit' ,
'NZGD49 / Jacksons Bay Circuit' ,
'NZGD49 / Mount Pleasant Circuit' ,
'NZGD49 / Gawler Circuit' ,
'NZGD49 / Timaru Circuit' ,
'NZGD49 / Lindis Peak Circuit' ,
'NZGD49 / Mount Nicholas Circuit' ,
'NZGD49 / Mount York Circuit' ,
'NZGD49 / Observation Point Circuit' ,
'NZGD49 / North Taieri Circuit' ,
'NZGD49 / Bluff Circuit' ,
'NZGD49 / UTM zone 58S' ,
'NZGD49 / UTM zone 59S' ,
'NZGD49 / UTM zone 60S' ,
'NZGD49 / North Island Grid' ,
'NZGD49 / South Island Grid' ,
'NGO 1948 (Oslo) / NGO zone I' ,
'NGO 1948 (Oslo) / NGO zone II' ,
'NGO 1948 (Oslo) / NGO zone III' ,
'NGO 1948 (Oslo) / NGO zone IV' ,
'NGO 1948 (Oslo) / NGO zone V' ,
'NGO 1948 (Oslo) / NGO zone VI' ,
'NGO 1948 (Oslo) / NGO zone VII' ,
'NGO 1948 (Oslo) / NGO zone VIII' ,
'Datum 73 / UTM zone 29N' ,
'Datum 73 / Modified Portuguese Grid' ,
'Datum 73 / Modified Portuguese Grid' ,
'ATF (Paris) / Nord de Guerre' ,
'NTF (Paris) / Lambert Nord France' ,
'NTF (Paris) / Lambert Centre France' ,
'NTF (Paris) / Lambert Sud France' ,
'NTF (Paris) / Lambert Corse' ,
'NTF (Paris) / Lambert zone I' ,
'NTF (Paris) / Lambert zone II' ,
'NTF (Paris) / Lambert zone III' ,
'NTF (Paris) / Lambert zone IV' ,
'NTF (Paris) / France I' ,
'NTF (Paris) / France II' ,
'NTF (Paris) / France III' ,
'NTF (Paris) / France IV' ,
'NTF (Paris) / Nord France' ,
'NTF (Paris) / Centre France' ,
'NTF (Paris) / Sud France' ,
'NTF (Paris) / Corse' ,
'OSGB 1936 / British National Grid' ,
'Palestine 1923 / Palestine Grid' ,
'Palestine 1923 / Palestine Belt' ,
'Palestine 1923 / Israeli CS Grid' ,
'Pointe Noire / UTM zone 32S' ,
'GDA94 / MGA zone 48' ,
'GDA94 / MGA zone 49' ,
'GDA94 / MGA zone 50' ,
'GDA94 / MGA zone 51' ,
'GDA94 / MGA zone 52' ,
'GDA94 / MGA zone 53' ,
'GDA94 / MGA zone 54' ,
'GDA94 / MGA zone 55' ,
'GDA94 / MGA zone 56' ,
'GDA94 / MGA zone 57' ,
'GDA94 / MGA zone 58' ,
'Pulkovo 1942 / Gauss-Kruger zone 2' ,
'Pulkovo 1942 / Gauss-Kruger zone 3' ,
'Pulkovo 1942 / Gauss-Kruger zone 4' ,
'Pulkovo 1942 / Gauss-Kruger zone 5' ,
'Pulkovo 1942 / Gauss-Kruger zone 6' ,
'Pulkovo 1942 / Gauss-Kruger zone 7' ,
'Pulkovo 1942 / Gauss-Kruger zone 8' ,
'Pulkovo 1942 / Gauss-Kruger zone 9' ,
'Pulkovo 1942 / Gauss-Kruger zone 10' ,
'Pulkovo 1942 / Gauss-Kruger zone 11' ,
'Pulkovo 1942 / Gauss-Kruger zone 12' ,
'Pulkovo 1942 / Gauss-Kruger zone 13' ,
'Pulkovo 1942 / Gauss-Kruger zone 14' ,
'Pulkovo 1942 / Gauss-Kruger zone 15' ,
'Pulkovo 1942 / Gauss-Kruger zone 16' ,
'Pulkovo 1942 / Gauss-Kruger zone 17' ,
'Pulkovo 1942 / Gauss-Kruger zone 18' ,
'Pulkovo 1942 / Gauss-Kruger zone 19' ,
'Pulkovo 1942 / Gauss-Kruger zone 20' ,
'Pulkovo 1942 / Gauss-Kruger zone 21' ,
'Pulkovo 1942 / Gauss-Kruger zone 22' ,
'Pulkovo 1942 / Gauss-Kruger zone 23' ,
'Pulkovo 1942 / Gauss-Kruger zone 24' ,
'Pulkovo 1942 / Gauss-Kruger zone 25' ,
'Pulkovo 1942 / Gauss-Kruger zone 26' ,
'Pulkovo 1942 / Gauss-Kruger zone 27' ,
'Pulkovo 1942 / Gauss-Kruger zone 28' ,
'Pulkovo 1942 / Gauss-Kruger zone 29' ,
'Pulkovo 1942 / Gauss-Kruger zone 30' ,
'Pulkovo 1942 / Gauss-Kruger zone 31' ,
'Pulkovo 1942 / Gauss-Kruger zone 32' ,
'Pulkovo 1942 / Gauss-Kruger 2N' ,
'Pulkovo 1942 / Gauss-Kruger 3N' ,
'Pulkovo 1942 / Gauss-Kruger 4N' ,
'Pulkovo 1942 / Gauss-Kruger 5N' ,
'Pulkovo 1942 / Gauss-Kruger 6N' ,
'Pulkovo 1942 / Gauss-Kruger 7N' ,
'Pulkovo 1942 / Gauss-Kruger 8N' ,
'Pulkovo 1942 / Gauss-Kruger 9N' ,
'Pulkovo 1942 / Gauss-Kruger 10N' ,
'Pulkovo 1942 / Gauss-Kruger 11N' ,
'Pulkovo 1942 / Gauss-Kruger 12N' ,
'Pulkovo 1942 / Gauss-Kruger 13N' ,
'Pulkovo 1942 / Gauss-Kruger 14N' ,
'Pulkovo 1942 / Gauss-Kruger 15N' ,
'Pulkovo 1942 / Gauss-Kruger 16N' ,
'Pulkovo 1942 / Gauss-Kruger 17N' ,
'Pulkovo 1942 / Gauss-Kruger 18N' ,
'Pulkovo 1942 / Gauss-Kruger 19N' ,
'Pulkovo 1942 / Gauss-Kruger 20N' ,
'Pulkovo 1942 / Gauss-Kruger 21N' ,
'Pulkovo 1942 / Gauss-Kruger 22N' ,
'Pulkovo 1942 / Gauss-Kruger 23N' ,
'Pulkovo 1942 / Gauss-Kruger 24N' ,
'Pulkovo 1942 / Gauss-Kruger 25N' ,
'Pulkovo 1942 / Gauss-Kruger 26N' ,
'Pulkovo 1942 / Gauss-Kruger 27N' ,
'Pulkovo 1942 / Gauss-Kruger 28N' ,
'Pulkovo 1942 / Gauss-Kruger 29N' ,
'Pulkovo 1942 / Gauss-Kruger 30N' ,
'Pulkovo 1942 / Gauss-Kruger 31N' ,
'Pulkovo 1942 / Gauss-Kruger 32N' ,
'Qatar 1974 / Qatar National Grid' ,
'Amersfoort / RD Old' ,
'Amersfoort / RD New' ,
'SAD69 / Brazil Polyconic' ,
'SAD69 / Brazil Polyconic' ,
'SAD69 / UTM zone 18N' ,
'SAD69 / UTM zone 19N' ,
'SAD69 / UTM zone 20N' ,
'SAD69 / UTM zone 21N' ,
'SAD69 / UTM zone 22N' ,
'SAD69 / UTM zone 18N' ,
'SAD69 / UTM zone 19N' ,
'SAD69 / UTM zone 20N' ,
'SAD69 / UTM zone 21N' ,
'SAD69 / UTM zone 22N' ,
'SAD69 / UTM zone 17S' ,
'SAD69 / UTM zone 18S' ,
'SAD69 / UTM zone 19S' ,
'SAD69 / UTM zone 20S' ,
'SAD69 / UTM zone 21S' ,
'SAD69 / UTM zone 22S' ,
'SAD69 / UTM zone 23S' ,
'SAD69 / UTM zone 24S' ,
'SAD69 / UTM zone 25S' ,
'SAD69 / UTM zone 17S' ,
'SAD69 / UTM zone 18S' ,
'SAD69 / UTM zone 19S' ,
'SAD69 / UTM zone 20S' ,
'SAD69 / UTM zone 21S' ,
'SAD69 / UTM zone 22S' ,
'SAD69 / UTM zone 23S' ,
'SAD69 / UTM zone 24S' ,
'SAD69 / UTM zone 25S' ,
'Sapper Hill 1943 / UTM zone 20S' ,
'Sapper Hill 1943 / UTM zone 21S' ,
'Schwarzeck / UTM zone 33S' ,
'Schwarzeck / Lo22/11' ,
'Schwarzeck / Lo22/13' ,
'Schwarzeck / Lo22/15' ,
'Schwarzeck / Lo22/17' ,
'Schwarzeck / Lo22/19' ,
'Schwarzeck / Lo22/21' ,
'Schwarzeck / Lo22/23' ,
'Schwarzeck / Lo22/25' ,
'Sudan / UTM zone 35N' ,
'Sudan / UTM zone 36N' ,
'Tananarive (Paris) / Laborde Grid' ,
'Tananarive (Paris) / Laborde Grid' ,
'Tananarive (Paris) / Laborde Grid approximation' ,
'Tananarive / UTM zone 38S' ,
'Tananarive / UTM zone 39S' ,
'Timbalai 1948 / UTM zone 49N' ,
'Timbalai 1948 / UTM zone 50N' ,
'Timbalai 1948 / RSO Borneo (ch)' ,
'Timbalai 1948 / RSO Borneo (ftSe)' ,
'Timbalai 1948 / RSO Borneo (m)' ,
'TM65 / Irish National Grid' ,
'OSNI 1952 / Irish National Grid' ,
'TM65 / Irish Grid' ,
'TM75 / Irish Grid' ,
'Tokyo / Japan Plane Rectangular CS I' ,
'Tokyo / Japan Plane Rectangular CS II' ,
'Tokyo / Japan Plane Rectangular CS III' ,
'Tokyo / Japan Plane Rectangular CS IV' ,
'Tokyo / Japan Plane Rectangular CS V' ,
'Tokyo / Japan Plane Rectangular CS VI' ,
'Tokyo / Japan Plane Rectangular CS VII' ,
'Tokyo / Japan Plane Rectangular CS VIII' ,
'Tokyo / Japan Plane Rectangular CS IX' ,
'Tokyo / Japan Plane Rectangular CS X' ,
'Tokyo / Japan Plane Rectangular CS XI' ,
'Tokyo / Japan Plane Rectangular CS XII' ,
'Tokyo / Japan Plane Rectangular CS XIII' ,
'Tokyo / Japan Plane Rectangular CS XIV' ,
'Tokyo / Japan Plane Rectangular CS XV' ,
'Tokyo / Japan Plane Rectangular CS XVI' ,
'Tokyo / Japan Plane Rectangular CS XVII' ,
'Tokyo / Japan Plane Rectangular CS XVIII' ,
'Tokyo / Japan Plane Rectangular CS XIX' ,
'Trinidad 1903 / Trinidad Grid' ,
'TC(1948) / UTM zone 39N' ,
'TC(1948) / UTM zone 40N' ,
'Voirol 1875 / Nord Algerie (ancienne)' ,
'Voirol 1875 / Sud Algerie (ancienne)' ,
'Voirol 1879 / Nord Algerie (ancienne)' ,
'Voirol 1879 / Sud Algerie (ancienne)' ,
'Nord Sahara 1959 / UTM zone 29N' ,
'Nord Sahara 1959 / UTM zone 30N' ,
'Nord Sahara 1959 / UTM zone 31N' ,
'Nord Sahara 1959 / UTM zone 32N' ,
'Nord Sahara 1959 / Nord Algerie' ,
'Nord Sahara 1959 / Sud Algerie' ,
'RT38 2.5 gon W' ,
'Yoff / UTM zone 28N' ,
'Zanderij / UTM zone 21N' ,
'Zanderij / TM 54 NW' ,
'Zanderij / Suriname Old TM' ,
'Zanderij / Suriname TM' ,
'MGI (Ferro) / Austria GK West Zone' ,
'MGI (Ferro) / Austria GK Central Zone' ,
'MGI (Ferro) / Austria GK East Zone' ,
'MGI / Austria GK West' ,
'MGI / Austria GK Central' ,
'MGI / Austria GK East' ,
'MGI / Austria GK M28' ,
'MGI / Austria GK M31' ,
'MGI / Austria GK M34' ,
'MGI / 3-degree Gauss zone 5' ,
'MGI / 3-degree Gauss zone 6' ,
'MGI / 3-degree Gauss zone 7' ,
'MGI / 3-degree Gauss zone 8' ,
'MGI / Balkans zone 5' ,
'MGI / Balkans zone 6' ,
'MGI / Balkans zone 7' ,
'MGI / Balkans zone 8' ,
'MGI / Balkans zone 8' ,
'MGI (Ferro) / Austria West Zone' ,
'MGI (Ferro) / Austria Central Zone' ,
'MGI (Ferro) / Austria East Zone' ,
'MGI / Austria M28' ,
'MGI / Austria M31' ,
'MGI / Austria M34' ,
'MGI / Austria Lambert' ,
'MGI (Ferro) / M28' ,
'MGI (Ferro) / M31' ,
'MGI (Ferro) / M34' ,
'MGI (Ferro) / Austria West Zone' ,
'MGI (Ferro) / Austria Central Zone' ,
'MGI (Ferro) / Austria East Zone' ,
'MGI / M28' ,
'MGI / M31' ,
'MGI / M34' ,
'MGI / Austria Lambert' ,
'Belge 1972 / Belge Lambert 72' ,
'Belge 1972 / Belgian Lambert 72' ,
'DHDN / 3-degree Gauss zone 1' ,
'DHDN / 3-degree Gauss zone 2' ,
'DHDN / 3-degree Gauss zone 3' ,
'DHDN / 3-degree Gauss zone 4' ,
'DHDN / 3-degree Gauss zone 5' ,
'DHDN / 3-degree Gauss-Kruger zone 2' ,
'DHDN / 3-degree Gauss-Kruger zone 3' ,
'DHDN / 3-degree Gauss-Kruger zone 4' ,
'DHDN / 3-degree Gauss-Kruger zone 5' ,
'Conakry 1905 / UTM zone 28N' ,
'Conakry 1905 / UTM zone 29N' ,
'Dealul Piscului 1930 / Stereo 33' ,
'Dealul Piscului 1970/ Stereo 70' ,
'NGN / UTM zone 38N' ,
'NGN / UTM zone 39N' ,
'KUDAMS / KTM' ,
'KUDAMS / KTM' ,
'SIRGAS 2000 / UTM zone 11N' ,
'SIRGAS 2000 / UTM zone 12N' ,
'SIRGAS 2000 / UTM zone 13N' ,
'SIRGAS 2000 / UTM zone 14N' ,
'SIRGAS 2000 / UTM zone 15N' ,
'SIRGAS 2000 / UTM zone 16N' ,
'SIRGAS 2000 / UTM zone 17N' ,
'SIRGAS 2000 / UTM zone 18N' ,
'SIRGAS 2000 / UTM zone 19N' ,
'SIRGAS 2000 / UTM zone 20N' ,
'SIRGAS 2000 / UTM zone 21N' ,
'SIRGAS 2000 / UTM zone 22N' ,
'SIRGAS 2000 / UTM zone 17S' ,
'SIRGAS 2000 / UTM zone 18S' ,
'SIRGAS 2000 / UTM zone 19S' ,
'SIRGAS 2000 / UTM zone 20S' ,
'SIRGAS 2000 / UTM zone 21S' ,
'SIRGAS 2000 / UTM zone 22S' ,
'SIRGAS 2000 / UTM zone 23S' ,
'SIRGAS 2000 / UTM zone 24S' ,
'SIRGAS 2000 / UTM zone 25S' ,
'SIRGAS 1995 / UTM zone 17N' ,
'SIRGAS 1995 / UTM zone 18N' ,
'SIRGAS 1995 / UTM zone 19N' ,
'SIRGAS 1995 / UTM zone 20N' ,
'SIRGAS 1995 / UTM zone 21N' ,
'SIRGAS 1995 / UTM zone 22N' ,
'SIRGAS 1995 / UTM zone 17S' ,
'SIRGAS 1995 / UTM zone 18S' ,
'SIRGAS 1995 / UTM zone 19S' ,
'SIRGAS 1995 / UTM zone 20S' ,
'SIRGAS 1995 / UTM zone 21S' ,
'SIRGAS 1995 / UTM zone 22S' ,
'SIRGAS 1995 / UTM zone 23S' ,
'SIRGAS 1995 / UTM zone 24S' ,
'SIRGAS 1995 / UTM zone 25S' ,
'NAD27 / Montana North' ,
'NAD27 / Montana Central' ,
'NAD27 / Montana South' ,
'NAD27 / Nebraska North' ,
'NAD27 / Nebraska South' ,
'NAD27 / Nevada East' ,
'NAD27 / Nevada Central' ,
'NAD27 / Nevada West' ,
'NAD27 / New Hampshire' ,
'NAD27 / New Jersey' ,
'NAD27 / New Mexico East' ,
'NAD27 / New Mexico Central' ,
'NAD27 / New Mexico West' ,
'NAD27 / New York East' ,
'NAD27 / New York Central' ,
'NAD27 / New York West' ,
'NAD27 / New York Long Island' ,
'NAD27 / North Carolina' ,
'NAD27 / North Dakota North' ,
'NAD27 / North Dakota South' ,
'NAD27 / Ohio North' ,
'NAD27 / Ohio South' ,
'NAD27 / Oklahoma North' ,
'NAD27 / Oklahoma South' ,
'NAD27 / Oregon North' ,
'NAD27 / Oregon South' ,
'NAD27 / Pennsylvania North' ,
'NAD27 / Pennsylvania South' ,
'NAD27 / Rhode Island' ,
'NAD27 / South Carolina North' ,
'NAD27 / South Carolina South' ,
'NAD27 / South Dakota North' ,
'NAD27 / South Dakota South' ,
'NAD27 / Tennessee' ,
'NAD27 / Texas North' ,
'NAD27 / Texas North Central' ,
'NAD27 / Texas Central' ,
'NAD27 / Texas South Central' ,
'NAD27 / Texas South' ,
'NAD27 / Utah North' ,
'NAD27 / Utah Central' ,
'NAD27 / Utah South' ,
'NAD27 / Vermont' ,
'NAD27 / Virginia North' ,
'NAD27 / Virginia South' ,
'NAD27 / Washington North' ,
'NAD27 / Washington South' ,
'NAD27 / West Virginia North' ,
'NAD27 / West Virginia South' ,
'NAD27 / Wisconsin North' ,
'NAD27 / Wisconsin Central' ,
'NAD27 / Wisconsin South' ,
'NAD27 / Wyoming East' ,
'NAD27 / Wyoming East Central' ,
'NAD27 / Wyoming West Central' ,
'NAD27 / Wyoming West' ,
'NAD27 / Guatemala Norte' ,
'NAD27 / Guatemala Sur' ,
'NAD27 / BLM 14N (ftUS)' ,
'NAD27 / BLM 15N (ftUS)' ,
'NAD27 / BLM 16N (ftUS)' ,
'NAD27 / BLM 17N (ftUS)' ,
'NAD27 / BLM 14N (feet)' ,
'NAD27 / BLM 15N (feet)' ,
'NAD27 / BLM 16N (feet)' ,
'NAD27 / BLM 17N (feet)' ,
'NAD27 / MTM zone 1' ,
'NAD27 / MTM zone 2' ,
'NAD27 / MTM zone 3' ,
'NAD27 / MTM zone 4' ,
'NAD27 / MTM zone 5' ,
'NAD27 / MTM zone 6' ,
'NAD27 / Quebec Lambert' ,
'NAD27 / Louisiana Offshore' ,
'NAD83 / Montana' ,
'NAD83 / Nebraska' ,
'NAD83 / Nevada East' ,
'NAD83 / Nevada Central' ,
'NAD83 / Nevada West' ,
'NAD83 / New Hampshire' ,
'NAD83 / New Jersey' ,
'NAD83 / New Mexico East' ,
'NAD83 / New Mexico Central' ,
'NAD83 / New Mexico West' ,
'NAD83 / New York East' ,
'NAD83 / New York Central' ,
'NAD83 / New York West' ,
'NAD83 / New York Long Island' ,
'NAD83 / North Carolina' ,
'NAD83 / North Dakota North' ,
'NAD83 / North Dakota South' ,
'NAD83 / Ohio North' ,
'NAD83 / Ohio South' ,
'NAD83 / Oklahoma North' ,
'NAD83 / Oklahoma South' ,
'NAD83 / Oregon North' ,
'NAD83 / Oregon South' ,
'NAD83 / Pennsylvania North' ,
'NAD83 / Pennsylvania South' ,
'NAD83 / Rhode Island' ,
'NAD83 / South Carolina' ,
'NAD83 / South Dakota North' ,
'NAD83 / South Dakota South' ,
'NAD83 / Tennessee' ,
'NAD83 / Texas North' ,
'NAD83 / Texas North Central' ,
'NAD83 / Texas Central' ,
'NAD83 / Texas South Central' ,
'NAD83 / Texas South' ,
'NAD83 / Utah North' ,
'NAD83 / Utah Central' ,
'NAD83 / Utah South' ,
'NAD83 / Vermont' ,
'NAD83 / Virginia North' ,
'NAD83 / Virginia South' ,
'NAD83 / Washington North' ,
'NAD83 / Washington South' ,
'NAD83 / West Virginia North' ,
'NAD83 / West Virginia South' ,
'NAD83 / Wisconsin North' ,
'NAD83 / Wisconsin Central' ,
'NAD83 / Wisconsin South' ,
'NAD83 / Wyoming East' ,
'NAD83 / Wyoming East Central' ,
'NAD83 / Wyoming West Central' ,
'NAD83 / Wyoming West' ,
'NAD83 / Puerto Rico & Virgin Is.' ,
'NAD83 / BLM 14N (ftUS)' ,
'NAD83 / BLM 15N (ftUS)' ,
'NAD83 / BLM 16N (ftUS)' ,
'NAD83 / BLM 17N (ftUS)' ,
'NAD83 / SCoPQ zone 2' ,
'NAD83 / MTM zone 1' ,
'NAD83 / MTM zone 2' ,
'NAD83 / MTM zone 3' ,
'NAD83 / MTM zone 4' ,
'NAD83 / MTM zone 5' ,
'NAD83 / MTM zone 6' ,
'NAD83 / MTM zone 7' ,
'NAD83 / MTM zone 8' ,
'NAD83 / MTM zone 9' ,
'NAD83 / MTM zone 10' ,
'NAD83 / MTM zone 11' ,
'NAD83 / MTM zone 12' ,
'NAD83 / MTM zone 13' ,
'NAD83 / MTM zone 14' ,
'NAD83 / MTM zone 15' ,
'NAD83 / MTM zone 16' ,
'NAD83 / MTM zone 17' ,
'NAD83 / Quebec Lambert' ,
'NAD83 / Louisiana Offshore' ,
'WGS 72 / UTM zone 1N' ,
'WGS 72 / UTM zone 2N' ,
'WGS 72 / UTM zone 3N' ,
'WGS 72 / UTM zone 4N' ,
'WGS 72 / UTM zone 5N' ,
'WGS 72 / UTM zone 6N' ,
'WGS 72 / UTM zone 7N' ,
'WGS 72 / UTM zone 8N' ,
'WGS 72 / UTM zone 9N' ,
'WGS 72 / UTM zone 10N' ,
'WGS 72 / UTM zone 11N' ,
'WGS 72 / UTM zone 12N' ,
'WGS 72 / UTM zone 13N' ,
'WGS 72 / UTM zone 14N' ,
'WGS 72 / UTM zone 15N' ,
'WGS 72 / UTM zone 16N' ,
'WGS 72 / UTM zone 17N' ,
'WGS 72 / UTM zone 18N' ,
'WGS 72 / UTM zone 19N' ,
'WGS 72 / UTM zone 20N' ,
'WGS 72 / UTM zone 21N' ,
'WGS 72 / UTM zone 22N' ,
'WGS 72 / UTM zone 23N' ,
'WGS 72 / UTM zone 24N' ,
'WGS 72 / UTM zone 25N' ,
'WGS 72 / UTM zone 26N' ,
'WGS 72 / UTM zone 27N' ,
'WGS 72 / UTM zone 28N' ,
'WGS 72 / UTM zone 29N' ,
'WGS 72 / UTM zone 30N' ,
'WGS 72 / UTM zone 31N' ,
'WGS 72 / UTM zone 32N' ,
'WGS 72 / UTM zone 33N' ,
'WGS 72 / UTM zone 34N' ,
'WGS 72 / UTM zone 35N' ,
'WGS 72 / UTM zone 36N' ,
'WGS 72 / UTM zone 37N' ,
'WGS 72 / UTM zone 38N' ,
'WGS 72 / UTM zone 39N' ,
'WGS 72 / UTM zone 40N' ,
'WGS 72 / UTM zone 41N' ,
'WGS 72 / UTM zone 42N' ,
'WGS 72 / UTM zone 43N' ,
'WGS 72 / UTM zone 44N' ,
'WGS 72 / UTM zone 45N' ,
'WGS 72 / UTM zone 46N' ,
'WGS 72 / UTM zone 47N' ,
'WGS 72 / UTM zone 48N' ,
'WGS 72 / UTM zone 49N' ,
'WGS 72 / UTM zone 50N' ,
'WGS 72 / UTM zone 51N' ,
'WGS 72 / UTM zone 52N' ,
'WGS 72 / UTM zone 53N' ,
'WGS 72 / UTM zone 54N' ,
'WGS 72 / UTM zone 55N' ,
'WGS 72 / UTM zone 56N' ,
'WGS 72 / UTM zone 57N' ,
'WGS 72 / UTM zone 58N' ,
'WGS 72 / UTM zone 59N' ,
'WGS 72 / UTM zone 60N' ,
'WGS 72 / UTM zone 1S' ,
'WGS 72 / UTM zone 2S' ,
'WGS 72 / UTM zone 3S' ,
'WGS 72 / UTM zone 4S' ,
'WGS 72 / UTM zone 5S' ,
'WGS 72 / UTM zone 6S' ,
'WGS 72 / UTM zone 7S' ,
'WGS 72 / UTM zone 8S' ,
'WGS 72 / UTM zone 9S' ,
'WGS 72 / UTM zone 10S' ,
'WGS 72 / UTM zone 11S' ,
'WGS 72 / UTM zone 12S' ,
'WGS 72 / UTM zone 13S' ,
'WGS 72 / UTM zone 14S' ,
'WGS 72 / UTM zone 15S' ,
'WGS 72 / UTM zone 16S' ,
'WGS 72 / UTM zone 17S' ,
'WGS 72 / UTM zone 18S' ,
'WGS 72 / UTM zone 19S' ,
'WGS 72 / UTM zone 20S' ,
'WGS 72 / UTM zone 21S' ,
'WGS 72 / UTM zone 22S' ,
'WGS 72 / UTM zone 23S' ,
'WGS 72 / UTM zone 24S' ,
'WGS 72 / UTM zone 25S' ,
'WGS 72 / UTM zone 26S' ,
'WGS 72 / UTM zone 27S' ,
'WGS 72 / UTM zone 28S' ,
'WGS 72 / UTM zone 29S' ,
'WGS 72 / UTM zone 30S' ,
'WGS 72 / UTM zone 31S' ,
'WGS 72 / UTM zone 32S' ,
'WGS 72 / UTM zone 33S' ,
'WGS 72 / UTM zone 34S' ,
'WGS 72 / UTM zone 35S' ,
'WGS 72 / UTM zone 36S' ,
'WGS 72 / UTM zone 37S' ,
'WGS 72 / UTM zone 38S' ,
'WGS 72 / UTM zone 39S' ,
'WGS 72 / UTM zone 40S' ,
'WGS 72 / UTM zone 41S' ,
'WGS 72 / UTM zone 42S' ,
'WGS 72 / UTM zone 43S' ,
'WGS 72 / UTM zone 44S' ,
'WGS 72 / UTM zone 45S' ,
'WGS 72 / UTM zone 46S' ,
'WGS 72 / UTM zone 47S' ,
'WGS 72 / UTM zone 48S' ,
'WGS 72 / UTM zone 49S' ,
'WGS 72 / UTM zone 50S' ,
'WGS 72 / UTM zone 51S' ,
'WGS 72 / UTM zone 52S' ,
'WGS 72 / UTM zone 53S' ,
'WGS 72 / UTM zone 54S' ,
'WGS 72 / UTM zone 55S' ,
'WGS 72 / UTM zone 56S' ,
'WGS 72 / UTM zone 57S' ,
'WGS 72 / UTM zone 58S' ,
'WGS 72 / UTM zone 59S' ,
'WGS 72 / UTM zone 60S' ,
'WGS 72BE / UTM zone 1N' ,
'WGS 72BE / UTM zone 2N' ,
'WGS 72BE / UTM zone 3N' ,
'WGS 72BE / UTM zone 4N' ,
'WGS 72BE / UTM zone 5N' ,
'WGS 72BE / UTM zone 6N' ,
'WGS 72BE / UTM zone 7N' ,
'WGS 72BE / UTM zone 8N' ,
'WGS 72BE / UTM zone 9N' ,
'WGS 72BE / UTM zone 10N' ,
'WGS 72BE / UTM zone 11N' ,
'WGS 72BE / UTM zone 12N' ,
'WGS 72BE / UTM zone 13N' ,
'WGS 72BE / UTM zone 14N' ,
'WGS 72BE / UTM zone 15N' ,
'WGS 72BE / UTM zone 16N' ,
'WGS 72BE / UTM zone 17N' ,
'WGS 72BE / UTM zone 18N' ,
'WGS 72BE / UTM zone 19N' ,
'WGS 72BE / UTM zone 20N' ,
'WGS 72BE / UTM zone 21N' ,
'WGS 72BE / UTM zone 22N' ,
'WGS 72BE / UTM zone 23N' ,
'WGS 72BE / UTM zone 24N' ,
'WGS 72BE / UTM zone 25N' ,
'WGS 72BE / UTM zone 26N' ,
'WGS 72BE / UTM zone 27N' ,
'WGS 72BE / UTM zone 28N' ,
'WGS 72BE / UTM zone 29N' ,
'WGS 72BE / UTM zone 30N' ,
'WGS 72BE / UTM zone 31N' ,
'WGS 72BE / UTM zone 32N' ,
'WGS 72BE / UTM zone 33N' ,
'WGS 72BE / UTM zone 34N' ,
'WGS 72BE / UTM zone 35N' ,
'WGS 72BE / UTM zone 36N' ,
'WGS 72BE / UTM zone 37N' ,
'WGS 72BE / UTM zone 38N' ,
'WGS 72BE / UTM zone 39N' ,
'WGS 72BE / UTM zone 40N' ,
'WGS 72BE / UTM zone 41N' ,
'WGS 72BE / UTM zone 42N' ,
'WGS 72BE / UTM zone 43N' ,
'WGS 72BE / UTM zone 44N' ,
'WGS 72BE / UTM zone 45N' ,
'WGS 72BE / UTM zone 46N' ,
'WGS 72BE / UTM zone 47N' ,
'WGS 72BE / UTM zone 48N' ,
'WGS 72BE / UTM zone 49N' ,
'WGS 72BE / UTM zone 50N' ,
'WGS 72BE / UTM zone 51N' ,
'WGS 72BE / UTM zone 52N' ,
'WGS 72BE / UTM zone 53N' ,
'WGS 72BE / UTM zone 54N' ,
'WGS 72BE / UTM zone 55N' ,
'WGS 72BE / UTM zone 56N' ,
'WGS 72BE / UTM zone 57N' ,
'WGS 72BE / UTM zone 58N' ,
'WGS 72BE / UTM zone 59N' ,
'WGS 72BE / UTM zone 60N' ,
'WGS 72BE / UTM zone 1S' ,
'WGS 72BE / UTM zone 2S' ,
'WGS 72BE / UTM zone 3S' ,
'WGS 72BE / UTM zone 4S' ,
'WGS 72BE / UTM zone 5S' ,
'WGS 72BE / UTM zone 6S' ,
'WGS 72BE / UTM zone 7S' ,
'WGS 72BE / UTM zone 8S' ,
'WGS 72BE / UTM zone 9S' ,
'WGS 72BE / UTM zone 10S' ,
'WGS 72BE / UTM zone 11S' ,
'WGS 72BE / UTM zone 12S' ,
'WGS 72BE / UTM zone 13S' ,
'WGS 72BE / UTM zone 14S' ,
'WGS 72BE / UTM zone 15S' ,
'WGS 72BE / UTM zone 16S' ,
'WGS 72BE / UTM zone 17S' ,
'WGS 72BE / UTM zone 18S' ,
'WGS 72BE / UTM zone 19S' ,
'WGS 72BE / UTM zone 20S' ,
'WGS 72BE / UTM zone 21S' ,
'WGS 72BE / UTM zone 22S' ,
'WGS 72BE / UTM zone 23S' ,
'WGS 72BE / UTM zone 24S' ,
'WGS 72BE / UTM zone 25S' ,
'WGS 72BE / UTM zone 26S' ,
'WGS 72BE / UTM zone 27S' ,
'WGS 72BE / UTM zone 28S' ,
'WGS 72BE / UTM zone 29S' ,
'WGS 72BE / UTM zone 30S' ,
'WGS 72BE / UTM zone 31S' ,
'WGS 72BE / UTM zone 32S' ,
'WGS 72BE / UTM zone 33S' ,
'WGS 72BE / UTM zone 34S' ,
'WGS 72BE / UTM zone 35S' ,
'WGS 72BE / UTM zone 36S' ,
'WGS 72BE / UTM zone 37S' ,
'WGS 72BE / UTM zone 38S' ,
'WGS 72BE / UTM zone 39S' ,
'WGS 72BE / UTM zone 40S' ,
'WGS 72BE / UTM zone 41S' ,
'WGS 72BE / UTM zone 42S' ,
'WGS 72BE / UTM zone 43S' ,
'WGS 72BE / UTM zone 44S' ,
'WGS 72BE / UTM zone 45S' ,
'WGS 72BE / UTM zone 46S' ,
'WGS 72BE / UTM zone 47S' ,
'WGS 72BE / UTM zone 48S' ,
'WGS 72BE / UTM zone 49S' ,
'WGS 72BE / UTM zone 50S' ,
'WGS 72BE / UTM zone 51S' ,
'WGS 72BE / UTM zone 52S' ,
'WGS 72BE / UTM zone 53S' ,
'WGS 72BE / UTM zone 54S' ,
'WGS 72BE / UTM zone 55S' ,
'WGS 72BE / UTM zone 56S' ,
'WGS 72BE / UTM zone 57S' ,
'WGS 72BE / UTM zone 58S' ,
'WGS 72BE / UTM zone 59S' ,
'WGS 72BE / UTM zone 60S' ,
'WGS 84 / UTM grid system (northern hemisphere)' ,
'WGS 84 / UTM zone 1N' ,
'WGS 84 / UTM zone 2N' ,
'WGS 84 / UTM zone 3N' ,
'WGS 84 / UTM zone 4N' ,
'WGS 84 / UTM zone 5N' ,
'WGS 84 / UTM zone 6N' ,
'WGS 84 / UTM zone 7N' ,
'WGS 84 / UTM zone 8N' ,
'WGS 84 / UTM zone 9N' ,
'WGS 84 / UTM zone 10N' ,
'WGS 84 / UTM zone 11N' ,
'WGS 84 / UTM zone 12N' ,
'WGS 84 / UTM zone 13N' ,
'WGS 84 / UTM zone 14N' ,
'WGS 84 / UTM zone 15N' ,
'WGS 84 / UTM zone 16N' ,
'WGS 84 / UTM zone 17N' ,
'WGS 84 / UTM zone 18N' ,
'WGS 84 / UTM zone 19N' ,
'WGS 84 / UTM zone 20N' ,
'WGS 84 / UTM zone 21N' ,
'WGS 84 / UTM zone 22N' ,
'WGS 84 / UTM zone 23N' ,
'WGS 84 / UTM zone 24N' ,
'WGS 84 / UTM zone 25N' ,
'WGS 84 / UTM zone 26N' ,
'WGS 84 / UTM zone 27N' ,
'WGS 84 / UTM zone 28N' ,
'WGS 84 / UTM zone 29N' ,
'WGS 84 / UTM zone 30N' ,
'WGS 84 / UTM zone 31N' ,
'WGS 84 / UTM zone 32N' ,
'WGS 84 / UTM zone 33N' ,
'WGS 84 / UTM zone 34N' ,
'WGS 84 / UTM zone 35N' ,
'WGS 84 / UTM zone 36N' ,
'WGS 84 / UTM zone 37N' ,
'WGS 84 / UTM zone 38N' ,
'WGS 84 / UTM zone 39N' ,
'WGS 84 / UTM zone 40N' ,
'WGS 84 / UTM zone 41N' ,
'WGS 84 / UTM zone 42N' ,
'WGS 84 / UTM zone 43N' ,
'WGS 84 / UTM zone 44N' ,
'WGS 84 / UTM zone 45N' ,
'WGS 84 / UTM zone 46N' ,
'WGS 84 / UTM zone 47N' ,
'WGS 84 / UTM zone 48N' ,
'WGS 84 / UTM zone 49N' ,
'WGS 84 / UTM zone 50N' ,
'WGS 84 / UTM zone 51N' ,
'WGS 84 / UTM zone 52N' ,
'WGS 84 / UTM zone 53N' ,
'WGS 84 / UTM zone 54N' ,
'WGS 84 / UTM zone 55N' ,
'WGS 84 / UTM zone 56N' ,
'WGS 84 / UTM zone 57N' ,
'WGS 84 / UTM zone 58N' ,
'WGS 84 / UTM zone 59N' ,
'WGS 84 / UTM zone 60N' ,
'WGS 84 / UPS North (N,E)' ,
'WGS 84 / Plate Carree' ,
'WGS 84 / World Equidistant Cylindrical' ,
'WGS 84 / BLM 14N (ftUS)' ,
'WGS 84 / BLM 15N (ftUS)' ,
'WGS 84 / BLM 16N (ftUS)' ,
'WGS 84 / BLM 17N (ftUS)' ,
'WGS 84 / UTM grid system (southern hemisphere)' ,
'WGS 84 / UTM zone 1S' ,
'WGS 84 / UTM zone 2S' ,
'WGS 84 / UTM zone 3S' ,
'WGS 84 / UTM zone 4S' ,
'WGS 84 / UTM zone 5S' ,
'WGS 84 / UTM zone 6S' ,
'WGS 84 / UTM zone 7S' ,
'WGS 84 / UTM zone 8S' ,
'WGS 84 / UTM zone 9S' ,
'WGS 84 / UTM zone 10S' ,
'WGS 84 / UTM zone 11S' ,
'WGS 84 / UTM zone 12S' ,
'WGS 84 / UTM zone 13S' ,
'WGS 84 / UTM zone 14S' ,
'WGS 84 / UTM zone 15S' ,
'WGS 84 / UTM zone 16S' ,
'WGS 84 / UTM zone 17S' ,
'WGS 84 / UTM zone 18S' ,
'WGS 84 / UTM zone 19S' ,
'WGS 84 / UTM zone 20S' ,
'WGS 84 / UTM zone 21S' ,
'WGS 84 / UTM zone 22S' ,
'WGS 84 / UTM zone 23S' ,
'WGS 84 / UTM zone 24S' ,
'WGS 84 / UTM zone 25S' ,
'WGS 84 / UTM zone 26S' ,
'WGS 84 / UTM zone 27S' ,
'WGS 84 / UTM zone 28S' ,
'WGS 84 / UTM zone 29S' ,
'WGS 84 / UTM zone 30S' ,
'WGS 84 / UTM zone 31S' ,
'WGS 84 / UTM zone 32S' ,
'WGS 84 / UTM zone 33S' ,
'WGS 84 / UTM zone 34S' ,
'WGS 84 / UTM zone 35S' ,
'WGS 84 / UTM zone 36S' ,
'WGS 84 / UTM zone 37S' ,
'WGS 84 / UTM zone 38S' ,
'WGS 84 / UTM zone 39S' ,
'WGS 84 / UTM zone 40S' ,
'WGS 84 / UTM zone 41S' ,
'WGS 84 / UTM zone 42S' ,
'WGS 84 / UTM zone 43S' ,
'WGS 84 / UTM zone 44S' ,
'WGS 84 / UTM zone 45S' ,
'WGS 84 / UTM zone 46S' ,
'WGS 84 / UTM zone 47S' ,
'WGS 84 / UTM zone 48S' ,
'WGS 84 / UTM zone 49S' ,
'WGS 84 / UTM zone 50S' ,
'WGS 84 / UTM zone 51S' ,
'WGS 84 / UTM zone 52S' ,
'WGS 84 / UTM zone 53S' ,
'WGS 84 / UTM zone 54S' ,
'WGS 84 / UTM zone 55S' ,
'WGS 84 / UTM zone 56S' ,
'WGS 84 / UTM zone 57S' ,
'WGS 84 / UTM zone 58S' ,
'WGS 84 / UTM zone 59S' ,
'WGS 84 / UTM zone 60S' ,
'WGS 84 / UPS South (N,E)' ,
'WGS 84 / TM 36 SE' ,
'Greek (deg)' ,
'GGRS87 (deg)' ,
'ATS77 (deg)' ,
'KKJ (deg)' ,
'RT90 (deg)' ,
'LKS94 (ETRS89) (deg)' ,
'LKS94 (ETRS89) (3D deg)' ,
'Tete (deg)' ,
'Madzansua (deg)' ,
'Observatario (deg)' ,
'Moznet (deg)' ,
'Moznet (3D deg)' ,
'Indian 1960 (deg)' ,
'FD58 (deg)' ,
'EST92 (deg)' ,
'PDO Survey Datum 1993 (deg)' ,
'Old Hawaiian (deg)' ,
'St. Lawrence Island (deg)' ,
'St. Paul Island (deg)' ,
'St. George Island (deg)' ,
'Puerto Rico (deg)' ,
'NAD83(CSRS) (deg)' ,
'NAD83(CSRS) (3D deg)' ,
'Israel (deg)' ,
'Locodjo 1965 (deg)' ,
'Abidjan 1987 (deg)' ,
'Kalianpur 1937 (deg)' ,
'Kalianpur 1962 (deg)' ,
'Kalianpur 1975 (deg)' ,
'Hanoi 1972 (deg)' ,
'Hartebeesthoek94 (deg)' ,
'Hartebeesthoek94 (3D deg)' ,
'CH1903 (deg)' ,
'CH1903+ (deg)' ,
'CHTRF95 (deg)' ,
'CHTRF95 (3D deg)' ,
'NAD83(HARN) (deg)' ,
'NAD83(HARN) (3D deg)' ,
'Rassadiran (deg)' ,
'ED50(ED77) (deg)' ,
'Dabola 1981 (deg)' ,
'S-JTSK (deg)' ,
'Mount Dillon (deg)' ,
'Naparima 1955 (deg)' ,
'ELD79 (deg)' ,
'Chos Malal 1914 (deg)' ,
'Pampa del Castillo (deg)' ,
'Korean 1985 (deg)' ,
'Yemen NGN96 (deg)' ,
'Yemen NGN96 (3D deg)' ,
'South Yemen (deg)' ,
'Bissau (deg)' ,
'Korean 1995 (deg)' ,
'NZGD2000 (deg)' ,
'NZGD2000 (3D deg)' ,
'Accra (deg)' ,
'American Samoa 1962 (deg)' ,
'SIRGAS (deg)' ,
'SIRGAS (3D deg)' ,
'RGF93 (deg)' ,
'RGF93 (3D deg)' ,
'IRENET95 (deg)' ,
'IRENET95 (3D deg)' ,
'Sierra Leone 1924 (deg)' ,
'Sierra Leone 1968 (deg)' ,
'Australian Antarctic (deg)' ,
'Australian Antarctic (3D deg)' ,
'Pulkovo 1942(83) (deg)' ,
'Pulkovo 1942(58) (deg)' ,
'EST97 (deg)' ,
'EST97 (3D deg)' ,
'Luxembourg 1930 (deg)' ,
'Azores Occidental 1939 (deg)' ,
'Azores Central 1948 (deg)' ,
'Azores Oriental 1940 (deg)' ,
'OSNI 1952 (deg)' ,
'REGVEN (deg)' ,
'REGVEN (3D deg)' ,
'POSGAR 98 (deg)' ,
'POSGAR 98 (3D deg)' ,
'Albanian 1987 (deg)' ,
'Douala 1948 (deg)' ,
'Manoca 1962 (deg)' ,
'Qornoq 1927 (deg)' ,
'Scoresbysund 1952 (deg)' ,
'Ammassalik 1958 (deg)' ,
'Garoua (deg)' ,
'Kousseri (deg)' ,
'Egypt 1930 (deg)' ,
'Pulkovo 1995 (deg)' ,
'Adindan (deg)' ,
'AGD66 (deg)' ,
'AGD84 (deg)' ,
'Ain el Abd (deg)' ,
'Afgooye (deg)' ,
'Agadez (deg)' ,
'Lisbon (deg)' ,
'Aratu (deg)' ,
'Arc 1950 (deg)' ,
'Arc 1960 (deg)' ,
'Batavia (deg)' ,
'Barbados 1938 (deg)' ,
'Beduaram (deg)' ,
'Beijing 1954 (deg)' ,
'Belge 1950 (deg)' ,
'Bermuda 1957 (deg)' ,
'Bogota 1975 (deg)' ,
'Bukit Rimpah (deg)' ,
'Camacupa (deg)' ,
'Campo Inchauspe (deg)' ,
'Cape (deg)' ,
'Carthage (deg)' ,
'Chua (deg)' ,
'Corrego Alegre (deg)' ,
'Deir ez Zor (deg)' ,
'Egypt 1907 (deg)' ,
'ED50 (deg)' ,
'ED87 (deg)' ,
'Fahud (deg)' ,
'Gandajika 1970 (deg)' ,
'Hu Tzu Shan (deg)' ,
'HD72 (deg)' ,
'ID74 (deg)' ,
'Indian 1954 (deg)' ,
'Indian 1975 (deg)' ,
'Jamaica 1875 (deg)' ,
'JAD69 (deg)' ,
'Kalianpur 1880 (deg)' ,
'Kandawala (deg)' ,
'Kertau (deg)' ,
'KOC (deg)' ,
'La Canoa (deg)' ,
'PSAD56 (deg)' ,
'Lake (deg)' ,
'Leigon (deg)' ,
'Liberia 1964 (deg)' ,
'Lome (deg)' ,
'Luzon 1911 (deg)' ,
'Hito XVIII 1963 (deg)' ,
'Herat North (deg)' ,
'Mahe 1971 (deg)' ,
'Makassar (deg)' ,
'ETRS89 (deg)' ,
'ETRS89 (3D deg)' ,
'Malongo 1987 (deg)' ,
'Merchich (deg)' ,
'Massawa (deg)' ,
'Minna (deg)' ,
'Mhast (deg)' ,
'Monte Mario (deg)' ,
'M poraloko (deg)' ,
'NAD27 (deg)' ,
'NAD27 Michigan (deg)' ,
'NAD83 (deg)' ,
'Nahrwan 1967 (deg)' ,
'Naparima 1972 (deg)' ,
'NZGD49 (deg)' ,
'NGO 1948 (deg)' ,
'Datum 73 (deg)' ,
'NTF (deg)' ,
'NSWC 9Z-2 (deg)' ,
'OSGB 1936 (deg)' ,
'OSGB70 (deg)' ,
'OS(SN)80 (deg)' ,
'Padang (deg)' ,
'Palestine 1923 (deg)' ,
'Pointe Noire (deg)' ,
'GDA94 (deg)' ,
'GDA94 (3D deg)' ,
'Pulkovo 1942 (deg)' ,
'Qatar 1974 (deg)' ,
'Qatar 1948 (deg)' ,
'Loma Quintana (deg)' ,
'Amersfoort (deg)' ,
'Sapper Hill 1943 (deg)' ,
'Schwarzeck (deg)' ,
'Serindung (deg)' ,
'Tananarive (deg)' ,
'Timbalai 1948 (deg)' ,
'TM65 (deg)' ,
'TM75 (deg)' ,
'Tokyo (deg)' ,
'Trinidad 1903 (deg)' ,
'TC(1948) (deg)' ,
'Voirol 1875 (deg)' ,
'Bern 1938 (deg)' ,
'Nord Sahara 1959 (deg)' ,
'RT38 (deg)' ,
'Yacare (deg)' ,
'Yoff (deg)' ,
'Zanderij (deg)' ,
'MGI (deg)' ,
'Belge 1972 (deg)' ,
'DHDN (deg)' ,
'Conakry 1905 (deg)' ,
'Dealul Piscului 1933 (deg)' ,
'Dealul Piscului 1970 (deg)' ,
'NGN (deg)' ,
'KUDAMS (deg)' ,
'WGS 72 (deg)' ,
'WGS 72BE (deg)' ,
'WGS 84 (deg)' ,
'WGS 84 (degH)' ,
'WGS 84 (Hdeg)' ,
'WGS 84 (DM)' ,
'WGS 84 (DMH)' ,
'WGS 84 (HDM)' ,
'WGS 84 (DMS)' ,
'WGS 84 (HDMS)' ,
'WGS 84 (3D deg)' ,
'WGS 84 (3D degH)' ,
'WGS 84 (3D Hdeg)' ,
'WGS 84 (3D DM)' ,
'WGS 84 (3D DMH)' ,
'WGS 84 (3D HDM)' ,
'WGS 84 (3D DMS)' ,
'WGS 84 (3D HDMS)' ,
'Anguilla 1957 (deg)' ,
'Antigua 1943 (deg)' ,
'Dominica 1945 (deg)' ,
'Grenada 1953 (deg)' ,
'Montserrat 1958 (deg)' ,
'St. Kitts 1955 (deg)' ,
'St. Lucia 1955 (deg)' ,
'St. Vincent 1945 (deg)' ,
'NAD27(76) (deg)' ,
'NAD27(CGQ77) (deg)' ,
'Xian 1980 (deg)' ,
'Hong Kong 1980 (deg)' ,
'JGD2000 (deg)' ,
'JGD2000 (3D deg)' ,
'Segara (deg)' ,
'QND95 (deg)' ,
'Porto Santo (deg)' ,
'Selvagem Grande (deg)' ,
'SAD69 (deg)' ,
'SWEREF99 (deg)' ,
'SWEREF99 (3D deg)' ,
'Point 58 (deg)' ,
'Fort Marigot (deg)' ,
'Sainte Anne (deg)' ,
'CSG67 (deg)' ,
'RGFG95 (deg)' ,
'RGFG95 (3D deg)' ,
'Fort Desaix (deg)' ,
'Piton des Neiges (deg)' ,
'RGR92 (deg)' ,
'RGR92 (3D deg)' ,
'Tahiti (deg)' ,
'Tahaa (deg)' ,
'IGN72 Nuku Hiva (deg)' ,
'K0 1949 (deg)' ,
'Combani 1950 (deg)' ,
'IGN56 Lifou (deg)' ,
'IGN72 Grande Terre (deg)' ,
'ST87 Ouvea (deg)' ,
'Petrels 1972 (deg)' ,
'Perroud 1950 (deg)' ,
'Saint Pierre et Miquelon 1950 (deg)' ,
'MOP78 (deg)' ,
'RRAF 1991 (deg)' ,
'RRAF 1991 (3D deg)' ,
'IGN53 Mare (deg)' ,
'ST84 Ile des Pins (deg)' ,
'ST71 Belep (deg)' ,
'NEA74 Noumea (deg)' ,
'RGNC 1991 (deg)' ,
'RGNC 1991 (3D deg)' ,
'Grand Comoros (deg)' ,
'Reykjavik 1900 (deg)' ,
'Hjorsey 1955 (deg)' ,
'ISN93 (deg)' ,
'ISN93 (3D deg)' ,
'Helle 1954 (deg)' ,
'LKS92 (deg)' ,
'LKS92 (3D deg)' ,
'Porto Santo 1995 (deg)' ,
'Azores Oriental 1995 (deg)' ,
'Azores Central 1995 (deg)' ,
'Lisbon 1890 (deg)' ,
'IKBD-92 (deg)' ,
'Bern 1898 (Bern) (deg)' ,
'Bogota 1975 (Bogota) (deg)' ,
'Lisbon (Lisbon) (deg)' ,
'Makassar (Jakarta) (deg)' ,
'MGI (Ferro) (deg)' ,
'Monte Mario (Rome) (deg)' ,
'Padang (Jakarta) (deg)' ,
'Belge 1950 (Brussels) (deg)' ,
'Batavia (Jakarta) (deg)' ,
'RT38 (Stockholm) (deg)' ,
'Greek (Athens) (deg)' ,
'S-JTSK (Ferro) (deg)' ,
'Segara (Jakarta) (deg)' ,
'Madrid 1870 (Madrid) (deg)'
)

CRSdict = {}

CRSNumberAndName = list(map(str.__add__, inputChars, inputNumbers))

for x in range(0, len(inputChars)):
    CRSdict[inputChars[x]] = inputNumbers[x]

# convert each item in the list step by step
def getCRSdata(input):
	output = (CRSdict.get(input))
	return(output)

def indexOfCRS(input):
	index = inputChars.index(input)
	return(index)
	
totallist = zip(inputChars, inputNumbers)

CRS =(
("2000","Anguilla 1957 / British West Indies Grid",(-63.22, 18.11, -62.92, 18.33)),
("2001","Antigua 1943 / British West Indies Grid",(-61.95, 16.94, -61.61, 17.22)),
("2002","Dominica 1945 / British West Indies Grid",(-61.55, 15.14, -61.2, 15.69)),
("2003","Grenada 1953 / British West Indies Grid",(-61.84, 11.94, -61.35, 12.57)),
("2004","Montserrat 1958 / British West Indies Grid",(-62.29, 16.62, -62.08, 16.87)),
("2005","St. Kitts 1955 / British West Indies Grid",(-62.92, 17.06, -62.5, 17.46)),
("2006","St. Lucia 1955 / British West Indies Grid",(-61.13, 13.66, -60.82, 14.16)),
("2007","St. Vincent 45 / British West Indies Grid",(-61.52, 12.54, -61.07, 13.44)),
("2008","NAD27(CGQ77) / SCoPQ zone 2",(-57.0, 46.6, -54.0, 53.76)),
("2009","NAD27(CGQ77) / SCoPQ zone 3",(-60.0, 50.2, -57.1, 52.01)),
("2010","NAD27(CGQ77) / SCoPQ zone 4",(-63.0, 47.16, -60.0, 52.01)),
("2011","NAD27(CGQ77) / SCoPQ zone 5",(-66.0, 47.95, -63.0, 60.42)),
("2012","NAD27(CGQ77) / SCoPQ zone 6",(-69.0, 47.31, -66.0, 59.0)),
("2013","NAD27(CGQ77) / SCoPQ zone 7",(-72.0, 45.01, -69.0, 61.8)),
("2014","NAD27(CGQ77) / SCoPQ zone 8",(-75.0, 44.99, -72.0, 62.53)),
("2015","NAD27(CGQ77) / SCoPQ zone 9",(-78.0, 45.37, -75.0, 62.62)),
("2016","NAD27(CGQ77) / SCoPQ zone 10",(-79.85, 46.23, -78.0, 62.45)),
("2017","NAD27(76) / MTM zone 8",(-75.0, 44.98, -74.35, 45.65)),
("2018","NAD27(76) / MTM zone 9",(-78.0, 43.63, -75.0, 46.25)),
("2019","NAD27(76) / MTM zone 10",(-81.0, 42.26, -77.99, 47.33)),
("2020","NAD27(76) / MTM zone 11",(-83.6, 41.67, -81.0, 46.0)),
("2021","NAD27(76) / MTM zone 12",(-82.5, 46.0, -79.5, 55.21)),
("2022","NAD27(76) / MTM zone 13",(-85.5, 46.0, -82.5, 55.59)),
("2023","NAD27(76) / MTM zone 14",(-88.5, 47.17, -85.5, 56.7)),
("2024","NAD27(76) / MTM zone 15",(-91.5, 47.97, -88.5, 56.9)),
("2025","NAD27(76) / MTM zone 16",(-94.5, 48.06, -91.5, 55.2)),
("2026","NAD27(76) / MTM zone 17",(-95.16, 48.69, -94.5, 53.24)),
("2027","NAD27(76) / UTM zone 15N",(-95.16, 48.03, -90.0, 56.2)),
("2028","NAD27(76) / UTM zone 16N",(-90.0, 46.11, -84.0, 56.9)),
("2029","NAD27(76) / UTM zone 17N",(-84.0, 41.67, -78.0, 55.37)),
("2030","NAD27(76) / UTM zone 18N",(-78.0, 43.63, -74.35, 46.25)),
("2031","NAD27(CGQ77) / UTM zone 17N",(-79.85, 46.23, -78.0, 62.45)),
("2032","NAD27(CGQ77) / UTM zone 18N",(-78.0, 44.99, -72.0, 62.62)),
("2033","NAD27(CGQ77) / UTM zone 19N",(-72.0, 45.01, -66.0, 61.8)),
("2034","NAD27(CGQ77) / UTM zone 20N",(-66.0, 47.16, -60.0, 60.42)),
("2035","NAD27(CGQ77) / UTM zone 21N",(-60.0, 50.2, -57.1, 52.01)),
("2036","NAD83(CSRS98) / New Brunswick Stereo",(-69.05, 44.56, -63.7, 48.07)),
("2037","NAD83(CSRS98) / UTM zone 19N",(-72.0, 44.6, -66.0, 61.5)),
("2038","NAD83(CSRS98) / UTM zone 20N",(-66.0, 43.2, -60.0, 60.0)),
("2039","Israel 1993 / Israeli TM Grid",(34.17, 29.45, 35.69, 33.28)),
("2040","Locodjo 1965 / UTM zone 30N",(-6.0, 4.92, -2.48, 10.46)),
("2041","Abidjan 1987 / UTM zone 30N",(-6.0, 4.92, -2.48, 10.46)),
("2042","Locodjo 1965 / UTM zone 29N",(-8.61, 4.29, -6.0, 10.74)),
("2043","Abidjan 1987 / UTM zone 29N",(-8.61, 4.29, -6.0, 10.74)),
("2044","Hanoi 1972 / Gauss-Kruger zone 18",(102.14, 8.33, 108.0, 23.4)),
("2045","Hanoi 1972 / Gauss-Kruger zone 19",(108.0, 10.43, 109.53, 21.56)),
("2046","Hartebeesthoek94 / Lo15",(14.35, -23.15, 14.6, -22.68)),
("2047","Hartebeesthoek94 / Lo17",(16.45, -33.1, 18.0, -28.03)),
("2048","Hartebeesthoek94 / Lo19",(17.99, -34.88, 20.0, -28.38)),
("2049","Hartebeesthoek94 / Lo21",(19.99, -34.88, 22.01, -24.76)),
("2050","Hartebeesthoek94 / Lo23",(22.0, -34.26, 24.01, -25.26)),
("2051","Hartebeesthoek94 / Lo25",(24.0, -34.26, 26.01, -24.71)),
("2052","Hartebeesthoek94 / Lo27",(26.0, -33.83, 28.0, -22.92)),
("2053","Hartebeesthoek94 / Lo29",(27.99, -33.03, 30.0, -22.13)),
("2054","Hartebeesthoek94 / Lo31",(29.99, -31.38, 32.02, -22.22)),
("2055","Hartebeesthoek94 / Lo33",(31.95, -28.94, 32.95, -26.8)),
("2056","CH1903+ / LV95",(5.96, 45.82, 10.49, 47.81)),
("2057","Rassadiran / Nakhl e Taqi",(52.5, 27.39, 52.71, 27.61)),
("2058","ED50(ED77) / UTM zone 38N",(44.03, 30.99, 48.0, 39.78)),
("2059","ED50(ED77) / UTM zone 39N",(48.0, 25.47, 54.0, 39.71)),
("2060","ED50(ED77) / UTM zone 40N",(54.0, 25.32, 60.0, 38.29)),
("2061","ED50(ED77) / UTM zone 41N",(60.0, 25.02, 63.34, 37.06)),
("2062","Madrid 1870 (Madrid) / Spain LCC",(-9.37, 35.95, 3.39, 43.82)),
("2063","Dabola 1981 / UTM zone 28N",(-15.13, 9.01, -12.0, 12.68)),
("2064","Dabola 1981 / UTM zone 29N",(-12.0, 7.19, -7.65, 12.51)),
("2065","S-JTSK (Ferro) / Krovak",(12.09, 47.73, 22.56, 51.06)),
("2066","Mount Dillon / Tobago Grid",(-60.9, 11.08, -60.44, 11.41)),
("2067","Naparima 1955 / UTM zone 20N",(-61.98, 9.99, -60.85, 10.9)),
("2068","ELD79 / Libya zone 5",(9.31, 25.37, 10.01, 30.49)),
("2069","ELD79 / Libya zone 6",(10.0, 23.51, 12.0, 33.23)),
("2070","ELD79 / Libya zone 7",(12.0, 22.8, 14.0, 33.06)),
("2071","ELD79 / Libya zone 8",(14.0, 22.61, 16.0, 32.79)),
("2072","ELD79 / Libya zone 9",(16.0, 22.51, 18.01, 31.34)),
("2073","ELD79 / Libya zone 10",(18.0, 21.54, 20.0, 32.17)),
("2074","ELD79 / Libya zone 11",(20.0, 20.54, 22.0, 33.0)),
("2075","ELD79 / Libya zone 12",(22.0, 19.5, 24.0, 32.97)),
("2076","ELD79 / Libya zone 13",(24.0, 19.99, 25.21, 32.15)),
("2077","ELD79 / UTM zone 32N",(9.31, 23.51, 12.0, 33.23)),
("2078","ELD79 / UTM zone 33N",(12.0, 22.51, 18.01, 33.06)),
("2079","ELD79 / UTM zone 34N",(17.99, 19.5, 24.0, 33.0)),
("2080","ELD79 / UTM zone 35N",(24.0, 19.99, 25.21, 32.15)),
("2081","Chos Malal 1914 / Argentina 2",(-70.51, -43.41, -67.49, -31.91)),
("2082","Pampa del Castillo / Argentina 2",(-70.5, -50.34, -67.49, -42.49)),
("2083","Hito XVIII 1963 / Argentina 2",(-68.64, -54.9, -67.5, -52.59)),
("2084","Hito XVIII 1963 / UTM zone 19S",(-68.62, -54.61, -66.0, -51.65)),
("2085","NAD27 / Cuba Norte",(-85.01, 21.38, -76.91, 23.25)),
("2086","NAD27 / Cuba Sur",(-78.69, 19.77, -74.07, 21.5)),
("2087","ELD79 / TM 12 NE",(9.31, 22.61, 15.0, 33.23)),
("2088","Carthage / TM 11 NE",(7.81, 33.22, 13.67, 38.41)),
("2089","Yemen NGN96 / UTM zone 38N",(42.0, 11.57, 48.01, 17.95)),
("2090","Yemen NGN96 / UTM zone 39N",(48.0, 9.45, 54.01, 19.0)),
("2091","South Yemen / Gauss Kruger zone 8",(43.37, 12.54, 48.01, 17.95)),
("2092","South Yemen / Gauss Kruger zone 9",(48.0, 13.94, 53.14, 19.0)),
("2093","Hanoi 1972 / GK 106 NE",(105.49, 9.03, 107.58, 11.04)),
("2094","WGS 72BE / TM 106 NE",(106.54, 7.99, 110.0, 11.15)),
("2095","Bissau / UTM zone 28N",(-16.77, 10.87, -13.64, 12.69)),
("2096","Korean 1985 / East Belt",(128.0, 34.49, 129.65, 38.64)),
("2097","Korean 1985 / Central Belt",(126.0, 33.96, 128.0, 38.33)),
("2098","Korean 1985 / West Belt",(124.53, 33.99, 126.0, 38.04)),
("2099","Qatar 1948 / Qatar Grid",(50.69, 24.55, 51.68, 26.2)),
("2100","GGRS87 / Greek Grid",(19.57, 34.88, 28.3, 41.75)),
("2101","Lake / Maracaibo Grid M1",(-72.25, 10.0, -71.5, 11.0)),
("2102","Lake / Maracaibo Grid",(-72.25, 10.0, -71.5, 11.0)),
("2103","Lake / Maracaibo Grid M3",(-72.25, 10.0, -71.5, 11.0)),
("2104","Lake / Maracaibo La Rosa Grid",(-71.5, 10.0, -71.17, 10.51)),
("2105","NZGD2000 / Mount Eden 2000",(171.99, -39.01, 176.12, -34.1)),
("2106","NZGD2000 / Bay of Plenty 2000",(175.75, -39.13, 177.23, -37.22)),
("2107","NZGD2000 / Poverty Bay 2000",(176.73, -39.04, 178.63, -37.49)),
("2108","NZGD2000 / Hawkes Bay 2000",(175.8, -40.57, 178.07, -38.87)),
("2109","NZGD2000 / Taranaki 2000",(173.68, -39.78, 175.44, -38.4)),
("2110","NZGD2000 / Tuhirangi 2000",(174.88, -39.55, 176.33, -38.87)),
("2111","NZGD2000 / Wanganui 2000",(174.4, -40.97, 176.27, -39.46)),
("2112","NZGD2000 / Wairarapa 2000",(175.01, -41.67, 176.55, -40.29)),
("2113","NZGD2000 / Wellington 2000",(174.52, -41.5, 175.36, -40.91)),
("2114","NZGD2000 / Collingwood 2000",(172.16, -41.22, 173.13, -40.44)),
("2115","NZGD2000 / Nelson 2000",(172.4, -42.18, 174.08, -40.66)),
("2116","NZGD2000 / Karamea 2000",(171.96, -41.49, 172.7, -40.75)),
("2117","NZGD2000 / Buller 2000",(171.27, -42.19, 172.41, -41.42)),
("2118","NZGD2000 / Grey 2000",(171.15, -42.74, 172.75, -41.5)),
("2119","NZGD2000 / Amuri 2000",(171.88, -42.95, 173.55, -42.09)),
("2120","NZGD2000 / Marlborough 2000",(172.95, -42.65, 174.46, -40.85)),
("2121","NZGD2000 / Hokitika 2000",(170.39, -43.23, 171.89, -42.41)),
("2122","NZGD2000 / Okarito 2000",(169.21, -43.85, 170.89, -43.0)),
("2123","NZGD2000 / Jacksons Bay 2000",(168.02, -44.4, 170.01, -43.67)),
("2124","NZGD2000 / Mount Pleasant 2000",(171.11, -43.96, 173.38, -42.69)),
("2125","NZGD2000 / Gawler 2000",(170.68, -44.25, 172.26, -43.13)),
("2126","NZGD2000 / Timaru 2000",(169.82, -44.98, 171.55, -43.35)),
("2127","NZGD2000 / Lindis Peak 2000",(168.62, -45.4, 170.24, -43.71)),
("2128","NZGD2000 / Mount Nicholas 2000",(167.72, -45.58, 169.11, -44.29)),
("2129","NZGD2000 / Mount York 2000",(166.37, -46.33, 168.21, -44.53)),
("2130","NZGD2000 / Observation Point 2000",(169.77, -45.82, 171.24, -44.61)),
("2131","NZGD2000 / North Taieri 2000",(168.64, -46.73, 170.87, -45.23)),
("2132","NZGD2000 / Bluff 2000",(167.29, -47.33, 168.97, -45.33)),
("2133","NZGD2000 / UTM zone 58S",(162.0, -55.89, 168.0, -39.68)),
("2134","NZGD2000 / UTM zone 59S",(168.0, -55.95, 174.0, -30.78)),
("2135","NZGD2000 / UTM zone 60S",(174.0, -54.32, 180.0, -26.42)),
("2136","Accra / Ghana National Grid",(-3.25, 4.67, 1.23, 11.16)),
("2137","Accra / TM 1 NW",(-3.79, 1.4, 2.1, 6.06)),
("2138","NAD27(CGQ77) / Quebec Lambert",(-79.85, 44.99, -57.1, 62.62)),
("2139","NAD83(CSRS98) / SCoPQ zone 2",(-57.0, 46.6, -54.0, 53.76)),
("2140","NAD83(CSRS98) / MTM zone 3",(-60.0, 50.1, -57.1, 52.0)),
("2141","NAD83(CSRS98) / MTM zone 4",(-63.0, 47.16, -60.0, 52.01)),
("2142","NAD83(CSRS98) / MTM zone 5",(-66.0, 47.95, -63.0, 60.42)),
("2143","NAD83(CSRS98) / MTM zone 6",(-69.0, 47.31, -66.0, 59.0)),
("2144","NAD83(CSRS98) / MTM zone 7",(-72.0, 45.01, -69.0, 61.8)),
("2145","NAD83(CSRS98) / MTM zone 8",(-75.0, 44.99, -72.0, 62.53)),
("2146","NAD83(CSRS98) / MTM zone 9",(-78.0, 45.37, -75.0, 62.62)),
("2147","NAD83(CSRS98) / MTM zone 10",(-79.85, 46.23, -78.0, 62.45)),
("2148","NAD83(CSRS98) / UTM zone 21N",(-60.0, 50.2, -57.1, 52.01)),
("2149","NAD83(CSRS98) / UTM zone 18N",(-78.0, 44.99, -72.0, 62.62)),
("2150","NAD83(CSRS98) / UTM zone 17N",(-79.85, 46.23, -78.0, 62.45)),
("2151","NAD83(CSRS98) / UTM zone 13N",(-108.0, 49.0, -102.0, 60.0)),
("2152","NAD83(CSRS98) / UTM zone 12N",(-114.0, 49.0, -108.0, 60.0)),
("2153","NAD83(CSRS98) / UTM zone 11N",(-120.0, 49.0, -114.0, 60.0)),
("2154","RGF93 / Lambert-93",(-9.86, 41.15, 10.38, 51.56)),
("2155","American Samoa 1962 / American Samoa Lambert",(-173.75, -17.56, -165.2, -10.02)),
("2156","NAD83(HARN) / UTM zone 59S",(-173.75, -17.56, -165.2, -10.02)),
("2157","IRENET95 / Irish Transverse Mercator",(-10.56, 51.39, -5.34, 55.43)),
("2158","IRENET95 / UTM zone 29N",(-10.56, 51.39, -5.34, 55.43)),
("2159","Sierra Leone 1924 / New Colony Grid",(-13.34, 8.32, -13.13, 8.55)),
("2160","Sierra Leone 1924 / New War Office Grid",(-13.34, 8.32, -13.13, 8.55)),
("2161","Sierra Leone 1968 / UTM zone 28N",(-13.35, 7.15, -12.0, 9.94)),
("2162","Sierra Leone 1968 / UTM zone 29N",(-12.0, 6.88, -10.26, 10.0)),
("2163","US National Atlas Equal Area",(167.65, 15.56, -65.69, 74.71)),
("2164","Locodjo 1965 / TM 5 NW",(-7.55, 1.02, -3.11, 5.19)),
("2165","Abidjan 1987 / TM 5 NW",(-7.55, 1.02, -3.11, 5.19)),
("2166","Pulkovo 1942(83) / Gauss Kruger zone 3",(9.92, 50.35, 10.5, 51.56)),
("2167","Pulkovo 1942(83) / Gauss Kruger zone 4",(10.5, 48.97, 13.5, 54.74)),
("2168","Pulkovo 1942(83) / Gauss Kruger zone 5",(9.92, 50.35, 10.5, 51.56)),
("2169","Luxembourg 1930 / Gauss",(5.73, 49.44, 6.53, 50.19)),
("2170","MGI / Slovenia Grid",(13.38, 45.42, 16.61, 46.88)),
("2171","Pulkovo 1942(58) / Poland zone I",(18.0, 49.0, 24.15, 52.34)),
("2172","Pulkovo 1942(58) / Poland zone II",(19.0, 51.33, 23.95, 54.51)),
("2173","Pulkovo 1942(58) / Poland zone III",(14.14, 52.16, 20.0, 54.89)),
("2174","Pulkovo 1942(58) / Poland zone IV",(14.14, 49.39, 19.09, 53.34)),
("2175","Pulkovo 1942(58) / Poland zone V",(18.33, 49.39, 19.67, 51.34)),
("2176","ETRS89 / Poland CS2000 zone 5",(14.14, 50.26, 16.5, 55.35)),
("2177","ETRS89 / Poland CS2000 zone 6",(16.5, 49.39, 19.5, 55.93)),
("2178","ETRS89 / Poland CS2000 zone 7",(19.5, 49.09, 22.5, 54.55)),
("2179","ETRS89 / Poland CS2000 zone 8",(22.5, 49.0, 24.15, 54.41)),
("2180","ETRS89 / Poland CS92",(14.14, 49.0, 24.15, 55.93)),
("2188","Azores Occidental 1939 / UTM zone 25N",(-31.34, 39.3, -31.02, 39.77)),
("2189","Azores Central 1948 / UTM zone 26N",(-28.9, 38.32, -26.97, 39.14)),
("2190","Azores Oriental 1940 / UTM zone 26N",(-25.92, 36.87, -24.62, 37.96)),
("2191","Madeira 1936 / UTM zone 28N",(-17.31, 32.35, -16.23, 33.15)),
("2192","ED50 / France EuroLambert",(-4.87, 42.33, 8.23, 51.14)),
("2193","NZGD2000 / New Zealand Transverse Mercator 2000",(166.37, -47.33, 178.63, -34.1)),
("2194","American Samoa 1962 / American Samoa Lambert",(-173.75, -17.56, -165.2, -10.02)),
("2195","NAD83(HARN) / UTM zone 2S",(-170.88, -14.59, -168.09, -14.11)),
("2196","ETRS89 / Kp2000 Jutland",(8.0, 54.67, 11.29, 57.8)),
("2197","ETRS89 / Kp2000 Zealand",(10.79, 54.51, 12.69, 56.79)),
("2198","ETRS89 / Kp2000 Bornholm",(14.59, 54.94, 15.25, 55.38)),
("2199","Albanian 1987 / Gauss Kruger zone 4",(18.46, 39.63, 21.06, 42.67)),
("2200","ATS77 / New Brunswick Stereographic (ATS77)",(-69.05, 44.56, -63.7, 48.07)),
("2201","REGVEN / UTM zone 18N",(-73.38, 7.02, -71.99, 11.62)),
("2202","REGVEN / UTM zone 19N",(-72.0, 0.73, -66.0, 15.64)),
("2203","REGVEN / UTM zone 20N",(-66.0, 0.64, -58.95, 16.75)),
("2204","NAD27 / Tennessee",(-90.31, 34.98, -81.65, 36.68)),
("2205","NAD83 / Kentucky North",(-85.96, 37.71, -82.47, 39.15)),
("2206","ED50 / 3-degree Gauss-Kruger zone 9",(25.62, 36.5, 28.5, 42.11)),
("2207","ED50 / 3-degree Gauss-Kruger zone 10",(28.5, 36.06, 31.5, 41.46)),
("2208","ED50 / 3-degree Gauss-Kruger zone 11",(31.5, 35.97, 34.5, 42.07)),
("2209","ED50 / 3-degree Gauss-Kruger zone 12",(34.5, 35.81, 37.5, 42.15)),
("2210","ED50 / 3-degree Gauss-Kruger zone 13",(37.5, 36.66, 40.5, 41.19)),
("2211","ED50 / 3-degree Gauss-Kruger zone 14",(40.5, 37.02, 43.5, 41.6)),
("2212","ED50 / 3-degree Gauss-Kruger zone 15",(43.5, 36.97, 44.83, 41.02)),
("2213","ETRS89 / TM 30 NE",(28.64, 43.44, 31.41, 45.2)),
("2214","Douala 1948 / AOF west",(8.45, 2.16, 10.4, 4.99)),
("2215","Manoca 1962 / UTM zone 32N",(8.45, 2.16, 10.4, 4.99)),
("2216","Qornoq 1927 / UTM zone 22N",(-54.0, 60.63, -48.0, 73.05)),
("2217","Qornoq 1927 / UTM zone 23N",(-48.0, 59.74, -42.52, 62.05)),
("2218","Scoresbysund 1952 / Greenland zone 5 east",(-29.69, 69.0, -21.32, 72.0)),
("2219","ATS77 / UTM zone 19N",(-69.0, 43.64, -66.0, 48.07)),
("2220","ATS77 / UTM zone 20N",(-66.0, 43.41, -59.73, 47.98)),
("2221","Scoresbysund 1952 / Greenland zone 6 east",(-26.99, 68.66, -25.14, 69.0)),
("2222","NAD83 / Arizona East (ft)",(-111.71, 31.33, -109.04, 37.01)),
("2223","NAD83 / Arizona Central (ft)",(-113.35, 31.33, -110.44, 37.01)),
("2224","NAD83 / Arizona West (ft)",(-114.81, 32.05, -112.52, 37.0)),
("2225","NAD83 / California zone 1 (ftUS)",(-124.45, 39.59, -119.99, 42.01)),
("2226","NAD83 / California zone 2 (ftUS)",(-124.06, 38.02, -119.54, 40.16)),
("2227","NAD83 / California zone 3 (ftUS)",(-123.02, 36.73, -117.83, 38.71)),
("2228","NAD83 / California zone 4 (ftUS)",(-122.01, 35.78, -115.62, 37.58)),
("2229","NAD83 / California zone 5 (ftUS)",(-121.42, 32.76, -114.12, 35.81)),
("2230","NAD83 / California zone 6 (ftUS)",(-118.15, 32.53, -114.42, 34.08)),
("2231","NAD83 / Colorado North (ftUS)",(-109.06, 39.56, -102.04, 41.01)),
("2232","NAD83 / Colorado Central (ftUS)",(-109.06, 38.14, -102.04, 40.09)),
("2233","NAD83 / Colorado South (ftUS)",(-109.06, 36.98, -102.04, 38.68)),
("2234","NAD83 / Connecticut (ftUS)",(-73.73, 40.98, -71.78, 42.05)),
("2235","NAD83 / Delaware (ftUS)",(-75.8, 38.44, -74.97, 39.85)),
("2236","NAD83 / Florida East (ftUS)",(-82.33, 24.41, -79.97, 30.83)),
("2237","NAD83 / Florida West (ftUS)",(-83.34, 26.27, -81.13, 29.6)),
("2238","NAD83 / Florida North (ftUS)",(-87.63, 29.21, -82.04, 31.01)),
("2239","NAD83 / Georgia East (ftUS)",(-83.47, 30.36, -80.77, 34.68)),
("2240","NAD83 / Georgia West (ftUS)",(-85.61, 30.62, -82.99, 35.01)),
("2241","NAD83 / Idaho East (ftUS)",(-113.24, 41.99, -111.04, 44.75)),
("2242","NAD83 / Idaho Central (ftUS)",(-115.3, 41.99, -112.68, 45.7)),
("2243","NAD83 / Idaho West (ftUS)",(-117.24, 41.99, -114.32, 49.01)),
("2244","NAD83 / Indiana East (ftUS)",(-86.59, 37.95, -84.78, 41.77)),
("2245","NAD83 / Indiana West (ftUS)",(-88.06, 37.77, -86.24, 41.77)),
("2246","NAD83 / Kentucky North (ftUS)",(-85.96, 37.71, -82.47, 39.15)),
("2247","NAD83 / Kentucky South (ftUS)",(-89.57, 36.49, -81.95, 38.17)),
("2248","NAD83 / Maryland (ftUS)",(-79.49, 37.97, -74.97, 39.73)),
("2249","NAD83 / Massachusetts Mainland (ftUS)",(-73.5, 41.46, -69.86, 42.89)),
("2250","NAD83 / Massachusetts Island (ftUS)",(-70.91, 41.19, -69.89, 41.51)),
("2251","NAD83 / Michigan North (ft)",(-90.42, 45.08, -83.44, 48.32)),
("2252","NAD83 / Michigan Central (ft)",(-87.06, 43.8, -82.27, 45.92)),
("2253","NAD83 / Michigan South (ft)",(-87.2, 41.69, -82.13, 44.22)),
("2254","NAD83 / Mississippi East (ftUS)",(-89.97, 30.01, -88.09, 35.01)),
("2255","NAD83 / Mississippi West (ftUS)",(-91.65, 31.0, -89.37, 35.01)),
("2256","NAD83 / Montana (ft)",(-116.07, 44.35, -104.04, 49.01)),
("2257","NAD83 / New Mexico East (ftUS)",(-105.72, 32.0, -102.99, 37.0)),
("2258","NAD83 / New Mexico Central (ftUS)",(-107.73, 31.78, -104.84, 37.0)),
("2259","NAD83 / New Mexico West (ftUS)",(-109.06, 31.33, -106.32, 37.0)),
("2260","NAD83 / New York East (ftUS)",(-75.87, 40.88, -73.23, 45.02)),
("2261","NAD83 / New York Central (ftUS)",(-77.75, 41.99, -75.04, 44.41)),
("2262","NAD83 / New York West (ftUS)",(-79.77, 41.99, -77.36, 43.64)),
("2263","NAD83 / New York Long Island (ftUS)",(-74.26, 40.47, -71.8, 41.3)),
("2264","NAD83 / North Carolina (ftUS)",(-84.33, 33.83, -75.38, 36.59)),
("2265","NAD83 / North Dakota North (ft)",(-104.07, 47.15, -96.83, 49.01)),
("2266","NAD83 / North Dakota South (ft)",(-104.05, 45.93, -96.55, 47.83)),
("2267","NAD83 / Oklahoma North (ftUS)",(-103.0, 35.27, -94.42, 37.01)),
("2268","NAD83 / Oklahoma South (ftUS)",(-100.0, 33.62, -94.42, 35.57)),
("2269","NAD83 / Oregon North (ft)",(-124.17, 43.95, -116.47, 46.26)),
("2270","NAD83 / Oregon South (ft)",(-124.6, 41.98, -116.9, 44.56)),
("2271","NAD83 / Pennsylvania North (ftUS)",(-80.53, 40.6, -74.7, 42.53)),
("2272","NAD83 / Pennsylvania South (ftUS)",(-80.53, 39.71, -74.72, 41.18)),
("2273","NAD83 / South Carolina (ft)",(-83.36, 32.05, -78.52, 35.21)),
("2274","NAD83 / Tennessee (ftUS)",(-90.31, 34.98, -81.65, 36.68)),
("2275","NAD83 / Texas North (ftUS)",(-103.03, 34.3, -99.99, 36.5)),
("2276","NAD83 / Texas North Central (ftUS)",(-103.07, 31.72, -94.0, 34.58)),
("2277","NAD83 / Texas Central (ftUS)",(-106.66, 29.78, -93.5, 32.27)),
("2278","NAD83 / Texas South Central (ftUS)",(-105.0, 27.78, -93.76, 30.67)),
("2279","NAD83 / Texas South (ftUS)",(-100.2, 25.83, -96.85, 28.21)),
("2280","NAD83 / Utah North (ft)",(-114.04, 40.55, -109.04, 42.01)),
("2281","NAD83 / Utah Central (ft)",(-114.05, 38.49, -109.04, 41.08)),
("2282","NAD83 / Utah South (ft)",(-114.05, 36.99, -109.04, 38.58)),
("2283","NAD83 / Virginia North (ftUS)",(-80.06, 37.77, -76.51, 39.46)),
("2284","NAD83 / Virginia South (ftUS)",(-83.68, 36.54, -75.31, 38.28)),
("2285","NAD83 / Washington North (ftUS)",(-124.79, 47.08, -117.02, 49.05)),
("2286","NAD83 / Washington South (ftUS)",(-124.4, 45.54, -116.91, 47.61)),
("2287","NAD83 / Wisconsin North (ftUS)",(-92.89, 45.37, -88.05, 47.31)),
("2288","NAD83 / Wisconsin Central (ftUS)",(-92.89, 43.98, -86.25, 45.8)),
("2289","NAD83 / Wisconsin South (ftUS)",(-91.43, 42.48, -86.95, 44.33)),
("2290","ATS77 / Prince Edward Isl. Stereographic (ATS77)",(-64.49, 45.9, -61.9, 47.09)),
("2291","NAD83(CSRS98) / Prince Edward Isl. Stereographic (NAD83)",(-64.49, 45.9, -61.9, 47.09)),
("2292","NAD83(CSRS98) / Prince Edward Isl. Stereographic (NAD83)",(-64.49, 45.9, -61.9, 47.09)),
("2294","ATS77 / MTM Nova Scotia zone 4",(-63.0, 44.64, -59.73, 47.08)),
("2295","ATS77 / MTM Nova Scotia zone 5",(-66.28, 43.41, -63.0, 46.02)),
("2296","Ammassalik 1958 / Greenland zone 7 east",(-38.86, 65.52, -36.81, 65.91)),
("2297","Qornoq 1927 / Greenland zone 1 east",(-65.06, 81.0, -11.81, 83.67)),
("2298","Qornoq 1927 / Greenland zone 2 east",(-44.0, 78.0, -14.33, 81.0)),
("2299","Qornoq 1927 / Greenland zone 2 west",(-73.29, 78.0, -65.24, 79.0)),
("2300","Qornoq 1927 / Greenland zone 3 east",(-44.0, 75.0, -17.12, 78.0)),
("2301","Qornoq 1927 / Greenland zone 3 west",(-72.79, 75.0, -56.31, 78.0)),
("2302","Qornoq 1927 / Greenland zone 4 east",(-38.0, 72.0, -17.21, 75.0)),
("2303","Qornoq 1927 / Greenland zone 4 west",(-58.21, 72.0, -52.02, 75.0)),
("2304","Qornoq 1927 / Greenland zone 5 west",(-56.06, 69.0, -49.11, 72.0)),
("2305","Qornoq 1927 / Greenland zone 6 west",(-54.09, 66.0, -49.4, 69.0)),
("2306","Qornoq 1927 / Greenland zone 7 west",(-53.7, 63.0, -49.17, 66.0)),
("2307","Qornoq 1927 / Greenland zone 8 east",(-50.72, 59.74, -42.52, 63.0)),
("2308","Batavia / TM 109 SE",(105.77, -6.89, 110.01, -4.07)),
("2309","WGS 84 / TM 116 SE",(112.8, -8.46, 117.01, -6.8)),
("2310","WGS 84 / TM 132 SE",(131.89, -2.94, 133.82, -1.97)),
("2311","WGS 84 / TM 6 NE",(2.66, 1.92, 8.49, 6.38)),
("2312","Garoua / UTM zone 33N",(12.9, 8.92, 14.19, 9.87)),
("2313","Kousseri / UTM zone 33N",(14.17, 11.7, 15.09, 12.77)),
("2314","Trinidad 1903 / Trinidad Grid (ftCla)",(-62.09, 9.83, -60.0, 11.51)),
("2315","Campo Inchauspe / UTM zone 19S",(-68.62, -54.61, -66.0, -51.65)),
("2316","Campo Inchauspe / UTM zone 20S",(-66.0, -54.93, -61.49, -51.36)),
("2317","PSAD56 / ICN Regional",(-73.38, 0.64, -59.8, 12.25)),
("2318","Ain el Abd / Aramco Lambert",(34.51, 16.37, 55.67, 32.16)),
("2319","ED50 / TM27",(25.62, 36.5, 28.5, 42.11)),
("2320","ED50 / TM30",(28.5, 36.06, 31.5, 41.46)),
("2321","ED50 / TM33",(31.5, 35.97, 34.5, 42.07)),
("2322","ED50 / TM36",(34.5, 35.81, 37.5, 42.15)),
("2323","ED50 / TM39",(37.5, 36.66, 40.5, 41.19)),
("2324","ED50 / TM42",(40.5, 37.02, 43.5, 41.6)),
("2325","ED50 / TM45",(43.5, 36.97, 44.83, 41.02)),
("2326","Hong Kong 1980 Grid System",(113.76, 22.13, 114.51, 22.58)),
("2327","Xian 1980 / Gauss-Kruger zone 13",(73.62, 35.42, 78.01, 41.07)),
("2328","Xian 1980 / Gauss-Kruger zone 14",(77.98, 29.16, 84.0, 47.23)),
("2329","Xian 1980 / Gauss-Kruger zone 15",(84.0, 27.32, 90.0, 49.18)),
("2330","Xian 1980 / Gauss-Kruger zone 16",(90.0, 27.71, 96.01, 47.9)),
("2331","Xian 1980 / Gauss-Kruger zone 17",(96.0, 21.13, 102.01, 43.18)),
("2332","Xian 1980 / Gauss-Kruger zone 18",(102.0, 21.53, 108.0, 42.47)),
("2333","Xian 1980 / Gauss-Kruger zone 19",(108.0, 18.11, 114.0, 45.11)),
("2334","Xian 1980 / Gauss-Kruger zone 20",(114.0, 22.14, 120.0, 51.52)),
("2335","Xian 1980 / Gauss-Kruger zone 21",(120.0, 26.34, 126.0, 53.56)),
("2336","Xian 1980 / Gauss-Kruger zone 22",(126.0, 40.89, 132.0, 52.79)),
("2337","Xian 1980 / Gauss-Kruger zone 23",(132.0, 45.02, 134.77, 48.4)),
("2338","Xian 1980 / Gauss-Kruger CM 75E",(73.62, 35.42, 78.01, 41.07)),
("2339","Xian 1980 / Gauss-Kruger CM 81E",(77.98, 29.16, 84.0, 47.23)),
("2340","Xian 1980 / Gauss-Kruger CM 87E",(84.0, 27.32, 90.0, 49.18)),
("2341","Xian 1980 / Gauss-Kruger CM 93E",(90.0, 27.71, 96.01, 47.9)),
("2342","Xian 1980 / Gauss-Kruger CM 99E",(96.0, 21.13, 102.01, 43.18)),
("2343","Xian 1980 / Gauss-Kruger CM 105E",(102.0, 21.53, 108.0, 42.47)),
("2344","Xian 1980 / Gauss-Kruger CM 111E",(108.0, 18.11, 114.0, 45.11)),
("2345","Xian 1980 / Gauss-Kruger CM 117E",(114.0, 22.14, 120.0, 51.52)),
("2346","Xian 1980 / Gauss-Kruger CM 123E",(120.0, 26.34, 126.0, 53.56)),
("2347","Xian 1980 / Gauss-Kruger CM 129E",(126.0, 40.89, 132.0, 52.79)),
("2348","Xian 1980 / Gauss-Kruger CM 135E",(132.0, 45.02, 134.77, 48.4)),
("2349","Xian 1980 / 3-degree Gauss-Kruger zone 25",(73.62, 35.81, 76.5, 40.65)),
("2350","Xian 1980 / 3-degree Gauss-Kruger zone 26",(76.5, 31.03, 79.5, 41.83)),
("2351","Xian 1980 / 3-degree Gauss-Kruger zone 27",(79.5, 29.95, 82.51, 45.88)),
("2352","Xian 1980 / 3-degree Gauss-Kruger zone 28",(82.5, 28.26, 85.5, 47.23)),
("2353","Xian 1980 / 3-degree Gauss-Kruger zone 29",(85.5, 27.8, 88.5, 49.18)),
("2354","Xian 1980 / 3-degree Gauss-Kruger zone 30",(88.49, 27.32, 91.51, 48.42)),
("2355","Xian 1980 / 3-degree Gauss-Kruger zone 31",(91.5, 27.71, 94.5, 45.13)),
("2356","Xian 1980 / 3-degree Gauss-Kruger zone 32",(94.5, 28.23, 97.51, 44.5)),
("2357","Xian 1980 / 3-degree Gauss-Kruger zone 33",(97.5, 21.43, 100.5, 42.76)),
("2358","Xian 1980 / 3-degree Gauss-Kruger zone 34",(100.5, 21.13, 103.5, 42.69)),
("2359","Xian 1980 / 3-degree Gauss-Kruger zone 35",(103.5, 22.5, 106.51, 42.21)),
("2360","Xian 1980 / 3-degree Gauss-Kruger zone 36",(106.5, 18.19, 109.51, 42.47)),
("2361","Xian 1980 / 3-degree Gauss-Kruger zone 37",(109.5, 18.11, 112.5, 45.11)),
("2362","Xian 1980 / 3-degree Gauss-Kruger zone 38",(112.5, 21.52, 115.5, 45.45)),
("2363","Xian 1980 / 3-degree Gauss-Kruger zone 39",(115.5, 22.6, 118.5, 49.88)),
("2364","Xian 1980 / 3-degree Gauss-Kruger zone 40",(118.5, 24.43, 121.5, 53.33)),
("2365","Xian 1980 / 3-degree Gauss-Kruger zone 41",(121.5, 28.22, 124.5, 53.56)),
("2366","Xian 1980 / 3-degree Gauss-Kruger zone 42",(124.5, 40.19, 127.5, 53.2)),
("2367","Xian 1980 / 3-degree Gauss-Kruger zone 43",(127.5, 41.37, 130.5, 50.25)),
("2368","Xian 1980 / 3-degree Gauss-Kruger zone 44",(130.5, 42.42, 133.5, 48.88)),
("2369","Xian 1980 / 3-degree Gauss-Kruger zone 45",(133.5, 45.85, 134.77, 48.4)),
("2370","Xian 1980 / 3-degree Gauss-Kruger CM 75E",(73.62, 35.81, 76.5, 40.65)),
("2371","Xian 1980 / 3-degree Gauss-Kruger CM 78E",(76.5, 31.03, 79.5, 41.83)),
("2372","Xian 1980 / 3-degree Gauss-Kruger CM 81E",(79.5, 29.95, 82.51, 45.88)),
("2373","Xian 1980 / 3-degree Gauss-Kruger CM 84E",(82.5, 28.26, 85.5, 47.23)),
("2374","Xian 1980 / 3-degree Gauss-Kruger CM 87E",(85.5, 27.8, 88.5, 49.18)),
("2375","Xian 1980 / 3-degree Gauss-Kruger CM 90E",(88.49, 27.32, 91.51, 48.42)),
("2376","Xian 1980 / 3-degree Gauss-Kruger CM 93E",(91.5, 27.71, 94.5, 45.13)),
("2377","Xian 1980 / 3-degree Gauss-Kruger CM 96E",(94.5, 28.23, 97.51, 44.5)),
("2378","Xian 1980 / 3-degree Gauss-Kruger CM 99E",(97.5, 21.43, 100.5, 42.76)),
("2379","Xian 1980 / 3-degree Gauss-Kruger CM 102E",(100.5, 21.13, 103.5, 42.69)),
("2380","Xian 1980 / 3-degree Gauss-Kruger CM 105E",(103.5, 22.5, 106.51, 42.21)),
("2381","Xian 1980 / 3-degree Gauss-Kruger CM 108E",(106.5, 18.19, 109.51, 42.47)),
("2382","Xian 1980 / 3-degree Gauss-Kruger CM 111E",(109.5, 18.11, 112.5, 45.11)),
("2383","Xian 1980 / 3-degree Gauss-Kruger CM 114E",(112.5, 21.52, 115.5, 45.45)),
("2384","Xian 1980 / 3-degree Gauss-Kruger CM 117E",(115.5, 22.6, 118.5, 49.88)),
("2385","Xian 1980 / 3-degree Gauss-Kruger CM 120E",(118.5, 24.43, 121.5, 53.33)),
("2386","Xian 1980 / 3-degree Gauss-Kruger CM 123E",(121.5, 28.22, 124.5, 53.56)),
("2387","Xian 1980 / 3-degree Gauss-Kruger CM 126E",(124.5, 40.19, 127.5, 53.2)),
("2388","Xian 1980 / 3-degree Gauss-Kruger CM 129E",(127.5, 41.37, 130.5, 50.25)),
("2389","Xian 1980 / 3-degree Gauss-Kruger CM 132E",(130.5, 42.42, 133.5, 48.88)),
("2390","Xian 1980 / 3-degree Gauss-Kruger CM 135E",(133.5, 45.85, 134.77, 48.4)),
("2391","KKJ / Finland zone 1",(19.5, 59.76, 22.5, 69.33)),
("2392","KKJ / Finland zone 2",(22.5, 59.75, 25.5, 68.9)),
("2393","KKJ / Finland Uniform Coordinate System",(25.5, 59.75, 28.5, 70.09)),
("2394","KKJ / Finland zone 4",(28.5, 60.94, 31.5, 69.81)),
("2395","South Yemen / Gauss-Kruger zone 8",(43.37, 12.54, 48.01, 17.95)),
("2396","South Yemen / Gauss-Kruger zone 9",(48.0, 13.94, 53.14, 19.0)),
("2397","Pulkovo 1942(83) / 3-degree Gauss-Kruger zone 3",(9.92, 50.35, 10.5, 51.56)),
("2398","Pulkovo 1942(83) / 3-degree Gauss-Kruger zone 4",(10.5, 48.97, 13.5, 54.74)),
("2399","Pulkovo 1942(83) / 3-degree Gauss-Kruger zone 5",(13.5, 46.54, 16.5, 54.72)),
("2400","RT90 2.5 gon W",(10.03, 54.96, 24.17, 69.07)),
("2401","Beijing 1954 / 3-degree Gauss-Kruger zone 25",(73.62, 35.81, 76.5, 40.65)),
("2402","Beijing 1954 / 3-degree Gauss-Kruger zone 26",(76.5, 31.03, 79.5, 41.83)),
("2403","Beijing 1954 / 3-degree Gauss-Kruger zone 27",(79.5, 29.95, 82.51, 45.88)),
("2404","Beijing 1954 / 3-degree Gauss-Kruger zone 28",(82.5, 28.26, 85.5, 47.23)),
("2405","Beijing 1954 / 3-degree Gauss-Kruger zone 29",(85.5, 27.8, 88.5, 49.18)),
("2406","Beijing 1954 / 3-degree Gauss-Kruger zone 30",(88.49, 27.32, 91.51, 48.42)),
("2407","Beijing 1954 / 3-degree Gauss-Kruger zone 31",(91.5, 27.71, 94.5, 45.13)),
("2408","Beijing 1954 / 3-degree Gauss-Kruger zone 32",(94.5, 28.23, 97.51, 44.5)),
("2409","Beijing 1954 / 3-degree Gauss-Kruger zone 33",(97.5, 21.43, 100.5, 42.76)),
("2410","Beijing 1954 / 3-degree Gauss-Kruger zone 34",(100.5, 21.13, 103.5, 42.69)),
("2411","Beijing 1954 / 3-degree Gauss-Kruger zone 35",(103.5, 22.5, 106.51, 42.21)),
("2412","Beijing 1954 / 3-degree Gauss-Kruger zone 36",(106.5, 18.19, 109.51, 42.47)),
("2413","Beijing 1954 / 3-degree Gauss-Kruger zone 37",(109.5, 18.11, 112.5, 45.11)),
("2414","Beijing 1954 / 3-degree Gauss-Kruger zone 38",(112.5, 21.52, 115.5, 45.45)),
("2415","Beijing 1954 / 3-degree Gauss-Kruger zone 39",(115.5, 22.6, 118.5, 49.88)),
("2416","Beijing 1954 / 3-degree Gauss-Kruger zone 40",(118.5, 24.43, 121.5, 53.33)),
("2417","Beijing 1954 / 3-degree Gauss-Kruger zone 41",(121.5, 28.22, 124.5, 53.56)),
("2418","Beijing 1954 / 3-degree Gauss-Kruger zone 42",(124.5, 40.19, 127.5, 53.2)),
("2419","Beijing 1954 / 3-degree Gauss-Kruger zone 43",(127.5, 41.37, 130.5, 50.25)),
("2420","Beijing 1954 / 3-degree Gauss-Kruger zone 44",(130.5, 42.42, 133.5, 48.88)),
("2421","Beijing 1954 / 3-degree Gauss-Kruger zone 45",(133.5, 45.85, 134.77, 48.4)),
("2422","Beijing 1954 / 3-degree Gauss-Kruger CM 75E",(73.62, 35.81, 76.5, 40.65)),
("2423","Beijing 1954 / 3-degree Gauss-Kruger CM 78E",(76.5, 31.03, 79.5, 41.83)),
("2424","Beijing 1954 / 3-degree Gauss-Kruger CM 81E",(79.5, 29.95, 82.51, 45.88)),
("2425","Beijing 1954 / 3-degree Gauss-Kruger CM 84E",(82.5, 28.26, 85.5, 47.23)),
("2426","Beijing 1954 / 3-degree Gauss-Kruger CM 87E",(85.5, 27.8, 88.5, 49.18)),
("2427","Beijing 1954 / 3-degree Gauss-Kruger CM 90E",(88.49, 27.32, 91.51, 48.42)),
("2428","Beijing 1954 / 3-degree Gauss-Kruger CM 93E",(91.5, 27.71, 94.5, 45.13)),
("2429","Beijing 1954 / 3-degree Gauss-Kruger CM 96E",(94.5, 28.23, 97.51, 44.5)),
("2430","Beijing 1954 / 3-degree Gauss-Kruger CM 99E",(97.5, 21.43, 100.5, 42.76)),
("2431","Beijing 1954 / 3-degree Gauss-Kruger CM 102E",(100.5, 21.13, 103.5, 42.69)),
("2432","Beijing 1954 / 3-degree Gauss-Kruger CM 105E",(103.5, 22.5, 106.51, 42.21)),
("2433","Beijing 1954 / 3-degree Gauss-Kruger CM 108E",(106.5, 18.19, 109.51, 42.47)),
("2434","Beijing 1954 / 3-degree Gauss-Kruger CM 111E",(109.5, 18.11, 112.5, 45.11)),
("2435","Beijing 1954 / 3-degree Gauss-Kruger CM 114E",(112.5, 21.52, 115.5, 45.45)),
("2436","Beijing 1954 / 3-degree Gauss-Kruger CM 117E",(115.5, 22.6, 118.5, 49.88)),
("2437","Beijing 1954 / 3-degree Gauss-Kruger CM 120E",(118.5, 24.43, 121.5, 53.33)),
("2438","Beijing 1954 / 3-degree Gauss-Kruger CM 123E",(121.5, 28.22, 124.5, 53.56)),
("2439","Beijing 1954 / 3-degree Gauss-Kruger CM 126E",(124.5, 40.19, 127.5, 53.2)),
("2440","Beijing 1954 / 3-degree Gauss-Kruger CM 129E",(127.5, 41.37, 130.5, 50.25)),
("2441","Beijing 1954 / 3-degree Gauss-Kruger CM 132E",(130.5, 42.42, 133.5, 48.88)),
("2442","Beijing 1954 / 3-degree Gauss-Kruger CM 135E",(133.5, 45.85, 134.77, 48.4)),
("2443","JGD2000 / Japan Plane Rectangular CS I",(128.17, 26.96, 130.46, 34.74)),
("2444","JGD2000 / Japan Plane Rectangular CS II",(129.76, 30.18, 132.05, 33.99)),
("2445","JGD2000 / Japan Plane Rectangular CS III",(130.81, 33.72, 133.49, 36.38)),
("2446","JGD2000 / Japan Plane Rectangular CS IV",(131.95, 32.69, 134.81, 34.45)),
("2447","JGD2000 / Japan Plane Rectangular CS V",(133.13, 34.13, 135.47, 35.71)),
("2448","JGD2000 / Japan Plane Rectangular CS VI",(134.86, 33.4, 136.99, 36.33)),
("2449","JGD2000 / Japan Plane Rectangular CS VII",(136.22, 34.51, 137.84, 37.58)),
("2450","JGD2000 / Japan Plane Rectangular CS VIII",(137.32, 34.54, 139.91, 38.58)),
("2451","JGD2000 / Japan Plane Rectangular CS IX",(138.4, 29.31, 141.11, 37.98)),
("2452","JGD2000 / Japan Plane Rectangular CS X",(139.49, 37.73, 142.14, 41.58)),
("2453","JGD2000 / Japan Plane Rectangular CS XI",(139.34, 41.34, 141.46, 43.42)),
("2454","JGD2000 / Japan Plane Rectangular CS XII",(140.89, 42.15, 143.61, 45.54)),
("2455","JGD2000 / Japan Plane Rectangular CS XIII",(142.61, 41.87, 145.87, 44.4)),
("2456","JGD2000 / Japan Plane Rectangular CS XIV",(141.2, 24.67, 142.33, 27.8)),
("2457","JGD2000 / Japan Plane Rectangular CS XV",(126.63, 26.02, 128.4, 26.91)),
("2458","JGD2000 / Japan Plane Rectangular CS XVI",(122.83, 23.98, 125.51, 24.94)),
("2459","JGD2000 / Japan Plane Rectangular CS XVII",(131.12, 24.4, 131.38, 26.01)),
("2460","JGD2000 / Japan Plane Rectangular CS XVIII",(136.02, 20.37, 136.16, 20.48)),
("2461","JGD2000 / Japan Plane Rectangular CS XIX",(153.91, 24.22, 154.05, 24.35)),
("2462","Albanian 1987 / Gauss-Kruger zone 4",(19.22, 39.64, 21.06, 42.67)),
("2463","Pulkovo 1995 / Gauss-Kruger CM 21E",(19.57, 54.32, 22.87, 55.32)),
("2464","Pulkovo 1995 / Gauss-Kruger CM 27E",(26.61, 55.69, 30.0, 69.47)),
("2465","Pulkovo 1995 / Gauss-Kruger CM 33E",(30.0, 50.34, 36.0, 70.02)),
("2466","Pulkovo 1995 / Gauss-Kruger CM 39E",(36.0, 43.18, 42.01, 69.23)),
("2467","Pulkovo 1995 / Gauss-Kruger CM 45E",(42.0, 41.19, 48.0, 80.91)),
("2468","Pulkovo 1995 / Gauss-Kruger CM 51E",(48.0, 41.39, 54.0, 81.4)),
("2469","Pulkovo 1995 / Gauss-Kruger CM 57E",(54.0, 50.47, 60.0, 81.91)),
("2470","Pulkovo 1995 / Gauss-Kruger CM 63E",(60.0, 50.66, 66.0, 81.77)),
("2471","Pulkovo 1995 / Gauss-Kruger CM 69E",(66.0, 54.1, 72.0, 77.07)),
("2472","Pulkovo 1995 / Gauss-Kruger CM 75E",(72.0, 53.17, 78.0, 79.71)),
("2473","Pulkovo 1995 / Gauss-Kruger CM 81E",(78.0, 50.69, 84.0, 81.03)),
("2474","Pulkovo 1995 / Gauss-Kruger CM 87E",(84.0, 49.07, 90.0, 81.27)),
("2475","Pulkovo 1995 / Gauss-Kruger CM 93E",(90.0, 49.89, 96.0, 81.35)),
("2476","Pulkovo 1995 / Gauss-Kruger CM 99E",(96.0, 49.73, 102.0, 81.32)),
("2477","Pulkovo 1995 / Gauss-Kruger CM 105E",(102.0, 49.64, 108.0, 79.48)),
("2478","Pulkovo 1995 / Gauss-Kruger CM 111E",(108.0, 49.14, 114.0, 76.81)),
("2479","Pulkovo 1995 / Gauss-Kruger CM 117E",(114.0, 49.51, 120.0, 75.96)),
("2480","Pulkovo 1995 / Gauss-Kruger CM 123E",(120.0, 51.51, 126.0, 74.0)),
("2481","Pulkovo 1995 / Gauss-Kruger CM 129E",(126.0, 42.25, 132.0, 73.61)),
("2482","Pulkovo 1995 / Gauss-Kruger CM 135E",(132.0, 42.63, 138.0, 76.15)),
("2483","Pulkovo 1995 / Gauss-Kruger CM 141E",(138.0, 45.84, 144.0, 76.27)),
("2484","Pulkovo 1995 / Gauss-Kruger CM 147E",(144.0, 43.6, 150.0, 76.82)),
("2485","Pulkovo 1995 / Gauss-Kruger CM 153E",(150.0, 45.77, 156.0, 76.26)),
("2486","Pulkovo 1995 / Gauss-Kruger CM 159E",(156.0, 50.27, 162.0, 77.2)),
("2487","Pulkovo 1995 / Gauss-Kruger CM 165E",(162.0, 54.47, 168.0, 70.03)),
("2488","Pulkovo 1995 / Gauss-Kruger CM 171E",(168.0, 54.45, 174.0, 70.19)),
("2489","Pulkovo 1995 / Gauss-Kruger CM 177E",(174.0, 61.65, 180.0, 71.59)),
("2490","Pulkovo 1995 / Gauss-Kruger CM 177W",(-180.0, 64.35, -174.0, 71.65)),
("2491","Pulkovo 1995 / Gauss-Kruger CM 171W",(-174.0, 64.2, -168.97, 67.18)),
("2492","Pulkovo 1942 / Gauss-Kruger CM 9E",(9.93, 50.21, 12.0, 54.18)),
("2493","Pulkovo 1942 / Gauss-Kruger CM 15E",(12.0, 45.78, 18.0, 54.89)),
("2494","Pulkovo 1942 / Gauss-Kruger CM 21E",(19.57, 47.95, 24.0, 59.44)),
("2495","Pulkovo 1942 / Gauss-Kruger CM 27E",(24.0, 45.18, 30.01, 69.47)),
("2496","Pulkovo 1942 / Gauss-Kruger CM 33E",(30.0, 44.32, 36.0, 70.02)),
("2497","Pulkovo 1942 / Gauss-Kruger CM 39E",(36.0, 41.43, 42.0, 69.23)),
("2498","Pulkovo 1942 / Gauss-Kruger CM 45E",(42.0, 38.84, 48.01, 80.91)),
("2499","Pulkovo 1942 / Gauss-Kruger CM 51E",(48.0, 37.34, 54.0, 81.4)),
("2500","Pulkovo 1942 / Gauss-Kruger CM 57E",(54.0, 37.05, 60.0, 81.91)),
("2501","Pulkovo 1942 / Gauss-Kruger CM 63E",(60.0, 35.14, 66.0, 81.77)),
("2502","Pulkovo 1942 / Gauss-Kruger CM 69E",(66.0, 36.67, 72.0, 77.07)),
("2503","Pulkovo 1942 / Gauss-Kruger CM 75E",(72.0, 36.79, 78.0, 79.71)),
("2504","Pulkovo 1942 / Gauss-Kruger CM 81E",(78.0, 41.04, 84.01, 81.03)),
("2505","Pulkovo 1942 / Gauss-Kruger CM 87E",(84.0, 46.82, 90.0, 81.27)),
("2506","Pulkovo 1942 / Gauss-Kruger CM 93E",(90.0, 49.89, 96.0, 81.35)),
("2507","Pulkovo 1942 / Gauss-Kruger CM 99E",(96.0, 49.73, 102.0, 81.32)),
("2508","Pulkovo 1942 / Gauss-Kruger CM 105E",(102.0, 49.64, 108.0, 79.48)),
("2509","Pulkovo 1942 / Gauss-Kruger CM 111E",(108.0, 49.14, 114.0, 76.81)),
("2510","Pulkovo 1942 / Gauss-Kruger CM 117E",(114.0, 49.51, 120.0, 75.96)),
("2511","Pulkovo 1942 / Gauss-Kruger CM 123E",(120.0, 51.51, 126.0, 74.0)),
("2512","Pulkovo 1942 / Gauss-Kruger CM 129E",(126.0, 42.25, 132.0, 73.61)),
("2513","Pulkovo 1942 / Gauss-Kruger CM 135E",(132.0, 42.63, 138.0, 76.15)),
("2514","Pulkovo 1942 / Gauss-Kruger CM 141E",(138.0, 45.84, 144.0, 76.27)),
("2515","Pulkovo 1942 / Gauss-Kruger CM 147E",(144.0, 43.6, 150.0, 76.82)),
("2516","Pulkovo 1942 / Gauss-Kruger CM 153E",(150.0, 45.77, 156.0, 76.26)),
("2517","Pulkovo 1942 / Gauss-Kruger CM 159E",(156.0, 50.27, 162.0, 77.2)),
("2518","Pulkovo 1942 / Gauss-Kruger CM 165E",(162.0, 54.47, 168.0, 70.03)),
("2519","Pulkovo 1942 / Gauss-Kruger CM 171E",(168.0, 54.45, 174.0, 70.19)),
("2520","Pulkovo 1942 / Gauss-Kruger CM 177E",(174.0, 61.65, 180.0, 71.59)),
("2521","Pulkovo 1942 / Gauss-Kruger CM 177W",(-180.0, 64.35, -174.0, 71.65)),
("2522","Pulkovo 1942 / Gauss-Kruger CM 171W",(-174.0, 64.2, -168.97, 67.18)),
("2523","Pulkovo 1942 / 3-degree Gauss-Kruger zone 7",(19.57, 48.24, 22.5, 59.1)),
("2524","Pulkovo 1942 / 3-degree Gauss-Kruger zone 8",(22.5, 47.71, 25.5, 59.75)),
("2525","Pulkovo 1942 / 3-degree Gauss-Kruger zone 9",(25.49, 45.26, 28.51, 68.93)),
("2526","Pulkovo 1942 / 3-degree Gauss-Kruger zone 10",(28.5, 45.18, 31.5, 69.85)),
("2527","Pulkovo 1942 / 3-degree Gauss-Kruger zone 11",(31.5, 44.32, 34.5, 70.02)),
("2528","Pulkovo 1942 / 3-degree Gauss-Kruger zone 12",(34.5, 44.61, 37.5, 69.39)),
("2529","Pulkovo 1942 / 3-degree Gauss-Kruger zone 13",(37.5, 43.07, 40.5, 68.8)),
("2530","Pulkovo 1942 / 3-degree Gauss-Kruger zone 14",(40.5, 41.01, 43.51, 68.74)),
("2531","Pulkovo 1942 / 3-degree Gauss-Kruger zone 15",(43.5, 38.84, 46.5, 80.8)),
("2532","Pulkovo 1942 / 3-degree Gauss-Kruger zone 16",(46.5, 38.31, 49.5, 80.91)),
("2533","Pulkovo 1942 / 3-degree Gauss-Kruger zone 17",(49.5, 37.66, 52.5, 81.22)),
("2534","Pulkovo 1942 / 3-degree Gauss-Kruger zone 18",(52.5, 37.33, 55.5, 81.41)),
("2535","Pulkovo 1942 / 3-degree Gauss-Kruger zone 19",(55.5, 37.64, 58.5, 81.89)),
("2536","Pulkovo 1942 / 3-degree Gauss-Kruger zone 20",(58.5, 35.51, 61.5, 81.91)),
("2537","Pulkovo 1942 / 3-degree Gauss-Kruger zone 21",(61.5, 35.14, 64.5, 81.77)),
("2538","Pulkovo 1942 / 3-degree Gauss-Kruger zone 22",(64.5, 36.27, 67.5, 81.25)),
("2539","Pulkovo 1942 / 3-degree Gauss-Kruger zone 23",(67.5, 36.93, 70.5, 77.07)),
("2540","Pulkovo 1942 / 3-degree Gauss-Kruger zone 24",(70.5, 36.67, 73.5, 73.57)),
("2541","Pulkovo 1942 / 3-degree Gauss-Kruger zone 25",(73.5, 37.22, 76.5, 79.71)),
("2542","Pulkovo 1942 / 3-degree Gauss-Kruger zone 26",(76.5, 40.44, 79.5, 81.03)),
("2543","Pulkovo 1942 / 3-degree Gauss-Kruger zone 27",(79.5, 41.82, 82.5, 81.03)),
("2544","Pulkovo 1942 / 3-degree Gauss-Kruger zone 28",(82.5, 45.11, 85.5, 77.56)),
("2545","Pulkovo 1942 / 3-degree Gauss-Kruger zone 29",(85.5, 47.05, 88.5, 77.16)),
("2546","Pulkovo 1942 / 3-degree Gauss-Kruger zone 30",(88.5, 49.44, 91.5, 81.28)),
("2547","Pulkovo 1942 / 3-degree Gauss-Kruger zone 31",(91.5, 50.16, 94.5, 81.26)),
("2548","Pulkovo 1942 / 3-degree Gauss-Kruger zone 32",(94.5, 49.73, 97.5, 81.35)),
("2549","Pulkovo 1942 / 3-degree Gauss-Kruger zone 33",(97.5, 49.79, 100.5, 80.9)),
("2550","Samboja / UTM zone 50S",(116.72, -1.24, 117.99, 0.0)),
("2551","Pulkovo 1942 / 3-degree Gauss-Kruger zone 34",(100.5, 50.17, 103.5, 79.71)),
("2552","Pulkovo 1942 / 3-degree Gauss-Kruger zone 35",(103.5, 50.13, 106.5, 79.21)),
("2553","Pulkovo 1942 / 3-degree Gauss-Kruger zone 36",(106.5, 49.25, 109.5, 78.4)),
("2554","Pulkovo 1942 / 3-degree Gauss-Kruger zone 37",(109.5, 49.14, 112.5, 76.81)),
("2555","Pulkovo 1942 / 3-degree Gauss-Kruger zone 38",(112.5, 49.49, 115.5, 76.7)),
("2556","Pulkovo 1942 / 3-degree Gauss-Kruger zone 39",(115.5, 49.51, 118.5, 74.43)),
("2557","Pulkovo 1942 / 3-degree Gauss-Kruger zone 40",(118.5, 49.87, 121.5, 73.63)),
("2558","Pulkovo 1942 / 3-degree Gauss-Kruger zone 41",(121.5, 53.18, 124.5, 74.0)),
("2559","Pulkovo 1942 / 3-degree Gauss-Kruger zone 42",(124.5, 49.88, 127.5, 74.0)),
("2560","Pulkovo 1942 / 3-degree Gauss-Kruger zone 43",(127.5, 42.67, 130.5, 73.59)),
("2561","Pulkovo 1942 / 3-degree Gauss-Kruger zone 44",(130.5, 42.25, 133.5, 71.99)),
("2562","Pulkovo 1942 / 3-degree Gauss-Kruger zone 45",(133.5, 42.74, 136.5, 75.9)),
("2563","Pulkovo 1942 / 3-degree Gauss-Kruger zone 46",(136.5, 44.76, 139.5, 76.27)),
("2564","Pulkovo 1942 / 3-degree Gauss-Kruger zone 47",(139.5, 45.84, 142.5, 76.23)),
("2565","Pulkovo 1942 / 3-degree Gauss-Kruger zone 48",(142.5, 43.61, 145.5, 75.98)),
("2566","Pulkovo 1942 / 3-degree Gauss-Kruger zone 49",(145.5, 43.6, 148.5, 76.76)),
("2567","Pulkovo 1942 / 3-degree Gauss-Kruger zone 50",(148.5, 45.21, 151.5, 76.82)),
("2568","Pulkovo 1942 / 3-degree Gauss-Kruger zone 51",(151.5, 46.72, 154.5, 76.26)),
("2569","Pulkovo 1942 / 3-degree Gauss-Kruger zone 52",(154.5, 49.02, 157.5, 77.2)),
("2570","Pulkovo 1942 / 3-degree Gauss-Kruger zone 53",(157.5, 51.36, 160.5, 71.12)),
("2571","Pulkovo 1942 / 3-degree Gauss-Kruger zone 54",(160.5, 54.34, 163.5, 70.98)),
("2572","Pulkovo 1942 / 3-degree Gauss-Kruger zone 55",(163.5, 54.69, 166.5, 69.82)),
("2573","Pulkovo 1942 / 3-degree Gauss-Kruger zone 56",(166.5, 54.45, 169.5, 70.07)),
("2574","Pulkovo 1942 / 3-degree Gauss-Kruger zone 57",(169.5, 59.86, 172.5, 70.19)),
("2575","Pulkovo 1942 / 3-degree Gauss-Kruger zone 58",(172.5, 60.99, 175.5, 70.02)),
("2576","Pulkovo 1942 / 3-degree Gauss-Kruger zone 59",(175.5, 62.09, 178.5, 71.1)),
("2577","Pulkovo 1942 / 3-degree Gauss-Kruger zone 60",(178.5, 62.24, -178.5, 71.65)),
("2578","Pulkovo 1942 / 3-degree Gauss-Kruger zone 61",(-178.5, 64.74, -175.5, 71.61)),
("2579","Pulkovo 1942 / 3-degree Gauss-Kruger zone 62",(-175.5, 64.2, -172.5, 67.78)),
("2580","Pulkovo 1942 / 3-degree Gauss-Kruger zone 63",(-172.5, 64.35, -169.57, 67.06)),
("2581","Pulkovo 1942 / 3-degree Gauss-Kruger zone 64",(-169.22, 65.7, -168.97, 65.86)),
("2582","Pulkovo 1942 / 3-degree Gauss-Kruger CM 21E",(19.57, 48.24, 22.5, 59.1)),
("2583","Pulkovo 1942 / 3-degree Gauss-Kruger CM 24E",(22.5, 47.71, 25.5, 59.75)),
("2584","Pulkovo 1942 / 3-degree Gauss-Kruger CM 27E",(25.49, 45.26, 28.51, 68.93)),
("2585","Pulkovo 1942 / 3-degree Gauss-Kruger CM 30E",(28.5, 45.18, 31.5, 69.85)),
("2586","Pulkovo 1942 / 3-degree Gauss-Kruger CM 33E",(31.5, 44.32, 34.5, 70.02)),
("2587","Pulkovo 1942 / 3-degree Gauss-Kruger CM 36E",(34.5, 44.61, 37.5, 69.39)),
("2588","Pulkovo 1942 / 3-degree Gauss-Kruger CM 39E",(37.5, 43.07, 40.5, 68.8)),
("2589","Pulkovo 1942 / 3-degree Gauss-Kruger CM 42E",(40.5, 41.01, 43.51, 68.74)),
("2590","Pulkovo 1942 / 3-degree Gauss-Kruger CM 45E",(43.5, 38.84, 46.5, 80.8)),
("2591","Pulkovo 1942 / 3-degree Gauss-Kruger CM 48E",(46.5, 38.31, 49.5, 80.91)),
("2592","Pulkovo 1942 / 3-degree Gauss-Kruger CM 51E",(49.5, 37.66, 52.5, 81.22)),
("2593","Pulkovo 1942 / 3-degree Gauss-Kruger CM 54E",(52.5, 37.33, 55.5, 81.41)),
("2594","Pulkovo 1942 / 3-degree Gauss-Kruger CM 57E",(55.5, 37.64, 58.5, 81.89)),
("2595","Pulkovo 1942 / 3-degree Gauss-Kruger CM 60E",(58.5, 35.51, 61.5, 81.91)),
("2596","Pulkovo 1942 / 3-degree Gauss-Kruger CM 63E",(61.5, 35.14, 64.5, 81.77)),
("2597","Pulkovo 1942 / 3-degree Gauss-Kruger CM 66E",(64.5, 36.27, 67.5, 81.25)),
("2598","Pulkovo 1942 / 3-degree Gauss-Kruger CM 69E",(67.5, 36.93, 70.5, 77.07)),
("2599","Pulkovo 1942 / 3-degree Gauss-Kruger CM 72E",(70.5, 36.67, 73.5, 73.57)),
("2600","Lietuvos Koordinoei Sistema 1994",(19.02, 53.89, 26.82, 56.45)),
("2601","Pulkovo 1942 / 3-degree Gauss-Kruger CM 75E",(73.5, 37.22, 76.5, 79.71)),
("2602","Pulkovo 1942 / 3-degree Gauss-Kruger CM 78E",(76.5, 40.44, 79.5, 81.03)),
("2603","Pulkovo 1942 / 3-degree Gauss-Kruger CM 81E",(79.5, 41.82, 82.5, 81.03)),
("2604","Pulkovo 1942 / 3-degree Gauss-Kruger CM 84E",(82.5, 45.11, 85.5, 77.56)),
("2605","Pulkovo 1942 / 3-degree Gauss-Kruger CM 87E",(85.5, 47.05, 88.5, 77.16)),
("2606","Pulkovo 1942 / 3-degree Gauss-Kruger CM 90E",(88.5, 49.44, 91.5, 81.28)),
("2607","Pulkovo 1942 / 3-degree Gauss-Kruger CM 93E",(91.5, 50.16, 94.5, 81.26)),
("2608","Pulkovo 1942 / 3-degree Gauss-Kruger CM 96E",(94.5, 49.73, 97.5, 81.35)),
("2609","Pulkovo 1942 / 3-degree Gauss-Kruger CM 99E",(97.5, 49.79, 100.5, 80.9)),
("2610","Pulkovo 1942 / 3-degree Gauss-Kruger CM 102E",(100.5, 50.17, 103.5, 79.71)),
("2611","Pulkovo 1942 / 3-degree Gauss-Kruger CM 105E",(103.5, 50.13, 106.5, 79.21)),
("2612","Pulkovo 1942 / 3-degree Gauss-Kruger CM 108E",(106.5, 49.25, 109.5, 78.4)),
("2613","Pulkovo 1942 / 3-degree Gauss-Kruger CM 111E",(109.5, 49.14, 112.5, 76.81)),
("2614","Pulkovo 1942 / 3-degree Gauss-Kruger CM 114E",(112.5, 49.49, 115.5, 76.7)),
("2615","Pulkovo 1942 / 3-degree Gauss-Kruger CM 117E",(115.5, 49.51, 118.5, 74.43)),
("2616","Pulkovo 1942 / 3-degree Gauss-Kruger CM 120E",(118.5, 49.87, 121.5, 73.63)),
("2617","Pulkovo 1942 / 3-degree Gauss-Kruger CM 123E",(121.5, 53.18, 124.5, 74.0)),
("2618","Pulkovo 1942 / 3-degree Gauss-Kruger CM 126E",(124.5, 49.88, 127.5, 74.0)),
("2619","Pulkovo 1942 / 3-degree Gauss-Kruger CM 129E",(127.5, 42.67, 130.5, 73.59)),
("2620","Pulkovo 1942 / 3-degree Gauss-Kruger CM 132E",(130.5, 42.25, 133.5, 71.99)),
("2621","Pulkovo 1942 / 3-degree Gauss-Kruger CM 135E",(133.5, 42.74, 136.5, 75.9)),
("2622","Pulkovo 1942 / 3-degree Gauss-Kruger CM 138E",(136.5, 44.76, 139.5, 76.27)),
("2623","Pulkovo 1942 / 3-degree Gauss-Kruger CM 141E",(139.5, 45.84, 142.5, 76.23)),
("2624","Pulkovo 1942 / 3-degree Gauss-Kruger CM 144E",(142.5, 43.61, 145.5, 75.98)),
("2625","Pulkovo 1942 / 3-degree Gauss-Kruger CM 147E",(145.5, 43.6, 148.5, 76.76)),
("2626","Pulkovo 1942 / 3-degree Gauss-Kruger CM 150E",(148.5, 45.21, 151.5, 76.82)),
("2627","Pulkovo 1942 / 3-degree Gauss-Kruger CM 153E",(151.5, 46.72, 154.5, 76.26)),
("2628","Pulkovo 1942 / 3-degree Gauss-Kruger CM 156E",(154.5, 49.02, 157.5, 77.2)),
("2629","Pulkovo 1942 / 3-degree Gauss-Kruger CM 159E",(157.5, 51.36, 160.5, 71.12)),
("2630","Pulkovo 1942 / 3-degree Gauss-Kruger CM 162E",(160.5, 54.34, 163.5, 70.98)),
("2631","Pulkovo 1942 / 3-degree Gauss-Kruger CM 165E",(163.5, 54.69, 166.5, 69.82)),
("2632","Pulkovo 1942 / 3-degree Gauss-Kruger CM 168E",(166.5, 54.45, 169.5, 70.07)),
("2633","Pulkovo 1942 / 3-degree Gauss-Kruger CM 171E",(169.5, 59.86, 172.5, 70.19)),
("2634","Pulkovo 1942 / 3-degree Gauss-Kruger CM 174E",(172.5, 60.99, 175.5, 70.02)),
("2635","Pulkovo 1942 / 3-degree Gauss-Kruger CM 177E",(175.5, 62.09, 178.5, 71.1)),
("2636","Pulkovo 1942 / 3-degree Gauss-Kruger CM 180E",(178.5, 62.24, -178.5, 71.65)),
("2637","Pulkovo 1942 / 3-degree Gauss-Kruger CM 177W",(-178.5, 64.74, -175.5, 71.61)),
("2638","Pulkovo 1942 / 3-degree Gauss-Kruger CM 174W",(-175.5, 64.2, -172.5, 67.78)),
("2639","Pulkovo 1942 / 3-degree Gauss-Kruger CM 171W",(-172.5, 64.35, -169.57, 67.06)),
("2640","Pulkovo 1942 / 3-degree Gauss-Kruger CM 168W",(-169.22, 65.7, -168.97, 65.86)),
("2641","Pulkovo 1995 / 3-degree Gauss-Kruger zone 7",(19.57, 54.32, 22.5, 55.32)),
("2642","Pulkovo 1995 / 3-degree Gauss-Kruger zone 8",(22.5, 54.34, 22.87, 55.07)),
("2643","Pulkovo 1995 / 3-degree Gauss-Kruger zone 9",(26.61, 56.05, 28.51, 68.93)),
("2644","Pulkovo 1995 / 3-degree Gauss-Kruger zone 10",(28.5, 52.85, 31.5, 69.85)),
("2645","Pulkovo 1995 / 3-degree Gauss-Kruger zone 11",(31.5, 51.24, 34.5, 70.02)),
("2646","Pulkovo 1995 / 3-degree Gauss-Kruger zone 12",(34.5, 44.61, 37.51, 69.39)),
("2647","Pulkovo 1995 / 3-degree Gauss-Kruger zone 13",(37.5, 43.33, 40.5, 68.8)),
("2648","Pulkovo 1995 / 3-degree Gauss-Kruger zone 14",(40.5, 42.87, 43.5, 68.74)),
("2649","Pulkovo 1995 / 3-degree Gauss-Kruger zone 15",(43.5, 41.89, 46.5, 80.8)),
("2650","Pulkovo 1995 / 3-degree Gauss-Kruger zone 16",(46.5, 41.19, 49.5, 80.91)),
("2651","Pulkovo 1995 / 3-degree Gauss-Kruger zone 17",(49.5, 42.36, 52.5, 81.22)),
("2652","Pulkovo 1995 / 3-degree Gauss-Kruger zone 18",(52.5, 50.52, 55.5, 81.41)),
("2653","Pulkovo 1995 / 3-degree Gauss-Kruger zone 19",(55.5, 50.53, 58.5, 81.89)),
("2654","Pulkovo 1995 / 3-degree Gauss-Kruger zone 20",(58.5, 50.47, 61.5, 81.91)),
("2655","Pulkovo 1995 / 3-degree Gauss-Kruger zone 21",(61.5, 51.03, 64.5, 81.77)),
("2656","Pulkovo 1995 / 3-degree Gauss-Kruger zone 22",(64.5, 54.31, 67.5, 81.25)),
("2657","Pulkovo 1995 / 3-degree Gauss-Kruger zone 23",(67.5, 54.85, 70.5, 77.07)),
("2658","Pulkovo 1995 / 3-degree Gauss-Kruger zone 24",(70.5, 53.43, 73.5, 73.57)),
("2659","Pulkovo 1995 / 3-degree Gauss-Kruger zone 25",(73.5, 53.47, 76.5, 79.71)),
("2660","Pulkovo 1995 / 3-degree Gauss-Kruger zone 26",(76.5, 51.49, 79.5, 81.03)),
("2661","Pulkovo 1995 / 3-degree Gauss-Kruger zone 27",(79.5, 50.7, 82.5, 81.03)),
("2662","Pulkovo 1995 / 3-degree Gauss-Kruger zone 28",(82.5, 49.58, 85.5, 77.56)),
("2663","Pulkovo 1995 / 3-degree Gauss-Kruger zone 29",(85.5, 49.07, 88.5, 77.16)),
("2664","Pulkovo 1995 / 3-degree Gauss-Kruger zone 30",(88.5, 49.44, 91.5, 81.28)),
("2665","Pulkovo 1995 / 3-degree Gauss-Kruger zone 31",(91.5, 50.16, 94.5, 81.26)),
("2666","Pulkovo 1995 / 3-degree Gauss-Kruger zone 32",(94.5, 49.73, 97.5, 81.35)),
("2667","Pulkovo 1995 / 3-degree Gauss-Kruger zone 33",(97.5, 49.79, 100.5, 80.9)),
("2668","Pulkovo 1995 / 3-degree Gauss-Kruger zone 34",(100.5, 50.17, 103.5, 79.71)),
("2669","Pulkovo 1995 / 3-degree Gauss-Kruger zone 35",(103.5, 50.13, 106.5, 79.21)),
("2670","Pulkovo 1995 / 3-degree Gauss-Kruger zone 36",(106.5, 49.25, 109.5, 78.4)),
("2671","Pulkovo 1995 / 3-degree Gauss-Kruger zone 37",(109.5, 49.14, 112.5, 76.81)),
("2672","Pulkovo 1995 / 3-degree Gauss-Kruger zone 38",(112.5, 49.49, 115.5, 76.7)),
("2673","Pulkovo 1995 / 3-degree Gauss-Kruger zone 39",(115.5, 49.51, 118.5, 74.43)),
("2674","Pulkovo 1995 / 3-degree Gauss-Kruger zone 40",(118.5, 49.87, 121.5, 73.63)),
("2675","Pulkovo 1995 / 3-degree Gauss-Kruger zone 41",(121.5, 53.18, 124.5, 74.0)),
("2676","Pulkovo 1995 / 3-degree Gauss-Kruger zone 42",(124.5, 49.88, 127.5, 74.0)),
("2677","Pulkovo 1995 / 3-degree Gauss-Kruger zone 43",(127.5, 42.67, 130.5, 73.59)),
("2678","Pulkovo 1995 / 3-degree Gauss-Kruger zone 44",(130.5, 42.25, 133.5, 71.99)),
("2679","Pulkovo 1995 / 3-degree Gauss-Kruger zone 45",(133.5, 42.74, 136.5, 75.9)),
("2680","Pulkovo 1995 / 3-degree Gauss-Kruger zone 46",(136.5, 44.76, 139.5, 76.27)),
("2681","Pulkovo 1995 / 3-degree Gauss-Kruger zone 47",(139.5, 45.84, 142.5, 76.23)),
("2682","Pulkovo 1995 / 3-degree Gauss-Kruger zone 48",(142.5, 43.61, 145.5, 75.98)),
("2683","Pulkovo 1995 / 3-degree Gauss-Kruger zone 49",(145.5, 43.6, 148.5, 76.76)),
("2684","Pulkovo 1995 / 3-degree Gauss-Kruger zone 50",(148.5, 45.21, 151.5, 76.82)),
("2685","Pulkovo 1995 / 3-degree Gauss-Kruger zone 51",(151.5, 46.72, 154.5, 76.26)),
("2686","Pulkovo 1995 / 3-degree Gauss-Kruger zone 52",(154.5, 49.02, 157.5, 77.2)),
("2687","Pulkovo 1995 / 3-degree Gauss-Kruger zone 53",(157.5, 51.36, 160.5, 71.12)),
("2688","Pulkovo 1995 / 3-degree Gauss-Kruger zone 54",(160.5, 54.34, 163.5, 70.98)),
("2689","Pulkovo 1995 / 3-degree Gauss-Kruger zone 55",(163.5, 54.69, 166.5, 69.82)),
("2690","Pulkovo 1995 / 3-degree Gauss-Kruger zone 56",(166.5, 54.45, 169.5, 70.07)),
("2691","Pulkovo 1995 / 3-degree Gauss-Kruger zone 57",(169.5, 59.86, 172.5, 70.19)),
("2692","Pulkovo 1995 / 3-degree Gauss-Kruger zone 58",(172.5, 60.99, 175.5, 70.02)),
("2693","Pulkovo 1995 / 3-degree Gauss-Kruger zone 59",(175.5, 62.09, 178.5, 71.1)),
("2694","Pulkovo 1995 / 3-degree Gauss-Kruger zone 60",(178.5, 62.24, -178.5, 71.65)),
("2695","Pulkovo 1995 / 3-degree Gauss-Kruger zone 61",(-178.5, 64.74, -175.5, 71.61)),
("2696","Pulkovo 1995 / 3-degree Gauss-Kruger zone 62",(-175.5, 64.2, -172.5, 67.78)),
("2697","Pulkovo 1995 / 3-degree Gauss-Kruger zone 63",(-172.5, 64.35, -169.57, 67.06)),
("2698","Pulkovo 1995 / 3-degree Gauss-Kruger zone 64",(-169.22, 65.7, -168.97, 65.86)),
("2699","Pulkovo 1995 / 3-degree Gauss-Kruger CM 21E",(19.57, 54.32, 22.5, 55.32)),
("2700","Pulkovo 1995 / 3-degree Gauss-Kruger CM 24E",(22.5, 54.34, 22.87, 55.07)),
("2701","Pulkovo 1995 / 3-degree Gauss-Kruger CM 27E",(26.61, 56.05, 28.51, 68.93)),
("2702","Pulkovo 1995 / 3-degree Gauss-Kruger CM 30E",(28.5, 52.85, 31.5, 69.85)),
("2703","Pulkovo 1995 / 3-degree Gauss-Kruger CM 33E",(31.5, 51.24, 34.5, 70.02)),
("2704","Pulkovo 1995 / 3-degree Gauss-Kruger CM 36E",(34.5, 44.61, 37.51, 69.39)),
("2705","Pulkovo 1995 / 3-degree Gauss-Kruger CM 39E",(37.5, 43.33, 40.5, 68.8)),
("2706","Pulkovo 1995 / 3-degree Gauss-Kruger CM 42E",(40.5, 42.87, 43.5, 68.74)),
("2707","Pulkovo 1995 / 3-degree Gauss-Kruger CM 45E",(43.5, 41.89, 46.5, 80.8)),
("2708","Pulkovo 1995 / 3-degree Gauss-Kruger CM 48E",(46.5, 41.19, 49.5, 80.91)),
("2709","Pulkovo 1995 / 3-degree Gauss-Kruger CM 51E",(49.5, 42.36, 52.5, 81.22)),
("2710","Pulkovo 1995 / 3-degree Gauss-Kruger CM 54E",(52.5, 50.52, 55.5, 81.41)),
("2711","Pulkovo 1995 / 3-degree Gauss-Kruger CM 57E",(55.5, 50.53, 58.5, 81.89)),
("2712","Pulkovo 1995 / 3-degree Gauss-Kruger CM 60E",(58.5, 50.47, 61.5, 81.91)),
("2713","Pulkovo 1995 / 3-degree Gauss-Kruger CM 63E",(61.5, 51.03, 64.5, 81.77)),
("2714","Pulkovo 1995 / 3-degree Gauss-Kruger CM 66E",(64.5, 54.31, 67.5, 81.25)),
("2715","Pulkovo 1995 / 3-degree Gauss-Kruger CM 69E",(67.5, 54.85, 70.5, 77.07)),
("2716","Pulkovo 1995 / 3-degree Gauss-Kruger CM 72E",(70.5, 53.43, 73.5, 73.57)),
("2717","Pulkovo 1995 / 3-degree Gauss-Kruger CM 75E",(73.5, 53.47, 76.5, 79.71)),
("2718","Pulkovo 1995 / 3-degree Gauss-Kruger CM 78E",(76.5, 51.49, 79.5, 81.03)),
("2719","Pulkovo 1995 / 3-degree Gauss-Kruger CM 81E",(79.5, 50.7, 82.5, 81.03)),
("2720","Pulkovo 1995 / 3-degree Gauss-Kruger CM 84E",(82.5, 49.58, 85.5, 77.56)),
("2721","Pulkovo 1995 / 3-degree Gauss-Kruger CM 87E",(85.5, 49.07, 88.5, 77.16)),
("2722","Pulkovo 1995 / 3-degree Gauss-Kruger CM 90E",(88.5, 49.44, 91.5, 81.28)),
("2723","Pulkovo 1995 / 3-degree Gauss-Kruger CM 93E",(91.5, 50.16, 94.5, 81.26)),
("2724","Pulkovo 1995 / 3-degree Gauss-Kruger CM 96E",(94.5, 49.73, 97.5, 81.35)),
("2725","Pulkovo 1995 / 3-degree Gauss-Kruger CM 99E",(97.5, 49.79, 100.5, 80.9)),
("2726","Pulkovo 1995 / 3-degree Gauss-Kruger CM 102E",(100.5, 50.17, 103.5, 79.71)),
("2727","Pulkovo 1995 / 3-degree Gauss-Kruger CM 105E",(103.5, 50.13, 106.5, 79.21)),
("2728","Pulkovo 1995 / 3-degree Gauss-Kruger CM 108E",(106.5, 49.25, 109.5, 78.4)),
("2729","Pulkovo 1995 / 3-degree Gauss-Kruger CM 111E",(109.5, 49.14, 112.5, 76.81)),
("2730","Pulkovo 1995 / 3-degree Gauss-Kruger CM 114E",(112.5, 49.49, 115.5, 76.7)),
("2731","Pulkovo 1995 / 3-degree Gauss-Kruger CM 117E",(115.5, 49.51, 118.5, 74.43)),
("2732","Pulkovo 1995 / 3-degree Gauss-Kruger CM 120E",(118.5, 49.87, 121.5, 73.63)),
("2733","Pulkovo 1995 / 3-degree Gauss-Kruger CM 123E",(121.5, 53.18, 124.5, 74.0)),
("2734","Pulkovo 1995 / 3-degree Gauss-Kruger CM 126E",(124.5, 49.88, 127.5, 74.0)),
("2735","Pulkovo 1995 / 3-degree Gauss-Kruger CM 129E",(127.5, 42.67, 130.5, 73.59)),
("2736","Tete / UTM zone 36S",(30.21, -26.87, 36.0, -11.41)),
("2737","Tete / UTM zone 37S",(35.99, -18.98, 40.9, -10.42)),
("2738","Pulkovo 1995 / 3-degree Gauss-Kruger CM 132E",(130.5, 42.25, 133.5, 71.99)),
("2739","Pulkovo 1995 / 3-degree Gauss-Kruger CM 135E",(133.5, 42.74, 136.5, 75.9)),
("2740","Pulkovo 1995 / 3-degree Gauss-Kruger CM 138E",(136.5, 44.76, 139.5, 76.27)),
("2741","Pulkovo 1995 / 3-degree Gauss-Kruger CM 141E",(139.5, 45.84, 142.5, 76.23)),
("2742","Pulkovo 1995 / 3-degree Gauss-Kruger CM 144E",(142.5, 43.61, 145.5, 75.98)),
("2743","Pulkovo 1995 / 3-degree Gauss-Kruger CM 147E",(145.5, 43.6, 148.5, 76.76)),
("2744","Pulkovo 1995 / 3-degree Gauss-Kruger CM 150E",(148.5, 45.21, 151.5, 76.82)),
("2745","Pulkovo 1995 / 3-degree Gauss-Kruger CM 153E",(151.5, 46.72, 154.5, 76.26)),
("2746","Pulkovo 1995 / 3-degree Gauss-Kruger CM 156E",(154.5, 49.02, 157.5, 77.2)),
("2747","Pulkovo 1995 / 3-degree Gauss-Kruger CM 159E",(157.5, 51.36, 160.5, 71.12)),
("2748","Pulkovo 1995 / 3-degree Gauss-Kruger CM 162E",(160.5, 54.34, 163.5, 70.98)),
("2749","Pulkovo 1995 / 3-degree Gauss-Kruger CM 165E",(163.5, 54.69, 166.5, 69.82)),
("2750","Pulkovo 1995 / 3-degree Gauss-Kruger CM 168E",(166.5, 54.45, 169.5, 70.07)),
("2751","Pulkovo 1995 / 3-degree Gauss-Kruger CM 171E",(169.5, 59.86, 172.5, 70.19)),
("2752","Pulkovo 1995 / 3-degree Gauss-Kruger CM 174E",(172.5, 60.99, 175.5, 70.02)),
("2753","Pulkovo 1995 / 3-degree Gauss-Kruger CM 177E",(175.5, 62.09, 178.5, 71.1)),
("2754","Pulkovo 1995 / 3-degree Gauss-Kruger CM 180E",(178.5, 62.24, -178.5, 71.65)),
("2755","Pulkovo 1995 / 3-degree Gauss-Kruger CM 177W",(-178.5, 64.74, -175.5, 71.61)),
("2756","Pulkovo 1995 / 3-degree Gauss-Kruger CM 174W",(-175.5, 64.2, -172.5, 67.78)),
("2757","Pulkovo 1995 / 3-degree Gauss-Kruger CM 171W",(-172.5, 64.35, -169.57, 67.06)),
("2758","Pulkovo 1995 / 3-degree Gauss-Kruger CM 168W",(-169.22, 65.7, -168.97, 65.86)),
("2759","NAD83(HARN) / Alabama East",(-86.79, 30.99, -84.89, 35.0)),
("2760","NAD83(HARN) / Alabama West",(-88.48, 30.14, -86.3, 35.02)),
("2761","NAD83(HARN) / Arizona East",(-111.71, 31.33, -109.04, 37.01)),
("2762","NAD83(HARN) / Arizona Central",(-113.35, 31.33, -110.44, 37.01)),
("2763","NAD83(HARN) / Arizona West",(-114.81, 32.05, -112.52, 37.0)),
("2764","NAD83(HARN) / Arkansas North",(-94.62, 34.67, -89.64, 36.5)),
("2765","NAD83(HARN) / Arkansas South",(-94.48, 33.01, -90.4, 35.1)),
("2766","NAD83(HARN) / California zone 1",(-124.45, 39.59, -119.99, 42.01)),
("2767","NAD83(HARN) / California zone 2",(-124.06, 38.02, -119.54, 40.16)),
("2768","NAD83(HARN) / California zone 3",(-123.02, 36.73, -117.83, 38.71)),
("2769","NAD83(HARN) / California zone 4",(-122.01, 35.78, -115.62, 37.58)),
("2770","NAD83(HARN) / California zone 5",(-121.42, 32.76, -114.12, 35.81)),
("2771","NAD83(HARN) / California zone 6",(-118.15, 32.53, -114.42, 34.08)),
("2772","NAD83(HARN) / Colorado North",(-109.06, 39.56, -102.04, 41.01)),
("2773","NAD83(HARN) / Colorado Central",(-109.06, 38.14, -102.04, 40.09)),
("2774","NAD83(HARN) / Colorado South",(-109.06, 36.98, -102.04, 38.68)),
("2775","NAD83(HARN) / Connecticut",(-73.73, 40.98, -71.78, 42.05)),
("2776","NAD83(HARN) / Delaware",(-75.8, 38.44, -74.97, 39.85)),
("2777","NAD83(HARN) / Florida East",(-82.33, 24.41, -79.97, 30.83)),
("2778","NAD83(HARN) / Florida West",(-83.34, 26.27, -81.13, 29.6)),
("2779","NAD83(HARN) / Florida North",(-87.63, 29.21, -82.04, 31.01)),
("2780","NAD83(HARN) / Georgia East",(-83.47, 30.36, -80.77, 34.68)),
("2781","NAD83(HARN) / Georgia West",(-85.61, 30.62, -82.99, 35.01)),
("2782","NAD83(HARN) / Hawaii zone 1",(-156.1, 18.87, -154.74, 20.33)),
("2783","NAD83(HARN) / Hawaii zone 2",(-157.36, 20.45, -155.93, 21.26)),
("2784","NAD83(HARN) / Hawaii zone 3",(-158.33, 21.2, -157.61, 21.75)),
("2785","NAD83(HARN) / Hawaii zone 4",(-159.85, 21.81, -159.23, 22.29)),
("2786","NAD83(HARN) / Hawaii zone 5",(-160.3, 21.73, -159.99, 22.07)),
("2787","NAD83(HARN) / Idaho East",(-113.24, 41.99, -111.04, 44.75)),
("2788","NAD83(HARN) / Idaho Central",(-115.3, 41.99, -112.68, 45.7)),
("2789","NAD83(HARN) / Idaho West",(-117.24, 41.99, -114.32, 49.01)),
("2790","NAD83(HARN) / Illinois East",(-89.28, 37.06, -87.02, 42.5)),
("2791","NAD83(HARN) / Illinois West",(-91.52, 36.98, -88.93, 42.51)),
("2792","NAD83(HARN) / Indiana East",(-86.59, 37.95, -84.78, 41.77)),
("2793","NAD83(HARN) / Indiana West",(-88.06, 37.77, -86.24, 41.77)),
("2794","NAD83(HARN) / Iowa North",(-96.65, 41.85, -90.15, 43.51)),
("2795","NAD83(HARN) / Iowa South",(-96.14, 40.37, -90.14, 42.04)),
("2796","NAD83(HARN) / Kansas North",(-102.06, 38.52, -94.58, 40.01)),
("2797","NAD83(HARN) / Kansas South",(-102.05, 36.99, -94.6, 38.88)),
("2798","NAD83(HARN) / Kentucky North",(-85.96, 37.71, -82.47, 39.15)),
("2799","NAD83(HARN) / Kentucky South",(-89.57, 36.49, -81.95, 38.17)),
("2800","NAD83(HARN) / Louisiana North",(-94.05, 30.85, -90.86, 33.03)),
("2801","NAD83(HARN) / Louisiana South",(-93.94, 28.85, -88.75, 31.07)),
("2802","NAD83(HARN) / Maine East",(-70.03, 43.88, -66.91, 47.47)),
("2803","NAD83(HARN) / Maine West",(-71.09, 43.04, -69.26, 46.58)),
("2804","NAD83(HARN) / Maryland",(-79.49, 37.97, -74.97, 39.73)),
("2805","NAD83(HARN) / Massachusetts Mainland",(-73.5, 41.46, -69.86, 42.89)),
("2806","NAD83(HARN) / Massachusetts Island",(-70.91, 41.19, -69.89, 41.51)),
("2807","NAD83(HARN) / Michigan North",(-90.42, 45.08, -83.44, 48.32)),
("2808","NAD83(HARN) / Michigan Central",(-87.06, 43.8, -82.27, 45.92)),
("2809","NAD83(HARN) / Michigan South",(-87.2, 41.69, -82.13, 44.22)),
("2810","NAD83(HARN) / Minnesota North",(-97.22, 46.64, -89.49, 49.38)),
("2811","NAD83(HARN) / Minnesota Central",(-96.86, 45.28, -92.29, 47.48)),
("2812","NAD83(HARN) / Minnesota South",(-96.85, 43.49, -91.21, 45.59)),
("2813","NAD83(HARN) / Mississippi East",(-89.97, 30.01, -88.09, 35.01)),
("2814","NAD83(HARN) / Mississippi West",(-91.65, 31.0, -89.37, 35.01)),
("2815","NAD83(HARN) / Missouri East",(-91.97, 35.98, -89.1, 40.61)),
("2816","NAD83(HARN) / Missouri Central",(-93.79, 36.48, -91.41, 40.61)),
("2817","NAD83(HARN) / Missouri West",(-95.77, 36.48, -93.48, 40.59)),
("2818","NAD83(HARN) / Montana",(-116.07, 44.35, -104.04, 49.01)),
("2819","NAD83(HARN) / Nebraska",(-104.06, 39.99, -95.3, 43.01)),
("2820","NAD83(HARN) / Nevada East",(-117.01, 34.99, -114.03, 42.0)),
("2821","NAD83(HARN) / Nevada Central",(-118.19, 36.0, -114.99, 41.0)),
("2822","NAD83(HARN) / Nevada West",(-120.0, 36.95, -116.99, 42.0)),
("2823","NAD83(HARN) / New Hampshire",(-72.56, 42.69, -70.63, 45.31)),
("2824","NAD83(HARN) / New Jersey",(-75.6, 38.87, -73.88, 41.36)),
("2825","NAD83(HARN) / New Mexico East",(-105.72, 32.0, -102.99, 37.0)),
("2826","NAD83(HARN) / New Mexico Central",(-107.73, 31.78, -104.84, 37.0)),
("2827","NAD83(HARN) / New Mexico West",(-109.06, 31.33, -106.32, 37.0)),
("2828","NAD83(HARN) / New York East",(-75.87, 40.88, -73.23, 45.02)),
("2829","NAD83(HARN) / New York Central",(-77.75, 41.99, -75.04, 44.41)),
("2830","NAD83(HARN) / New York West",(-79.77, 41.99, -77.36, 43.64)),
("2831","NAD83(HARN) / New York Long Island",(-74.26, 40.47, -71.8, 41.3)),
("2832","NAD83(HARN) / North Dakota North",(-104.07, 47.15, -96.83, 49.01)),
("2833","NAD83(HARN) / North Dakota South",(-104.05, 45.93, -96.55, 47.83)),
("2834","NAD83(HARN) / Ohio North",(-84.81, 40.1, -80.51, 42.33)),
("2835","NAD83(HARN) / Ohio South",(-84.83, 38.4, -80.7, 40.36)),
("2836","NAD83(HARN) / Oklahoma North",(-103.0, 35.27, -94.42, 37.01)),
("2837","NAD83(HARN) / Oklahoma South",(-100.0, 33.62, -94.42, 35.57)),
("2838","NAD83(HARN) / Oregon North",(-124.17, 43.95, -116.47, 46.26)),
("2839","NAD83(HARN) / Oregon South",(-124.6, 41.98, -116.9, 44.56)),
("2840","NAD83(HARN) / Rhode Island",(-71.85, 41.13, -71.08, 42.02)),
("2841","NAD83(HARN) / South Dakota North",(-104.07, 44.14, -96.45, 45.95)),
("2842","NAD83(HARN) / South Dakota South",(-104.06, 42.48, -96.43, 44.79)),
("2843","NAD83(HARN) / Tennessee",(-90.31, 34.98, -81.65, 36.68)),
("2844","NAD83(HARN) / Texas North",(-103.03, 34.3, -99.99, 36.5)),
("2845","NAD83(HARN) / Texas North Central",(-103.07, 31.72, -94.0, 34.58)),
("2846","NAD83(HARN) / Texas Central",(-106.66, 29.78, -93.5, 32.27)),
("2847","NAD83(HARN) / Texas South Central",(-105.0, 27.78, -93.76, 30.67)),
("2848","NAD83(HARN) / Texas South",(-100.2, 25.83, -96.85, 28.21)),
("2849","NAD83(HARN) / Utah North",(-114.04, 40.55, -109.04, 42.01)),
("2850","NAD83(HARN) / Utah Central",(-114.05, 38.49, -109.04, 41.08)),
("2851","NAD83(HARN) / Utah South",(-114.05, 36.99, -109.04, 38.58)),
("2852","NAD83(HARN) / Vermont",(-73.44, 42.72, -71.5, 45.03)),
("2853","NAD83(HARN) / Virginia North",(-80.06, 37.77, -76.51, 39.46)),
("2854","NAD83(HARN) / Virginia South",(-83.68, 36.54, -75.31, 38.28)),
("2855","NAD83(HARN) / Washington North",(-124.79, 47.08, -117.02, 49.05)),
("2856","NAD83(HARN) / Washington South",(-124.4, 45.54, -116.91, 47.61)),
("2857","NAD83(HARN) / West Virginia North",(-81.76, 38.76, -77.72, 40.64)),
("2858","NAD83(HARN) / West Virginia South",(-82.65, 37.2, -79.05, 39.17)),
("2859","NAD83(HARN) / Wisconsin North",(-92.89, 45.37, -88.05, 47.31)),
("2860","NAD83(HARN) / Wisconsin Central",(-92.89, 43.98, -86.25, 45.8)),
("2861","NAD83(HARN) / Wisconsin South",(-91.43, 42.48, -86.95, 44.33)),
("2862","NAD83(HARN) / Wyoming East",(-106.33, 40.99, -104.05, 45.01)),
("2863","NAD83(HARN) / Wyoming East Central",(-108.63, 40.99, -106.0, 45.01)),
("2864","NAD83(HARN) / Wyoming West Central",(-111.06, 40.99, -107.5, 45.01)),
("2865","NAD83(HARN) / Wyoming West",(-111.06, 40.99, -109.04, 44.67)),
("2866","NAD83(HARN) / Puerto Rico and Virgin Is.",(-67.97, 17.62, -64.51, 18.57)),
("2867","NAD83(HARN) / Arizona East (ft)",(-111.71, 31.33, -109.04, 37.01)),
("2868","NAD83(HARN) / Arizona Central (ft)",(-113.35, 31.33, -110.44, 37.01)),
("2869","NAD83(HARN) / Arizona West (ft)",(-114.81, 32.05, -112.52, 37.0)),
("2870","NAD83(HARN) / California zone 1 (ftUS)",(-124.45, 39.59, -119.99, 42.01)),
("2871","NAD83(HARN) / California zone 2 (ftUS)",(-124.06, 38.02, -119.54, 40.16)),
("2872","NAD83(HARN) / California zone 3 (ftUS)",(-123.02, 36.73, -117.83, 38.71)),
("2873","NAD83(HARN) / California zone 4 (ftUS)",(-122.01, 35.78, -115.62, 37.58)),
("2874","NAD83(HARN) / California zone 5 (ftUS)",(-121.42, 32.76, -114.12, 35.81)),
("2875","NAD83(HARN) / California zone 6 (ftUS)",(-118.15, 32.53, -114.42, 34.08)),
("2876","NAD83(HARN) / Colorado North (ftUS)",(-109.06, 39.56, -102.04, 41.01)),
("2877","NAD83(HARN) / Colorado Central (ftUS)",(-109.06, 38.14, -102.04, 40.09)),
("2878","NAD83(HARN) / Colorado South (ftUS)",(-109.06, 36.98, -102.04, 38.68)),
("2879","NAD83(HARN) / Connecticut (ftUS)",(-73.73, 40.98, -71.78, 42.05)),
("2880","NAD83(HARN) / Delaware (ftUS)",(-75.8, 38.44, -74.97, 39.85)),
("2881","NAD83(HARN) / Florida East (ftUS)",(-82.33, 24.41, -79.97, 30.83)),
("2882","NAD83(HARN) / Florida West (ftUS)",(-83.34, 26.27, -81.13, 29.6)),
("2883","NAD83(HARN) / Florida North (ftUS)",(-87.63, 29.21, -82.04, 31.01)),
("2884","NAD83(HARN) / Georgia East (ftUS)",(-83.47, 30.36, -80.77, 34.68)),
("2885","NAD83(HARN) / Georgia West (ftUS)",(-85.61, 30.62, -82.99, 35.01)),
("2886","NAD83(HARN) / Idaho East (ftUS)",(-113.24, 41.99, -111.04, 44.75)),
("2887","NAD83(HARN) / Idaho Central (ftUS)",(-115.3, 41.99, -112.68, 45.7)),
("2888","NAD83(HARN) / Idaho West (ftUS)",(-117.24, 41.99, -114.32, 49.01)),
("2889","NAD83(HARN) / Indiana East (ftUS)",(-86.59, 37.95, -84.78, 41.77)),
("2890","NAD83(HARN) / Indiana West (ftUS)",(-88.06, 37.77, -86.24, 41.77)),
("2891","NAD83(HARN) / Kentucky North (ftUS)",(-85.96, 37.71, -82.47, 39.15)),
("2892","NAD83(HARN) / Kentucky South (ftUS)",(-89.57, 36.49, -81.95, 38.17)),
("2893","NAD83(HARN) / Maryland (ftUS)",(-79.49, 37.97, -74.97, 39.73)),
("2894","NAD83(HARN) / Massachusetts Mainland (ftUS)",(-73.5, 41.46, -69.86, 42.89)),
("2895","NAD83(HARN) / Massachusetts Island (ftUS)",(-70.91, 41.19, -69.89, 41.51)),
("2896","NAD83(HARN) / Michigan North (ft)",(-90.42, 45.08, -83.44, 48.32)),
("2897","NAD83(HARN) / Michigan Central (ft)",(-87.06, 43.8, -82.27, 45.92)),
("2898","NAD83(HARN) / Michigan South (ft)",(-87.2, 41.69, -82.13, 44.22)),
("2899","NAD83(HARN) / Mississippi East (ftUS)",(-89.97, 30.01, -88.09, 35.01)),
("2900","NAD83(HARN) / Mississippi West (ftUS)",(-91.65, 31.0, -89.37, 35.01)),
("2901","NAD83(HARN) / Montana (ft)",(-116.07, 44.35, -104.04, 49.01)),
("2902","NAD83(HARN) / New Mexico East (ftUS)",(-105.72, 32.0, -102.99, 37.0)),
("2903","NAD83(HARN) / New Mexico Central (ftUS)",(-107.73, 31.78, -104.84, 37.0)),
("2904","NAD83(HARN) / New Mexico West (ftUS)",(-109.06, 31.33, -106.32, 37.0)),
("2905","NAD83(HARN) / New York East (ftUS)",(-75.87, 40.88, -73.23, 45.02)),
("2906","NAD83(HARN) / New York Central (ftUS)",(-77.75, 41.99, -75.04, 44.41)),
("2907","NAD83(HARN) / New York West (ftUS)",(-79.77, 41.99, -77.36, 43.64)),
("2908","NAD83(HARN) / New York Long Island (ftUS)",(-74.26, 40.47, -71.8, 41.3)),
("2909","NAD83(HARN) / North Dakota North (ft)",(-104.07, 47.15, -96.83, 49.01)),
("2910","NAD83(HARN) / North Dakota South (ft)",(-104.05, 45.93, -96.55, 47.83)),
("2911","NAD83(HARN) / Oklahoma North (ftUS)",(-103.0, 35.27, -94.42, 37.01)),
("2912","NAD83(HARN) / Oklahoma South (ftUS)",(-100.0, 33.62, -94.42, 35.57)),
("2913","NAD83(HARN) / Oregon North (ft)",(-124.17, 43.95, -116.47, 46.26)),
("2914","NAD83(HARN) / Oregon South (ft)",(-124.6, 41.98, -116.9, 44.56)),
("2915","NAD83(HARN) / Tennessee (ftUS)",(-90.31, 34.98, -81.65, 36.68)),
("2916","NAD83(HARN) / Texas North (ftUS)",(-103.03, 34.3, -99.99, 36.5)),
("2917","NAD83(HARN) / Texas North Central (ftUS)",(-103.07, 31.72, -94.0, 34.58)),
("2918","NAD83(HARN) / Texas Central (ftUS)",(-106.66, 29.78, -93.5, 32.27)),
("2919","NAD83(HARN) / Texas South Central (ftUS)",(-105.0, 27.78, -93.76, 30.67)),
("2920","NAD83(HARN) / Texas South (ftUS)",(-100.2, 25.83, -96.85, 28.21)),
("2921","NAD83(HARN) / Utah North (ft)",(-114.04, 40.55, -109.04, 42.01)),
("2922","NAD83(HARN) / Utah Central (ft)",(-114.05, 38.49, -109.04, 41.08)),
("2923","NAD83(HARN) / Utah South (ft)",(-114.05, 36.99, -109.04, 38.58)),
("2924","NAD83(HARN) / Virginia North (ftUS)",(-80.06, 37.77, -76.51, 39.46)),
("2925","NAD83(HARN) / Virginia South (ftUS)",(-83.68, 36.54, -75.31, 38.28)),
("2926","NAD83(HARN) / Washington North (ftUS)",(-124.79, 47.08, -117.02, 49.05)),
("2927","NAD83(HARN) / Washington South (ftUS)",(-124.4, 45.54, -116.91, 47.61)),
("2928","NAD83(HARN) / Wisconsin North (ftUS)",(-92.89, 45.37, -88.05, 47.31)),
("2929","NAD83(HARN) / Wisconsin Central (ftUS)",(-92.89, 43.98, -86.25, 45.8)),
("2930","NAD83(HARN) / Wisconsin South (ftUS)",(-91.43, 42.48, -86.95, 44.33)),
("2931","Beduaram / TM 13 NE",(7.81, 12.8, 14.9, 16.7)),
("2932","QND95 / Qatar National Grid",(50.69, 24.55, 51.68, 26.2)),
("2933","Segara / UTM zone 50S",(116.72, -1.24, 117.99, 0.0)),
("2934","Segara (Jakarta) / NEIEZ",(114.55, -4.24, 119.06, 4.29)),
("2935","Pulkovo 1942 / CS63 zone A1",(39.99, 41.37, 43.04, 43.59)),
("2936","Pulkovo 1942 / CS63 zone A2",(43.03, 38.87, 46.04, 43.05)),
("2937","Pulkovo 1942 / CS63 zone A3",(46.03, 38.38, 49.04, 42.1)),
("2938","Pulkovo 1942 / CS63 zone A4",(49.03, 37.89, 51.73, 42.59)),
("2939","Pulkovo 1942 / CS63 zone K2",(49.26, 41.15, 52.27, 51.77)),
("2940","Pulkovo 1942 / CS63 zone K3",(52.26, 41.46, 55.27, 51.79)),
("2941","Pulkovo 1942 / CS63 zone K4",(55.26, 41.26, 58.27, 51.14)),
("2942","Porto Santo / UTM zone 28N",(-17.31, 32.35, -16.23, 33.15)),
("2943","Selvagem Grande / UTM zone 28N",(-16.11, 29.98, -15.79, 30.21)),
("2944","NAD83(CSRS) / SCoPQ zone 2",(-57.0, 46.6, -54.0, 53.76)),
("2945","NAD83(CSRS) / MTM zone 3",(-60.0, 47.5, -57.1, 55.38)),
("2946","NAD83(CSRS) / MTM zone 4",(-63.0, 47.16, -60.0, 58.92)),
("2947","NAD83(CSRS) / MTM zone 5",(-66.0, 47.95, -63.0, 60.52)),
("2948","NAD83(CSRS) / MTM zone 6",(-69.0, 47.31, -66.0, 59.0)),
("2949","NAD83(CSRS) / MTM zone 7",(-72.0, 45.01, -69.0, 61.8)),
("2950","NAD83(CSRS) / MTM zone 8",(-75.0, 44.98, -72.0, 62.53)),
("2951","NAD83(CSRS) / MTM zone 9",(-78.0, 43.63, -75.0, 62.65)),
("2952","NAD83(CSRS) / MTM zone 10",(-81.0, 42.26, -78.0, 62.45)),
("2953","NAD83(CSRS) / New Brunswick Stereographic",(-69.05, 44.56, -63.7, 48.07)),
("2954","NAD83(CSRS) / Prince Edward Isl. Stereographic (NAD83)",(-64.49, 45.9, -61.9, 47.09)),
("2955","NAD83(CSRS) / UTM zone 11N",(-120.0, 48.99, -114.0, 83.5)),
("2956","NAD83(CSRS) / UTM zone 12N",(-114.0, 48.99, -108.0, 84.0)),
("2957","NAD83(CSRS) / UTM zone 13N",(-108.0, 48.99, -102.0, 84.0)),
("2958","NAD83(CSRS) / UTM zone 17N",(-84.0, 41.67, -78.0, 84.0)),
("2959","NAD83(CSRS) / UTM zone 18N",(-78.0, 43.63, -72.0, 84.0)),
("2960","NAD83(CSRS) / UTM zone 19N",(-72.0, 40.8, -66.0, 84.0)),
("2961","NAD83(CSRS) / UTM zone 20N",(-66.0, 40.04, -60.0, 84.0)),
("2962","NAD83(CSRS) / UTM zone 21N",(-60.0, 40.57, -54.0, 84.0)),
("2963","Lisbon 1890 (Lisbon) / Portugal Bonne",(-9.56, 36.95, -6.19, 42.16)),
("2964","NAD27 / Alaska Albers",(172.42, 51.3, -129.99, 71.4)),
("2965","NAD83 / Indiana East (ftUS)",(-86.59, 37.95, -84.78, 41.77)),
("2966","NAD83 / Indiana West (ftUS)",(-88.06, 37.77, -86.24, 41.77)),
("2967","NAD83(HARN) / Indiana East (ftUS)",(-86.59, 37.95, -84.78, 41.77)),
("2968","NAD83(HARN) / Indiana West (ftUS)",(-88.06, 37.77, -86.24, 41.77)),
("2969","Fort Marigot / UTM zone 20N",(-63.21, 17.82, -62.73, 18.17)),
("2970","Guadeloupe 1948 / UTM zone 20N",(-61.85, 15.8, -60.97, 16.55)),
("2971","CSG67 / UTM zone 22N",(-54.0, 3.43, -51.61, 5.81)),
("2972","RGFG95 / UTM zone 22N",(-54.0, 2.17, -49.45, 8.88)),
("2973","Martinique 1938 / UTM zone 20N",(-61.29, 14.35, -60.76, 14.93)),
("2975","RGR92 / UTM zone 40S",(54.0, -24.72, 58.24, -18.28)),
("2976","Tahiti 52 / UTM zone 6S",(-150.0, -17.93, -149.11, -17.41)),
("2977","Tahaa 54 / UTM zone 5S",(-151.91, -16.96, -150.89, -16.17)),
("2978","IGN72 Nuku Hiva / UTM zone 7S",(-140.31, -9.57, -139.44, -8.72)),
("2979","K0 1949 / UTM zone 42S",(68.69, -49.78, 70.62, -48.6)),
("2980","Combani 1950 / UTM zone 38S",(44.98, -13.05, 45.35, -12.61)),
("2981","IGN56 Lifou / UTM zone 58S",(166.98, -21.24, 167.52, -20.62)),
("2982","IGN72 Grand Terre / UTM zone 58S",(163.92, -22.45, 167.09, -20.03)),
("2983","ST87 Ouvea / UTM zone 58S",(166.44, -20.77, 166.71, -20.34)),
("2984","RGNC 1991 / Lambert New Caledonia",(156.25, -26.45, 174.28, -14.83)),
("2985","Petrels 1972 / Terre Adelie Polar Stereographic",(139.44, -66.78, 141.5, -66.1)),
("2986","Perroud 1950 / Terre Adelie Polar Stereographic",(136.0, -67.13, 142.0, -65.61)),
("2987","Saint Pierre et Miquelon 1950 / UTM zone 21N",(-56.48, 46.69, -56.07, 47.19)),
("2988","MOP78 / UTM zone 1S",(-176.25, -13.41, -176.07, -13.16)),
("2989","RRAF 1991 / UTM zone 20N",(-63.66, 14.08, -57.52, 18.54)),
("2990","Reunion 1947 / TM Reunion",(55.16, -21.42, 55.91, -20.81)),
("2991","NAD83 / Oregon LCC (m)",(-124.6, 41.98, -116.47, 46.26)),
("2992","NAD83 / Oregon GIC Lambert (ft)",(-124.6, 41.98, -116.47, 46.26)),
("2993","NAD83(HARN) / Oregon LCC (m)",(-124.6, 41.98, -116.47, 46.26)),
("2994","NAD83(HARN) / Oregon GIC Lambert (ft)",(-124.6, 41.98, -116.47, 46.26)),
("2995","IGN53 Mare / UTM zone 58S",(167.75, -21.71, 168.0, -21.32)),
("2996","ST84 Ile des Pins / UTM zone 58S",(167.36, -22.73, 167.61, -22.49)),
("2997","ST71 Belep / UTM zone 58S",(163.54, -19.85, 163.75, -19.5)),
("2998","NEA74 Noumea / UTM zone 58S",(166.35, -22.37, 166.54, -22.19)),
("2999","Grand Comoros / UTM zone 38S",(43.16, -11.99, 43.55, -11.31)),
("3000","Segara / NEIEZ",(114.55, -4.24, 119.06, 4.29)),
("3001","Batavia / NEIEZ",(95.16, -8.91, 115.77, 5.97)),
("3002","Makassar / NEIEZ",(118.71, -6.54, 120.78, -1.88)),
("3003","Monte Mario / Italy zone 1",(5.94, 36.53, 12.0, 47.04)),
("3004","Monte Mario / Italy zone 2",(12.0, 34.76, 18.99, 47.1)),
("3005","NAD83 / BC Albers",(-139.04, 48.25, -114.08, 60.01)),
("3006","SWEREF99 TM",(10.03, 54.96, 24.17, 69.07)),
("3007","SWEREF99 12 00",(10.93, 56.74, 13.11, 60.13)),
("3008","SWEREF99 13 30",(12.12, 55.28, 14.79, 62.28)),
("3009","SWEREF99 15 00",(13.54, 55.95, 16.15, 61.62)),
("3010","SWEREF99 16 30",(15.41, 56.15, 17.63, 62.26)),
("3011","SWEREF99 18 00",(17.08, 58.66, 19.61, 60.7)),
("3012","SWEREF99 14 15",(11.93, 61.55, 15.55, 64.39)),
("3013","SWEREF99 15 45",(13.66, 60.44, 17.01, 65.13)),
("3014","SWEREF99 17 15",(14.31, 62.12, 19.04, 67.19)),
("3015","SWEREF99 18 45",(17.18, 56.86, 20.22, 66.17)),
("3016","SWEREF99 20 15",(16.08, 63.45, 23.28, 69.07)),
("3017","SWEREF99 21 45",(19.63, 65.01, 22.91, 66.43)),
("3018","SWEREF99 23 15",(21.85, 65.49, 24.17, 68.14)),
("3019","RT90 7.5 gon V",(10.93, 57.29, 12.91, 59.73)),
("3020","RT90 5 gon V",(11.81, 55.28, 15.44, 64.39)),
("3021","RT90 2.5 gon V",(13.66, 55.95, 17.73, 67.18)),
("3022","RT90 0 gon",(16.08, 56.86, 20.22, 68.54)),
("3023","RT90 2.5 gon O",(18.4, 63.37, 22.2, 69.07)),
("3024","RT90 5 gon O",(21.34, 65.24, 24.17, 68.58)),
("3025","RT38 7.5 gon V",(10.93, 57.29, 12.91, 59.73)),
("3026","RT38 5 gon V",(11.81, 55.28, 15.44, 64.39)),
("3027","RT38 2.5 gon V",(13.66, 55.95, 17.73, 67.18)),
("3028","RT38 0 gon",(16.08, 56.86, 20.22, 68.54)),
("3029","RT38 2.5 gon O",(18.4, 63.37, 22.2, 69.07)),
("3030","RT38 5 gon O",(21.34, 65.24, 24.17, 68.58)),
("3031","WGS 84 / Antarctic Polar Stereographic",(-180.0, -90.0, 180.0, -60.0)),
("3032","WGS 84 / Australian Antarctic Polar Stereographic",(45.0, -90.0, 160.0, -60.0)),
("3033","WGS 84 / Australian Antarctic Lambert",(45.0, -80.0, 160.0, -60.0)),
("3034","ETRS89-extended / LCC Europe",(-35.58, 24.6, 44.83, 84.17)),
("3035","ETRS89-extended / LAEA Europe",(-35.58, 24.6, 44.83, 84.17)),
("3036","Moznet / UTM zone 36S",(30.21, -27.58, 36.0, -11.41)),
("3037","Moznet / UTM zone 37S",(36.0, -27.71, 42.0, -10.09)),
("3038","ETRS89 / TM26",(-30.0, 25.1, -24.0, 65.8)),
("3039","ETRS89 / TM27",(-24.0, 27.6, -18.0, 66.5)),
("3040","ETRS89 / UTM zone 28N (N-E)",(-16.1, 34.93, -11.99, 72.44)),
("3041","ETRS89 / UTM zone 29N (N-E)",(-12.0, 34.91, -6.0, 74.13)),
("3042","ETRS89 / UTM zone 30N (N-E)",(-6.0, 35.26, 0.0, 80.53)),
("3043","ETRS89 / UTM zone 31N (N-E)",(0.0, 37.0, 6.01, 82.41)),
("3044","ETRS89 / UTM zone 32N (N-E)",(6.0, 38.76, 12.0, 83.92)),
("3045","ETRS89 / UTM zone 33N (N-E)",(12.0, 46.4, 18.01, 84.01)),
("3046","ETRS89 / UTM zone 34N (N-E)",(18.0, 58.84, 24.0, 84.0)),
("3047","ETRS89 / UTM zone 35N (N-E)",(24.0, 59.64, 30.0, 84.01)),
("3048","ETRS89 / UTM zone 36N (N-E)",(30.0, 61.73, 36.01, 83.89)),
("3049","ETRS89 / UTM zone 37N (N-E)",(36.0, 71.27, 39.65, 79.09)),
("3050","ETRS89 / TM38",(42.0, 36.95, 48.0, 75.0)),
("3051","ETRS89 / TM39",(48.0, 36.0, 54.0, 75.0)),
("3052","Reykjavik 1900 / Lambert 1900",(-24.66, 63.34, -13.38, 66.59)),
("3053","Hjorsey 1955 / Lambert 1955",(-24.66, 63.34, -13.38, 66.59)),
("3054","Hjorsey 1955 / UTM zone 26N",(-24.66, 64.71, -24.0, 65.86)),
("3055","Hjorsey 1955 / UTM zone 27N",(-24.0, 63.34, -18.0, 66.52)),
("3056","Hjorsey 1955 / UTM zone 28N",(-18.0, 63.45, -13.38, 66.59)),
("3057","ISN93 / Lambert 1993",(-30.87, 59.96, -5.55, 69.59)),
("3058","Helle 1954 / Jan Mayen Grid",(-9.17, 70.75, -7.87, 71.24)),
("3059","LKS92 / Latvia TM",(19.06, 55.67, 28.24, 58.09)),
("3060","IGN72 Grande Terre / UTM zone 58S",(163.92, -22.45, 167.09, -20.03)),
("3061","Porto Santo 1995 / UTM zone 28N",(-17.31, 32.35, -16.23, 33.15)),
("3062","Azores Oriental 1995 / UTM zone 26N",(-25.92, 36.87, -24.62, 37.96)),
("3063","Azores Central 1995 / UTM zone 26N",(-28.9, 38.32, -26.97, 39.14)),
("3064","IGM95 / UTM zone 32N",(5.94, 36.53, 12.0, 47.04)),
("3065","IGM95 / UTM zone 33N",(12.0, 34.76, 18.99, 47.1)),
("3066","ED50 / Jordan TM",(34.88, 29.18, 39.31, 33.38)),
("3067","ETRS89 / TM35FIN(E,N)",(19.08, 58.84, 31.59, 70.09)),
("3068","DHDN / Soldner Berlin",(13.09, 52.33, 13.76, 52.65)),
("3069","NAD27 / Wisconsin Transverse Mercator",(-92.89, 42.48, -86.25, 47.31)),
("3070","NAD83 / Wisconsin Transverse Mercator",(-92.89, 42.48, -86.25, 47.31)),
("3071","NAD83(HARN) / Wisconsin Transverse Mercator",(-92.89, 42.48, -86.25, 47.31)),
("3072","NAD83 / Maine CS2000 East",(-68.58, 44.18, -66.91, 47.37)),
("3073","NAD83 / Maine CS2000 Central",(-70.03, 43.75, -68.33, 47.47)),
("3074","NAD83 / Maine CS2000 West",(-71.09, 43.07, -69.61, 46.58)),
("3075","NAD83(HARN) / Maine CS2000 East",(-68.58, 44.18, -66.91, 47.37)),
("3076","NAD83(HARN) / Maine CS2000 Central",(-70.03, 43.75, -68.33, 47.47)),
("3077","NAD83(HARN) / Maine CS2000 West",(-71.09, 43.07, -69.61, 46.58)),
("3078","NAD83 / Michigan Oblique Mercator",(-90.42, 41.69, -82.13, 48.32)),
("3079","NAD83(HARN) / Michigan Oblique Mercator",(-90.42, 41.69, -82.13, 48.32)),
("3080","NAD27 / Shackleford",(-106.66, 25.83, -93.5, 36.5)),
("3081","NAD83 / Texas State Mapping System",(-106.66, 25.83, -93.5, 36.5)),
("3082","NAD83 / Texas Centric Lambert Conformal",(-106.66, 25.83, -93.5, 36.5)),
("3083","NAD83 / Texas Centric Albers Equal Area",(-106.66, 25.83, -93.5, 36.5)),
("3084","NAD83(HARN) / Texas Centric Lambert Conformal",(-106.66, 25.83, -93.5, 36.5)),
("3085","NAD83(HARN) / Texas Centric Albers Equal Area",(-106.66, 25.83, -93.5, 36.5)),
("3086","NAD83 / Florida GDL Albers",(-87.63, 24.41, -79.97, 31.01)),
("3087","NAD83(HARN) / Florida GDL Albers",(-87.63, 24.41, -79.97, 31.01)),
("3088","NAD83 / Kentucky Single Zone",(-89.57, 36.49, -81.95, 39.15)),
("3089","NAD83 / Kentucky Single Zone (ftUS)",(-89.57, 36.49, -81.95, 39.15)),
("3090","NAD83(HARN) / Kentucky Single Zone",(-89.57, 36.49, -81.95, 39.15)),
("3091","NAD83(HARN) / Kentucky Single Zone (ftUS)",(-89.57, 36.49, -81.95, 39.15)),
("3092","Tokyo / UTM zone 51N",(123.62, 23.98, 125.51, 24.94)),
("3093","Tokyo / UTM zone 52N",(126.63, 24.4, 132.0, 34.9)),
("3094","Tokyo / UTM zone 53N",(132.0, 20.37, 138.0, 37.58)),
("3095","Tokyo / UTM zone 54N",(138.0, 24.67, 144.0, 45.54)),
("3096","Tokyo / UTM zone 55N",(144.0, 42.84, 145.87, 44.4)),
("3097","JGD2000 / UTM zone 51N",(122.38, 21.1, 126.0, 29.71)),
("3098","JGD2000 / UTM zone 52N",(126.0, 21.12, 132.0, 38.63)),
("3099","JGD2000 / UTM zone 53N",(132.0, 17.09, 138.0, 43.55)),
("3100","JGD2000 / UTM zone 54N",(138.0, 17.63, 144.0, 46.05)),
("3101","JGD2000 / UTM zone 55N",(144.0, 23.03, 147.86, 45.65)),
("3102","American Samoa 1962 / American Samoa Lambert",(-170.88, -14.43, -169.38, -14.11)),
("3103","Mauritania 1999 / UTM zone 28N",(-17.08, 14.72, -12.0, 23.46)),
("3104","Mauritania 1999 / UTM zone 29N",(-12.0, 14.75, -6.0, 27.3)),
("3105","Mauritania 1999 / UTM zone 30N",(-6.0, 15.49, -4.8, 25.74)),
("3106","Gulshan 303 / Bangladesh Transverse Mercator",(88.01, 18.56, 92.67, 26.64)),
("3107","GDA94 / SA Lambert",(128.99, -38.13, 141.01, -25.99)),
("3108","ETRS89 / Guernsey Grid",(-3.73, 49.11, -2.02, 50.16)),
("3109","ETRS89 / Jersey Transverse Mercator",(-2.72, 48.77, -1.81, 49.44)),
("3110","AGD66 / Vicgrid66",(140.96, -39.2, 150.04, -33.98)),
("3111","GDA94 / Vicgrid",(140.96, -39.2, 150.04, -33.98)),
("3112","GDA94 / Geoscience Australia Lambert",(112.85, -43.7, 153.69, -9.86)),
("3113","GDA94 / BCSG02",(151.19, -29.88, 153.69, -24.64)),
("3114","MAGNA-SIRGAS / Colombia Far West zone",(-79.1, 1.23, -78.58, 2.48)),
("3115","MAGNA-SIRGAS / Colombia West zone",(-78.59, 0.03, -75.58, 10.21)),
("3116","MAGNA-SIRGAS / Colombia Bogota zone",(-75.59, -2.51, -72.58, 11.82)),
("3117","MAGNA-SIRGAS / Colombia East Central zone",(-72.59, -4.23, -69.58, 12.52)),
("3118","MAGNA-SIRGAS / Colombia East zone",(-69.59, -2.25, -66.87, 6.31)),
("3119","Douala 1948 / AEF west",(8.45, 2.16, 10.4, 4.99)),
("3120","Pulkovo 1942(58) / Poland zone I",(18.0, 49.0, 24.15, 52.34)),
("3121","PRS92 / Philippines zone 1",(116.04, 6.21, 118.0, 18.64)),
("3122","PRS92 / Philippines zone 2",(118.0, 3.02, 120.07, 20.42)),
("3123","PRS92 / Philippines zone 3",(119.7, 3.0, 122.21, 21.62)),
("3124","PRS92 / Philippines zone 4",(121.74, 3.44, 124.29, 22.18)),
("3125","PRS92 / Philippines zone 5",(123.73, 4.76, 126.65, 21.97)),
("3126","ETRS89 / ETRS-GK19FIN",(19.24, 60.08, 19.5, 60.34)),
("3127","ETRS89 / ETRS-GK20FIN",(19.5, 59.92, 20.5, 60.48)),
("3128","ETRS89 / ETRS-GK21FIN",(20.5, 59.84, 21.5, 69.33)),
("3129","ETRS89 / ETRS-GK22FIN",(21.5, 59.76, 22.5, 69.31)),
("3130","ETRS89 / ETRS-GK23FIN",(22.5, 59.75, 23.5, 68.74)),
("3131","ETRS89 / ETRS-GK24FIN",(23.5, 59.86, 24.5, 68.84)),
("3132","ETRS89 / ETRS-GK25FIN",(24.5, 59.94, 25.5, 68.9)),
("3133","ETRS89 / ETRS-GK26FIN",(25.5, 60.18, 26.5, 69.94)),
("3134","ETRS89 / ETRS-GK27FIN",(26.5, 60.36, 27.5, 70.05)),
("3135","ETRS89 / ETRS-GK28FIN",(27.5, 60.42, 28.5, 70.09)),
("3136","ETRS89 / ETRS-GK29FIN",(28.5, 60.94, 29.5, 69.81)),
("3137","ETRS89 / ETRS-GK30FIN",(29.5, 61.43, 30.5, 67.98)),
("3138","ETRS89 / ETRS-GK31FIN",(30.5, 62.08, 31.59, 64.27)),
("3139","Vanua Levu 1915 / Vanua Levu Grid",(178.42, -17.07, -179.77, -16.1)),
("3140","Viti Levu 1912 / Viti Levu Grid",(177.19, -18.32, 178.75, -17.25)),
("3141","Fiji 1956 / UTM zone 60S",(176.81, -19.22, 180.0, -16.1)),
("3142","Fiji 1956 / UTM zone 1S",(-180.0, -17.04, -179.77, -16.1)),
("3143","Fiji 1986 / Fiji Map Grid",(176.81, -20.81, -178.15, -12.42)),
("3144","FD54 / Faroe Lambert",(-7.49, 61.33, -6.33, 62.41)),
("3145","ETRS89 / Faroe Lambert",(-7.49, 61.33, -6.33, 62.41)),
("3146","Pulkovo 1942 / 3-degree Gauss-Kruger zone 6",(19.2, 54.32, 19.5, 55.3)),
("3147","Pulkovo 1942 / 3-degree Gauss-Kruger CM 18E",(19.2, 54.32, 19.5, 55.3)),
("3148","Indian 1960 / UTM zone 48N",(102.14, 8.33, 108.0, 23.4)),
("3149","Indian 1960 / UTM zone 49N",(108.0, 10.43, 109.53, 21.56)),
("3150","Pulkovo 1995 / 3-degree Gauss-Kruger zone 6",(19.2, 54.32, 19.5, 55.3)),
("3151","Pulkovo 1995 / 3-degree Gauss-Kruger CM 18E",(19.2, 54.32, 19.5, 55.3)),
("3152","ST74",(17.75, 59.22, 18.2, 59.43)),
("3153","NAD83(CSRS) / BC Albers",(-139.04, 48.25, -114.08, 60.01)),
("3154","NAD83(CSRS) / UTM zone 7N",(-141.01, 52.05, -138.0, 72.53)),
("3155","NAD83(CSRS) / UTM zone 8N",(-138.0, 48.06, -132.0, 79.42)),
("3156","NAD83(CSRS) / UTM zone 9N",(-132.0, 46.52, -126.0, 80.93)),
("3157","NAD83(CSRS) / UTM zone 10N",(-126.0, 48.13, -120.0, 81.8)),
("3158","NAD83(CSRS) / UTM zone 14N",(-102.0, 48.99, -96.0, 84.0)),
("3159","NAD83(CSRS) / UTM zone 15N",(-96.0, 48.03, -90.0, 84.0)),
("3160","NAD83(CSRS) / UTM zone 16N",(-90.0, 46.11, -84.0, 84.0)),
("3161","NAD83 / Ontario MNR Lambert",(-95.16, 41.67, -74.35, 56.9)),
("3162","NAD83(CSRS) / Ontario MNR Lambert",(-95.16, 41.67, -74.35, 56.9)),
("3163","RGNC91-93 / Lambert New Caledonia",(163.54, -22.73, 168.19, -19.5)),
("3164","ST87 Ouvea / UTM zone 58S",(166.44, -20.77, 166.71, -20.34)),
("3165","NEA74 Noumea / Noumea Lambert",(166.35, -22.37, 166.54, -22.19)),
("3166","NEA74 Noumea / Noumea Lambert 2",(166.35, -22.37, 166.54, -22.19)),
("3167","Kertau (RSO) / RSO Malaya (ch)",(99.59, 1.21, 104.6, 6.72)),
("3168","Kertau (RSO) / RSO Malaya (m)",(99.59, 1.21, 104.6, 6.72)),
("3169","RGNC91-93 / UTM zone 57S",(156.25, -26.03, 162.01, -15.34)),
("3170","RGNC91-93 / UTM zone 58S",(162.0, -26.45, 168.0, -14.83)),
("3171","RGNC91-93 / UTM zone 59S",(168.0, -25.95, 174.28, -19.75)),
("3172","IGN53 Mare / UTM zone 59S",(168.0, -21.71, 168.19, -21.35)),
("3173","fk89 / Faroe Lambert FK89",(-7.49, 61.33, -6.33, 62.41)),
("3174","NAD83 / Great Lakes Albers",(-93.17, 40.99, -74.47, 50.74)),
("3175","NAD83 / Great Lakes and St Lawrence Albers",(-93.17, 40.99, -54.75, 52.22)),
("3176","Indian 1960 / TM 106 NE",(106.54, 7.99, 110.0, 11.15)),
("3177","LGD2006 / Libya TM",(9.31, 19.5, 26.21, 35.23)),
("3178","GR96 / UTM zone 18N",(-75.0, 74.52, -72.0, 79.04)),
("3179","GR96 / UTM zone 19N",(-72.0, 73.24, -66.0, 80.9)),
("3180","GR96 / UTM zone 20N",(-66.0, 68.92, -60.0, 82.22)),
("3181","GR96 / UTM zone 21N",(-60.0, 58.91, -54.0, 84.0)),
("3182","GR96 / UTM zone 22N",(-54.0, 56.9, -48.0, 84.0)),
("3183","GR96 / UTM zone 23N",(-48.0, 56.38, -42.0, 84.0)),
("3184","GR96 / UTM zone 24N",(-42.0, 56.56, -36.0, 84.0)),
("3185","GR96 / UTM zone 25N",(-36.0, 60.16, -30.0, 84.0)),
("3186","GR96 / UTM zone 26N",(-30.0, 64.96, -24.0, 84.0)),
("3187","GR96 / UTM zone 27N",(-24.0, 67.7, -18.0, 84.0)),
("3188","GR96 / UTM zone 28N",(-18.0, 68.67, -12.0, 84.0)),
("3189","GR96 / UTM zone 29N",(-12.0, 72.43, -6.0, 84.0)),
("3190","LGD2006 / Libya TM zone 5",(9.31, 25.37, 10.01, 30.49)),
("3191","LGD2006 / Libya TM zone 6",(10.0, 23.51, 12.0, 33.23)),
("3192","LGD2006 / Libya TM zone 7",(12.0, 22.8, 14.0, 33.06)),
("3193","LGD2006 / Libya TM zone 8",(14.0, 22.61, 16.0, 32.79)),
("3194","LGD2006 / Libya TM zone 9",(16.0, 22.51, 18.01, 31.34)),
("3195","LGD2006 / Libya TM zone 10",(18.0, 21.54, 20.0, 32.17)),
("3196","LGD2006 / Libya TM zone 11",(20.0, 20.54, 22.0, 33.0)),
("3197","LGD2006 / Libya TM zone 12",(22.0, 19.5, 24.0, 32.97)),
("3198","LGD2006 / Libya TM zone 13",(24.0, 19.99, 25.21, 32.15)),
("3199","LGD2006 / UTM zone 32N",(9.31, 23.51, 12.0, 33.92)),
("3200","FD58 / Iraq zone",(47.13, 26.21, 53.61, 33.22)),
("3201","LGD2006 / UTM zone 33N",(12.0, 22.51, 18.0, 35.23)),
("3202","LGD2006 / UTM zone 34N",(17.99, 19.5, 24.01, 35.03)),
("3203","LGD2006 / UTM zone 35N",(24.0, 19.99, 26.21, 33.6)),
("3204","WGS 84 / SCAR IMW SP19-20",(-72.0, -64.0, -60.0, -60.0)),
("3205","WGS 84 / SCAR IMW SP21-22",(-60.0, -64.0, -48.0, -60.0)),
("3206","WGS 84 / SCAR IMW SP23-24",(-48.0, -64.0, -36.0, -60.0)),
("3207","WGS 84 / SCAR IMW SQ01-02",(-180.0, -68.0, -168.0, -64.0)),
("3208","WGS 84 / SCAR IMW SQ19-20",(-72.0, -68.0, -60.0, -64.0)),
("3209","WGS 84 / SCAR IMW SQ21-22",(-60.0, -68.0, -48.0, -64.0)),
("3210","WGS 84 / SCAR IMW SQ37-38",(36.0, -68.0, 48.0, -64.0)),
("3211","WGS 84 / SCAR IMW SQ39-40",(48.0, -68.0, 60.0, -64.0)),
("3212","WGS 84 / SCAR IMW SQ41-42",(60.0, -68.0, 72.0, -64.0)),
("3213","WGS 84 / SCAR IMW SQ43-44",(72.0, -68.0, 84.0, -64.0)),
("3214","WGS 84 / SCAR IMW SQ45-46",(84.0, -68.0, 96.0, -64.0)),
("3215","WGS 84 / SCAR IMW SQ47-48",(96.0, -68.0, 108.0, -64.0)),
("3216","WGS 84 / SCAR IMW SQ49-50",(108.0, -68.0, 120.0, -64.0)),
("3217","WGS 84 / SCAR IMW SQ51-52",(120.0, -68.0, 132.0, -64.0)),
("3218","WGS 84 / SCAR IMW SQ53-54",(132.0, -68.0, 144.0, -64.0)),
("3219","WGS 84 / SCAR IMW SQ55-56",(144.0, -68.0, 156.0, -64.0)),
("3220","WGS 84 / SCAR IMW SQ57-58",(156.0, -68.0, 168.0, -64.0)),
("3221","WGS 84 / SCAR IMW SR13-14",(-108.0, -72.0, -96.0, -68.0)),
("3222","WGS 84 / SCAR IMW SR15-16",(-96.0, -72.0, -84.0, -68.0)),
("3223","WGS 84 / SCAR IMW SR17-18",(-84.0, -72.0, -72.0, -68.0)),
("3224","WGS 84 / SCAR IMW SR19-20",(-72.0, -72.0, -60.0, -68.0)),
("3225","WGS 84 / SCAR IMW SR27-28",(-24.0, -72.0, -12.0, -68.0)),
("3226","WGS 84 / SCAR IMW SR29-30",(-12.0, -72.0, 0.0, -68.0)),
("3227","WGS 84 / SCAR IMW SR31-32",(0.0, -72.0, 12.0, -68.0)),
("3228","WGS 84 / SCAR IMW SR33-34",(12.0, -72.0, 24.0, -68.0)),
("3229","WGS 84 / SCAR IMW SR35-36",(24.0, -72.0, 36.0, -68.0)),
("3230","WGS 84 / SCAR IMW SR37-38",(36.0, -72.0, 48.0, -68.0)),
("3231","WGS 84 / SCAR IMW SR39-40",(48.0, -72.0, 60.0, -68.0)),
("3232","WGS 84 / SCAR IMW SR41-42",(60.0, -72.0, 72.0, -68.0)),
("3233","WGS 84 / SCAR IMW SR43-44",(72.0, -72.0, 84.0, -68.0)),
("3234","WGS 84 / SCAR IMW SR45-46",(84.0, -72.0, 96.0, -68.0)),
("3235","WGS 84 / SCAR IMW SR47-48",(96.0, -72.0, 108.0, -68.0)),
("3236","WGS 84 / SCAR IMW SR49-50",(108.0, -72.0, 120.0, -68.0)),
("3237","WGS 84 / SCAR IMW SR51-52",(120.0, -72.0, 132.0, -68.0)),
("3238","WGS 84 / SCAR IMW SR53-54",(132.0, -72.0, 144.0, -68.0)),
("3239","WGS 84 / SCAR IMW SR55-56",(144.0, -72.0, 156.0, -68.0)),
("3240","WGS 84 / SCAR IMW SR57-58",(156.0, -72.0, 168.0, -68.0)),
("3241","WGS 84 / SCAR IMW SR59-60",(168.0, -72.0, 180.0, -68.0)),
("3242","WGS 84 / SCAR IMW SS04-06",(-162.0, -76.0, -144.0, -72.0)),
("3243","WGS 84 / SCAR IMW SS07-09",(-144.0, -76.0, -126.0, -72.0)),
("3244","WGS 84 / SCAR IMW SS10-12",(-126.0, -76.0, -108.0, -72.0)),
("3245","WGS 84 / SCAR IMW SS13-15",(-108.0, -76.0, -90.0, -72.0)),
("3246","WGS 84 / SCAR IMW SS16-18",(-90.0, -76.0, -72.0, -72.0)),
("3247","WGS 84 / SCAR IMW SS19-21",(-72.0, -76.0, -54.0, -72.0)),
("3248","WGS 84 / SCAR IMW SS25-27",(-36.0, -76.0, -18.0, -72.0)),
("3249","WGS 84 / SCAR IMW SS28-30",(-18.0, -76.0, 0.0, -72.0)),
("3250","WGS 84 / SCAR IMW SS31-33",(0.0, -76.0, 18.0, -72.0)),
("3251","WGS 84 / SCAR IMW SS34-36",(18.0, -76.0, 36.0, -72.0)),
("3252","WGS 84 / SCAR IMW SS37-39",(36.0, -76.0, 54.0, -72.0)),
("3253","WGS 84 / SCAR IMW SS40-42",(54.0, -76.0, 72.0, -72.0)),
("3254","WGS 84 / SCAR IMW SS43-45",(72.0, -76.0, 90.0, -72.0)),
("3255","WGS 84 / SCAR IMW SS46-48",(90.0, -76.0, 108.0, -72.0)),
("3256","WGS 84 / SCAR IMW SS49-51",(108.0, -76.0, 126.0, -72.0)),
("3257","WGS 84 / SCAR IMW SS52-54",(126.0, -76.0, 144.0, -72.0)),
("3258","WGS 84 / SCAR IMW SS55-57",(144.0, -76.0, 162.0, -72.0)),
("3259","WGS 84 / SCAR IMW SS58-60",(162.0, -76.0, 180.0, -72.0)),
("3260","WGS 84 / SCAR IMW ST01-04",(-180.0, -80.0, -156.0, -76.0)),
("3261","WGS 84 / SCAR IMW ST05-08",(-156.0, -80.0, -132.0, -76.0)),
("3262","WGS 84 / SCAR IMW ST09-12",(-132.0, -80.0, -108.0, -76.0)),
("3263","WGS 84 / SCAR IMW ST13-16",(-108.0, -80.0, -84.0, -76.0)),
("3264","WGS 84 / SCAR IMW ST17-20",(-84.0, -80.0, -60.0, -76.0)),
("3265","WGS 84 / SCAR IMW ST21-24",(-60.0, -80.0, -36.0, -76.0)),
("3266","WGS 84 / SCAR IMW ST25-28",(-36.0, -80.0, -12.0, -76.0)),
("3267","WGS 84 / SCAR IMW ST29-32",(-12.0, -80.0, 12.0, -76.0)),
("3268","WGS 84 / SCAR IMW ST33-36",(12.0, -80.0, 36.0, -76.0)),
("3269","WGS 84 / SCAR IMW ST37-40",(36.0, -80.0, 60.0, -76.0)),
("3270","WGS 84 / SCAR IMW ST41-44",(60.0, -80.0, 84.0, -76.0)),
("3271","WGS 84 / SCAR IMW ST45-48",(84.0, -80.0, 108.0, -76.0)),
("3272","WGS 84 / SCAR IMW ST49-52",(108.0, -80.0, 132.0, -76.0)),
("3273","WGS 84 / SCAR IMW ST53-56",(132.0, -80.0, 156.0, -76.0)),
("3274","WGS 84 / SCAR IMW ST57-60",(156.0, -80.0, 180.0, -76.0)),
("3275","WGS 84 / SCAR IMW SU01-05",(-180.0, -84.0, -150.0, -80.0)),
("3276","WGS 84 / SCAR IMW SU06-10",(-150.0, -84.0, -120.0, -80.0)),
("3277","WGS 84 / SCAR IMW SU11-15",(-120.0, -84.0, -90.0, -80.0)),
("3278","WGS 84 / SCAR IMW SU16-20",(-90.0, -84.0, -60.0, -80.0)),
("3279","WGS 84 / SCAR IMW SU21-25",(-60.0, -84.0, -30.0, -80.0)),
("3280","WGS 84 / SCAR IMW SU26-30",(-30.0, -84.0, 0.0, -80.0)),
("3281","WGS 84 / SCAR IMW SU31-35",(0.0, -84.0, 30.0, -80.0)),
("3282","WGS 84 / SCAR IMW SU36-40",(30.0, -84.0, 60.0, -80.0)),
("3283","WGS 84 / SCAR IMW SU41-45",(60.0, -84.0, 90.0, -80.0)),
("3284","WGS 84 / SCAR IMW SU46-50",(90.0, -84.0, 120.0, -80.0)),
("3285","WGS 84 / SCAR IMW SU51-55",(120.0, -84.0, 150.0, -80.0)),
("3286","WGS 84 / SCAR IMW SU56-60",(150.0, -84.0, 180.0, -80.0)),
("3287","WGS 84 / SCAR IMW SV01-10",(-180.0, -88.0, -120.0, -84.0)),
("3288","WGS 84 / SCAR IMW SV11-20",(-120.0, -88.0, -60.0, -84.0)),
("3289","WGS 84 / SCAR IMW SV21-30",(-60.0, -88.0, 0.0, -84.0)),
("3290","WGS 84 / SCAR IMW SV31-40",(0.0, -88.0, 60.0, -84.0)),
("3291","WGS 84 / SCAR IMW SV41-50",(60.0, -88.0, 120.0, -84.0)),
("3292","WGS 84 / SCAR IMW SV51-60",(120.0, -88.0, 180.0, -84.0)),
("3293","WGS 84 / SCAR IMW SW01-60",(-180.0, -90.0, 180.0, -88.0)),
("3294","WGS 84 / USGS Transantarctic Mountains",(149.83, -80.0, 174.01, -68.6)),
("3295","Guam 1963 / Yap Islands",(137.99, 9.39, 138.27, 9.69)),
("3296","RGPF / UTM zone 5S",(-158.13, -26.7, -150.0, -12.5)),
("3297","RGPF / UTM zone 6S",(-150.0, -31.2, -144.0, -7.29)),
("3298","RGPF / UTM zone 7S",(-144.0, -31.24, -138.0, -4.52)),
("3299","RGPF / UTM zone 8S",(-138.0, -26.58, -131.97, -5.52)),
("3300","Estonian Coordinate System of 1992",(21.74, 57.52, 28.2, 59.75)),
("3301","Estonian Coordinate System of 1997",(20.37, 57.52, 28.2, 60.0)),
("3302","IGN63 Hiva Oa / UTM zone 7S",(-139.23, -10.08, -138.75, -9.64)),
("3303","Fatu Iva 72 / UTM zone 7S",(-138.75, -10.6, -138.54, -10.36)),
("3304","Tahiti 79 / UTM zone 6S",(-149.7, -17.93, -149.09, -17.44)),
("3305","Moorea 87 / UTM zone 6S",(-150.0, -17.63, -149.73, -17.41)),
("3306","Maupiti 83 / UTM zone 5S",(-152.39, -16.57, -152.14, -16.34)),
("3307","Nakhl-e Ghanem / UTM zone 39N",(51.8, 27.3, 53.01, 28.2)),
("3308","GDA94 / NSW Lambert",(140.99, -37.53, 153.69, -28.15)),
("3309","NAD27 / California Albers",(-124.45, 32.53, -114.12, 42.01)),
("3310","NAD83 / California Albers",(-124.45, 32.53, -114.12, 42.01)),
("3311","NAD83(HARN) / California Albers",(-124.45, 32.53, -114.12, 42.01)),
("3312","CSG67 / UTM zone 21N",(-54.45, 4.84, -54.0, 5.69)),
("3313","RGFG95 / UTM zone 21N",(-54.61, 2.11, -54.0, 5.69)),
("3314","Katanga 1955 / Katanga Lambert",(21.74, -13.46, 30.78, -4.99)),
("3315","Katanga 1955 / Katanga TM",(21.74, -13.46, 30.78, -4.99)),
("3316","Kasai 1953 / Congo TM zone 22",(21.5, -7.31, 23.01, -5.31)),
("3317","Kasai 1953 / Congo TM zone 24",(23.0, -6.99, 25.0, -5.01)),
("3318","IGC 1962 / Congo TM zone 12",(12.17, -6.04, 13.01, -4.67)),
("3319","IGC 1962 / Congo TM zone 14",(13.0, -5.91, 15.01, -4.28)),
("3320","IGC 1962 / Congo TM zone 16",(15.0, -5.87, 17.0, -3.29)),
("3321","IGC 1962 / Congo TM zone 18",(17.0, -5.38, 19.0, -3.4)),
("3322","IGC 1962 / Congo TM zone 20",(19.0, -7.29, 21.0, -4.01)),
("3323","IGC 1962 / Congo TM zone 22",(21.0, -7.31, 23.0, -5.31)),
("3324","IGC 1962 / Congo TM zone 24",(23.0, -6.99, 25.0, -5.01)),
("3325","IGC 1962 / Congo TM zone 26",(25.0, -7.26, 27.0, -4.23)),
("3326","IGC 1962 / Congo TM zone 28",(27.0, -7.36, 29.0, -4.24)),
("3327","IGC 1962 / Congo TM zone 30",(29.0, -6.04, 29.64, -4.34)),
("3328","Pulkovo 1942(58) / GUGiK-80",(14.14, 49.0, 24.15, 54.89)),
("3329","Pulkovo 1942(58) / 3-degree Gauss-Kruger zone 5",(13.5, 46.54, 16.5, 54.72)),
("3330","Pulkovo 1942(58) / 3-degree Gauss-Kruger zone 6",(16.5, 40.14, 19.5, 54.89)),
("3331","Pulkovo 1942(58) / 3-degree Gauss-Kruger zone 7",(19.5, 39.64, 22.5, 54.51)),
("3332","Pulkovo 1942(58) / 3-degree Gauss-Kruger zone 8",(22.5, 41.24, 25.5, 54.41)),
("3333","Pulkovo 1942(58) / Gauss-Kruger zone 3",(12.0, 45.78, 18.0, 54.89)),
("3334","Pulkovo 1942(58) / Gauss-Kruger zone 4",(18.0, 39.64, 24.0, 54.89)),
("3335","Pulkovo 1942(58) / Gauss-Kruger zone 5",(24.0, 41.24, 29.74, 50.93)),
("3336","IGN 1962 Kerguelen / UTM zone 42S",(68.69, -49.78, 70.62, -48.6)),
("3337","Le Pouce 1934 / Mauritius Grid",(57.25, -20.57, 57.85, -19.94)),
("3338","NAD83 / Alaska Albers",(172.42, 51.3, -129.99, 71.4)),
("3339","IGCB 1955 / Congo TM zone 12",(12.17, -6.04, 13.01, -4.67)),
("3340","IGCB 1955 / Congo TM zone 14",(13.0, -5.91, 15.01, -4.28)),
("3341","IGCB 1955 / Congo TM zone 16",(14.99, -5.87, 16.28, -4.42)),
("3342","IGCB 1955 / UTM zone 33S",(12.17, -6.04, 16.28, -4.28)),
("3343","Mauritania 1999 / UTM zone 28N",(-18.0, 14.72, -12.0, 23.46)),
("3344","Mauritania 1999 / UTM zone 29N",(-12.0, 14.75, -6.0, 27.3)),
("3345","Mauritania 1999 / UTM zone 30N",(-6.0, 15.49, -4.8, 25.74)),
("3346","LKS94 / Lithuania TM",(19.02, 53.89, 26.82, 56.45)),
("3347","NAD83 / Statistics Canada Lambert",(-141.01, 40.04, -47.74, 86.46)),
("3348","NAD83(CSRS) / Statistics Canada Lambert",(-141.01, 40.04, -47.74, 86.46)),
("3349","WGS 84 / PDC Mercator",(98.69, -60.0, -68.0, 66.67)),
("3350","Pulkovo 1942 / CS63 zone C0",(19.57, 54.17, 23.45, 59.27)),
("3351","Pulkovo 1942 / CS63 zone C1",(23.45, 53.89, 26.45, 59.72)),
("3352","Pulkovo 1942 / CS63 zone C2",(26.45, 55.15, 28.24, 59.61)),
("3353","Mhast (onshore) / UTM zone 32S",(10.53, -6.04, 13.1, -4.38)),
("3354","Mhast (offshore) / UTM zone 32S",(10.53, -6.04, 12.37, -5.05)),
("3355","Egypt Gulf of Suez S-650 TL / Red Belt",(32.34, 27.19, 34.27, 30.01)),
("3356","Grand Cayman 1959 / UTM zone 17N",(-81.46, 19.21, -81.04, 19.41)),
("3357","Little Cayman 1961 / UTM zone 17N",(-80.14, 19.63, -79.69, 19.78)),
("3358","NAD83(HARN) / North Carolina",(-84.33, 33.83, -75.38, 36.59)),
("3359","NAD83(HARN) / North Carolina (ftUS)",(-84.33, 33.83, -75.38, 36.59)),
("3360","NAD83(HARN) / South Carolina",(-83.36, 32.05, -78.52, 35.21)),
("3361","NAD83(HARN) / South Carolina (ft)",(-83.36, 32.05, -78.52, 35.21)),
("3362","NAD83(HARN) / Pennsylvania North",(-80.53, 40.6, -74.7, 42.53)),
("3363","NAD83(HARN) / Pennsylvania North (ftUS)",(-80.53, 40.6, -74.7, 42.53)),
("3364","NAD83(HARN) / Pennsylvania South",(-80.53, 39.71, -74.72, 41.18)),
("3365","NAD83(HARN) / Pennsylvania South (ftUS)",(-80.53, 39.71, -74.72, 41.18)),
("3366","Hong Kong 1963 Grid System",(113.76, 22.13, 114.51, 22.58)),
("3367","IGN Astro 1960 / UTM zone 28N",(-17.08, 14.72, -12.0, 23.46)),
("3368","IGN Astro 1960 / UTM zone 29N",(-12.0, 14.75, -6.0, 27.3)),
("3369","IGN Astro 1960 / UTM zone 30N",(-6.0, 15.49, -4.8, 25.74)),
("3370","NAD27 / UTM zone 59N",(167.65, 49.01, 174.01, 56.28)),
("3371","NAD27 / UTM zone 60N",(174.0, 47.92, 180.0, 56.67)),
("3372","NAD83 / UTM zone 59N",(167.65, 49.01, 174.01, 56.28)),
("3373","NAD83 / UTM zone 60N",(174.0, 47.92, 180.0, 56.67)),
("3374","FD54 / UTM zone 29N",(-7.49, 61.33, -6.33, 62.41)),
("3375","GDM2000 / Peninsula RSO",(98.02, 1.13, 105.82, 7.81)),
("3376","GDM2000 / East Malaysia BRSO",(109.31, 0.85, 119.61, 7.67)),
("3377","GDM2000 / Johor Grid",(102.44, 1.21, 104.6, 2.95)),
("3378","GDM2000 / Sembilan and Melaka Grid",(101.7, 2.03, 102.71, 3.28)),
("3379","GDM2000 / Pahang Grid",(101.33, 2.45, 103.67, 4.78)),
("3380","GDM2000 / Selangor Grid",(100.76, 2.54, 101.97, 3.87)),
("3381","GDM2000 / Terengganu Grid",(102.38, 3.89, 103.72, 5.9)),
("3382","GDM2000 / Pinang Grid",(100.12, 5.12, 100.56, 5.59)),
("3383","GDM2000 / Kedah and Perlis Grid",(99.59, 5.08, 101.12, 6.72)),
("3384","GDM2000 / Perak Grid",(100.07, 3.66, 102.0, 5.92)),
("3385","GDM2000 / Kelantan Grid",(101.33, 4.54, 102.67, 6.29)),
("3386","KKJ / Finland zone 0",(19.24, 60.08, 19.5, 60.34)),
("3387","KKJ / Finland zone 5",(31.5, 62.83, 31.59, 63.0)),
("3388","Pulkovo 1942 / Caspian Sea Mercator",(46.95, 37.35, 53.93, 46.97)),
("3389","Pulkovo 1942 / 3-degree Gauss-Kruger zone 60",(178.5, 62.24, -178.5, 71.65)),
("3390","Pulkovo 1995 / 3-degree Gauss-Kruger zone 60",(178.5, 62.24, -178.5, 71.65)),
("3391","Karbala 1979 / UTM zone 37N",(38.79, 31.14, 42.0, 36.75)),
("3392","Karbala 1979 / UTM zone 38N",(42.0, 29.06, 48.0, 37.39)),
("3393","Karbala 1979 / UTM zone 39N",(48.0, 29.87, 48.61, 31.0)),
("3394","Nahrwan 1934 / Iraq zone",(38.79, 29.06, 51.06, 37.39)),
("3395","WGS 84 / World Mercator",(-180.0, -80.0, 180.0, 84.0)),
("3396","PD/83 / 3-degree Gauss-Kruger zone 3",(9.92, 50.35, 10.5, 51.56)),
("3397","PD/83 / 3-degree Gauss-Kruger zone 4",(10.5, 50.2, 12.56, 51.64)),
("3398","RD/83 / 3-degree Gauss-Kruger zone 4",(11.89, 50.2, 13.51, 51.66)),
("3399","RD/83 / 3-degree Gauss-Kruger zone 5",(13.5, 50.62, 15.04, 51.58)),
("3400","NAD83 / Alberta 10-TM (Forest)",(-120.0, 48.99, -109.98, 60.0)),
("3401","NAD83 / Alberta 10-TM (Resource)",(-120.0, 48.99, -109.98, 60.0)),
("3402","NAD83(CSRS) / Alberta 10-TM (Forest)",(-120.0, 48.99, -109.98, 60.0)),
("3403","NAD83(CSRS) / Alberta 10-TM (Resource)",(-120.0, 48.99, -109.98, 60.0)),
("3404","NAD83(HARN) / North Carolina (ftUS)",(-84.33, 33.83, -75.38, 36.59)),
("3405","VN-2000 / UTM zone 48N",(102.14, 8.33, 108.0, 23.4)),
("3406","VN-2000 / UTM zone 49N",(108.0, 10.43, 109.53, 21.56)),
("3407","Hong Kong 1963 Grid System",(113.76, 22.13, 114.51, 22.58)),
("3408","NSIDC EASE-Grid North",(-180.0, 0.0, 180.0, 90.0)),
("3409","NSIDC EASE-Grid South",(-180.0, -90.0, 180.0, 0.0)),
("3410","NSIDC EASE-Grid Global",(-180.0, -86.0, 180.0, 86.0)),
("3411","NSIDC Sea Ice Polar Stereographic North",(-180.0, 60.0, 180.0, 90.0)),
("3412","NSIDC Sea Ice Polar Stereographic South",(-180.0, -90.0, 180.0, -60.0)),
("3413","WGS 84 / NSIDC Sea Ice Polar Stereographic North",(-180.0, 60.0, 180.0, 90.0)),
("3414","SVY21 / Singapore TM",(103.59, 1.13, 104.07, 1.47)),
("3415","WGS 72BE / South China Sea Lambert",(110.13, 18.31, 116.76, 22.89)),
("3416","ETRS89 / Austria Lambert",(9.53, 46.4, 17.17, 49.02)),
("3417","NAD83 / Iowa North (ftUS)",(-96.65, 41.85, -90.15, 43.51)),
("3418","NAD83 / Iowa South (ftUS)",(-96.14, 40.37, -90.14, 42.04)),
("3419","NAD83 / Kansas North (ftUS)",(-102.06, 38.52, -94.58, 40.01)),
("3420","NAD83 / Kansas South (ftUS)",(-102.05, 36.99, -94.6, 38.88)),
("3421","NAD83 / Nevada East (ftUS)",(-117.01, 34.99, -114.03, 42.0)),
("3422","NAD83 / Nevada Central (ftUS)",(-118.19, 36.0, -114.99, 41.0)),
("3423","NAD83 / Nevada West (ftUS)",(-120.0, 36.95, -116.99, 42.0)),
("3424","NAD83 / New Jersey (ftUS)",(-75.6, 38.87, -73.88, 41.36)),
("3425","NAD83(HARN) / Iowa North (ftUS)",(-96.65, 41.85, -90.15, 43.51)),
("3426","NAD83(HARN) / Iowa South (ftUS)",(-96.14, 40.37, -90.14, 42.04)),
("3427","NAD83(HARN) / Kansas North (ftUS)",(-102.06, 38.52, -94.58, 40.01)),
("3428","NAD83(HARN) / Kansas South (ftUS)",(-102.05, 36.99, -94.6, 38.88)),
("3429","NAD83(HARN) / Nevada East (ftUS)",(-117.01, 34.99, -114.03, 42.0)),
("3430","NAD83(HARN) / Nevada Central (ftUS)",(-118.19, 36.0, -114.99, 41.0)),
("3431","NAD83(HARN) / Nevada West (ftUS)",(-120.0, 36.95, -116.99, 42.0)),
("3432","NAD83(HARN) / New Jersey (ftUS)",(-75.6, 38.87, -73.88, 41.36)),
("3433","NAD83 / Arkansas North (ftUS)",(-94.62, 34.67, -89.64, 36.5)),
("3434","NAD83 / Arkansas South (ftUS)",(-94.48, 33.01, -90.4, 35.1)),
("3435","NAD83 / Illinois East (ftUS)",(-89.28, 37.06, -87.02, 42.5)),
("3436","NAD83 / Illinois West (ftUS)",(-91.52, 36.98, -88.93, 42.51)),
("3437","NAD83 / New Hampshire (ftUS)",(-72.56, 42.69, -70.63, 45.31)),
("3438","NAD83 / Rhode Island (ftUS)",(-71.85, 41.13, -71.08, 42.02)),
("3439","PSD93 / UTM zone 39N",(51.99, 16.59, 54.0, 19.67)),
("3440","PSD93 / UTM zone 40N",(54.0, 16.89, 59.91, 26.58)),
("3441","NAD83(HARN) / Arkansas North (ftUS)",(-94.62, 34.67, -89.64, 36.5)),
("3442","NAD83(HARN) / Arkansas South (ftUS)",(-94.48, 33.01, -90.4, 35.1)),
("3443","NAD83(HARN) / Illinois East (ftUS)",(-89.28, 37.06, -87.02, 42.5)),
("3444","NAD83(HARN) / Illinois West (ftUS)",(-91.52, 36.98, -88.93, 42.51)),
("3445","NAD83(HARN) / New Hampshire (ftUS)",(-72.56, 42.69, -70.63, 45.31)),
("3446","NAD83(HARN) / Rhode Island (ftUS)",(-71.85, 41.13, -71.08, 42.02)),
("3447","ETRS89 / Belgian Lambert 2005",(2.5, 49.5, 6.4, 51.51)),
("3448","JAD2001 / Jamaica Metric Grid",(-78.43, 17.64, -76.17, 18.58)),
("3449","JAD2001 / UTM zone 17N",(-80.6, 14.16, -77.99, 19.36)),
("3450","JAD2001 / UTM zone 18N",(-78.0, 14.08, -74.51, 19.2)),
("3451","NAD83 / Louisiana North (ftUS)",(-94.05, 30.85, -90.86, 33.03)),
("3452","NAD83 / Louisiana South (ftUS)",(-93.94, 28.85, -88.75, 31.07)),
("3453","NAD83 / Louisiana Offshore (ftUS)",(-94.05, 28.85, -88.75, 33.03)),
("3454","NAD83 / South Dakota North (ftUS)",(-104.07, 44.14, -96.45, 45.95)),
("3455","NAD83 / South Dakota South (ftUS)",(-104.06, 42.48, -96.43, 44.79)),
("3456","NAD83(HARN) / Louisiana North (ftUS)",(-94.05, 30.85, -90.86, 33.03)),
("3457","NAD83(HARN) / Louisiana South (ftUS)",(-93.94, 28.85, -88.75, 31.07)),
("3458","NAD83(HARN) / South Dakota North (ftUS)",(-104.07, 44.14, -96.45, 45.95)),
("3459","NAD83(HARN) / South Dakota South (ftUS)",(-104.06, 42.48, -96.43, 44.79)),
("3460","Fiji 1986 / Fiji Map Grid",(176.81, -20.81, -178.15, -12.42)),
("3461","Dabola 1981 / UTM zone 28N",(-15.13, 9.01, -12.0, 12.68)),
("3462","Dabola 1981 / UTM zone 29N",(-12.0, 7.19, -7.65, 12.51)),
("3463","NAD83 / Maine CS2000 Central",(-70.03, 43.75, -68.33, 47.47)),
("3464","NAD83(HARN) / Maine CS2000 Central",(-70.03, 43.75, -68.33, 47.47)),
("3465","NAD83(NSRS2007) / Alabama East",(-86.79, 30.99, -84.89, 35.0)),
("3466","NAD83(NSRS2007) / Alabama West",(-88.48, 30.14, -86.3, 35.02)),
("3467","NAD83(NSRS2007) / Alaska Albers",(172.42, 51.3, -129.99, 71.4)),
("3468","NAD83(NSRS2007) / Alaska zone 1",(-141.0, 54.61, -129.99, 60.35)),
("3469","NAD83(NSRS2007) / Alaska zone 2",(-144.01, 59.72, -140.98, 70.16)),
("3470","NAD83(NSRS2007) / Alaska zone 3",(-148.0, 59.72, -144.0, 70.38)),
("3471","NAD83(NSRS2007) / Alaska zone 4",(-152.01, 59.11, -147.99, 70.63)),
("3472","NAD83(NSRS2007) / Alaska zone 5",(-156.0, 55.72, -151.86, 71.28)),
("3473","NAD83(NSRS2007) / Alaska zone 6",(-160.0, 54.89, -155.99, 71.4)),
("3474","NAD83(NSRS2007) / Alaska zone 7",(-164.01, 54.32, -160.0, 70.74)),
("3475","NAD83(NSRS2007) / Alaska zone 8",(-168.26, 54.34, -164.0, 69.05)),
("3476","NAD83(NSRS2007) / Alaska zone 9",(-173.16, 56.49, -168.0, 65.82)),
("3477","NAD83(NSRS2007) / Alaska zone 10",(172.42, 51.3, -164.84, 54.34)),
("3478","NAD83(NSRS2007) / Arizona Central",(-113.35, 31.33, -110.44, 37.01)),
("3479","NAD83(NSRS2007) / Arizona Central (ft)",(-113.35, 31.33, -110.44, 37.01)),
("3480","NAD83(NSRS2007) / Arizona East",(-111.71, 31.33, -109.04, 37.01)),
("3481","NAD83(NSRS2007) / Arizona East (ft)",(-111.71, 31.33, -109.04, 37.01)),
("3482","NAD83(NSRS2007) / Arizona West",(-114.81, 32.05, -112.52, 37.0)),
("3483","NAD83(NSRS2007) / Arizona West (ft)",(-114.81, 32.05, -112.52, 37.0)),
("3484","NAD83(NSRS2007) / Arkansas North",(-94.62, 34.67, -89.64, 36.5)),
("3485","NAD83(NSRS2007) / Arkansas North (ftUS)",(-94.62, 34.67, -89.64, 36.5)),
("3486","NAD83(NSRS2007) / Arkansas South",(-94.48, 33.01, -90.4, 35.1)),
("3487","NAD83(NSRS2007) / Arkansas South (ftUS)",(-94.48, 33.01, -90.4, 35.1)),
("3488","NAD83(NSRS2007) / California Albers",(-124.45, 32.53, -114.12, 42.01)),
("3489","NAD83(NSRS2007) / California zone 1",(-124.45, 39.59, -119.99, 42.01)),
("3490","NAD83(NSRS2007) / California zone 1 (ftUS)",(-124.45, 39.59, -119.99, 42.01)),
("3491","NAD83(NSRS2007) / California zone 2",(-124.06, 38.02, -119.54, 40.16)),
("3492","NAD83(NSRS2007) / California zone 2 (ftUS)",(-124.06, 38.02, -119.54, 40.16)),
("3493","NAD83(NSRS2007) / California zone 3",(-123.02, 36.73, -117.83, 38.71)),
("3494","NAD83(NSRS2007) / California zone 3 (ftUS)",(-123.02, 36.73, -117.83, 38.71)),
("3495","NAD83(NSRS2007) / California zone 4",(-122.01, 35.78, -115.62, 37.58)),
("3496","NAD83(NSRS2007) / California zone 4 (ftUS)",(-122.01, 35.78, -115.62, 37.58)),
("3497","NAD83(NSRS2007) / California zone 5",(-121.42, 32.76, -114.12, 35.81)),
("3498","NAD83(NSRS2007) / California zone 5 (ftUS)",(-121.42, 32.76, -114.12, 35.81)),
("3499","NAD83(NSRS2007) / California zone 6",(-118.15, 32.53, -114.42, 34.08)),
("3500","NAD83(NSRS2007) / California zone 6 (ftUS)",(-118.15, 32.53, -114.42, 34.08)),
("3501","NAD83(NSRS2007) / Colorado Central",(-109.06, 38.14, -102.04, 40.09)),
("3502","NAD83(NSRS2007) / Colorado Central (ftUS)",(-109.06, 38.14, -102.04, 40.09)),
("3503","NAD83(NSRS2007) / Colorado North",(-109.06, 39.56, -102.04, 41.01)),
("3504","NAD83(NSRS2007) / Colorado North (ftUS)",(-109.06, 39.56, -102.04, 41.01)),
("3505","NAD83(NSRS2007) / Colorado South",(-109.06, 36.98, -102.04, 38.68)),
("3506","NAD83(NSRS2007) / Colorado South (ftUS)",(-109.06, 36.98, -102.04, 38.68)),
("3507","NAD83(NSRS2007) / Connecticut",(-73.73, 40.98, -71.78, 42.05)),
("3508","NAD83(NSRS2007) / Connecticut (ftUS)",(-73.73, 40.98, -71.78, 42.05)),
("3509","NAD83(NSRS2007) / Delaware",(-75.8, 38.44, -74.97, 39.85)),
("3510","NAD83(NSRS2007) / Delaware (ftUS)",(-75.8, 38.44, -74.97, 39.85)),
("3511","NAD83(NSRS2007) / Florida East",(-82.33, 24.41, -79.97, 30.83)),
("3512","NAD83(NSRS2007) / Florida East (ftUS)",(-82.33, 24.41, -79.97, 30.83)),
("3513","NAD83(NSRS2007) / Florida GDL Albers",(-87.63, 24.41, -79.97, 31.01)),
("3514","NAD83(NSRS2007) / Florida North",(-87.63, 29.21, -82.04, 31.01)),
("3515","NAD83(NSRS2007) / Florida North (ftUS)",(-87.63, 29.21, -82.04, 31.01)),
("3516","NAD83(NSRS2007) / Florida West",(-83.34, 26.27, -81.13, 29.6)),
("3517","NAD83(NSRS2007) / Florida West (ftUS)",(-83.34, 26.27, -81.13, 29.6)),
("3518","NAD83(NSRS2007) / Georgia East",(-83.47, 30.36, -80.77, 34.68)),
("3519","NAD83(NSRS2007) / Georgia East (ftUS)",(-83.47, 30.36, -80.77, 34.68)),
("3520","NAD83(NSRS2007) / Georgia West",(-85.61, 30.62, -82.99, 35.01)),
("3521","NAD83(NSRS2007) / Georgia West (ftUS)",(-85.61, 30.62, -82.99, 35.01)),
("3522","NAD83(NSRS2007) / Idaho Central",(-115.3, 41.99, -112.68, 45.7)),
("3523","NAD83(NSRS2007) / Idaho Central (ftUS)",(-115.3, 41.99, -112.68, 45.7)),
("3524","NAD83(NSRS2007) / Idaho East",(-113.24, 41.99, -111.04, 44.75)),
("3525","NAD83(NSRS2007) / Idaho East (ftUS)",(-113.24, 41.99, -111.04, 44.75)),
("3526","NAD83(NSRS2007) / Idaho West",(-117.24, 41.99, -114.32, 49.01)),
("3527","NAD83(NSRS2007) / Idaho West (ftUS)",(-117.24, 41.99, -114.32, 49.01)),
("3528","NAD83(NSRS2007) / Illinois East",(-89.28, 37.06, -87.02, 42.5)),
("3529","NAD83(NSRS2007) / Illinois East (ftUS)",(-89.28, 37.06, -87.02, 42.5)),
("3530","NAD83(NSRS2007) / Illinois West",(-91.52, 36.98, -88.93, 42.51)),
("3531","NAD83(NSRS2007) / Illinois West (ftUS)",(-91.52, 36.98, -88.93, 42.51)),
("3532","NAD83(NSRS2007) / Indiana East",(-86.59, 37.95, -84.78, 41.77)),
("3533","NAD83(NSRS2007) / Indiana East (ftUS)",(-86.59, 37.95, -84.78, 41.77)),
("3534","NAD83(NSRS2007) / Indiana West",(-88.06, 37.77, -86.24, 41.77)),
("3535","NAD83(NSRS2007) / Indiana West (ftUS)",(-88.06, 37.77, -86.24, 41.77)),
("3536","NAD83(NSRS2007) / Iowa North",(-96.65, 41.85, -90.15, 43.51)),
("3537","NAD83(NSRS2007) / Iowa North (ftUS)",(-96.65, 41.85, -90.15, 43.51)),
("3538","NAD83(NSRS2007) / Iowa South",(-96.14, 40.37, -90.14, 42.04)),
("3539","NAD83(NSRS2007) / Iowa South (ftUS)",(-96.14, 40.37, -90.14, 42.04)),
("3540","NAD83(NSRS2007) / Kansas North",(-102.06, 38.52, -94.58, 40.01)),
("3541","NAD83(NSRS2007) / Kansas North (ftUS)",(-102.06, 38.52, -94.58, 40.01)),
("3542","NAD83(NSRS2007) / Kansas South",(-102.05, 36.99, -94.6, 38.88)),
("3543","NAD83(NSRS2007) / Kansas South (ftUS)",(-102.05, 36.99, -94.6, 38.88)),
("3544","NAD83(NSRS2007) / Kentucky North",(-85.96, 37.71, -82.47, 39.15)),
("3545","NAD83(NSRS2007) / Kentucky North (ftUS)",(-85.96, 37.71, -82.47, 39.15)),
("3546","NAD83(NSRS2007) / Kentucky Single Zone",(-89.57, 36.49, -81.95, 39.15)),
("3547","NAD83(NSRS2007) / Kentucky Single Zone (ftUS)",(-89.57, 36.49, -81.95, 39.15)),
("3548","NAD83(NSRS2007) / Kentucky South",(-89.57, 36.49, -81.95, 38.17)),
("3549","NAD83(NSRS2007) / Kentucky South (ftUS)",(-89.57, 36.49, -81.95, 38.17)),
("3550","NAD83(NSRS2007) / Louisiana North",(-94.05, 30.85, -90.86, 33.03)),
("3551","NAD83(NSRS2007) / Louisiana North (ftUS)",(-94.05, 30.85, -90.86, 33.03)),
("3552","NAD83(NSRS2007) / Louisiana South",(-93.94, 28.85, -88.75, 31.07)),
("3553","NAD83(NSRS2007) / Louisiana South (ftUS)",(-93.94, 28.85, -88.75, 31.07)),
("3554","NAD83(NSRS2007) / Maine CS2000 Central",(-70.03, 43.75, -68.33, 47.47)),
("3555","NAD83(NSRS2007) / Maine CS2000 East",(-68.58, 44.18, -66.91, 47.37)),
("3556","NAD83(NSRS2007) / Maine CS2000 West",(-71.09, 43.07, -69.61, 46.58)),
("3557","NAD83(NSRS2007) / Maine East",(-70.03, 43.88, -66.91, 47.47)),
("3558","NAD83(NSRS2007) / Maine West",(-71.09, 43.04, -69.26, 46.58)),
("3559","NAD83(NSRS2007) / Maryland",(-79.49, 37.97, -74.97, 39.73)),
("3560","NAD83 / Utah North (ftUS)",(-114.04, 40.55, -109.04, 42.01)),
("3561","Old Hawaiian / Hawaii zone 1",(-156.1, 18.87, -154.74, 20.33)),
("3562","Old Hawaiian / Hawaii zone 2",(-157.36, 20.45, -155.93, 21.26)),
("3563","Old Hawaiian / Hawaii zone 3",(-158.33, 21.2, -157.61, 21.75)),
("3564","Old Hawaiian / Hawaii zone 4",(-159.85, 21.81, -159.23, 22.29)),
("3565","Old Hawaiian / Hawaii zone 5",(-160.3, 21.73, -159.99, 22.07)),
("3566","NAD83 / Utah Central (ftUS)",(-114.05, 38.49, -109.04, 41.08)),
("3567","NAD83 / Utah South (ftUS)",(-114.05, 36.99, -109.04, 38.58)),
("3568","NAD83(HARN) / Utah North (ftUS)",(-114.04, 40.55, -109.04, 42.01)),
("3569","NAD83(HARN) / Utah Central (ftUS)",(-114.05, 38.49, -109.04, 41.08)),
("3570","NAD83(HARN) / Utah South (ftUS)",(-114.05, 36.99, -109.04, 38.58)),
("3571","WGS 84 / North Pole LAEA Bering Sea",(-180.0, 45.0, 180.0, 90.0)),
("3572","WGS 84 / North Pole LAEA Alaska",(-180.0, 45.0, 180.0, 90.0)),
("3573","WGS 84 / North Pole LAEA Canada",(-180.0, 45.0, 180.0, 90.0)),
("3574","WGS 84 / North Pole LAEA Atlantic",(-180.0, 45.0, 180.0, 90.0)),
("3575","WGS 84 / North Pole LAEA Europe",(-180.0, 45.0, 180.0, 90.0)),
("3576","WGS 84 / North Pole LAEA Russia",(-180.0, 45.0, 180.0, 90.0)),
("3577","GDA94 / Australian Albers",(112.85, -43.7, 153.69, -9.86)),
("3578","NAD83 / Yukon Albers",(-141.01, 59.99, -123.91, 69.7)),
("3579","NAD83(CSRS) / Yukon Albers",(-141.01, 59.99, -123.91, 69.7)),
("3580","NAD83 / NWT Lambert",(-136.46, 59.98, -102.0, 78.81)),
("3581","NAD83(CSRS) / NWT Lambert",(-136.46, 59.98, -102.0, 78.81)),
("3582","NAD83(NSRS2007) / Maryland (ftUS)",(-79.49, 37.97, -74.97, 39.73)),
("3583","NAD83(NSRS2007) / Massachusetts Island",(-70.91, 41.19, -69.89, 41.51)),
("3584","NAD83(NSRS2007) / Massachusetts Island (ftUS)",(-70.91, 41.19, -69.89, 41.51)),
("3585","NAD83(NSRS2007) / Massachusetts Mainland",(-73.5, 41.46, -69.86, 42.89)),
("3586","NAD83(NSRS2007) / Massachusetts Mainland (ftUS)",(-73.5, 41.46, -69.86, 42.89)),
("3587","NAD83(NSRS2007) / Michigan Central",(-87.06, 43.8, -82.27, 45.92)),
("3588","NAD83(NSRS2007) / Michigan Central (ft)",(-87.06, 43.8, -82.27, 45.92)),
("3589","NAD83(NSRS2007) / Michigan North",(-90.42, 45.08, -83.44, 48.32)),
("3590","NAD83(NSRS2007) / Michigan North (ft)",(-90.42, 45.08, -83.44, 48.32)),
("3591","NAD83(NSRS2007) / Michigan Oblique Mercator",(-90.42, 41.69, -82.13, 48.32)),
("3592","NAD83(NSRS2007) / Michigan South",(-87.2, 41.69, -82.13, 44.22)),
("3593","NAD83(NSRS2007) / Michigan South (ft)",(-87.2, 41.69, -82.13, 44.22)),
("3594","NAD83(NSRS2007) / Minnesota Central",(-96.86, 45.28, -92.29, 47.48)),
("3595","NAD83(NSRS2007) / Minnesota North",(-97.22, 46.64, -89.49, 49.38)),
("3596","NAD83(NSRS2007) / Minnesota South",(-96.85, 43.49, -91.21, 45.59)),
("3597","NAD83(NSRS2007) / Mississippi East",(-89.97, 30.01, -88.09, 35.01)),
("3598","NAD83(NSRS2007) / Mississippi East (ftUS)",(-89.97, 30.01, -88.09, 35.01)),
("3599","NAD83(NSRS2007) / Mississippi West",(-91.65, 31.0, -89.37, 35.01)),
("3600","NAD83(NSRS2007) / Mississippi West (ftUS)",(-91.65, 31.0, -89.37, 35.01)),
("3601","NAD83(NSRS2007) / Missouri Central",(-93.79, 36.48, -91.41, 40.61)),
("3602","NAD83(NSRS2007) / Missouri East",(-91.97, 35.98, -89.1, 40.61)),
("3603","NAD83(NSRS2007) / Missouri West",(-95.77, 36.48, -93.48, 40.59)),
("3604","NAD83(NSRS2007) / Montana",(-116.07, 44.35, -104.04, 49.01)),
("3605","NAD83(NSRS2007) / Montana (ft)",(-116.07, 44.35, -104.04, 49.01)),
("3606","NAD83(NSRS2007) / Nebraska",(-104.06, 39.99, -95.3, 43.01)),
("3607","NAD83(NSRS2007) / Nevada Central",(-118.19, 36.0, -114.99, 41.0)),
("3608","NAD83(NSRS2007) / Nevada Central (ftUS)",(-118.19, 36.0, -114.99, 41.0)),
("3609","NAD83(NSRS2007) / Nevada East",(-117.01, 34.99, -114.03, 42.0)),
("3610","NAD83(NSRS2007) / Nevada East (ftUS)",(-117.01, 34.99, -114.03, 42.0)),
("3611","NAD83(NSRS2007) / Nevada West",(-120.0, 36.95, -116.99, 42.0)),
("3612","NAD83(NSRS2007) / Nevada West (ftUS)",(-120.0, 36.95, -116.99, 42.0)),
("3613","NAD83(NSRS2007) / New Hampshire",(-72.56, 42.69, -70.63, 45.31)),
("3614","NAD83(NSRS2007) / New Hampshire (ftUS)",(-72.56, 42.69, -70.63, 45.31)),
("3615","NAD83(NSRS2007) / New Jersey",(-75.6, 38.87, -73.88, 41.36)),
("3616","NAD83(NSRS2007) / New Jersey (ftUS)",(-75.6, 38.87, -73.88, 41.36)),
("3617","NAD83(NSRS2007) / New Mexico Central",(-107.73, 31.78, -104.84, 37.0)),
("3618","NAD83(NSRS2007) / New Mexico Central (ftUS)",(-107.73, 31.78, -104.84, 37.0)),
("3619","NAD83(NSRS2007) / New Mexico East",(-105.72, 32.0, -102.99, 37.0)),
("3620","NAD83(NSRS2007) / New Mexico East (ftUS)",(-105.72, 32.0, -102.99, 37.0)),
("3621","NAD83(NSRS2007) / New Mexico West",(-109.06, 31.33, -106.32, 37.0)),
("3622","NAD83(NSRS2007) / New Mexico West (ftUS)",(-109.06, 31.33, -106.32, 37.0)),
("3623","NAD83(NSRS2007) / New York Central",(-77.75, 41.99, -75.04, 44.41)),
("3624","NAD83(NSRS2007) / New York Central (ftUS)",(-77.75, 41.99, -75.04, 44.41)),
("3625","NAD83(NSRS2007) / New York East",(-75.87, 40.88, -73.23, 45.02)),
("3626","NAD83(NSRS2007) / New York East (ftUS)",(-75.87, 40.88, -73.23, 45.02)),
("3627","NAD83(NSRS2007) / New York Long Island",(-74.26, 40.47, -71.8, 41.3)),
("3628","NAD83(NSRS2007) / New York Long Island (ftUS)",(-74.26, 40.47, -71.8, 41.3)),
("3629","NAD83(NSRS2007) / New York West",(-79.77, 41.99, -77.36, 43.64)),
("3630","NAD83(NSRS2007) / New York West (ftUS)",(-79.77, 41.99, -77.36, 43.64)),
("3631","NAD83(NSRS2007) / North Carolina",(-84.33, 33.83, -75.38, 36.59)),
("3632","NAD83(NSRS2007) / North Carolina (ftUS)",(-84.33, 33.83, -75.38, 36.59)),
("3633","NAD83(NSRS2007) / North Dakota North",(-104.07, 47.15, -96.83, 49.01)),
("3634","NAD83(NSRS2007) / North Dakota North (ft)",(-104.07, 47.15, -96.83, 49.01)),
("3635","NAD83(NSRS2007) / North Dakota South",(-104.05, 45.93, -96.55, 47.83)),
("3636","NAD83(NSRS2007) / North Dakota South (ft)",(-104.05, 45.93, -96.55, 47.83)),
("3637","NAD83(NSRS2007) / Ohio North",(-84.81, 40.1, -80.51, 42.33)),
("3638","NAD83(NSRS2007) / Ohio South",(-84.83, 38.4, -80.7, 40.36)),
("3639","NAD83(NSRS2007) / Oklahoma North",(-103.0, 35.27, -94.42, 37.01)),
("3640","NAD83(NSRS2007) / Oklahoma North (ftUS)",(-103.0, 35.27, -94.42, 37.01)),
("3641","NAD83(NSRS2007) / Oklahoma South",(-100.0, 33.62, -94.42, 35.57)),
("3642","NAD83(NSRS2007) / Oklahoma South (ftUS)",(-100.0, 33.62, -94.42, 35.57)),
("3643","NAD83(NSRS2007) / Oregon LCC (m)",(-124.6, 41.98, -116.47, 46.26)),
("3644","NAD83(NSRS2007) / Oregon GIC Lambert (ft)",(-124.6, 41.98, -116.47, 46.26)),
("3645","NAD83(NSRS2007) / Oregon North",(-124.17, 43.95, -116.47, 46.26)),
("3646","NAD83(NSRS2007) / Oregon North (ft)",(-124.17, 43.95, -116.47, 46.26)),
("3647","NAD83(NSRS2007) / Oregon South",(-124.6, 41.98, -116.9, 44.56)),
("3648","NAD83(NSRS2007) / Oregon South (ft)",(-124.6, 41.98, -116.9, 44.56)),
("3649","NAD83(NSRS2007) / Pennsylvania North",(-80.53, 40.6, -74.7, 42.53)),
("3650","NAD83(NSRS2007) / Pennsylvania North (ftUS)",(-80.53, 40.6, -74.7, 42.53)),
("3651","NAD83(NSRS2007) / Pennsylvania South",(-80.53, 39.71, -74.72, 41.18)),
("3652","NAD83(NSRS2007) / Pennsylvania South (ftUS)",(-80.53, 39.71, -74.72, 41.18)),
("3653","NAD83(NSRS2007) / Rhode Island",(-71.85, 41.13, -71.08, 42.02)),
("3654","NAD83(NSRS2007) / Rhode Island (ftUS)",(-71.85, 41.13, -71.08, 42.02)),
("3655","NAD83(NSRS2007) / South Carolina",(-83.36, 32.05, -78.52, 35.21)),
("3656","NAD83(NSRS2007) / South Carolina (ft)",(-83.36, 32.05, -78.52, 35.21)),
("3657","NAD83(NSRS2007) / South Dakota North",(-104.07, 44.14, -96.45, 45.95)),
("3658","NAD83(NSRS2007) / South Dakota North (ftUS)",(-104.07, 44.14, -96.45, 45.95)),
("3659","NAD83(NSRS2007) / South Dakota South",(-104.06, 42.48, -96.43, 44.79)),
("3660","NAD83(NSRS2007) / South Dakota South (ftUS)",(-104.06, 42.48, -96.43, 44.79)),
("3661","NAD83(NSRS2007) / Tennessee",(-90.31, 34.98, -81.65, 36.68)),
("3662","NAD83(NSRS2007) / Tennessee (ftUS)",(-90.31, 34.98, -81.65, 36.68)),
("3663","NAD83(NSRS2007) / Texas Central",(-106.66, 29.78, -93.5, 32.27)),
("3664","NAD83(NSRS2007) / Texas Central (ftUS)",(-106.66, 29.78, -93.5, 32.27)),
("3665","NAD83(NSRS2007) / Texas Centric Albers Equal Area",(-106.66, 25.83, -93.5, 36.5)),
("3666","NAD83(NSRS2007) / Texas Centric Lambert Conformal",(-106.66, 25.83, -93.5, 36.5)),
("3667","NAD83(NSRS2007) / Texas North",(-103.03, 34.3, -99.99, 36.5)),
("3668","NAD83(NSRS2007) / Texas North (ftUS)",(-103.03, 34.3, -99.99, 36.5)),
("3669","NAD83(NSRS2007) / Texas North Central",(-103.07, 31.72, -94.0, 34.58)),
("3670","NAD83(NSRS2007) / Texas North Central (ftUS)",(-103.07, 31.72, -94.0, 34.58)),
("3671","NAD83(NSRS2007) / Texas South",(-100.2, 25.83, -96.85, 28.21)),
("3672","NAD83(NSRS2007) / Texas South (ftUS)",(-100.2, 25.83, -96.85, 28.21)),
("3673","NAD83(NSRS2007) / Texas South Central",(-105.0, 27.78, -93.76, 30.67)),
("3674","NAD83(NSRS2007) / Texas South Central (ftUS)",(-105.0, 27.78, -93.76, 30.67)),
("3675","NAD83(NSRS2007) / Utah Central",(-114.05, 38.49, -109.04, 41.08)),
("3676","NAD83(NSRS2007) / Utah Central (ft)",(-114.05, 38.49, -109.04, 41.08)),
("3677","NAD83(NSRS2007) / Utah Central (ftUS)",(-114.05, 38.49, -109.04, 41.08)),
("3678","NAD83(NSRS2007) / Utah North",(-114.04, 40.55, -109.04, 42.01)),
("3679","NAD83(NSRS2007) / Utah North (ft)",(-114.04, 40.55, -109.04, 42.01)),
("3680","NAD83(NSRS2007) / Utah North (ftUS)",(-114.04, 40.55, -109.04, 42.01)),
("3681","NAD83(NSRS2007) / Utah South",(-114.05, 36.99, -109.04, 38.58)),
("3682","NAD83(NSRS2007) / Utah South (ft)",(-114.05, 36.99, -109.04, 38.58)),
("3683","NAD83(NSRS2007) / Utah South (ftUS)",(-114.05, 36.99, -109.04, 38.58)),
("3684","NAD83(NSRS2007) / Vermont",(-73.44, 42.72, -71.5, 45.03)),
("3685","NAD83(NSRS2007) / Virginia North",(-80.06, 37.77, -76.51, 39.46)),
("3686","NAD83(NSRS2007) / Virginia North (ftUS)",(-80.06, 37.77, -76.51, 39.46)),
("3687","NAD83(NSRS2007) / Virginia South",(-83.68, 36.54, -75.31, 38.28)),
("3688","NAD83(NSRS2007) / Virginia South (ftUS)",(-83.68, 36.54, -75.31, 38.28)),
("3689","NAD83(NSRS2007) / Washington North",(-124.79, 47.08, -117.02, 49.05)),
("3690","NAD83(NSRS2007) / Washington North (ftUS)",(-124.79, 47.08, -117.02, 49.05)),
("3691","NAD83(NSRS2007) / Washington South",(-124.4, 45.54, -116.91, 47.61)),
("3692","NAD83(NSRS2007) / Washington South (ftUS)",(-124.4, 45.54, -116.91, 47.61)),
("3693","NAD83(NSRS2007) / West Virginia North",(-81.76, 38.76, -77.72, 40.64)),
("3694","NAD83(NSRS2007) / West Virginia South",(-82.65, 37.2, -79.05, 39.17)),
("3695","NAD83(NSRS2007) / Wisconsin Central",(-92.89, 43.98, -86.25, 45.8)),
("3696","NAD83(NSRS2007) / Wisconsin Central (ftUS)",(-92.89, 43.98, -86.25, 45.8)),
("3697","NAD83(NSRS2007) / Wisconsin North",(-92.89, 45.37, -88.05, 47.31)),
("3698","NAD83(NSRS2007) / Wisconsin North (ftUS)",(-92.89, 45.37, -88.05, 47.31)),
("3699","NAD83(NSRS2007) / Wisconsin South",(-91.43, 42.48, -86.95, 44.33)),
("3700","NAD83(NSRS2007) / Wisconsin South (ftUS)",(-91.43, 42.48, -86.95, 44.33)),
("3701","NAD83(NSRS2007) / Wisconsin Transverse Mercator",(-92.89, 42.48, -86.25, 47.31)),
("3702","NAD83(NSRS2007) / Wyoming East",(-106.33, 40.99, -104.05, 45.01)),
("3703","NAD83(NSRS2007) / Wyoming East Central",(-108.63, 40.99, -106.0, 45.01)),
("3704","NAD83(NSRS2007) / Wyoming West Central",(-111.06, 40.99, -107.5, 45.01)),
("3705","NAD83(NSRS2007) / Wyoming West",(-111.06, 40.99, -109.04, 44.67)),
("3706","NAD83(NSRS2007) / UTM zone 59N",(167.65, 49.01, 174.01, 56.28)),
("3707","NAD83(NSRS2007) / UTM zone 60N",(174.0, 47.92, 180.0, 56.67)),
("3708","NAD83(NSRS2007) / UTM zone 1N",(-180.0, 47.88, -173.99, 63.21)),
("3709","NAD83(NSRS2007) / UTM zone 2N",(-174.0, 48.66, -167.99, 73.05)),
("3710","NAD83(NSRS2007) / UTM zone 3N",(-168.0, 49.52, -161.99, 74.29)),
("3711","NAD83(NSRS2007) / UTM zone 4N",(-162.0, 50.98, -155.99, 74.71)),
("3712","NAD83(NSRS2007) / UTM zone 5N",(-156.0, 52.15, -149.99, 74.71)),
("3713","NAD83(NSRS2007) / UTM zone 6N",(-150.0, 54.05, -143.99, 74.13)),
("3714","NAD83(NSRS2007) / UTM zone 7N",(-144.0, 53.47, -137.99, 73.59)),
("3715","NAD83(NSRS2007) / UTM zone 8N",(-138.0, 53.6, -131.99, 73.04)),
("3716","NAD83(NSRS2007) / UTM zone 9N",(-132.0, 35.38, -126.0, 56.84)),
("3717","NAD83(NSRS2007) / UTM zone 10N",(-126.0, 30.54, -119.99, 49.09)),
("3718","NAD83(NSRS2007) / UTM zone 11N",(-120.0, 30.88, -114.0, 49.01)),
("3719","NAD83(NSRS2007) / UTM zone 12N",(-114.0, 31.33, -108.0, 49.01)),
("3720","NAD83(NSRS2007) / UTM zone 13N",(-108.0, 28.98, -102.0, 49.01)),
("3721","NAD83(NSRS2007) / UTM zone 14N",(-102.0, 25.83, -96.0, 49.01)),
("3722","NAD83(NSRS2007) / UTM zone 15N",(-96.01, 25.61, -90.0, 49.38)),
("3723","NAD83(NSRS2007) / UTM zone 16N",(-90.0, 23.97, -84.0, 48.32)),
("3724","NAD83(NSRS2007) / UTM zone 17N",(-84.0, 23.81, -78.0, 46.13)),
("3725","NAD83(NSRS2007) / UTM zone 18N",(-78.0, 28.28, -72.0, 45.03)),
("3726","NAD83(NSRS2007) / UTM zone 19N",(-72.0, 33.61, -65.99, 47.47)),
("3727","Reunion 1947 / TM Reunion",(55.16, -21.42, 55.91, -20.81)),
("3728","NAD83(NSRS2007) / Ohio North (ftUS)",(-84.81, 40.1, -80.51, 42.33)),
("3729","NAD83(NSRS2007) / Ohio South (ftUS)",(-84.83, 38.4, -80.7, 40.36)),
("3730","NAD83(NSRS2007) / Wyoming East (ftUS)",(-106.33, 40.99, -104.05, 45.01)),
("3731","NAD83(NSRS2007) / Wyoming East Central (ftUS)",(-108.63, 40.99, -106.0, 45.01)),
("3732","NAD83(NSRS2007) / Wyoming West Central (ftUS)",(-111.06, 40.99, -107.5, 45.01)),
("3733","NAD83(NSRS2007) / Wyoming West (ftUS)",(-111.06, 40.99, -109.04, 44.67)),
("3734","NAD83 / Ohio North (ftUS)",(-84.81, 40.1, -80.51, 42.33)),
("3735","NAD83 / Ohio South (ftUS)",(-84.83, 38.4, -80.7, 40.36)),
("3736","NAD83 / Wyoming East (ftUS)",(-106.33, 40.99, -104.05, 45.01)),
("3737","NAD83 / Wyoming East Central (ftUS)",(-108.63, 40.99, -106.0, 45.01)),
("3738","NAD83 / Wyoming West Central (ftUS)",(-111.06, 40.99, -107.5, 45.01)),
("3739","NAD83 / Wyoming West (ftUS)",(-111.06, 40.99, -109.04, 44.67)),
("3740","NAD83(HARN) / UTM zone 10N",(-124.79, 33.85, -119.99, 49.05)),
("3741","NAD83(HARN) / UTM zone 11N",(-120.0, 32.26, -114.0, 49.01)),
("3742","NAD83(HARN) / UTM zone 12N",(-114.0, 31.33, -108.0, 49.01)),
("3743","NAD83(HARN) / UTM zone 13N",(-108.0, 28.98, -102.0, 49.01)),
("3744","NAD83(HARN) / UTM zone 14N",(-102.0, 25.83, -95.99, 49.01)),
("3745","NAD83(HARN) / UTM zone 15N",(-96.0, 28.42, -89.99, 49.38)),
("3746","NAD83(HARN) / UTM zone 16N",(-90.0, 28.85, -83.99, 48.32)),
("3747","NAD83(HARN) / UTM zone 17N",(-84.01, 24.41, -78.0, 46.13)),
("3748","NAD83(HARN) / UTM zone 18N",(-78.0, 33.84, -72.0, 45.03)),
("3749","NAD83(HARN) / UTM zone 19N",(-72.0, 40.96, -66.91, 47.47)),
("3750","NAD83(HARN) / UTM zone 4N",(-160.3, 19.51, -155.99, 22.29)),
("3751","NAD83(HARN) / UTM zone 5N",(-156.0, 18.87, -154.74, 20.86)),
("3752","WGS 84 / Mercator 41",(155.0, -60.0, -170.0, -25.0)),
("3753","NAD83(HARN) / Ohio North (ftUS)",(-84.81, 40.1, -80.51, 42.33)),
("3754","NAD83(HARN) / Ohio South (ftUS)",(-84.83, 38.4, -80.7, 40.36)),
("3755","NAD83(HARN) / Wyoming East (ftUS)",(-106.33, 40.99, -104.05, 45.01)),
("3756","NAD83(HARN) / Wyoming East Central (ftUS)",(-108.63, 40.99, -106.0, 45.01)),
("3757","NAD83(HARN) / Wyoming West Central (ftUS)",(-111.06, 40.99, -107.5, 45.01)),
("3758","NAD83(HARN) / Wyoming West (ftUS)",(-111.06, 40.99, -109.04, 44.67)),
("3759","NAD83 / Hawaii zone 3 (ftUS)",(-158.33, 21.2, -157.61, 21.75)),
("3760","NAD83(HARN) / Hawaii zone 3 (ftUS)",(-158.33, 21.2, -157.61, 21.75)),
("3761","NAD83(CSRS) / UTM zone 22N",(-54.0, 43.27, -48.0, 57.65)),
("3762","WGS 84 / South Georgia Lambert",(-38.08, -54.95, -35.74, -53.93)),
("3763","ETRS89 / Portugal TM06",(-9.56, 36.95, -6.19, 42.16)),
("3764","NZGD2000 / Chatham Island Circuit 2000",(-177.25, -44.64, -175.54, -43.3)),
("3765","HTRS96 / Croatia TM",(13.43, 42.34, 19.43, 46.54)),
("3766","HTRS96 / Croatia LCC",(13.0, 41.62, 19.43, 46.54)),
("3767","HTRS96 / UTM zone 33N",(13.0, 41.63, 18.0, 46.54)),
("3768","HTRS96 / UTM zone 34N",(18.0, 41.62, 19.43, 45.92)),
("3769","Bermuda 1957 / UTM zone 20N",(-64.89, 32.21, -64.61, 32.43)),
("3770","BDA2000 / Bermuda 2000 National Grid",(-68.83, 28.91, -60.7, 35.73)),
("3771","NAD27 / Alberta 3TM ref merid 111 W",(-112.5, 48.99, -109.98, 60.0)),
("3772","NAD27 / Alberta 3TM ref merid 114 W",(-115.5, 48.99, -112.5, 60.0)),
("3773","NAD27 / Alberta 3TM ref merid 117 W",(-118.5, 50.77, -115.5, 60.0)),
("3774","NAD27 / Alberta 3TM ref merid 120 W",(-120.0, 52.88, -118.5, 60.0)),
("3775","NAD83 / Alberta 3TM ref merid 111 W",(-112.5, 48.99, -109.98, 60.0)),
("3776","NAD83 / Alberta 3TM ref merid 114 W",(-115.5, 48.99, -112.5, 60.0)),
("3777","NAD83 / Alberta 3TM ref merid 117 W",(-118.5, 50.77, -115.5, 60.0)),
("3778","NAD83 / Alberta 3TM ref merid 120 W",(-120.0, 52.88, -118.5, 60.0)),
("3779","NAD83(CSRS) / Alberta 3TM ref merid 111 W",(-112.5, 48.99, -109.98, 60.0)),
("3780","NAD83(CSRS) / Alberta 3TM ref merid 114 W",(-115.5, 48.99, -112.5, 60.0)),
("3781","NAD83(CSRS) / Alberta 3TM ref merid 117 W",(-118.5, 50.77, -115.5, 60.0)),
("3782","NAD83(CSRS) / Alberta 3TM ref merid 120 W",(-120.0, 52.88, -118.5, 60.0)),
("3783","Pitcairn 2006 / Pitcairn TM 2006",(-130.16, -25.14, -130.01, -25.0)),
("3784","Pitcairn 1967 / UTM zone 9S",(-130.16, -25.14, -130.01, -25.0)),
("3785","Popular Visualisation CRS / Mercator",(-180.0, -85.06, 180.0, 85.06)),
("3786","World Equidistant Cylindrical (Sphere)",(-180.0, -90.0, 180.0, 90.0)),
("3787","MGI / Slovene National Grid",(13.38, 45.42, 16.61, 46.88)),
("3788","NZGD2000 / Auckland Islands TM 2000",(165.55, -51.13, 166.93, -47.8)),
("3789","NZGD2000 / Campbell Island TM 2000",(168.65, -52.83, 169.6, -52.26)),
("3790","NZGD2000 / Antipodes Islands TM 2000",(178.4, -49.92, 179.37, -47.54)),
("3791","NZGD2000 / Raoul Island TM 2000",(-179.07, -31.56, -177.62, -29.03)),
("3793","NZGD2000 / Chatham Islands TM 2000",(-177.25, -44.64, -175.54, -43.3)),
("3794","Slovenia 1996 / Slovene National Grid",(13.38, 45.42, 16.61, 46.88)),
("3795","NAD27 / Cuba Norte",(-85.01, 21.38, -76.91, 23.25)),
("3796","NAD27 / Cuba Sur",(-78.69, 19.77, -74.07, 21.5)),
("3797","NAD27 / MTQ Lambert",(-79.85, 44.99, -57.1, 62.62)),
("3798","NAD83 / MTQ Lambert",(-79.85, 44.99, -57.1, 62.62)),
("3799","NAD83(CSRS) / MTQ Lambert",(-79.85, 44.99, -57.1, 62.62)),
("3800","NAD27 / Alberta 3TM ref merid 120 W",(-120.0, 52.88, -118.5, 60.0)),
("3801","NAD83 / Alberta 3TM ref merid 120 W",(-120.0, 52.88, -118.5, 60.0)),
("3802","NAD83(CSRS) / Alberta 3TM ref merid 120 W",(-120.0, 52.88, -118.5, 60.0)),
("3812","ETRS89 / Belgian Lambert 2008",(2.5, 49.5, 6.4, 51.51)),
("3814","NAD83 / Mississippi TM",(-91.65, 30.01, -88.09, 35.01)),
("3815","NAD83(HARN) / Mississippi TM",(-91.65, 30.01, -88.09, 35.01)),
("3816","NAD83(NSRS2007) / Mississippi TM",(-91.65, 30.01, -88.09, 35.01)),
("3819","HD1909",(16.11, 45.74, 22.9, 48.58)),
("3821","TWD67",(119.25, 21.87, 122.06, 25.34)),
("3822","TWD97",(114.32, 17.36, 123.61, 26.96)),
("3823","TWD97",(114.32, 17.36, 123.61, 26.96)),
("3824","TWD97",(114.32, 17.36, 123.61, 26.96)),
("3825","TWD97 / TM2 zone 119",(118.0, 18.63, 120.0, 24.65)),
("3826","TWD97 / TM2 zone 121",(119.99, 20.41, 122.06, 26.72)),
("3827","TWD67 / TM2 zone 119",(119.25, 23.12, 119.78, 23.82)),
("3828","TWD67 / TM2 zone 121",(119.99, 21.87, 122.06, 25.34)),
("3829","Hu Tzu Shan 1950 / UTM zone 51N",(119.25, 21.87, 122.06, 25.34)),
("3832","WGS 84 / PDC Mercator",(98.69, -60.0, -68.0, 66.67)),
("3833","Pulkovo 1942(58) / Gauss-Kruger zone 2",(9.92, 50.2, 12.0, 54.23)),
("3834","Pulkovo 1942(83) / Gauss-Kruger zone 2",(9.92, 50.2, 12.0, 54.23)),
("3835","Pulkovo 1942(83) / Gauss-Kruger zone 3",(12.0, 45.78, 18.01, 54.74)),
("3836","Pulkovo 1942(83) / Gauss-Kruger zone 4",(18.0, 45.74, 22.9, 50.06)),
("3837","Pulkovo 1942(58) / 3-degree Gauss-Kruger zone 3",(9.92, 50.35, 10.5, 51.56)),
("3838","Pulkovo 1942(58) / 3-degree Gauss-Kruger zone 4",(10.5, 48.97, 13.5, 54.74)),
("3839","Pulkovo 1942(58) / 3-degree Gauss-Kruger zone 9",(25.5, 41.28, 28.5, 48.27)),
("3840","Pulkovo 1942(58) / 3-degree Gauss-Kruger zone 10",(28.5, 43.34, 29.74, 45.44)),
("3841","Pulkovo 1942(83) / 3-degree Gauss-Kruger zone 6",(16.5, 45.74, 19.5, 50.45)),
("3842","Pulkovo 1942(83) / 3-degree Gauss-Kruger zone 7",(19.5, 46.1, 22.5, 49.59)),
("3843","Pulkovo 1942(83) / 3-degree Gauss-Kruger zone 8",(22.5, 47.76, 22.9, 49.1)),
("3844","Pulkovo 1942(58) / Stereo70",(20.26, 43.44, 31.41, 48.27)),
("3845","SWEREF99 / RT90 7.5 gon V emulation",(10.93, 57.29, 12.91, 59.73)),
("3846","SWEREF99 / RT90 5 gon V emulation",(11.81, 55.28, 15.44, 64.39)),
("3847","SWEREF99 / RT90 2.5 gon V emulation",(13.66, 55.95, 17.73, 67.18)),
("3848","SWEREF99 / RT90 0 gon emulation",(16.08, 56.86, 20.22, 68.54)),
("3849","SWEREF99 / RT90 2.5 gon O emulation",(18.4, 63.37, 22.2, 69.07)),
("3850","SWEREF99 / RT90 5 gon O emulation",(21.34, 65.24, 24.17, 68.58)),
("3851","NZGD2000 / NZCS2000",(160.6, -55.95, -171.2, -25.88)),
("3852","RSRGD2000 / DGLC2000",(145.0, -81.0, 169.0, -76.0)),
("3854","County ST74",(17.25, 58.69, 19.61, 60.27)),
("3855","EGM2008 height",(-180.0, -90.0, 180.0, 90.0)),
("3857","WGS 84 / Pseudo-Mercator",(-180.0, -85.06, 180.0, 85.06)),
("3873","ETRS89 / GK19FIN",(19.24, 60.08, 19.5, 60.34)),
("3874","ETRS89 / GK20FIN",(19.5, 59.92, 20.5, 60.48)),
("3875","ETRS89 / GK21FIN",(20.5, 59.84, 21.5, 69.33)),
("3876","ETRS89 / GK22FIN",(21.5, 59.76, 22.5, 69.31)),
("3877","ETRS89 / GK23FIN",(22.5, 59.75, 23.5, 68.74)),
("3878","ETRS89 / GK24FIN",(23.5, 59.86, 24.5, 68.84)),
("3879","ETRS89 / GK25FIN",(24.5, 59.94, 25.5, 68.9)),
("3880","ETRS89 / GK26FIN",(25.5, 60.18, 26.5, 69.94)),
("3881","ETRS89 / GK27FIN",(26.5, 60.36, 27.5, 70.05)),
("3882","ETRS89 / GK28FIN",(27.5, 60.42, 28.5, 70.09)),
("3883","ETRS89 / GK29FIN",(28.5, 60.94, 29.5, 69.81)),
("3884","ETRS89 / GK30FIN",(29.5, 61.43, 30.5, 67.98)),
("3885","ETRS89 / GK31FIN",(30.5, 62.08, 31.59, 64.27)),
("3886","Fao 1979 height",(38.79, 29.06, 48.61, 37.39)),
("3887","IGRS",(38.79, 29.06, 48.75, 37.39)),
("3888","IGRS",(38.79, 29.06, 48.75, 37.39)),
("3889","IGRS",(38.79, 29.06, 48.75, 37.39)),
("3890","IGRS / UTM zone 37N",(38.79, 31.14, 42.0, 36.75)),
("3891","IGRS / UTM zone 38N",(42.0, 29.06, 48.0, 37.39)),
("3892","IGRS / UTM zone 39N",(48.0, 29.6, 48.75, 31.0)),
("3893","ED50 / Iraq National Grid",(38.79, 29.06, 48.61, 37.39)),
("3900","N2000 height",(19.24, 59.75, 31.59, 70.09)),
("3901","KKJ / Finland Uniform Coordinate System + N60 height",(19.24, 59.75, 31.59, 70.09)),
("3902","ETRS89 / TM35FIN(N,E) + N60 height",(19.24, 59.75, 31.59, 70.09)),
("3903","ETRS89 / TM35FIN(N,E) + N2000 height",(19.24, 59.75, 31.59, 70.09)),
("3906","MGI 1901",(13.38, 40.85, 23.04, 46.88)),
("3907","MGI 1901 / Balkans zone 5",(13.38, 42.95, 16.5, 46.88)),
("3908","MGI 1901 / Balkans zone 6",(16.5, 41.79, 19.51, 46.55)),
("3909","MGI 1901 / Balkans zone 7",(19.5, 40.85, 22.51, 46.19)),
("3910","MGI 1901 / Balkans zone 8",(22.5, 41.11, 23.04, 44.7)),
("3911","MGI 1901 / Slovenia Grid",(13.38, 45.42, 16.61, 46.88)),
("3912","MGI 1901 / Slovene National Grid",(13.38, 45.42, 16.61, 46.88)),
("3920","Puerto Rico / UTM zone 20N",(-64.88, 18.28, -64.25, 18.78)),
("3942","RGF93 / CC42",(-1.06, 41.31, 9.63, 43.07)),
("3943","RGF93 / CC43",(-1.79, 42.33, 7.65, 44.01)),
("3944","RGF93 / CC44",(-1.79, 42.92, 7.71, 45.0)),
("3945","RGF93 / CC45",(-1.46, 44.0, 7.71, 46.0)),
("3946","RGF93 / CC46",(-2.21, 45.0, 7.16, 47.0)),
("3947","RGF93 / CC47",(-4.77, 46.0, 7.63, 48.0)),
("3948","RGF93 / CC48",(-4.87, 47.0, 8.23, 49.0)),
("3949","RGF93 / CC49",(-4.87, 48.0, 8.23, 50.0)),
("3950","RGF93 / CC50",(-2.03, 49.0, 8.08, 51.14)),
("3968","NAD83 / Virginia Lambert",(-83.68, 36.54, -75.31, 39.46)),
("3969","NAD83(HARN) / Virginia Lambert",(-83.68, 36.54, -75.31, 39.46)),
("3970","NAD83(NSRS2007) / Virginia Lambert",(-83.68, 36.54, -75.31, 39.46)),
("3973","WGS 84 / NSIDC EASE-Grid North",(-180.0, 0.0, 180.0, 90.0)),
("3974","WGS 84 / NSIDC EASE-Grid South",(-180.0, -90.0, 180.0, 0.0)),
("3975","WGS 84 / NSIDC EASE-Grid Global",(-180.0, -86.0, 180.0, 86.0)),
("3976","WGS 84 / NSIDC Sea Ice Polar Stereographic South",(-180.0, -90.0, 180.0, -60.0)),
("3978","NAD83 / Canada Atlas Lambert",(-141.01, 40.04, -47.74, 86.46)),
("3979","NAD83(CSRS) / Canada Atlas Lambert",(-141.01, 40.04, -47.74, 86.46)),
("3985","Katanga 1955 / Katanga Lambert",(21.74, -13.46, 30.78, -4.99)),
("3986","Katanga 1955 / Katanga Gauss zone A",(28.5, -13.46, 30.78, -4.99)),
("3987","Katanga 1955 / Katanga Gauss zone B",(26.5, -13.44, 29.5, -4.99)),
("3988","Katanga 1955 / Katanga Gauss zone C",(24.5, -12.08, 27.5, -4.99)),
("3989","Katanga 1955 / Katanga Gauss zone D",(21.74, -11.72, 25.51, -6.32)),
("3991","Puerto Rico State Plane CS of 1927",(-67.97, 17.87, -65.19, 18.57)),
("3992","Puerto Rico / St. Croix",(-65.09, 17.62, -64.51, 18.44)),
("3993","Guam 1963 / Guam SPCS",(144.58, 13.18, 145.01, 13.7)),
("3994","WGS 84 / Mercator 41",(155.0, -60.0, -170.0, -25.0)),
("3995","WGS 84 / Arctic Polar Stereographic",(-180.0, 60.0, 180.0, 90.0)),
("3996","WGS 84 / IBCAO Polar Stereographic",(-180.0, 60.0, 180.0, 90.0)),
("3997","WGS 84 / Dubai Local TM",(54.84, 24.85, 55.55, 25.34)),
("4000","MOLDREF99",(26.63, 45.44, 30.13, 48.47)),
("4001","Unknown datum based upon the Airy 1830 ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4002","Unknown datum based upon the Airy Modified 1849 ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4003","Unknown datum based upon the Australian National Spheroid",(-180.0, -90.0, 180.0, 90.0)),
("4004","Unknown datum based upon the Bessel 1841 ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4005","Unknown datum based upon the Bessel Modified ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4006","Unknown datum based upon the Bessel Namibia ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4007","Unknown datum based upon the Clarke 1858 ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4008","Unknown datum based upon the Clarke 1866 ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4009","Unknown datum based upon the Clarke 1866 Michigan ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4010","Unknown datum based upon the Clarke 1880 (Benoit) ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4011","Unknown datum based upon the Clarke 1880 (IGN) ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4012","Unknown datum based upon the Clarke 1880 (RGS) ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4013","Unknown datum based upon the Clarke 1880 (Arc) ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4014","Unknown datum based upon the Clarke 1880 (SGA 1922) ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4015","Unknown datum based upon the Everest 1830 (1937 Adjustment) ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4016","Unknown datum based upon the Everest 1830 (1967 Definition) ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4017","MOLDREF99",(26.63, 45.44, 30.13, 48.47)),
("4018","Unknown datum based upon the Everest 1830 Modified ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4019","Unknown datum based upon the GRS 1980 ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4020","Unknown datum based upon the Helmert 1906 ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4021","Unknown datum based upon the Indonesian National Spheroid",(-180.0, -90.0, 180.0, 90.0)),
("4022","Unknown datum based upon the International 1924 ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4023","MOLDREF99",(26.63, 45.44, 30.13, 48.47)),
("4024","Unknown datum based upon the Krassowsky 1940 ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4025","Unknown datum based upon the NWL 9D ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4026","MOLDREF99 / Moldova TM",(26.63, 45.44, 30.13, 48.47)),
("4027","Unknown datum based upon the Plessis 1817 ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4028","Unknown datum based upon the Struve 1860 ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4029","Unknown datum based upon the War Office ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4030","Unknown datum based upon the WGS 84 ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4031","Unknown datum based upon the GEM 10C ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4032","Unknown datum based upon the OSU86F ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4033","Unknown datum based upon the OSU91A ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4034","Unknown datum based upon the Clarke 1880 ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4035","Unknown datum based upon the Authalic Sphere",(-180.0, -90.0, 180.0, 90.0)),
("4036","Unknown datum based upon the GRS 1967 ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4037","WGS 84 / TMzn35N",(26.63, 45.44, 30.0, 48.47)),
("4038","WGS 84 / TMzn36N",(30.0, 46.37, 30.13, 46.47)),
("4039","RGRDC 2005",(11.79, -13.46, 29.81, -3.41)),
("4040","RGRDC 2005",(11.79, -13.46, 29.81, -3.41)),
("4041","Unknown datum based upon the Average Terrestrial System 1977 ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4042","Unknown datum based upon the Everest (1830 Definition) ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4043","Unknown datum based upon the WGS 72 ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4044","Unknown datum based upon the Everest 1830 (1962 Definition) ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4045","Unknown datum based upon the Everest 1830 (1975 Definition) ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4046","RGRDC 2005",(11.79, -13.46, 29.81, -3.41)),
("4047","Unspecified datum based upon the GRS 1980 Authalic Sphere",(-180.0, -90.0, 180.0, 90.0)),
("4048","RGRDC 2005 / Congo TM zone 12",(11.79, -6.04, 13.0, -4.67)),
("4049","RGRDC 2005 / Congo TM zone 14",(13.0, -5.91, 15.01, -4.28)),
("4050","RGRDC 2005 / Congo TM zone 16",(15.0, -7.31, 17.0, -3.41)),
("4051","RGRDC 2005 / Congo TM zone 18",(17.0, -8.11, 19.0, -3.43)),
("4052","Unspecified datum based upon the Clarke 1866 Authalic Sphere",(-180.0, -90.0, 180.0, 90.0)),
("4053","Unspecified datum based upon the International 1924 Authalic Sphere",(-180.0, -90.0, 180.0, 90.0)),
("4054","Unspecified datum based upon the Hughes 1980 ellipsoid",(-180.0, -90.0, 180.0, 90.0)),
("4055","Popular Visualisation CRS",(-180.0, -90.0, 180.0, 90.0)),
("4056","RGRDC 2005 / Congo TM zone 20",(19.0, -8.0, 21.0, -3.77)),
("4057","RGRDC 2005 / Congo TM zone 22",(21.0, -11.24, 23.01, -4.18)),
("4058","RGRDC 2005 / Congo TM zone 24",(23.0, -11.47, 25.0, -4.58)),
("4059","RGRDC 2005 / Congo TM zone 26",(25.0, -11.99, 27.0, -4.99)),
("4060","RGRDC 2005 / Congo TM zone 28",(27.0, -13.39, 29.0, -6.43)),
("4061","RGRDC 2005 / UTM zone 33S",(12.0, -8.11, 18.01, -3.41)),
("4062","RGRDC 2005 / UTM zone 34S",(18.0, -11.24, 24.0, -3.57)),
("4063","RGRDC 2005 / UTM zone 35S",(24.0, -13.46, 29.81, -4.79)),
("4071","Chua / UTM zone 23S",(-48.1, -15.94, -47.1, -15.37)),
("4073","SREF98",(18.81, 42.23, 23.01, 46.19)),
("4074","SREF98",(18.81, 42.23, 23.01, 46.19)),
("4075","SREF98",(18.81, 42.23, 23.01, 46.19)),
("4079","REGCAN95",(-21.93, 24.6, -11.75, 32.76)),
("4080","REGCAN95",(-21.93, 24.6, -11.75, 32.76)),
("4081","REGCAN95",(-21.93, 24.6, -11.75, 32.76)),
("4082","REGCAN95 / UTM zone 27N",(-21.93, 24.6, -18.0, 31.19)),
("4083","REGCAN95 / UTM zone 28N",(-18.0, 25.25, -11.75, 32.76)),
("4087","WGS 84 / World Equidistant Cylindrical",(-180.0, -90.0, 180.0, 90.0)),
("4088","World Equidistant Cylindrical (Sphere)",(-180.0, -90.0, 180.0, 90.0)),
("4093","ETRS89 / DKTM1",(8.0, 54.8, 10.0, 57.64)),
("4094","ETRS89 / DKTM2",(9.0, 54.67, 11.29, 57.8)),
("4095","ETRS89 / DKTM3",(10.79, 54.51, 12.69, 56.79)),
("4096","ETRS89 / DKTM4",(14.59, 54.94, 15.25, 55.38)),
("4097","ETRS89 / DKTM1 + DVR90 height",(8.0, 54.8, 10.0, 57.64)),
("4098","ETRS89 / DKTM2 + DVR90 height",(9.0, 54.67, 11.29, 57.8)),
("4099","ETRS89 / DKTM3 + DVR90 height",(10.79, 54.51, 12.69, 56.79)),
("4100","ETRS89 / DKTM4 + DVR90 height",(14.59, 54.94, 15.25, 55.38)),
("4120","Greek",(19.57, 34.88, 28.3, 41.75)),
("4121","GGRS87",(19.57, 34.88, 28.3, 41.75)),
("4122","ATS77",(-69.05, 43.41, -59.73, 48.07)),
("4123","KKJ",(19.24, 59.75, 31.59, 70.09)),
("4124","RT90",(10.03, 54.96, 24.17, 69.07)),
("4125","Samboja",(116.72, -1.24, 117.99, 0.0)),
("4126","LKS94 (ETRS89)",(19.02, 53.89, 26.82, 56.45)),
("4127","Tete",(30.21, -26.87, 40.9, -10.42)),
("4128","Madzansua",(30.21, -17.76, 35.37, -14.01)),
("4129","Observatario",(31.29, -26.87, 35.65, -19.84)),
("4130","Moznet",(30.21, -27.71, 43.03, -10.09)),
("4131","Indian 1960",(102.14, 7.99, 110.0, 23.4)),
("4132","FD58",(47.13, 26.21, 53.61, 33.22)),
("4133","EST92",(21.74, 57.52, 28.2, 59.75)),
("4134","PSD93",(51.99, 16.59, 59.91, 26.58)),
("4135","Old Hawaiian",(-160.3, 18.87, -154.74, 22.29)),
("4136","St. Lawrence Island",(-171.97, 62.89, -168.59, 63.84)),
("4137","St. Paul Island",(-170.51, 57.06, -170.04, 57.28)),
("4138","St. George Island",(-169.88, 56.49, -169.38, 56.67)),
("4139","Puerto Rico",(-67.97, 17.62, -64.25, 18.78)),
("4140","NAD83(CSRS98)",(-120.0, 44.61, -57.1, 62.56)),
("4141","Israel 1993",(34.17, 29.45, 35.69, 33.28)),
("4142","Locodjo 1965",(-8.61, 1.02, -2.48, 10.74)),
("4143","Abidjan 1987",(-8.61, 1.02, -2.48, 10.74)),
("4144","Kalianpur 1937",(60.86, 8.02, 101.17, 37.07)),
("4145","Kalianpur 1962",(60.86, 21.05, 77.83, 37.07)),
("4146","Kalianpur 1975",(68.13, 8.02, 97.42, 35.51)),
("4147","Hanoi 1972",(102.14, 8.33, 109.53, 23.4)),
("4148","Hartebeesthoek94",(13.33, -50.32, 42.85, -22.13)),
("4149","CH1903",(5.96, 45.82, 10.49, 47.81)),
("4150","CH1903+",(5.96, 45.82, 10.49, 47.81)),
("4151","CHTRF95",(5.96, 45.82, 10.49, 47.81)),
("4152","NAD83(HARN)",(144.58, -14.59, -64.51, 71.4)),
("4153","Rassadiran",(52.5, 27.39, 52.71, 27.61)),
("4154","ED50(ED77)",(44.03, 23.34, 63.34, 39.78)),
("4155","Dabola 1981",(-15.13, 7.19, -7.65, 12.68)),
("4156","S-JTSK",(12.09, 47.73, 22.56, 51.06)),
("4157","Mount Dillon",(-60.9, 11.08, -60.44, 11.41)),
("4158","Naparima 1955",(-61.98, 9.99, -60.85, 10.9)),
("4159","ELD79",(9.31, 19.5, 26.21, 35.23)),
("4160","Chos Malal 1914",(-72.14, -43.41, -65.86, -31.91)),
("4161","Pampa del Castillo",(-73.59, -50.34, -65.47, -42.49)),
("4162","Korean 1985",(124.53, 33.14, 131.01, 38.64)),
("4163","Yemen NGN96",(41.08, 8.95, 57.96, 19.0)),
("4164","South Yemen",(43.37, 12.54, 53.14, 19.0)),
("4165","Bissau",(-16.77, 10.87, -13.64, 12.69)),
("4166","Korean 1995",(124.53, 33.14, 131.01, 38.64)),
("4167","NZGD2000",(160.6, -55.95, -171.2, -25.88)),
("4168","Accra",(-3.79, 1.4, 2.1, 11.16)),
("4169","American Samoa 1962",(-170.88, -14.43, -169.38, -14.11)),
("4170","SIRGAS 1995",(-113.21, -59.87, -26.0, 16.75)),
("4171","RGF93",(-9.86, 41.15, 10.38, 51.56)),
("4172","POSGAR",(-73.59, -58.41, -52.63, -21.78)),
("4173","IRENET95",(-10.56, 51.39, -5.34, 55.43)),
("4174","Sierra Leone 1924",(-13.34, 8.32, -13.13, 8.55)),
("4175","Sierra Leone 1968",(-13.35, 6.88, -10.26, 10.0)),
("4176","Australian Antarctic",(45.0, -90.0, 160.0, -60.0)),
("4178","Pulkovo 1942(83)",(9.92, 41.24, 28.68, 54.74)),
("4179","Pulkovo 1942(58)",(9.92, 39.63, 31.41, 54.89)),
("4180","EST97",(20.37, 57.52, 28.2, 60.0)),
("4181","Luxembourg 1930",(5.73, 49.44, 6.53, 50.19)),
("4182","Azores Occidental 1939",(-31.34, 39.3, -31.02, 39.77)),
("4183","Azores Central 1948",(-28.9, 38.32, -26.97, 39.14)),
("4184","Azores Oriental 1940",(-25.92, 36.87, -24.62, 37.96)),
("4185","Madeira 1936",(-17.31, 32.35, -16.23, 33.15)),
("4188","OSNI 1952",(-8.18, 53.96, -5.34, 55.36)),
("4189","REGVEN",(-73.38, 0.64, -58.95, 16.75)),
("4190","POSGAR 98",(-73.59, -58.41, -52.63, -21.78)),
("4191","Albanian 1987",(19.22, 39.64, 21.06, 42.67)),
("4192","Douala 1948",(8.45, 2.16, 10.4, 4.99)),
("4193","Manoca 1962",(8.45, 2.16, 10.4, 4.99)),
("4194","Qornoq 1927",(-73.29, 59.74, -42.52, 79.0)),
("4195","Scoresbysund 1952",(-29.69, 68.66, -19.89, 74.58)),
("4196","Ammassalik 1958",(-38.86, 65.52, -36.81, 65.91)),
("4197","Garoua",(12.9, 8.92, 14.19, 9.87)),
("4198","Kousseri",(14.17, 11.7, 15.09, 12.77)),
("4199","Egypt 1930",(24.7, 21.97, 36.95, 31.68)),
("4200","Pulkovo 1995",(18.92, 39.87, -168.97, 85.2)),
("4201","Adindan",(21.82, 3.4, 47.99, 22.24)),
("4202","AGD66",(109.23, -47.2, 163.2, -1.3)),
("4203","AGD84",(109.23, -38.53, 153.61, -9.37)),
("4204","Ain el Abd",(34.51, 16.37, 55.67, 32.16)),
("4205","Afgooye",(40.99, -1.71, 51.47, 12.03)),
("4206","Agadez",(0.16, 11.69, 16.0, 23.53)),
("4207","Lisbon",(-9.56, 36.95, -6.19, 42.16)),
("4208","Aratu",(-53.38, -35.71, -26.0, 4.26)),
("4209","Arc 1950",(19.99, -26.88, 35.93, -8.19)),
("4210","Arc 1960",(28.85, -11.75, 41.91, 4.63)),
("4211","Batavia",(95.16, -8.91, 117.01, 5.97)),
("4212","Barbados 1938",(-59.71, 13.0, -59.37, 13.39)),
("4213","Beduaram",(7.81, 12.8, 14.9, 16.7)),
("4214","Beijing 1954",(73.62, 16.7, 134.77, 53.56)),
("4215","Belge 1950",(2.5, 49.5, 6.4, 51.51)),
("4216","Bermuda 1957",(-64.89, 32.21, -64.61, 32.43)),
("4217","NAD83 / BLM 59N (ftUS)",(167.65, 49.01, 174.01, 56.28)),
("4218","Bogota 1975",(-79.1, -4.23, -66.87, 13.68)),
("4219","Bukit Rimpah",(105.07, -3.3, 108.35, -1.44)),
("4220","Camacupa 1948",(8.2, -18.02, 24.09, -5.82)),
("4221","Campo Inchauspe",(-73.59, -54.93, -53.65, -21.78)),
("4222","Cape",(16.45, -34.88, 32.95, -17.78)),
("4223","Carthage",(7.49, 30.23, 13.67, 38.41)),
("4224","Chua",(-62.57, -31.91, -47.1, -15.37)),
("4225","Corrego Alegre 1970-72",(-58.16, -33.78, -34.74, -2.68)),
("4226","Cote d'Ivoire",(-8.61, 1.02, -2.48, 10.74)),
("4227","Deir ez Zor",(35.04, 32.31, 42.38, 37.3)),
("4228","Douala",(8.32, 1.65, 16.21, 13.09)),
("4229","Egypt 1907",(24.7, 21.89, 37.91, 33.82)),
("4230","ED50",(-16.1, 25.71, 48.61, 84.17)),
("4231","ED87",(-10.56, 34.88, 39.65, 84.17)),
("4232","Fahud",(51.99, 16.59, 59.91, 26.42)),
("4233","Gandajika 1970",(69.29, -3.47, 77.08, 8.1)),
("4234","Garoua",(8.32, 1.65, 16.21, 13.09)),
("4235","Guyane Francaise",(-54.61, 2.11, -49.45, 8.88)),
("4236","Hu Tzu Shan 1950",(119.25, 21.87, 122.06, 25.34)),
("4237","HD72",(16.11, 45.74, 22.9, 48.58)),
("4238","ID74",(95.16, -10.98, 141.01, 5.97)),
("4239","Indian 1954",(92.2, 5.63, 105.64, 28.55)),
("4240","Indian 1975",(97.34, 5.63, 105.64, 20.46)),
("4241","Jamaica 1875",(-78.43, 17.64, -76.17, 18.58)),
("4242","JAD69",(-78.43, 17.64, -76.17, 18.58)),
("4243","Kalianpur 1880",(60.86, 8.02, 101.17, 37.07)),
("4244","Kandawala",(79.64, 5.86, 81.95, 9.88)),
("4245","Kertau 1968",(99.59, 1.13, 105.82, 7.81)),
("4246","KOC",(46.54, 28.53, 48.48, 30.09)),
("4247","La Canoa",(-73.38, 0.64, -59.8, 12.25)),
("4248","PSAD56",(-81.41, -43.5, -47.99, 12.68)),
("4249","Lake",(-72.4, 8.72, -70.78, 11.04)),
("4250","Leigon",(-3.79, 1.4, 2.1, 11.16)),
("4251","Liberia 1964",(-11.52, 4.29, -7.36, 8.52)),
("4252","Lome",(-0.15, 2.91, 2.42, 11.14)),
("4253","Luzon 1911",(116.89, 4.99, 126.65, 19.45)),
("4254","Hito XVIII 1963",(-74.83, -55.96, -63.73, -51.65)),
("4255","Herat North",(60.5, 29.4, 74.92, 38.48)),
("4256","Mahe 1971",(55.3, -4.86, 55.59, -4.5)),
("4257","Makassar",(118.71, -6.54, 120.78, -1.88)),
("4258","ETRS89",(-16.1, 32.88, 40.18, 84.17)),
("4259","Malongo 1987",(10.53, -6.04, 12.37, -5.05)),
("4260","Manoca",(8.32, 1.65, 16.21, 13.09)),
("4261","Merchich",(-17.16, 20.71, -1.01, 35.97)),
("4262","Massawa",(36.44, 12.36, 43.31, 18.1)),
("4263","Minna",(2.66, 1.92, 14.65, 13.9)),
("4264","Mhast",(10.53, -6.04, 13.1, -4.38)),
("4265","Monte Mario",(5.93, 34.76, 18.99, 47.1)),
("4266","M'poraloko",(7.03, -6.37, 14.52, 2.32)),
("4267","NAD27",(167.65, 7.15, -47.74, 83.17)),
("4268","NAD27 Michigan",(-90.42, 41.69, -82.13, 48.32)),
("4269","NAD83",(167.65, 14.92, -47.74, 86.46)),
("4270","Nahrwan 1967",(50.55, 22.63, 57.13, 27.05)),
("4271","Naparima 1972",(-60.9, 11.08, -60.44, 11.41)),
("4272","NZGD49",(165.87, -47.65, 179.27, -33.89)),
("4273","NGO 1948",(4.68, 57.93, 31.22, 71.21)),
("4274","Datum 73",(-9.56, 36.95, -6.19, 42.16)),
("4275","NTF",(-4.87, 41.31, 9.63, 51.14)),
("4276","NSWC 9Z-2",(-180.0, -90.0, 180.0, 90.0)),
("4277","OSGB 1936",(-9.0, 49.75, 2.01, 61.01)),
("4278","OSGB70",(-8.82, 49.79, 1.92, 60.94)),
("4279","OS(SN)80",(-10.56, 49.81, 1.84, 60.9)),
("4280","Padang",(95.16, -5.99, 106.13, 5.97)),
("4281","Palestine 1923",(34.17, 29.18, 39.31, 33.38)),
("4282","Pointe Noire",(8.84, -6.91, 18.65, 3.72)),
("4283","GDA94",(93.41, -60.56, 173.35, -8.47)),
("4284","Pulkovo 1942",(19.57, 35.14, -168.97, 81.91)),
("4285","Qatar 1974",(50.55, 24.55, 53.04, 27.05)),
("4286","Qatar 1948",(50.69, 24.55, 51.68, 26.2)),
("4287","Qornoq",(-75.0, 56.38, 8.12, 87.03)),
("4288","Loma Quintana",(-73.38, 7.75, -59.8, 12.25)),
("4289","Amersfoort",(3.2, 50.75, 7.22, 53.7)),
("4291","SAD69",(-91.72, -55.96, -25.28, 12.52)),
("4292","Sapper Hill 1943",(-61.55, -52.51, -57.6, -50.96)),
("4293","Schwarzeck",(8.24, -30.64, 25.27, -16.95)),
("4294","Segora",(114.55, -4.24, 117.99, 0.0)),
("4295","Serindung",(108.79, 0.06, 109.78, 2.13)),
("4296","Sudan",(-1000.0, -1000.0, -1000.0, -1000.0)),
("4297","Tananarive",(42.53, -26.59, 51.03, -11.69)),
("4298","Timbalai 1948",(109.31, 0.85, 119.61, 7.67)),
("4299","TM65",(-10.56, 51.39, -5.34, 55.43)),
("4300","TM75",(-10.56, 51.39, -5.34, 55.43)),
("4301","Tokyo",(122.83, 20.37, 154.05, 45.54)),
("4302","Trinidad 1903",(-62.09, 9.83, -60.0, 11.51)),
("4303","TC(1948)",(51.56, 22.63, 56.03, 25.34)),
("4304","Voirol 1875",(-2.95, 31.99, 9.09, 37.14)),
("4306","Bern 1938",(5.96, 45.82, 10.49, 47.81)),
("4307","Nord Sahara 1959",(-8.67, 18.97, 11.99, 38.8)),
("4308","RT38",(10.93, 55.28, 24.17, 69.07)),
("4309","Yacare",(-58.49, -35.0, -53.09, -30.09)),
("4310","Yoff",(-20.22, 10.64, -11.36, 16.7)),
("4311","Zanderij",(-58.08, 1.83, -52.66, 9.35)),
("4312","MGI",(9.53, 46.4, 17.17, 49.02)),
("4313","Belge 1972",(2.5, 49.5, 6.4, 51.51)),
("4314","DHDN",(5.87, 47.27, 13.84, 55.09)),
("4315","Conakry 1905",(-15.13, 7.19, -7.65, 12.68)),
("4316","Dealul Piscului 1930",(20.26, 43.62, 29.74, 48.27)),
("4317","Dealul Piscului 1970",(20.26, 43.44, 31.41, 48.27)),
("4318","NGN",(46.54, 28.53, 48.48, 30.09)),
("4319","KUDAMS",(47.78, 29.17, 48.16, 29.45)),
("4322","WGS 72",(-180.0, -90.0, 180.0, 90.0)),
("4324","WGS 72BE",(-180.0, -90.0, 180.0, 90.0)),
("4326","WGS 84",(-180.0, -90.0, 180.0, 90.0)),
("4327","WGS 84 (geographic 3D)",(-180.0, -90.0, 180.0, 90.0)),
("4328","WGS 84 (geocentric)",(-180.0, -90.0, 180.0, 90.0)),
("4329","WGS 84 (3D)",(-180.0, -90.0, 180.0, 90.0)),
("4330","ITRF88 (geocentric)",(-180.0, -90.0, 180.0, 90.0)),
("4331","ITRF89 (geocentric)",(-180.0, -90.0, 180.0, 90.0)),
("4332","ITRF90 (geocentric)",(-180.0, -90.0, 180.0, 90.0)),
("4333","ITRF91 (geocentric)",(-180.0, -90.0, 180.0, 90.0)),
("4334","ITRF92 (geocentric)",(-180.0, -90.0, 180.0, 90.0)),
("4335","ITRF93 (geocentric)",(-180.0, -90.0, 180.0, 90.0)),
("4336","ITRF94 (geocentric)",(-180.0, -90.0, 180.0, 90.0)),
("4337","ITRF96 (geocentric)",(-180.0, -90.0, 180.0, 90.0)),
("4338","ITRF97 (geocentric)",(-180.0, -90.0, 180.0, 90.0)),
("4339","Australian Antarctic (3D)",(45.0, -90.0, 160.0, -60.0)),
("4340","Australian Antarctic (geocentric)",(45.0, -90.0, 160.0, -60.0)),
("4341","EST97 (3D)",(20.37, 57.52, 28.2, 60.0)),
("4342","EST97 (geocentric)",(20.37, 57.52, 28.2, 60.0)),
("4343","CHTRF95 (3D)",(5.96, 45.82, 10.49, 47.81)),
("4344","CHTRF95 (geocentric)",(5.96, 45.82, 10.49, 47.81)),
("4345","ETRS89 (3D)",(-16.1, 32.88, 40.18, 84.17)),
("4346","ETRS89 (geocentric)",(-16.1, 32.88, 40.18, 84.17)),
("4347","GDA94 (3D)",(109.23, -47.2, 163.2, -8.88)),
("4348","GDA94 (geocentric)",(109.23, -47.2, 163.2, -8.88)),
("4349","Hartebeesthoek94 (3D)",(13.33, -50.32, 42.85, -22.13)),
("4350","Hartebeesthoek94 (geocentric)",(13.33, -50.32, 42.85, -22.13)),
("4351","IRENET95 (3D)",(-10.56, 51.39, -5.34, 55.43)),
("4352","IRENET95 (geocentric)",(-10.56, 51.39, -5.34, 55.43)),
("4353","JGD2000 (3D)",(122.38, 17.09, 157.65, 46.05)),
("4354","JGD2000 (geocentric)",(122.38, 17.09, 157.65, 46.05)),
("4355","LKS94 (ETRS89) (3D)",(19.02, 53.89, 26.82, 56.45)),
("4356","LKS94 (ETRS89) (geocentric)",(19.02, 53.89, 26.82, 56.45)),
("4357","Moznet (3D)",(30.21, -27.71, 43.03, -10.09)),
("4358","Moznet (geocentric)",(30.21, -27.71, 43.03, -10.09)),
("4359","NAD83(CSRS) (3D)",(-139.05, 41.68, -52.62, 60.0)),
("4360","NAD83(CSRS) (geocentric)",(-139.05, 41.68, -52.62, 60.0)),
("4361","NAD83(HARN) (3D)",(144.58, -14.59, -64.51, 71.4)),
("4362","NAD83(HARN) (geocentric)",(144.58, -14.59, -64.51, 71.4)),
("4363","NZGD2000 (3D)",(160.6, -55.95, -171.2, -25.88)),
("4364","NZGD2000 (geocentric)",(160.6, -55.95, -171.2, -25.88)),
("4365","POSGAR 98 (3D)",(-73.59, -58.41, -52.63, -21.78)),
("4366","POSGAR 98 (geocentric)",(-73.59, -58.41, -52.63, -21.78)),
("4367","REGVEN (3D)",(-73.38, 0.64, -58.95, 16.75)),
("4368","REGVEN (geocentric)",(-73.38, 0.64, -58.95, 16.75)),
("4369","RGF93 (3D)",(-9.86, 41.15, 10.38, 51.56)),
("4370","RGF93 (geocentric)",(-9.86, 41.15, 10.38, 51.56)),
("4371","RGFG95 (3D)",(-54.61, 2.11, -49.45, 8.88)),
("4372","RGFG95 (geocentric)",(-54.61, 2.11, -49.45, 8.88)),
("4373","RGR92 (3D)",(37.58, -25.92, 58.27, -10.6)),
("4374","RGR92 (geocentric)",(37.58, -25.92, 58.27, -10.6)),
("4375","SIRGAS (3D)",(-82.0, -56.15, -34.0, 13.0)),
("4376","SIRGAS (geocentric)",(-82.0, -56.15, -34.0, 13.0)),
("4377","SWEREF99 (3D)",(10.03, 54.96, 24.17, 69.07)),
("4378","SWEREF99 (geocentric)",(10.03, 54.96, 24.17, 69.07)),
("4379","Yemen NGN96 (3D)",(41.08, 8.95, 57.96, 19.0)),
("4380","Yemen NGN96 (geocentric)",(41.08, 8.95, 57.96, 19.0)),
("4381","RGNC 1991 (3D)",(156.25, -26.45, 174.28, -14.83)),
("4382","RGNC 1991 (geocentric)",(156.25, -26.45, 174.28, -14.83)),
("4383","RRAF 1991 (3D)",(-63.66, 14.08, -57.52, 18.54)),
("4384","RRAF 1991 (geocentric)",(-63.66, 14.08, -57.52, 18.54)),
("4385","ITRF2000 (geocentric)",(-180.0, -90.0, 180.0, 90.0)),
("4386","ISN93 (3D)",(-30.87, 59.96, -5.55, 69.59)),
("4387","ISN93 (geocentric)",(-30.87, 59.96, -5.55, 69.59)),
("4388","LKS92 (3D)",(19.06, 55.67, 28.24, 58.09)),
("4389","LKS92 (geocentric)",(19.06, 55.67, 28.24, 58.09)),
("4390","Kertau 1968 / Johor Grid",(102.44, 1.21, 104.6, 2.95)),
("4391","Kertau 1968 / Sembilan and Melaka Grid",(101.7, 2.03, 102.71, 3.28)),
("4392","Kertau 1968 / Pahang Grid",(101.33, 2.45, 103.67, 4.78)),
("4393","Kertau 1968 / Selangor Grid",(100.76, 2.54, 101.97, 3.87)),
("4394","Kertau 1968 / Terengganu Grid",(102.38, 3.89, 103.72, 5.9)),
("4395","Kertau 1968 / Pinang Grid",(100.12, 5.12, 100.56, 5.59)),
("4396","Kertau 1968 / Kedah and Perlis Grid",(99.59, 5.08, 101.12, 6.72)),
("4397","Kertau 1968 / Perak Revised Grid",(100.07, 3.66, 102.0, 5.92)),
("4398","Kertau 1968 / Kelantan Grid",(101.33, 4.54, 102.67, 6.29)),
("4399","NAD27 / BLM 59N (ftUS)",(167.65, 49.01, 174.01, 56.28)),
("4400","NAD27 / BLM 60N (ftUS)",(174.0, 47.92, 180.0, 56.67)),
("4401","NAD27 / BLM 1N (ftUS)",(-180.0, 47.88, -173.99, 63.21)),
("4402","NAD27 / BLM 2N (ftUS)",(-174.0, 48.66, -167.99, 73.05)),
("4403","NAD27 / BLM 3N (ftUS)",(-168.0, 49.52, -161.99, 74.29)),
("4404","NAD27 / BLM 4N (ftUS)",(-162.0, 50.98, -155.99, 74.71)),
("4405","NAD27 / BLM 5N (ftUS)",(-156.0, 52.15, -149.99, 74.71)),
("4406","NAD27 / BLM 6N (ftUS)",(-150.0, 54.05, -143.99, 74.13)),
("4407","NAD27 / BLM 7N (ftUS)",(-144.0, 53.47, -137.99, 73.59)),
("4408","NAD27 / BLM 8N (ftUS)",(-138.0, 53.6, -131.99, 73.04)),
("4409","NAD27 / BLM 9N (ftUS)",(-132.0, 35.38, -126.0, 56.84)),
("4410","NAD27 / BLM 10N (ftUS)",(-126.0, 30.54, -119.99, 49.09)),
("4411","NAD27 / BLM 11N (ftUS)",(-120.0, 30.88, -114.0, 49.01)),
("4412","NAD27 / BLM 12N (ftUS)",(-114.0, 31.33, -108.0, 49.01)),
("4413","NAD27 / BLM 13N (ftUS)",(-108.0, 28.98, -102.0, 49.01)),
("4414","NAD83(HARN) / Guam Map Grid",(144.58, 13.18, 145.01, 13.7)),
("4415","Katanga 1955 / Katanga Lambert",(21.74, -13.46, 30.78, -4.99)),
("4417","Pulkovo 1942(83) / 3-degree Gauss-Kruger zone 7",(19.5, 46.1, 22.5, 49.59)),
("4418","NAD27 / BLM 18N (ftUS)",(-78.0, 28.28, -72.0, 45.03)),
("4419","NAD27 / BLM 19N (ftUS)",(-72.0, 33.61, -65.99, 47.47)),
("4420","NAD83 / BLM 60N (ftUS)",(174.0, 47.92, 180.0, 56.67)),
("4421","NAD83 / BLM 1N (ftUS)",(-180.0, 47.88, -173.99, 63.21)),
("4422","NAD83 / BLM 2N (ftUS)",(-174.0, 48.66, -167.99, 73.05)),
("4423","NAD83 / BLM 3N (ftUS)",(-168.0, 49.52, -161.99, 74.29)),
("4424","NAD83 / BLM 4N (ftUS)",(-162.0, 50.98, -155.99, 74.71)),
("4425","NAD83 / BLM 5N (ftUS)",(-156.0, 52.15, -149.99, 74.71)),
("4426","NAD83 / BLM 6N (ftUS)",(-150.0, 54.05, -143.99, 74.13)),
("4427","NAD83 / BLM 7N (ftUS)",(-144.0, 53.47, -137.99, 73.59)),
("4428","NAD83 / BLM 8N (ftUS)",(-138.0, 53.6, -131.99, 73.04)),
("4429","NAD83 / BLM 9N (ftUS)",(-132.0, 35.38, -126.0, 56.84)),
("4430","NAD83 / BLM 10N (ftUS)",(-126.0, 30.54, -119.99, 49.09)),
("4431","NAD83 / BLM 11N (ftUS)",(-120.0, 30.88, -114.0, 49.01)),
("4432","NAD83 / BLM 12N (ftUS)",(-114.0, 31.33, -108.0, 49.01)),
("4433","NAD83 / BLM 13N (ftUS)",(-108.0, 28.98, -102.0, 49.01)),
("4434","Pulkovo 1942(83) / 3-degree Gauss-Kruger zone 8",(22.5, 47.76, 22.9, 49.1)),
("4437","NAD83(NSRS2007) / Puerto Rico and Virgin Is.",(-67.97, 17.62, -64.51, 18.57)),
("4438","NAD83 / BLM 18N (ftUS)",(-78.0, 28.28, -72.0, 45.03)),
("4439","NAD83 / BLM 19N (ftUS)",(-72.0, 33.61, -65.99, 47.47)),
("4440","NZVD2009 height",(160.6, -55.95, -171.2, -25.88)),
("4455","NAD27 / Pennsylvania South",(-80.53, 39.71, -74.72, 41.18)),
("4456","NAD27 / New York Long Island",(-74.26, 40.47, -71.8, 41.3)),
("4457","NAD83 / South Dakota North (ftUS)",(-104.07, 44.14, -96.45, 45.95)),
("4458","Dunedin-Bluff 1960 height",(166.37, -46.73, 169.95, -44.52)),
("4462","WGS 84 / Australian Centre for Remote Sensing Lambert",(112.85, -43.7, 153.69, -9.86)),
("4463","RGSPM06",(-57.1, 43.41, -55.9, 47.37)),
("4465","RGSPM06",(-57.1, 43.41, -55.9, 47.37)),
("4466","RGSPM06",(-57.1, 43.41, -55.9, 47.37)),
("4467","RGSPM06 / UTM zone 21N",(-57.1, 43.41, -55.9, 47.37)),
("4468","RGM04",(43.68, -14.49, 46.7, -11.33)),
("4469","RGM04",(43.68, -14.49, 46.7, -11.33)),
("4470","RGM04",(43.68, -14.49, 46.7, -11.33)),
("4471","RGM04 / UTM zone 38S",(43.68, -14.49, 46.7, -11.33)),
("4472","Cadastre 1997",(44.98, -13.05, 45.35, -12.61)),
("4473","Cadastre 1997",(44.98, -13.05, 45.35, -12.61)),
("4474","Cadastre 1997 / UTM zone 38S",(44.98, -13.05, 45.35, -12.61)),
("4475","Cadastre 1997",(44.98, -13.05, 45.35, -12.61)),
("4479","China Geodetic Coordinate System 2000",(73.62, 16.7, 134.77, 53.56)),
("4480","China Geodetic Coordinate System 2000",(73.62, 16.7, 134.77, 53.56)),
("4481","Mexico ITRF92",(-122.19, 12.1, -84.64, 32.72)),
("4482","Mexico ITRF92",(-122.19, 12.1, -84.64, 32.72)),
("4483","Mexico ITRF92",(-122.19, 12.1, -84.64, 32.72)),
("4484","Mexico ITRF92 / UTM zone 11N",(-122.19, 15.01, -114.0, 32.72)),
("4485","Mexico ITRF92 / UTM zone 12N",(-114.0, 15.09, -108.0, 32.27)),
("4486","Mexico ITRF92 / UTM zone 13N",(-108.0, 14.05, -102.0, 31.79)),
("4487","Mexico ITRF92 / UTM zone 14N",(-102.0, 12.3, -96.0, 29.81)),
("4488","Mexico ITRF92 / UTM zone 15N",(-96.0, 12.1, -90.0, 26.0)),
("4489","Mexico ITRF92 / UTM zone 16N",(-90.0, 17.81, -84.64, 25.77)),
("4490","China Geodetic Coordinate System 2000",(73.62, 16.7, 134.77, 53.56)),
("4491","CGCS2000 / Gauss-Kruger zone 13",(73.62, 35.42, 78.01, 41.07)),
("4492","CGCS2000 / Gauss-Kruger zone 14",(77.98, 29.16, 84.0, 47.23)),
("4493","CGCS2000 / Gauss-Kruger zone 15",(84.0, 27.32, 90.0, 49.18)),
("4494","CGCS2000 / Gauss-Kruger zone 16",(90.0, 27.71, 96.01, 47.9)),
("4495","CGCS2000 / Gauss-Kruger zone 17",(96.0, 21.13, 102.01, 43.18)),
("4496","CGCS2000 / Gauss-Kruger zone 18",(102.0, 17.75, 108.0, 42.47)),
("4497","CGCS2000 / Gauss-Kruger zone 19",(108.0, 16.7, 114.0, 45.11)),
("4498","CGCS2000 / Gauss-Kruger zone 20",(114.0, 19.02, 120.0, 51.52)),
("4499","CGCS2000 / Gauss-Kruger zone 21",(120.0, 24.64, 126.0, 53.56)),
("4500","CGCS2000 / Gauss-Kruger zone 22",(126.0, 29.7, 132.0, 52.79)),
("4501","CGCS2000 / Gauss-Kruger zone 23",(132.0, 45.02, 134.77, 48.4)),
("4502","CGCS2000 / Gauss-Kruger CM 75E",(73.62, 35.42, 78.01, 41.07)),
("4503","CGCS2000 / Gauss-Kruger CM 81E",(77.98, 29.16, 84.0, 47.23)),
("4504","CGCS2000 / Gauss-Kruger CM 87E",(84.0, 27.32, 90.0, 49.18)),
("4505","CGCS2000 / Gauss-Kruger CM 93E",(90.0, 27.71, 96.01, 47.9)),
("4506","CGCS2000 / Gauss-Kruger CM 99E",(96.0, 21.13, 102.01, 43.18)),
("4507","CGCS2000 / Gauss-Kruger CM 105E",(102.0, 17.75, 108.0, 42.47)),
("4508","CGCS2000 / Gauss-Kruger CM 111E",(108.0, 16.7, 114.0, 45.11)),
("4509","CGCS2000 / Gauss-Kruger CM 117E",(114.0, 19.02, 120.0, 51.52)),
("4510","CGCS2000 / Gauss-Kruger CM 123E",(120.0, 24.64, 126.0, 53.56)),
("4511","CGCS2000 / Gauss-Kruger CM 129E",(126.0, 29.7, 132.0, 52.79)),
("4512","CGCS2000 / Gauss-Kruger CM 135E",(132.0, 45.02, 134.77, 48.4)),
("4513","CGCS2000 / 3-degree Gauss-Kruger zone 25",(73.62, 35.81, 76.5, 40.65)),
("4514","CGCS2000 / 3-degree Gauss-Kruger zone 26",(76.5, 31.03, 79.5, 41.83)),
("4515","CGCS2000 / 3-degree Gauss-Kruger zone 27",(79.5, 29.95, 82.51, 45.88)),
("4516","CGCS2000 / 3-degree Gauss-Kruger zone 28",(82.5, 28.26, 85.5, 47.23)),
("4517","CGCS2000 / 3-degree Gauss-Kruger zone 29",(85.5, 27.8, 88.5, 49.18)),
("4518","CGCS2000 / 3-degree Gauss-Kruger zone 30",(88.49, 27.32, 91.51, 48.42)),
("4519","CGCS2000 / 3-degree Gauss-Kruger zone 31",(91.5, 27.71, 94.5, 45.13)),
("4520","CGCS2000 / 3-degree Gauss-Kruger zone 32",(94.5, 28.23, 97.51, 44.5)),
("4521","CGCS2000 / 3-degree Gauss-Kruger zone 33",(97.5, 21.43, 100.5, 42.76)),
("4522","CGCS2000 / 3-degree Gauss-Kruger zone 34",(100.5, 21.13, 103.5, 42.69)),
("4523","CGCS2000 / 3-degree Gauss-Kruger zone 35",(103.5, 22.5, 106.51, 42.21)),
("4524","CGCS2000 / 3-degree Gauss-Kruger zone 36",(106.5, 18.19, 109.51, 42.47)),
("4525","CGCS2000 / 3-degree Gauss-Kruger zone 37",(109.5, 18.11, 112.5, 45.11)),
("4526","CGCS2000 / 3-degree Gauss-Kruger zone 38",(112.5, 21.52, 115.5, 45.45)),
("4527","CGCS2000 / 3-degree Gauss-Kruger zone 39",(115.5, 22.6, 118.5, 49.88)),
("4528","CGCS2000 / 3-degree Gauss-Kruger zone 40",(118.5, 24.43, 121.5, 53.33)),
("4529","CGCS2000 / 3-degree Gauss-Kruger zone 41",(121.5, 28.22, 124.5, 53.56)),
("4530","CGCS2000 / 3-degree Gauss-Kruger zone 42",(124.5, 40.19, 127.5, 53.2)),
("4531","CGCS2000 / 3-degree Gauss-Kruger zone 43",(127.5, 41.37, 130.5, 50.25)),
("4532","CGCS2000 / 3-degree Gauss-Kruger zone 44",(130.5, 42.42, 133.5, 48.88)),
("4533","CGCS2000 / 3-degree Gauss-Kruger zone 45",(133.5, 45.85, 134.77, 48.4)),
("4534","CGCS2000 / 3-degree Gauss-Kruger CM 75E",(73.62, 35.81, 76.5, 40.65)),
("4535","CGCS2000 / 3-degree Gauss-Kruger CM 78E",(76.5, 31.03, 79.5, 41.83)),
("4536","CGCS2000 / 3-degree Gauss-Kruger CM 81E",(79.5, 29.95, 82.51, 45.88)),
("4537","CGCS2000 / 3-degree Gauss-Kruger CM 84E",(82.5, 28.26, 85.5, 47.23)),
("4538","CGCS2000 / 3-degree Gauss-Kruger CM 87E",(85.5, 27.8, 88.5, 49.18)),
("4539","CGCS2000 / 3-degree Gauss-Kruger CM 90E",(88.49, 27.32, 91.51, 48.42)),
("4540","CGCS2000 / 3-degree Gauss-Kruger CM 93E",(91.5, 27.71, 94.5, 45.13)),
("4541","CGCS2000 / 3-degree Gauss-Kruger CM 96E",(94.5, 28.23, 97.51, 44.5)),
("4542","CGCS2000 / 3-degree Gauss-Kruger CM 99E",(97.5, 21.43, 100.5, 42.76)),
("4543","CGCS2000 / 3-degree Gauss-Kruger CM 102E",(100.5, 21.13, 103.5, 42.69)),
("4544","CGCS2000 / 3-degree Gauss-Kruger CM 105E",(103.5, 22.5, 106.51, 42.21)),
("4545","CGCS2000 / 3-degree Gauss-Kruger CM 108E",(106.5, 18.19, 109.51, 42.47)),
("4546","CGCS2000 / 3-degree Gauss-Kruger CM 111E",(109.5, 18.11, 112.5, 45.11)),
("4547","CGCS2000 / 3-degree Gauss-Kruger CM 114E",(112.5, 21.52, 115.5, 45.45)),
("4548","CGCS2000 / 3-degree Gauss-Kruger CM 117E",(115.5, 22.6, 118.5, 49.88)),
("4549","CGCS2000 / 3-degree Gauss-Kruger CM 120E",(118.5, 24.43, 121.5, 53.33)),
("4550","CGCS2000 / 3-degree Gauss-Kruger CM 123E",(121.5, 28.22, 124.5, 53.56)),
("4551","CGCS2000 / 3-degree Gauss-Kruger CM 126E",(124.5, 40.19, 127.5, 53.2)),
("4552","CGCS2000 / 3-degree Gauss-Kruger CM 129E",(127.5, 41.37, 130.5, 50.25)),
("4553","CGCS2000 / 3-degree Gauss-Kruger CM 132E",(130.5, 42.42, 133.5, 48.88)),
("4554","CGCS2000 / 3-degree Gauss-Kruger CM 135E",(133.5, 45.85, 134.77, 48.4)),
("4555","New Beijing",(73.62, 18.11, 134.77, 53.56)),
("4556","RRAF 1991",(-63.66, 14.08, -57.52, 18.54)),
("4557","RRAF 1991",(-63.66, 14.08, -57.52, 18.54)),
("4558","RRAF 1991",(-63.66, 14.08, -57.52, 18.54)),
("4559","RRAF 1991 / UTM zone 20N",(-63.66, 14.08, -60.0, 18.32)),
("4568","New Beijing / Gauss-Kruger zone 13",(73.62, 35.42, 78.01, 41.07)),
("4569","New Beijing / Gauss-Kruger zone 14",(77.98, 29.16, 84.0, 47.23)),
("4570","New Beijing / Gauss-Kruger zone 15",(84.0, 27.32, 90.0, 49.18)),
("4571","New Beijing / Gauss-Kruger zone 16",(90.0, 27.71, 96.01, 47.9)),
("4572","New Beijing / Gauss-Kruger zone 17",(96.0, 21.13, 102.01, 43.18)),
("4573","New Beijing / Gauss-Kruger zone 18",(102.0, 21.53, 108.0, 42.47)),
("4574","New Beijing / Gauss-Kruger zone 19",(108.0, 18.11, 114.0, 45.11)),
("4575","New Beijing / Gauss-Kruger zone 20",(114.0, 22.14, 120.0, 51.52)),
("4576","New Beijing / Gauss-Kruger zone 21",(120.0, 26.34, 126.0, 53.56)),
("4577","New Beijing / Gauss-Kruger zone 22",(126.0, 40.89, 132.0, 52.79)),
("4578","New Beijing / Gauss-Kruger zone 23",(132.0, 45.02, 134.77, 48.4)),
("4579","New Beijing / Gauss-Kruger CM 75E",(73.62, 35.42, 78.01, 41.07)),
("4580","New Beijing / Gauss-Kruger CM 81E",(77.98, 29.16, 84.0, 47.23)),
("4581","New Beijing / Gauss-Kruger CM 87E",(84.0, 27.32, 90.0, 49.18)),
("4582","New Beijing / Gauss-Kruger CM 93E",(90.0, 27.71, 96.01, 47.9)),
("4583","New Beijing / Gauss-Kruger CM 99E",(96.0, 21.13, 102.01, 43.18)),
("4584","New Beijing / Gauss-Kruger CM 105E",(102.0, 21.53, 108.0, 42.47)),
("4585","New Beijing / Gauss-Kruger CM 111E",(108.0, 18.11, 114.0, 45.11)),
("4586","New Beijing / Gauss-Kruger CM 117E",(114.0, 22.14, 120.0, 51.52)),
("4587","New Beijing / Gauss-Kruger CM 123E",(120.0, 26.34, 126.0, 53.56)),
("4588","New Beijing / Gauss-Kruger CM 129E",(126.0, 40.89, 132.0, 52.79)),
("4589","New Beijing / Gauss-Kruger CM 135E",(132.0, 45.02, 134.77, 48.4)),
("4600","Anguilla 1957",(-63.22, 18.11, -62.92, 18.33)),
("4601","Antigua 1943",(-61.95, 16.94, -61.61, 17.22)),
("4602","Dominica 1945",(-61.55, 15.14, -61.2, 15.69)),
("4603","Grenada 1953",(-61.84, 11.94, -61.35, 12.57)),
("4604","Montserrat 1958",(-62.29, 16.62, -62.08, 16.87)),
("4605","St. Kitts 1955",(-62.92, 17.06, -62.5, 17.46)),
("4606","St. Lucia 1955",(-61.13, 13.66, -60.82, 14.16)),
("4607","St. Vincent 1945",(-61.52, 12.54, -61.07, 13.44)),
("4608","NAD27(76)",(-95.16, 41.67, -74.35, 56.9)),
("4609","NAD27(CGQ77)",(-79.85, 44.99, -57.1, 62.62)),
("4610","Xian 1980",(73.62, 18.11, 134.77, 53.56)),
("4611","Hong Kong 1980",(113.76, 22.13, 114.51, 22.58)),
("4612","JGD2000",(122.38, 17.09, 157.65, 46.05)),
("4613","Segara",(114.55, -4.24, 119.06, 4.29)),
("4614","QND95",(50.69, 24.55, 51.68, 26.2)),
("4615","Porto Santo",(-17.31, 32.35, -16.23, 33.15)),
("4616","Selvagem Grande",(-16.11, 29.98, -15.79, 30.21)),
("4617","NAD83(CSRS)",(-141.01, 40.04, -47.74, 86.46)),
("4618","SAD69",(-91.72, -55.96, -25.28, 12.52)),
("4619","SWEREF99",(10.03, 54.96, 24.17, 69.07)),
("4620","Point 58",(-17.19, 10.26, 30.42, 15.7)),
("4621","Fort Marigot",(-63.21, 17.82, -62.73, 18.17)),
("4622","Guadeloupe 1948",(-61.85, 15.8, -60.97, 16.55)),
("4623","CSG67",(-54.45, 3.43, -51.61, 5.81)),
("4624","RGFG95",(-54.61, 2.11, -49.45, 8.88)),
("4625","Martinique 1938",(-61.29, 14.35, -60.76, 14.93)),
("4626","Reunion 1947",(55.16, -21.42, 55.91, -20.81)),
("4627","RGR92",(51.83, -24.72, 58.24, -18.28)),
("4628","Tahiti 52",(-150.0, -17.93, -149.11, -17.41)),
("4629","Tahaa 54",(-151.91, -16.96, -150.89, -16.17)),
("4630","IGN72 Nuku Hiva",(-140.31, -9.57, -139.44, -8.72)),
("4631","K0 1949",(68.69, -49.78, 70.62, -48.6)),
("4632","Combani 1950",(44.98, -13.05, 45.35, -12.61)),
("4633","IGN56 Lifou",(166.98, -21.24, 167.52, -20.62)),
("4634","IGN72 Grand Terre",(163.92, -22.45, 167.09, -20.03)),
("4635","ST87 Ouvea",(166.44, -20.77, 166.71, -20.34)),
("4636","Petrels 1972",(139.44, -66.78, 141.5, -66.1)),
("4637","Perroud 1950",(136.0, -67.13, 142.0, -65.61)),
("4638","Saint Pierre et Miquelon 1950",(-56.48, 46.69, -56.07, 47.19)),
("4639","MOP78",(-176.25, -13.41, -176.07, -13.16)),
("4640","RRAF 1991",(-63.66, 14.08, -57.52, 18.54)),
("4641","IGN53 Mare",(167.75, -21.71, 168.19, -21.32)),
("4642","ST84 Ile des Pins",(167.36, -22.73, 167.61, -22.49)),
("4643","ST71 Belep",(163.54, -19.85, 163.75, -19.5)),
("4644","NEA74 Noumea",(166.35, -22.37, 166.54, -22.19)),
("4645","RGNC 1991",(156.25, -26.45, 174.28, -14.83)),
("4646","Grand Comoros",(43.16, -11.99, 43.55, -11.31)),
("4647","ETRS89 / UTM zone 32N (zE-N)",(6.0, 47.27, 12.0, 55.47)),
("4652","New Beijing / 3-degree Gauss-Kruger zone 25",(73.62, 35.81, 76.5, 40.65)),
("4653","New Beijing / 3-degree Gauss-Kruger zone 26",(76.5, 31.03, 79.5, 41.83)),
("4654","New Beijing / 3-degree Gauss-Kruger zone 27",(79.5, 29.95, 82.51, 45.88)),
("4655","New Beijing / 3-degree Gauss-Kruger zone 28",(82.5, 28.26, 85.5, 47.23)),
("4656","New Beijing / 3-degree Gauss-Kruger zone 29",(85.5, 27.8, 88.5, 49.18)),
("4657","Reykjavik 1900",(-24.66, 63.34, -13.38, 66.59)),
("4658","Hjorsey 1955",(-24.66, 63.34, -13.38, 66.59)),
("4659","ISN93",(-30.87, 59.96, -5.55, 69.59)),
("4660","Helle 1954",(-9.17, 70.75, -7.87, 71.24)),
("4661","LKS92",(19.06, 55.67, 28.24, 58.09)),
("4662","IGN72 Grande Terre",(163.92, -22.45, 167.09, -20.03)),
("4663","Porto Santo 1995",(-17.31, 32.35, -16.23, 33.15)),
("4664","Azores Oriental 1995",(-25.92, 36.87, -24.62, 37.96)),
("4665","Azores Central 1995",(-28.9, 38.32, -26.97, 39.14)),
("4666","Lisbon 1890",(-9.56, 36.95, -6.19, 42.16)),
("4667","IKBD-92",(46.36, 29.06, 48.61, 30.32)),
("4668","ED79",(-10.56, 34.88, 39.65, 84.17)),
("4669","LKS94",(19.02, 53.89, 26.82, 56.45)),
("4670","IGM95",(5.93, 34.76, 18.99, 47.1)),
("4671","Voirol 1879",(-2.95, 31.99, 9.09, 37.14)),
("4672","Chatham Islands 1971",(-177.25, -44.64, -175.54, -43.3)),
("4673","Chatham Islands 1979",(-177.25, -44.64, -175.54, -43.3)),
("4674","SIRGAS 2000",(-122.19, -59.87, -25.28, 32.72)),
("4675","Guam 1963",(144.58, 13.18, 146.12, 20.61)),
("4676","Vientiane 1982",(100.09, 13.92, 107.64, 22.5)),
("4677","Lao 1993",(100.09, 13.92, 107.64, 22.5)),
("4678","Lao 1997",(100.09, 13.92, 107.64, 22.5)),
("4679","Jouik 1961",(-17.08, 19.37, -15.88, 21.34)),
("4680","Nouakchott 1965",(-16.57, 16.81, -15.59, 19.41)),
("4681","Mauritania 1999",(-20.04, 14.72, -4.8, 27.3)),
("4682","Gulshan 303",(88.01, 18.56, 92.67, 26.64)),
("4683","PRS92",(116.04, 3.0, 129.95, 22.18)),
("4684","Gan 1970",(72.81, -0.69, 73.69, 7.08)),
("4685","Gandajika",(11.79, -13.46, 31.31, 5.39)),
("4686","MAGNA-SIRGAS",(-84.77, -4.23, -66.87, 15.51)),
("4687","RGPF",(-158.13, -31.24, -131.97, -4.52)),
("4688","Fatu Iva 72",(-138.75, -10.6, -138.54, -10.36)),
("4689","IGN63 Hiva Oa",(-139.23, -10.08, -138.75, -9.64)),
("4690","Tahiti 79",(-149.7, -17.93, -149.09, -17.44)),
("4691","Moorea 87",(-150.0, -17.63, -149.73, -17.41)),
("4692","Maupiti 83",(-152.39, -16.57, -152.14, -16.34)),
("4693","Nakhl-e Ghanem",(51.8, 27.3, 53.01, 28.2)),
("4694","POSGAR 94",(-73.59, -58.41, -52.63, -21.78)),
("4695","Katanga 1955",(21.74, -13.46, 30.78, -4.99)),
("4696","Kasai 1953",(21.5, -7.31, 26.26, -5.01)),
("4697","IGC 1962 6th Parallel South",(12.17, -7.36, 29.64, -3.29)),
("4698","IGN 1962 Kerguelen",(68.69, -49.78, 70.62, -48.6)),
("4699","Le Pouce 1934",(57.25, -20.57, 57.85, -19.94)),
("4700","IGN Astro 1960",(-17.08, 14.72, -4.8, 27.3)),
("4701","IGCB 1955",(12.17, -6.04, 16.28, -4.28)),
("4702","Mauritania 1999",(-20.04, 14.72, -4.8, 27.3)),
("4703","Mhast 1951",(10.53, -6.04, 13.1, -4.38)),
("4704","Mhast (onshore)",(10.53, -6.04, 13.1, -4.38)),
("4705","Mhast (offshore)",(10.53, -6.04, 12.37, -5.05)),
("4706","Egypt Gulf of Suez S-650 TL",(32.34, 27.19, 34.27, 30.01)),
("4707","Tern Island 1961",(-166.36, 23.69, -166.03, 23.93)),
("4708","Cocos Islands 1965",(96.76, -12.27, 96.99, -11.76)),
("4709","Iwo Jima 1945",(141.2, 24.67, 141.42, 24.89)),
("4710","Astro DOS 71",(-5.85, -16.08, -5.58, -15.85)),
("4711","Marcus Island 1952",(153.91, 24.22, 154.05, 24.35)),
("4712","Ascension Island 1958",(-14.46, -8.03, -14.24, -7.83)),
("4713","Ayabelle Lighthouse",(41.75, 10.94, 44.15, 12.72)),
("4714","Bellevue",(168.09, -20.31, 169.95, -17.37)),
("4715","Camp Area Astro",(165.73, -77.94, 167.43, -77.17)),
("4716","Phoenix Islands 1966",(-174.6, -4.76, -170.66, -2.68)),
("4717","Cape Canaveral",(-82.33, 20.86, -72.68, 30.83)),
("4718","Solomon 1968",(155.62, -10.9, 162.44, -6.55)),
("4719","Easter Island 1967",(-109.51, -27.25, -109.16, -27.01)),
("4720","Fiji 1986",(176.81, -20.81, -178.15, -12.42)),
("4721","Fiji 1956",(176.81, -19.22, -179.77, -16.1)),
("4722","South Georgia 1968",(-38.08, -54.95, -35.74, -53.93)),
("4723","GCGD59",(-81.46, 19.21, -81.04, 19.41)),
("4724","Diego Garcia 1969",(72.3, -7.49, 72.55, -7.18)),
("4725","Johnston Island 1961",(-169.59, 16.67, -169.47, 16.79)),
("4726","SIGD61",(-80.14, 19.63, -79.69, 19.78)),
("4727","Midway 1961",(-177.45, 28.13, -177.31, 28.28)),
("4728","PN84",(-18.22, 27.58, -13.37, 29.47)),
("4729","Pitcairn 1967",(-130.16, -25.14, -130.01, -25.0)),
("4730","Santo 1965",(166.47, -17.32, 168.71, -14.57)),
("4731","Viti Levu 1916",(177.19, -18.32, 178.75, -17.25)),
("4732","Marshall Islands 1960",(162.27, 8.66, 167.82, 19.38)),
("4733","Wake Island 1952",(166.55, 19.22, 166.72, 19.38)),
("4734","Tristan 1968",(-12.76, -40.42, -9.8, -37.0)),
("4735","Kusaie 1951",(162.85, 5.21, 163.1, 5.43)),
("4736","Deception Island",(-60.89, -63.08, -60.35, -62.82)),
("4737","Korea 2000",(122.71, 28.6, 134.28, 40.27)),
("4738","Hong Kong 1963",(113.76, 22.13, 114.51, 22.58)),
("4739","Hong Kong 1963(67)",(113.76, 22.13, 114.51, 22.58)),
("4740","PZ-90",(-180.0, -90.0, 180.0, 90.0)),
("4741","FD54",(-7.49, 61.33, -6.33, 62.41)),
("4742","GDM2000",(98.02, 0.85, 119.61, 7.81)),
("4743","Karbala 1979",(38.79, 29.06, 48.61, 37.39)),
("4744","Nahrwan 1934",(38.79, 29.06, 51.06, 37.39)),
("4745","RD/83",(11.89, 50.2, 15.04, 51.66)),
("4746","PD/83",(9.92, 50.2, 12.56, 51.64)),
("4747","GR96",(-75.0, 56.38, 8.12, 87.03)),
("4748","Vanua Levu 1915",(178.42, -17.07, -179.77, -16.1)),
("4749","RGNC91-93",(156.25, -26.45, 174.28, -14.83)),
("4750","ST87 Ouvea",(166.44, -20.77, 166.71, -20.34)),
("4751","Kertau (RSO)",(99.59, 1.13, 104.6, 6.72)),
("4752","Viti Levu 1912",(177.19, -18.32, 178.75, -17.25)),
("4753","fk89",(-7.49, 61.33, -6.33, 62.41)),
("4754","LGD2006",(9.31, 19.5, 26.21, 35.23)),
("4755","DGN95",(92.01, -13.95, 141.46, 7.79)),
("4756","VN-2000",(102.14, 8.33, 109.53, 23.4)),
("4757","SVY21",(103.59, 1.13, 104.07, 1.47)),
("4758","JAD2001",(-80.6, 14.08, -74.51, 19.36)),
("4759","NAD83(NSRS2007)",(167.65, 14.92, -63.88, 74.71)),
("4760","WGS 66",(-180.0, -90.0, 180.0, 90.0)),
("4761","HTRS96",(13.0, 41.62, 19.43, 46.54)),
("4762","BDA2000",(-68.83, 28.91, -60.7, 35.73)),
("4763","Pitcairn 2006",(-130.16, -25.14, -130.01, -25.0)),
("4764","RSRGD2000",(144.99, -90.0, -144.99, -59.99)),
("4765","Slovenia 1996",(13.38, 45.42, 16.61, 46.88)),
("4766","New Beijing / 3-degree Gauss-Kruger zone 30",(88.49, 27.32, 91.51, 48.42)),
("4767","New Beijing / 3-degree Gauss-Kruger zone 31",(91.5, 27.71, 94.5, 45.13)),
("4768","New Beijing / 3-degree Gauss-Kruger zone 32",(94.5, 28.23, 97.51, 44.5)),
("4769","New Beijing / 3-degree Gauss-Kruger zone 33",(97.5, 21.43, 100.5, 42.76)),
("4770","New Beijing / 3-degree Gauss-Kruger zone 34",(100.5, 21.13, 103.5, 42.69)),
("4771","New Beijing / 3-degree Gauss-Kruger zone 35",(103.5, 22.5, 106.51, 42.21)),
("4772","New Beijing / 3-degree Gauss-Kruger zone 36",(106.5, 18.19, 109.51, 42.47)),
("4773","New Beijing / 3-degree Gauss-Kruger zone 37",(109.5, 18.11, 112.5, 45.11)),
("4774","New Beijing / 3-degree Gauss-Kruger zone 38",(112.5, 21.52, 115.5, 45.45)),
("4775","New Beijing / 3-degree Gauss-Kruger zone 39",(115.5, 22.6, 118.5, 49.88)),
("4776","New Beijing / 3-degree Gauss-Kruger zone 40",(118.5, 24.43, 121.5, 53.33)),
("4777","New Beijing / 3-degree Gauss-Kruger zone 41",(121.5, 28.22, 124.5, 53.56)),
("4778","New Beijing / 3-degree Gauss-Kruger zone 42",(124.5, 40.19, 127.5, 53.2)),
("4779","New Beijing / 3-degree Gauss-Kruger zone 43",(127.5, 41.37, 130.5, 50.25)),
("4780","New Beijing / 3-degree Gauss-Kruger zone 44",(130.5, 42.42, 133.5, 48.88)),
("4781","New Beijing / 3-degree Gauss-Kruger zone 45",(133.5, 45.85, 134.77, 48.4)),
("4782","New Beijing / 3-degree Gauss-Kruger CM 75E",(73.62, 35.81, 76.5, 40.65)),
("4783","New Beijing / 3-degree Gauss-Kruger CM 78E",(76.5, 31.03, 79.5, 41.83)),
("4784","New Beijing / 3-degree Gauss-Kruger CM 81E",(79.5, 29.95, 82.51, 45.88)),
("4785","New Beijing / 3-degree Gauss-Kruger CM 84E",(82.5, 28.26, 85.5, 47.23)),
("4786","New Beijing / 3-degree Gauss-Kruger CM 87E",(85.5, 27.8, 88.5, 49.18)),
("4787","New Beijing / 3-degree Gauss-Kruger CM 90E",(88.49, 27.32, 91.51, 48.42)),
("4788","New Beijing / 3-degree Gauss-Kruger CM 93E",(91.5, 27.71, 94.5, 45.13)),
("4789","New Beijing / 3-degree Gauss-Kruger CM 96E",(94.5, 28.23, 97.51, 44.5)),
("4790","New Beijing / 3-degree Gauss-Kruger CM 99E",(97.5, 21.43, 100.5, 42.76)),
("4791","New Beijing / 3-degree Gauss-Kruger CM 102E",(100.5, 21.13, 103.5, 42.69)),
("4792","New Beijing / 3-degree Gauss-Kruger CM 105E",(103.5, 22.5, 106.51, 42.21)),
("4793","New Beijing / 3-degree Gauss-Kruger CM 108E",(106.5, 18.19, 109.51, 42.47)),
("4794","New Beijing / 3-degree Gauss-Kruger CM 111E",(109.5, 18.11, 112.5, 45.11)),
("4795","New Beijing / 3-degree Gauss-Kruger CM 114E",(112.5, 21.52, 115.5, 45.45)),
("4796","New Beijing / 3-degree Gauss-Kruger CM 117E",(115.5, 22.6, 118.5, 49.88)),
("4797","New Beijing / 3-degree Gauss-Kruger CM 120E",(118.5, 24.43, 121.5, 53.33)),
("4798","New Beijing / 3-degree Gauss-Kruger CM 123E",(121.5, 28.22, 124.5, 53.56)),
("4799","New Beijing / 3-degree Gauss-Kruger CM 126E",(124.5, 40.19, 127.5, 53.2)),
("4800","New Beijing / 3-degree Gauss-Kruger CM 129E",(127.5, 41.37, 130.5, 50.25)),
("4801","Bern 1898 (Bern)",(5.96, 45.82, 10.49, 47.81)),
("4802","Bogota 1975 (Bogota)",(-79.1, -4.23, -66.87, 12.52)),
("4803","Lisbon (Lisbon)",(-9.56, 36.95, -6.19, 42.16)),
("4804","Makassar (Jakarta)",(118.71, -6.54, 120.78, -1.88)),
("4805","MGI (Ferro)",(9.53, 40.85, 23.04, 49.02)),
("4806","Monte Mario (Rome)",(5.93, 34.76, 18.99, 47.1)),
("4807","NTF (Paris)",(-4.87, 41.31, 9.63, 51.14)),
("4808","Padang (Jakarta)",(95.16, -5.99, 106.13, 5.97)),
("4809","Belge 1950 (Brussels)",(2.5, 49.5, 6.4, 51.51)),
("4810","Tananarive (Paris)",(43.18, -25.64, 50.56, -11.89)),
("4811","Voirol 1875 (Paris)",(-2.95, 31.99, 9.09, 37.14)),
("4812","New Beijing / 3-degree Gauss-Kruger CM 132E",(130.5, 42.42, 133.5, 48.88)),
("4813","Batavia (Jakarta)",(95.16, -8.91, 115.77, 5.97)),
("4814","RT38 (Stockholm)",(10.93, 55.28, 24.17, 69.07)),
("4815","Greek (Athens)",(19.57, 34.88, 28.3, 41.75)),
("4816","Carthage (Paris)",(7.49, 30.23, 11.59, 37.4)),
("4817","NGO 1948 (Oslo)",(4.68, 57.93, 31.22, 71.21)),
("4818","S-JTSK (Ferro)",(12.09, 47.73, 22.56, 51.06)),
("4819","Nord Sahara 1959 (Paris)",(-13.17, 18.98, 11.99, 37.34)),
("4820","Segara (Jakarta)",(114.55, -4.24, 119.06, 4.29)),
("4821","Voirol 1879 (Paris)",(-2.95, 31.99, 9.09, 37.14)),
("4822","New Beijing / 3-degree Gauss-Kruger CM 135E",(133.5, 45.85, 134.77, 48.4)),
("4823","Sao Tome",(6.41, -0.04, 6.82, 0.46)),
("4824","Principe",(7.27, 1.48, 7.52, 1.76)),
("4826","WGS 84 / Cape Verde National",(-28.85, 11.47, -19.53, 20.54)),
("4839","ETRS89 / LCC Germany (N-E)",(5.86, 47.27, 15.04, 55.09)),
("4855","ETRS89 / NTM zone 5",(4.68, 58.32, 6.0, 62.49)),
("4856","ETRS89 / NTM zone 6",(6.0, 57.93, 7.0, 63.02)),
("4857","ETRS89 / NTM zone 7",(7.0, 57.93, 8.0, 63.52)),
("4858","ETRS89 / NTM zone 8",(8.0, 58.03, 9.0, 63.87)),
("4859","ETRS89 / NTM zone 9",(9.0, 58.52, 10.0, 64.16)),
("4860","ETRS89 / NTM zone 10",(10.0, 58.9, 11.0, 65.04)),
("4861","ETRS89 / NTM zone 11",(11.0, 58.88, 12.0, 65.76)),
("4862","ETRS89 / NTM zone 12",(12.0, 59.88, 13.0, 68.15)),
("4863","ETRS89 / NTM zone 13",(13.0, 64.01, 14.0, 68.37)),
("4864","ETRS89 / NTM zone 14",(14.0, 64.03, 15.0, 69.05)),
("4865","ETRS89 / NTM zone 15",(15.0, 66.14, 16.0, 69.35)),
("4866","ETRS89 / NTM zone 16",(16.0, 66.88, 17.0, 69.45)),
("4867","ETRS89 / NTM zone 17",(17.0, 67.94, 18.0, 69.68)),
("4868","ETRS89 / NTM zone 18",(18.0, 68.04, 19.0, 70.27)),
("4869","ETRS89 / NTM zone 19",(19.0, 68.33, 20.0, 70.34)),
("4870","ETRS89 / NTM zone 20",(20.0, 68.37, 21.0, 70.29)),
("4871","ETRS89 / NTM zone 21",(21.0, 69.03, 22.0, 70.71)),
("4872","ETRS89 / NTM zone 22",(22.0, 68.69, 23.0, 70.81)),
("4873","ETRS89 / NTM zone 23",(23.0, 68.62, 24.0, 71.08)),
("4874","ETRS89 / NTM zone 24",(24.0, 68.58, 25.0, 71.16)),
("4875","ETRS89 / NTM zone 25",(25.0, 68.59, 26.0, 71.21)),
("4876","ETRS89 / NTM zone 26",(26.0, 69.71, 27.0, 71.17)),
("4877","ETRS89 / NTM zone 27",(27.0, 69.9, 28.0, 71.17)),
("4878","ETRS89 / NTM zone 28",(28.0, 69.03, 29.0, 71.13)),
("4879","ETRS89 / NTM zone 29",(29.0, 69.02, 30.0, 70.93)),
("4880","ETRS89 / NTM zone 30",(30.0, 69.46, 31.22, 70.77)),
("4882","Slovenia 1996",(13.38, 45.42, 16.61, 46.88)),
("4883","Slovenia 1996",(13.38, 45.42, 16.61, 46.88)),
("4884","RSRGD2000",(144.99, -90.0, -144.99, -59.99)),
("4885","RSRGD2000",(144.99, -90.0, -144.99, -59.99)),
("4886","BDA2000",(-68.83, 28.91, -60.7, 35.73)),
("4887","BDA2000",(-68.83, 28.91, -60.7, 35.73)),
("4888","HTRS96",(13.0, 41.62, 19.43, 46.54)),
("4889","HTRS96",(13.0, 41.62, 19.43, 46.54)),
("4890","WGS 66",(-180.0, -90.0, 180.0, 90.0)),
("4891","WGS 66",(-180.0, -90.0, 180.0, 90.0)),
("4892","NAD83(NSRS2007)",(167.65, 14.92, -63.88, 74.71)),
("4893","NAD83(NSRS2007)",(167.65, 14.92, -63.88, 74.71)),
("4894","JAD2001",(-80.6, 14.08, -74.51, 19.36)),
("4895","JAD2001",(-80.6, 14.08, -74.51, 19.36)),
("4896","ITRF2005",(-180.0, -90.0, 180.0, 90.0)),
("4897","DGN95",(92.01, -13.95, 141.46, 7.79)),
("4898","DGN95",(92.01, -13.95, 141.46, 7.79)),
("4899","LGD2006",(9.31, 19.5, 26.21, 35.23)),
("4900","LGD2006",(9.31, 19.5, 26.21, 35.23)),
("4901","ATF (Paris)",(-4.87, 42.33, 8.23, 51.14)),
("4902","NDG (Paris)",(6.84, 47.42, 8.23, 49.07)),
("4903","Madrid 1870 (Madrid)",(-9.37, 35.95, 3.39, 43.82)),
("4904","Lisbon 1890 (Lisbon)",(-9.56, 36.95, -6.19, 42.16)),
("4906","RGNC91-93",(156.25, -26.45, 174.28, -14.83)),
("4907","RGNC91-93",(156.25, -26.45, 174.28, -14.83)),
("4908","GR96",(-75.0, 56.38, 8.12, 87.03)),
("4909","GR96",(-75.0, 56.38, 8.12, 87.03)),
("4910","ITRF88",(-180.0, -90.0, 180.0, 90.0)),
("4911","ITRF89",(-180.0, -90.0, 180.0, 90.0)),
("4912","ITRF90",(-180.0, -90.0, 180.0, 90.0)),
("4913","ITRF91",(-180.0, -90.0, 180.0, 90.0)),
("4914","ITRF92",(-180.0, -90.0, 180.0, 90.0)),
("4915","ITRF93",(-180.0, -90.0, 180.0, 90.0)),
("4916","ITRF94",(-180.0, -90.0, 180.0, 90.0)),
("4917","ITRF96",(-180.0, -90.0, 180.0, 90.0)),
("4918","ITRF97",(-180.0, -90.0, 180.0, 90.0)),
("4919","ITRF2000",(-180.0, -90.0, 180.0, 90.0)),
("4920","GDM2000",(98.02, 0.85, 119.61, 7.81)),
("4921","GDM2000",(98.02, 0.85, 119.61, 7.81)),
("4922","PZ-90",(-180.0, -90.0, 180.0, 90.0)),
("4923","PZ-90",(-180.0, -90.0, 180.0, 90.0)),
("4924","Mauritania 1999",(-20.04, 14.72, -4.8, 27.3)),
("4925","Mauritania 1999",(-20.04, 14.72, -4.8, 27.3)),
("4926","Korea 2000",(122.71, 28.6, 134.28, 40.27)),
("4927","Korea 2000",(122.71, 28.6, 134.28, 40.27)),
("4928","POSGAR 94",(-73.59, -58.41, -52.63, -21.78)),
("4929","POSGAR 94",(-73.59, -58.41, -52.63, -21.78)),
("4930","Australian Antarctic",(45.0, -90.0, 160.0, -60.0)),
("4931","Australian Antarctic",(45.0, -90.0, 160.0, -60.0)),
("4932","CHTRF95",(5.96, 45.82, 10.49, 47.81)),
("4933","CHTRF95",(5.96, 45.82, 10.49, 47.81)),
("4934","EST97",(20.37, 57.52, 28.2, 60.0)),
("4935","EST97",(20.37, 57.52, 28.2, 60.0)),
("4936","ETRS89",(-16.1, 32.88, 40.18, 84.17)),
("4937","ETRS89",(-16.1, 32.88, 40.18, 84.17)),
("4938","GDA94",(93.41, -60.56, 173.35, -8.47)),
("4939","GDA94",(93.41, -60.56, 173.35, -8.47)),
("4940","Hartebeesthoek94",(13.33, -50.32, 42.85, -22.13)),
("4941","Hartebeesthoek94",(13.33, -50.32, 42.85, -22.13)),
("4942","IRENET95",(-10.56, 51.39, -5.34, 55.43)),
("4943","IRENET95",(-10.56, 51.39, -5.34, 55.43)),
("4944","ISN93",(-30.87, 59.96, -5.55, 69.59)),
("4945","ISN93",(-30.87, 59.96, -5.55, 69.59)),
("4946","JGD2000",(122.38, 17.09, 157.65, 46.05)),
("4947","JGD2000",(122.38, 17.09, 157.65, 46.05)),
("4948","LKS92",(19.06, 55.67, 28.24, 58.09)),
("4949","LKS92",(19.06, 55.67, 28.24, 58.09)),
("4950","LKS94",(19.02, 53.89, 26.82, 56.45)),
("4951","LKS94",(19.02, 53.89, 26.82, 56.45)),
("4952","Moznet",(30.21, -27.71, 43.03, -10.09)),
("4953","Moznet",(30.21, -27.71, 43.03, -10.09)),
("4954","NAD83(CSRS)",(-141.01, 40.04, -47.74, 86.46)),
("4955","NAD83(CSRS)",(-141.01, 40.04, -47.74, 86.46)),
("4956","NAD83(HARN)",(144.58, -14.59, -64.51, 71.4)),
("4957","NAD83(HARN)",(144.58, -14.59, -64.51, 71.4)),
("4958","NZGD2000",(160.6, -55.95, -171.2, -25.88)),
("4959","NZGD2000",(160.6, -55.95, -171.2, -25.88)),
("4960","POSGAR 98",(-73.59, -58.41, -52.63, -21.78)),
("4961","POSGAR 98",(-73.59, -58.41, -52.63, -21.78)),
("4962","REGVEN",(-73.38, 0.64, -58.95, 16.75)),
("4963","REGVEN",(-73.38, 0.64, -58.95, 16.75)),
("4964","RGF93",(-9.86, 41.15, 10.38, 51.56)),
("4965","RGF93",(-9.86, 41.15, 10.38, 51.56)),
("4966","RGFG95",(-54.61, 2.11, -49.45, 8.88)),
("4967","RGFG95",(-54.61, 2.11, -49.45, 8.88)),
("4968","RGNC 1991",(156.25, -26.45, 174.28, -14.83)),
("4969","RGNC 1991",(156.25, -26.45, 174.28, -14.83)),
("4970","RGR92",(51.83, -24.72, 58.24, -18.28)),
("4971","RGR92",(51.83, -24.72, 58.24, -18.28)),
("4972","RRAF 1991",(-63.66, 14.08, -57.52, 18.54)),
("4973","RRAF 1991",(-63.66, 14.08, -57.52, 18.54)),
("4974","SIRGAS 1995",(-113.21, -59.87, -26.0, 16.75)),
("4975","SIRGAS 1995",(-113.21, -59.87, -26.0, 16.75)),
("4976","SWEREF99",(10.03, 54.96, 24.17, 69.07)),
("4977","SWEREF99",(10.03, 54.96, 24.17, 69.07)),
("4978","WGS 84",(-180.0, -90.0, 180.0, 90.0)),
("4979","WGS 84",(-180.0, -90.0, 180.0, 90.0)),
("4980","Yemen NGN96",(41.08, 8.95, 57.96, 19.0)),
("4981","Yemen NGN96",(41.08, 8.95, 57.96, 19.0)),
("4982","IGM95",(5.93, 34.76, 18.99, 47.1)),
("4983","IGM95",(5.93, 34.76, 18.99, 47.1)),
("4984","WGS 72",(-180.0, -90.0, 180.0, 90.0)),
("4985","WGS 72",(-180.0, -90.0, 180.0, 90.0)),
("4986","WGS 72BE",(-180.0, -90.0, 180.0, 90.0)),
("4987","WGS 72BE",(-180.0, -90.0, 180.0, 90.0)),
("4988","SIRGAS 2000",(-122.19, -59.87, -25.28, 32.72)),
("4989","SIRGAS 2000",(-122.19, -59.87, -25.28, 32.72)),
("4990","Lao 1993",(100.09, 13.92, 107.64, 22.5)),
("4991","Lao 1993",(100.09, 13.92, 107.64, 22.5)),
("4992","Lao 1997",(100.09, 13.92, 107.64, 22.5)),
("4993","Lao 1997",(100.09, 13.92, 107.64, 22.5)),
("4994","PRS92",(116.04, 3.0, 129.95, 22.18)),
("4995","PRS92",(116.04, 3.0, 129.95, 22.18)),
("4996","MAGNA-SIRGAS",(-84.77, -4.23, -66.87, 15.51)),
("4997","MAGNA-SIRGAS",(-84.77, -4.23, -66.87, 15.51)),
("4998","RGPF",(-158.13, -31.24, -131.97, -4.52)),
("4999","RGPF",(-158.13, -31.24, -131.97, -4.52)),
("5011","PTRA08",(-35.58, 29.24, -12.48, 43.07)),
("5012","PTRA08",(-35.58, 29.24, -12.48, 43.07)),
("5013","PTRA08",(-35.58, 29.24, -12.48, 43.07)),
("5014","PTRA08 / UTM zone 25N",(-35.58, 35.25, -30.0, 43.07)),
("5015","PTRA08 / UTM zone 26N",(-30.0, 33.52, -24.0, 42.96)),
("5016","PTRA08 / UTM zone 28N",(-18.0, 29.24, -12.48, 36.46)),
("5017","Lisbon 1890 / Portugal Bonne New",(-9.56, 36.95, -6.19, 42.16)),
("5018","Lisbon / Portuguese Grid New",(-9.56, 36.95, -6.19, 42.16)),
("5041","WGS 84 / UPS North (E,N)",(-180.0, 60.0, 180.0, 90.0)),
("5042","WGS 84 / UPS South (E,N)",(-180.0, -90.0, 180.0, -60.0)),
("5048","ETRS89 / TM35FIN(N,E)",(19.08, 58.84, 31.59, 70.09)),
("5069","NAD27 / Conus Albers",(-124.79, 24.41, -66.91, 49.38)),
("5070","NAD83 / Conus Albers",(-124.79, 24.41, -66.91, 49.38)),
("5071","NAD83(HARN) / Conus Albers",(-124.79, 24.41, -66.91, 49.38)),
("5072","NAD83(NSRS2007) / Conus Albers",(-124.79, 24.41, -66.91, 49.38)),
("5105","ETRS89 / NTM zone 5",(4.68, 58.32, 6.0, 62.49)),
("5106","ETRS89 / NTM zone 6",(6.0, 57.93, 7.0, 63.02)),
("5107","ETRS89 / NTM zone 7",(7.0, 57.93, 8.0, 63.52)),
("5108","ETRS89 / NTM zone 8",(8.0, 58.03, 9.0, 63.87)),
("5109","ETRS89 / NTM zone 9",(9.0, 58.52, 10.0, 64.16)),
("5110","ETRS89 / NTM zone 10",(10.0, 58.9, 11.0, 65.04)),
("5111","ETRS89 / NTM zone 11",(11.0, 58.88, 12.0, 65.76)),
("5112","ETRS89 / NTM zone 12",(12.0, 59.88, 13.0, 68.15)),
("5113","ETRS89 / NTM zone 13",(13.0, 64.01, 14.0, 68.37)),
("5114","ETRS89 / NTM zone 14",(14.0, 64.03, 15.0, 69.05)),
("5115","ETRS89 / NTM zone 15",(15.0, 66.14, 16.0, 69.35)),
("5116","ETRS89 / NTM zone 16",(16.0, 66.88, 17.0, 69.45)),
("5117","ETRS89 / NTM zone 17",(17.0, 67.94, 18.0, 69.68)),
("5118","ETRS89 / NTM zone 18",(18.0, 68.04, 19.0, 70.27)),
("5119","ETRS89 / NTM zone 19",(19.0, 68.33, 20.0, 70.34)),
("5120","ETRS89 / NTM zone 20",(20.0, 68.37, 21.0, 70.29)),
("5121","ETRS89 / NTM zone 21",(21.0, 69.03, 22.0, 70.71)),
("5122","ETRS89 / NTM zone 22",(22.0, 68.69, 23.0, 70.81)),
("5123","ETRS89 / NTM zone 23",(23.0, 68.62, 24.0, 71.08)),
("5124","ETRS89 / NTM zone 24",(24.0, 68.58, 25.0, 71.16)),
("5125","ETRS89 / NTM zone 25",(25.0, 68.59, 26.0, 71.21)),
("5126","ETRS89 / NTM zone 26",(26.0, 69.71, 27.0, 71.17)),
("5127","ETRS89 / NTM zone 27",(27.0, 69.9, 28.0, 71.17)),
("5128","ETRS89 / NTM zone 28",(28.0, 69.03, 29.0, 71.13)),
("5129","ETRS89 / NTM zone 29",(29.0, 69.02, 30.0, 70.93)),
("5130","ETRS89 / NTM zone 30",(30.0, 69.46, 31.22, 70.77)),
("5132","Tokyo 1892",(122.83, 20.37, 154.05, 45.54)),
("5167","Korean 1985 / East Sea Belt",(130.71, 37.39, 131.01, 37.62)),
("5168","Korean 1985 / Central Belt Jeju",(126.09, 33.14, 127.01, 33.61)),
("5169","Tokyo 1892 / Korea West Belt",(124.27, 33.99, 126.0, 40.9)),
("5170","Tokyo 1892 / Korea Central Belt",(126.0, 33.14, 128.0, 41.8)),
("5171","Tokyo 1892 / Korea East Belt",(128.0, 34.49, 130.0, 43.01)),
("5172","Tokyo 1892 / Korea East Sea Belt",(130.0, 37.39, 131.01, 42.98)),
("5173","Korean 1985 / Modified West Belt",(124.53, 33.99, 126.0, 38.04)),
("5174","Korean 1985 / Modified Central Belt",(126.0, 33.96, 128.0, 38.33)),
("5175","Korean 1985 / Modified Central Belt Jeju",(126.09, 33.14, 127.01, 33.61)),
("5176","Korean 1985 / Modified East Belt",(128.0, 34.49, 129.65, 38.64)),
("5177","Korean 1985 / Modified East Sea Belt",(130.71, 37.39, 131.01, 37.62)),
("5178","Korean 1985 / Unified CS",(124.53, 33.14, 131.01, 38.64)),
("5179","Korea 2000 / Unified CS",(122.71, 28.6, 134.28, 40.27)),
("5180","Korea 2000 / West Belt",(124.53, 33.99, 126.0, 38.04)),
("5181","Korea 2000 / Central Belt",(126.0, 33.96, 128.0, 38.33)),
("5182","Korea 2000 / Central Belt Jeju",(126.09, 33.14, 127.01, 33.61)),
("5183","Korea 2000 / East Belt",(128.0, 34.49, 129.65, 38.64)),
("5184","Korea 2000 / East Sea Belt",(130.71, 37.39, 131.01, 37.62)),
("5185","Korea 2000 / West Belt 2010",(124.53, 33.99, 126.0, 38.04)),
("5186","Korea 2000 / Central Belt 2010",(126.0, 33.14, 128.0, 38.33)),
("5187","Korea 2000 / East Belt 2010",(128.0, 34.49, 129.65, 38.64)),
("5188","Korea 2000 / East Sea Belt 2010",(130.71, 37.39, 131.01, 37.62)),
("5193","Incheon height",(125.75, 33.96, 129.65, 38.64)),
("5195","Trieste height",(13.38, 40.85, 23.04, 46.88)),
("5214","Genoa height",(6.62, 36.59, 18.58, 47.1)),
("5221","S-JTSK (Ferro) / Krovak East North",(12.09, 47.73, 22.56, 51.06)),
("5223","WGS 84 / Gabon TM",(8.65, -3.98, 14.52, 2.32)),
("5224","S-JTSK/05 (Ferro) / Modified Krovak",(12.09, 48.58, 18.86, 51.06)),
("5225","S-JTSK/05 (Ferro) / Modified Krovak East North",(12.09, 48.58, 18.86, 51.06)),
("5228","S-JTSK/05",(12.09, 48.58, 18.86, 51.06)),
("5229","S-JTSK/05 (Ferro)",(12.09, 48.58, 18.86, 51.06)),
("5233","SLD99",(79.64, 5.86, 81.95, 9.88)),
("5234","Kandawala / Sri Lanka Grid",(79.64, 5.86, 81.95, 9.88)),
("5235","SLD99 / Sri Lanka Grid 1999",(79.64, 5.86, 81.95, 9.88)),
("5237","SLVD height",(79.64, 5.86, 81.95, 9.88)),
("5243","ETRS89 / LCC Germany (E-N)",(5.86, 47.27, 15.04, 55.09)),
("5244","GDBD2009",(112.37, 4.01, 115.37, 6.31)),
("5245","GDBD2009",(112.37, 4.01, 115.37, 6.31)),
("5246","GDBD2009",(112.37, 4.01, 115.37, 6.31)),
("5247","GDBD2009 / Brunei BRSO",(112.37, 4.01, 115.37, 6.31)),
("5250","TUREF",(25.62, 34.42, 44.83, 43.45)),
("5251","TUREF",(25.62, 34.42, 44.83, 43.45)),
("5252","TUREF",(25.62, 34.42, 44.83, 43.45)),
("5253","TUREF / TM27",(25.62, 36.5, 28.5, 42.11)),
("5254","TUREF / TM30",(28.5, 36.06, 31.5, 41.46)),
("5255","TUREF / TM33",(31.5, 35.97, 34.5, 42.07)),
("5256","TUREF / TM36",(34.5, 35.81, 37.5, 42.15)),
("5257","TUREF / TM39",(37.5, 36.66, 40.5, 41.19)),
("5258","TUREF / TM42",(40.5, 37.02, 43.5, 41.6)),
("5259","TUREF / TM45",(43.5, 36.97, 44.83, 41.02)),
("5262","DRUKREF 03",(88.74, 26.7, 92.13, 28.33)),
("5263","DRUKREF 03",(88.74, 26.7, 92.13, 28.33)),
("5264","DRUKREF 03",(88.74, 26.7, 92.13, 28.33)),
("5266","DRUKREF 03 / Bhutan National Grid",(88.74, 26.7, 92.13, 28.33)),
("5269","TUREF / 3-degree Gauss-Kruger zone 9",(25.62, 36.5, 28.5, 42.11)),
("5270","TUREF / 3-degree Gauss-Kruger zone 10",(28.5, 36.06, 31.5, 41.46)),
("5271","TUREF / 3-degree Gauss-Kruger zone 11",(31.5, 35.97, 34.5, 42.07)),
("5272","TUREF / 3-degree Gauss-Kruger zone 12",(34.5, 35.81, 37.5, 42.15)),
("5273","TUREF / 3-degree Gauss-Kruger zone 13",(37.5, 36.66, 40.5, 41.19)),
("5274","TUREF / 3-degree Gauss-Kruger zone 14",(40.5, 37.02, 43.5, 41.6)),
("5275","TUREF / 3-degree Gauss-Kruger zone 15",(43.5, 36.97, 44.83, 41.02)),
("5292","DRUKREF 03 / Bumthang TM",(90.46, 27.33, 91.02, 28.09)),
("5293","DRUKREF 03 / Chhukha TM",(89.26, 26.71, 89.83, 27.32)),
("5294","DRUKREF 03 / Dagana TM",(89.63, 26.7, 90.08, 27.29)),
("5295","DRUKREF 03 / Gasa TM",(89.44, 27.72, 90.47, 28.33)),
("5296","DRUKREF 03 / Ha TM",(88.9, 27.02, 89.39, 27.62)),
("5297","DRUKREF 03 / Lhuentse TM",(90.77, 27.39, 91.49, 28.09)),
("5298","DRUKREF 03 / Mongar TM",(90.95, 26.93, 91.5, 27.61)),
("5299","DRUKREF 03 / Paro TM",(89.12, 27.18, 89.56, 27.79)),
("5300","DRUKREF 03 / Pemagatshel TM",(91.0, 26.78, 91.56, 27.18)),
("5301","DRUKREF 03 / Punakha TM",(89.63, 27.46, 90.08, 27.87)),
("5302","DRUKREF 03 / Samdrup Jongkhar TM",(91.39, 26.79, 92.13, 27.25)),
("5303","DRUKREF 03 / Samtse TM",(88.74, 26.8, 89.38, 27.28)),
("5304","DRUKREF 03 / Sarpang TM",(90.01, 26.73, 90.78, 27.23)),
("5305","DRUKREF 03 / Thimphu TM",(89.22, 27.14, 89.77, 28.01)),
("5306","DRUKREF 03 / Trashigang TM",(91.37, 27.01, 92.13, 27.49)),
("5307","DRUKREF 03 / Trongsa TM",(90.26, 27.13, 90.76, 27.79)),
("5308","DRUKREF 03 / Tsirang TM",(90.0, 26.81, 90.35, 27.2)),
("5309","DRUKREF 03 / Wangdue Phodrang TM",(89.71, 27.11, 90.54, 28.08)),
("5310","DRUKREF 03 / Yangtse TM",(91.34, 27.37, 91.77, 28.0)),
("5311","DRUKREF 03 / Zhemgang TM",(90.53, 26.77, 91.19, 27.39)),
("5316","ETRS89 / Faroe TM",(-13.91, 59.94, -0.48, 65.7)),
("5317","FVR09 height",(-7.49, 61.33, -6.33, 62.41)),
("5318","ETRS89 / Faroe TM + FVR09 height",(-7.49, 61.33, -6.33, 62.41)),
("5320","NAD83 / Teranet Ontario Lambert",(-95.16, 41.67, -74.35, 56.9)),
("5321","NAD83(CSRS) / Teranet Ontario Lambert",(-95.16, 41.67, -74.35, 56.9)),
("5322","ISN2004",(-30.87, 59.96, -5.55, 69.59)),
("5323","ISN2004",(-30.87, 59.96, -5.55, 69.59)),
("5324","ISN2004",(-30.87, 59.96, -5.55, 69.59)),
("5325","ISN2004 / Lambert 2004",(-30.87, 59.96, -5.55, 69.59)),
("5329","Segara (Jakarta) / NEIEZ",(114.55, -4.24, 119.06, 4.29)),
("5330","Batavia (Jakarta) / NEIEZ",(95.16, -8.91, 115.77, 5.97)),
("5331","Makassar (Jakarta) / NEIEZ",(118.71, -6.54, 120.78, -1.88)),
("5332","ITRF2008",(-180.0, -90.0, 180.0, 90.0)),
("5336","Black Sea depth",(39.99, 41.04, 46.72, 43.59)),
("5337","Aratu / UTM zone 25S",(-36.0, -20.11, -30.0, 0.0)),
("5340","POSGAR 2007",(-73.59, -58.41, -52.63, -21.78)),
("5341","POSGAR 2007",(-73.59, -58.41, -52.63, -21.78)),
("5342","POSGAR 2007",(-73.59, -58.41, -52.63, -21.78)),
("5343","POSGAR 2007 / Argentina 1",(-73.59, -52.0, -70.5, -36.16)),
("5344","POSGAR 2007 / Argentina 2",(-70.5, -54.9, -67.49, -24.08)),
("5345","POSGAR 2007 / Argentina 3",(-67.5, -55.11, -64.49, -21.78)),
("5346","POSGAR 2007 / Argentina 4",(-64.5, -54.91, -61.5, -21.99)),
("5347","POSGAR 2007 / Argentina 5",(-61.51, -39.06, -58.5, -23.37)),
("5348","POSGAR 2007 / Argentina 6",(-58.5, -38.59, -55.49, -24.84)),
("5349","POSGAR 2007 / Argentina 7",(-55.5, -28.11, -53.65, -25.49)),
("5352","MARGEN",(-69.66, -22.91, -57.52, -9.67)),
("5353","MARGEN",(-69.66, -22.91, -57.52, -9.67)),
("5354","MARGEN",(-69.66, -22.91, -57.52, -9.67)),
("5355","MARGEN / UTM zone 20S",(-66.0, -22.87, -60.0, -9.67)),
("5356","MARGEN / UTM zone 19S",(-69.66, -22.91, -66.0, -9.77)),
("5357","MARGEN / UTM zone 21S",(-60.0, -20.17, -57.52, -16.27)),
("5358","SIRGAS-Chile 2002",(-113.21, -59.87, -65.72, -17.5)),
("5359","SIRGAS-Chile 2002",(-113.21, -59.87, -65.72, -17.5)),
("5360","SIRGAS-Chile 2002",(-113.21, -59.87, -65.72, -17.5)),
("5361","SIRGAS-Chile 2002 / UTM zone 19S",(-72.0, -59.87, -66.0, -17.5)),
("5362","SIRGAS-Chile 2002 / UTM zone 18S",(-78.0, -59.36, -71.99, -18.35)),
("5363","CR05",(-90.45, 2.15, -81.43, 11.77)),
("5364","CR05",(-90.45, 2.15, -81.43, 11.77)),
("5365","CR05",(-90.45, 2.15, -81.43, 11.77)),
("5367","CR05 / CRTM05",(-86.5, 2.21, -81.43, 11.77)),
("5368","MACARIO SOLIS",(-84.32, 5.0, -77.04, 12.51)),
("5369","Peru96",(-84.68, -21.05, -68.67, -0.03)),
("5370","MACARIO SOLIS",(-84.32, 5.0, -77.04, 12.51)),
("5371","MACARIO SOLIS",(-84.32, 5.0, -77.04, 12.51)),
("5372","Peru96",(-84.68, -21.05, -68.67, -0.03)),
("5373","Peru96",(-84.68, -21.05, -68.67, -0.03)),
("5379","SIRGAS-ROU98",(-58.49, -37.77, -50.01, -30.09)),
("5380","SIRGAS-ROU98",(-58.49, -37.77, -50.01, -30.09)),
("5381","SIRGAS-ROU98",(-58.49, -37.77, -50.01, -30.09)),
("5382","SIRGAS-ROU98 / UTM zone 21S",(-58.49, -36.63, -54.0, -30.09)),
("5383","SIRGAS-ROU98 / UTM zone 22S",(-54.0, -37.77, -50.01, -31.9)),
("5387","Peru96 / UTM zone 18S",(-78.0, -21.05, -72.0, -0.03)),
("5388","Peru96 / UTM zone 17S",(-84.0, -17.33, -78.0, -3.11)),
("5389","Peru96 / UTM zone 19S",(-72.0, -20.44, -68.67, -2.14)),
("5391","SIRGAS_ES2007.8",(-91.43, 9.97, -87.65, 14.44)),
("5392","SIRGAS_ES2007.8",(-91.43, 9.97, -87.65, 14.44)),
("5393","SIRGAS_ES2007.8",(-91.43, 9.97, -87.65, 14.44)),
("5396","SIRGAS 2000 / UTM zone 26S",(-30.0, -23.86, -25.28, 4.26)),
("5451","Ocotepeque 1935",(-92.29, 7.98, -82.53, 17.83)),
("5456","Ocotepeque 1935 / Costa Rica Norte",(-85.97, 9.53, -82.53, 11.22)),
("5457","Ocotepeque 1935 / Costa Rica Sur",(-85.74, 7.98, -82.53, 9.94)),
("5458","Ocotepeque 1935 / Guatemala Norte",(-91.86, 15.85, -88.34, 17.83)),
("5459","Ocotepeque 1935 / Guatemala Sur",(-92.29, 13.69, -88.19, 15.86)),
("5460","Ocotepeque 1935 / El Salvador Lambert",(-90.11, 13.1, -87.69, 14.44)),
("5461","Ocotepeque 1935 / Nicaragua Norte",(-87.74, 12.8, -83.08, 15.03)),
("5462","Ocotepeque 1935 / Nicaragua Sur",(-87.63, 10.7, -83.42, 12.8)),
("5463","SAD69 / UTM zone 17N",(-80.18, 0.0, -78.0, 2.7)),
("5464","Sibun Gorge 1922",(-89.22, 15.88, -87.72, 18.49)),
("5466","Sibun Gorge 1922 / Colony Grid",(-89.22, 15.88, -87.72, 18.49)),
("5467","Panama-Colon 1911",(-83.04, 7.15, -77.19, 9.68)),
("5469","Panama-Colon 1911 / Panama Lambert",(-83.04, 7.15, -77.19, 9.68)),
("5472","Panama-Colon 1911 / Panama Polyconic",(-83.04, 7.15, -77.19, 9.68)),
("5479","RSRGD2000 / MSLC2000",(153.0, -81.0, 173.0, -76.0)),
("5480","RSRGD2000 / BCLC2000",(157.0, -76.0, 173.0, -73.0)),
("5481","RSRGD2000 / PCLC2000",(160.0, -73.0, 172.0, -69.5)),
("5482","RSRGD2000 / RSPS2000",(150.0, -90.0, -150.0, -76.0)),
("5487","RGAF09",(-63.66, 14.08, -57.52, 18.54)),
("5488","RGAF09",(-63.66, 14.08, -57.52, 18.54)),
("5489","RGAF09",(-63.66, 14.08, -57.52, 18.54)),
("5490","RGAF09 / UTM zone 20N",(-63.66, 14.08, -60.0, 18.32)),
("5498","NAD83 + NAVD88 height",(-168.26, 24.41, -66.91, 71.4)),
("5499","NAD83(HARN) + NAVD88 height",(-124.79, 24.41, -66.91, 49.38)),
("5500","NAD83(NSRS2007) + NAVD88 height",(-124.79, 24.41, -66.91, 49.38)),
("5513","S-JTSK / Krovak",(12.09, 47.73, 22.56, 51.06)),
("5514","S-JTSK / Krovak East North",(12.09, 47.73, 22.56, 51.06)),
("5515","S-JTSK/05 / Modified Krovak",(12.09, 48.58, 18.86, 51.06)),
("5516","S-JTSK/05 / Modified Krovak East North",(12.09, 48.58, 18.86, 51.06)),
("5518","CI1971 / Chatham Islands Map Grid",(-177.25, -44.64, -175.54, -43.3)),
("5519","CI1979 / Chatham Islands Map Grid",(-177.25, -44.64, -175.54, -43.3)),
("5520","DHDN / 3-degree Gauss-Kruger zone 1",(3.34, 55.24, 4.5, 55.92)),
("5523","WGS 84 / Gabon TM 2011",(7.03, -6.37, 14.52, 2.32)),
("5524","Corrego Alegre 1961",(-58.16, -27.5, -38.82, -14.99)),
("5527","SAD69(96)",(-74.01, -35.71, -25.28, 7.04)),
("5530","SAD69(96) / Brazil Polyconic",(-74.01, -35.71, -25.28, 7.04)),
("5531","SAD69(96) / UTM zone 21S",(-60.0, -31.91, -53.99, 4.51)),
("5532","SAD69(96) / UTM zone 22S",(-54.01, -35.71, -47.99, 7.04)),
("5533","SAD69(96) / UTM zone 23S",(-48.0, -33.5, -42.0, 5.13)),
("5534","SAD69(96) / UTM zone 24S",(-42.0, -26.35, -36.0, 0.74)),
("5535","SAD69(96) / UTM zone 25S",(-36.0, -23.8, -29.99, 4.19)),
("5536","Corrego Alegre 1961 / UTM zone 21S",(-58.16, -27.5, -54.0, -17.99)),
("5537","Corrego Alegre 1961 / UTM zone 22S",(-54.0, -27.5, -47.99, -14.99)),
("5538","Corrego Alegre 1961 / UTM zone 23S",(-48.0, -25.29, -42.0, -15.0)),
("5539","Corrego Alegre 1961 / UTM zone 24S",(-42.0, -22.96, -38.82, -14.99)),
("5544","PNG94",(139.2, -14.75, 162.81, 2.58)),
("5545","PNG94",(139.2, -14.75, 162.81, 2.58)),
("5546","PNG94",(139.2, -14.75, 162.81, 2.58)),
("5550","PNG94 / PNGMG94 zone 54",(139.2, -11.15, 144.0, 2.31)),
("5551","PNG94 / PNGMG94 zone 55",(144.0, -13.88, 150.01, 2.58)),
("5552","PNG94 / PNGMG94 zone 56",(150.0, -14.75, 156.0, 1.98)),
("5554","ETRS89 / UTM zone 31N + DHHN92 height",(5.87, 50.97, 6.0, 51.83)),
("5555","ETRS89 / UTM zone 32N + DHHN92 height",(6.0, 47.27, 12.0, 55.09)),
("5556","ETRS89 / UTM zone 33N + DHHN92 height",(12.0, 47.46, 15.04, 54.74)),
("5558","UCS-2000",(22.15, 43.18, 40.18, 52.38)),
("5559","Ocotepeque 1935 / Guatemala Norte",(-91.86, 15.85, -88.34, 17.83)),
("5560","UCS-2000",(22.15, 43.18, 40.18, 52.38)),
("5561","UCS-2000",(22.15, 43.18, 40.18, 52.38)),
("5562","UCS-2000 / Gauss-Kruger zone 4",(22.15, 47.95, 24.0, 51.66)),
("5563","UCS-2000 / Gauss-Kruger zone 5",(24.0, 45.1, 30.0, 51.96)),
("5564","UCS-2000 / Gauss-Kruger zone 6",(30.0, 43.18, 36.0, 52.38)),
("5565","UCS-2000 / Gauss-Kruger zone 7",(36.0, 43.43, 40.18, 50.44)),
("5566","UCS-2000 / Gauss-Kruger CM 21E",(22.15, 47.95, 24.0, 51.66)),
("5567","UCS-2000 / Gauss-Kruger CM 27E",(24.0, 45.1, 30.0, 51.96)),
("5568","UCS-2000 / Gauss-Kruger CM 33E",(30.0, 43.18, 36.0, 52.38)),
("5569","UCS-2000 / Gauss-Kruger CM 39E",(36.0, 43.43, 40.18, 50.44)),
("5570","UCS-2000 / 3-degree Gauss-Kruger zone 7",(22.15, 48.24, 22.5, 48.98)),
("5571","UCS-2000 / 3-degree Gauss-Kruger zone 8",(22.5, 47.71, 25.5, 51.96)),
("5572","UCS-2000 / 3-degree Gauss-Kruger zone 9",(25.5, 45.26, 28.5, 51.94)),
("5573","UCS-2000 / 3-degree Gauss-Kruger zone 10",(28.5, 43.42, 31.5, 52.12)),
("5574","UCS-2000 / 3-degree Gauss-Kruger zone 11",(31.5, 43.18, 34.5, 52.38)),
("5575","UCS-2000 / 3-degree Gauss-Kruger zone 12",(34.5, 43.24, 37.5, 51.25)),
("5576","UCS-2000 / 3-degree Gauss-Kruger zone 13",(37.5, 46.77, 40.18, 50.39)),
("5577","UCS-2000 / 3-degree Gauss-Kruger CM 21E",(22.15, 48.24, 22.5, 48.98)),
("5578","UCS-2000 / 3-degree Gauss-Kruger CM 24E",(22.5, 47.71, 25.5, 51.96)),
("5579","UCS-2000 / 3-degree Gauss-Kruger CM 27E",(25.5, 45.26, 28.5, 51.94)),
("5580","UCS-2000 / 3-degree Gauss-Kruger CM 30E",(28.5, 43.42, 31.5, 52.12)),
("5581","UCS-2000 / 3-degree Gauss-Kruger CM 33E",(31.5, 43.18, 34.5, 52.38)),
("5582","UCS-2000 / 3-degree Gauss-Kruger CM 36E",(34.5, 43.24, 37.5, 51.25)),
("5583","UCS-2000 / 3-degree Gauss-Kruger CM 39E",(37.5, 46.77, 40.18, 50.39)),
("5588","NAD27 / New Brunswick Stereographic (NAD27)",(-69.05, 44.56, -63.7, 48.07)),
("5589","Sibun Gorge 1922 / Colony Grid",(-89.22, 15.88, -87.72, 18.49)),
("5591","FEH2010",(10.66, 54.33, 12.01, 54.83)),
("5592","FEH2010",(10.66, 54.33, 12.01, 54.83)),
("5593","FEH2010",(10.66, 54.33, 12.01, 54.83)),
("5596","FEH2010 / Fehmarnbelt TM",(10.66, 54.33, 12.01, 54.83)),
("5597","FCSVR10 height",(11.17, 54.42, 11.51, 54.76)),
("5598","FEH2010 / Fehmarnbelt TM + FCSVR10 height",(11.17, 54.42, 11.51, 54.76)),
("5600","NGPF height",(-152.39, -17.93, -149.09, -16.17)),
("5601","IGN 1966 height",(-149.7, -17.93, -149.09, -17.44)),
("5602","Moorea SAU 1981 height",(-150.0, -17.63, -149.73, -17.41)),
("5603","Raiatea SAU 2001 height",(-151.55, -16.96, -151.3, -16.68)),
("5604","Maupiti SAU 2001 height",(-152.39, -16.57, -152.14, -16.34)),
("5605","Huahine SAU 2001 height",(-151.11, -16.87, -150.89, -16.63)),
("5606","Tahaa SAU 2001 height",(-151.63, -16.72, -151.36, -16.5)),
("5607","Bora Bora SAU 2001 height",(-151.86, -16.62, -151.61, -16.39)),
("5608","IGLD 1955 height",(-93.17, 40.99, -54.75, 52.22)),
("5609","IGLD 1985 height",(-93.17, 40.99, -54.75, 52.22)),
("5610","HVRS71 height",(13.43, 42.34, 19.43, 46.54)),
("5611","Caspian height",(46.95, 37.35, 53.93, 46.97)),
("5612","Baltic 1977 depth",(19.57, 35.14, -168.97, 81.91)),
("5613","RH2000 height",(10.93, 55.28, 24.17, 69.07)),
("5614","KOC WD depth (ft)",(46.54, 28.53, 48.48, 30.09)),
("5615","RH00 height",(10.93, 55.28, 24.17, 69.07)),
("5616","IGN 1988 LS height",(-61.68, 15.8, -61.52, 15.94)),
("5617","IGN 1988 MG height",(-61.39, 15.8, -61.13, 16.05)),
("5618","IGN 1992 LD height",(-61.13, 16.26, -60.97, 16.38)),
("5619","IGN 1988 SB height",(-62.92, 17.82, -62.73, 17.98)),
("5620","IGN 1988 SM height",(-63.21, 18.01, -62.96, 18.17)),
("5621","EVRF2007 height",(-9.56, 35.95, 31.59, 71.21)),
("5623","NAD27 / Michigan East",(-84.87, 41.69, -82.13, 46.04)),
("5624","NAD27 / Michigan Old Central",(-87.61, 41.75, -84.6, 46.11)),
("5625","NAD27 / Michigan West",(-90.42, 45.09, -83.44, 48.32)),
("5627","ED50 / TM 6 NE",(3.04, 41.15, 10.38, 43.74)),
("5628","SWEREF99 + RH2000 height",(10.93, 55.28, 24.17, 69.07)),
("5629","Moznet / UTM zone 38S",(35.99, -18.98, 40.9, -10.42)),
("5631","Pulkovo 1942(58) / Gauss-Kruger zone 2 (E-N)",(9.92, 50.2, 12.0, 54.23)),
("5632","PTRA08 / LCC Europe",(-35.58, 29.24, -12.48, 43.07)),
("5633","PTRA08 / LAEA Europe",(-35.58, 29.24, -12.48, 43.07)),
("5634","REGCAN95 / LCC Europe",(-21.93, 24.6, -11.75, 32.76)),
("5635","REGCAN95 / LAEA Europe",(-21.93, 24.6, -11.75, 32.76)),
("5636","TUREF / LAEA Europe",(25.62, 34.42, 44.83, 43.45)),
("5637","TUREF / LCC Europe",(25.62, 34.42, 44.83, 43.45)),
("5638","ISN2004 / LAEA Europe",(-30.87, 59.96, -5.55, 69.59)),
("5639","ISN2004 / LCC Europe",(-30.87, 59.96, -5.55, 69.59)),
("5641","SIRGAS 2000 / Brazil Mercator",(-51.64, -5.74, -32.43, 7.04)),
("5643","ED50 / SPBA LCC",(-1.67, 50.5, 22.0, 56.0)),
("5644","RGR92 / UTM zone 39S",(51.83, -24.37, 54.0, -18.52)),
("5646","NAD83 / Vermont (ftUS)",(-73.44, 42.72, -71.5, 45.03)),
("5649","ETRS89 / UTM zone 31N (zE-N)",(3.34, 50.97, 6.0, 55.92)),
("5650","ETRS89 / UTM zone 33N (zE-N)",(11.57, 47.46, 15.04, 55.03)),
("5651","ETRS89 / UTM zone 31N (N-zE)",(3.34, 50.97, 6.0, 55.92)),
("5652","ETRS89 / UTM zone 32N (N-zE)",(6.0, 47.27, 12.0, 55.47)),
("5653","ETRS89 / UTM zone 33N (N-zE)",(11.57, 47.46, 15.04, 55.03)),
("5654","NAD83(HARN) / Vermont (ftUS)",(-73.44, 42.72, -71.5, 45.03)),
("5655","NAD83(NSRS2007) / Vermont (ftUS)",(-73.44, 42.72, -71.5, 45.03)),
("5659","Monte Mario / TM Emilia-Romagna",(9.19, 43.73, 12.76, 45.14)),
("5663","Pulkovo 1942(58) / Gauss-Kruger zone 3 (E-N)",(12.0, 45.78, 18.0, 54.89)),
("5664","Pulkovo 1942(83) / Gauss-Kruger zone 2 (E-N)",(9.92, 50.2, 12.0, 54.23)),
("5665","Pulkovo 1942(83) / Gauss-Kruger zone 3 (E-N)",(12.0, 45.78, 18.01, 54.74)),
("5666","PD/83 / 3-degree Gauss-Kruger zone 3 (E-N)",(9.92, 50.35, 10.5, 51.56)),
("5667","PD/83 / 3-degree Gauss-Kruger zone 4 (E-N)",(10.5, 50.2, 12.56, 51.64)),
("5668","RD/83 / 3-degree Gauss-Kruger zone 4 (E-N)",(11.89, 50.2, 13.51, 51.66)),
("5669","RD/83 / 3-degree Gauss-Kruger zone 5 (E-N)",(13.5, 50.62, 15.04, 51.58)),
("5670","Pulkovo 1942(58) / 3-degree Gauss-Kruger zone 3 (E-N)",(9.92, 50.35, 10.5, 51.56)),
("5671","Pulkovo 1942(58) / 3-degree Gauss-Kruger zone 4 (E-N)",(10.5, 48.97, 13.5, 54.74)),
("5672","Pulkovo 1942(58) / 3-degree Gauss-Kruger zone 5 (E-N)",(13.5, 46.54, 16.5, 54.72)),
("5673","Pulkovo 1942(83) / 3-degree Gauss-Kruger zone 3 (E-N)",(9.92, 50.35, 10.5, 51.56)),
("5674","Pulkovo 1942(83) / 3-degree Gauss-Kruger zone 4 (E-N)",(10.5, 48.97, 13.5, 54.74)),
("5675","Pulkovo 1942(83) / 3-degree Gauss-Kruger zone 5 (E-N)",(13.5, 46.54, 16.5, 54.72)),
("5676","DHDN / 3-degree Gauss-Kruger zone 2 (E-N)",(5.86, 49.11, 7.5, 53.81)),
("5677","DHDN / 3-degree Gauss-Kruger zone 3 (E-N)",(7.5, 47.27, 10.51, 55.09)),
("5678","DHDN / 3-degree Gauss-Kruger zone 4 (E-N)",(10.5, 47.39, 13.51, 54.59)),
("5679","DHDN / 3-degree Gauss-Kruger zone 5 (E-N)",(13.5, 48.51, 13.84, 48.98)),
("5680","DHDN / 3-degree Gauss-Kruger zone 1 (E-N)",(3.34, 55.24, 4.5, 55.92)),
("5681","DB_REF",(5.86, 47.27, 15.04, 55.09)),
("5682","DB_REF / 3-degree Gauss-Kruger zone 2 (E-N)",(5.86, 49.11, 7.5, 53.81)),
("5683","DB_REF / 3-degree Gauss-Kruger zone 3 (E-N)",(7.5, 47.27, 10.51, 55.09)),
("5684","DB_REF / 3-degree Gauss-Kruger zone 4 (E-N)",(10.5, 47.39, 13.51, 54.74)),
("5685","DB_REF / 3-degree Gauss-Kruger zone 5 (E-N)",(13.5, 48.51, 15.04, 54.72)),
("5698","RGF93 / Lambert-93 + NGF-IGN69 height",(-4.87, 42.33, 8.23, 51.14)),
("5699","RGF93 / Lambert-93 + NGF-IGN78 height",(8.5, 41.31, 9.63, 43.07)),
("5700","NZGD2000 / UTM zone 1S",(-180.0, -52.97, -174.0, -25.88)),
("5701","ODN height",(-7.06, 49.93, 1.8, 58.71)),
("5702","NGVD29 height (ftUS)",(-124.79, 24.41, -66.91, 49.38)),
("5703","NAVD88 height",(172.42, 14.51, -66.91, 71.4)),
("5704","Yellow Sea",(73.62, 16.7, 134.77, 53.56)),
("5705","Baltic 1977 height",(19.57, 35.14, -168.97, 81.91)),
("5706","Caspian depth",(46.95, 37.35, 53.93, 46.97)),
("5707","NTF (Paris) / Lambert zone I + NGF-IGN69 height",(-4.87, 48.14, 8.23, 51.14)),
("5708","NTF (Paris) / Lambert zone IV + NGF-IGN78 height",(8.5, 41.31, 9.63, 43.07)),
("5709","NAP height",(2.53, 50.75, 7.22, 55.77)),
("5710","Ostend height",(2.5, 49.5, 6.4, 51.51)),
("5711","AHD height",(96.76, -43.7, 153.69, -9.86)),
("5712","AHD (Tasmania) height",(144.55, -43.7, 148.44, -40.24)),
("5713","CGVD28 height",(-141.01, 41.67, -59.73, 69.8)),
("5714","MSL height",(-180.0, -90.0, 180.0, 90.0)),
("5715","MSL depth",(-180.0, -90.0, 180.0, 90.0)),
("5716","Piraeus height",(19.57, 34.88, 28.3, 41.75)),
("5717","N60 height",(19.24, 59.75, 31.59, 70.09)),
("5718","RH70 height",(10.93, 55.28, 24.17, 69.07)),
("5719","NGF Lallemand height",(-4.87, 42.33, 8.23, 51.14)),
("5720","NGF-IGN69 height",(-4.87, 42.33, 8.23, 51.14)),
("5721","NGF-IGN78 height",(8.5, 41.31, 9.63, 43.07)),
("5722","Maputo height",(30.21, -26.87, 40.9, -10.42)),
("5723","JSLD69 height",(129.3, 30.94, 142.14, 41.58)),
("5724","PHD93 height",(51.99, 16.59, 59.91, 26.58)),
("5725","Fahud HD height",(51.99, 16.59, 59.91, 26.42)),
("5726","Ha Tien 1960 height",(102.14, 8.33, 109.53, 23.4)),
("5727","Hon Dau 1992 height",(102.14, 8.33, 109.53, 23.4)),
("5728","LN02 height",(5.96, 45.82, 10.49, 47.81)),
("5729","LHN95 height",(5.96, 45.82, 10.49, 47.81)),
("5730","EVRF2000 height",(-9.56, 35.95, 31.59, 71.21)),
("5731","Malin Head height",(-10.56, 51.39, -5.34, 55.43)),
("5732","Belfast height",(-8.18, 53.96, -5.34, 55.36)),
("5733","DNN height",(8.0, 54.51, 15.24, 57.8)),
("5734","AIOC95 depth",(48.66, 37.89, 51.73, 42.59)),
("5735","Black Sea height",(39.99, 41.04, 46.72, 43.59)),
("5736","Yellow Sea 1956 height",(73.62, 18.11, 134.77, 53.56)),
("5737","Yellow Sea 1985 height",(73.62, 18.11, 134.77, 53.56)),
("5738","HKPD height",(113.82, 22.19, 114.39, 22.56)),
("5739","HKCD depth",(113.76, 22.13, 114.51, 22.58)),
("5740","ODN Orkney height",(-3.48, 58.72, -2.34, 59.41)),
("5741","Fair Isle height",(-1.76, 59.45, -1.5, 59.6)),
("5742","Lerwick height",(-1.78, 59.83, -0.67, 60.87)),
("5743","Foula height",(-2.21, 60.06, -1.95, 60.2)),
("5744","Sule Skerry height",(-4.5, 59.05, -4.3, 59.13)),
("5745","North Rona height",(-5.92, 59.07, -5.73, 59.19)),
("5746","Stornoway height",(-7.72, 56.76, -6.1, 58.54)),
("5747","St. Kilda height",(-8.74, 57.74, -8.41, 57.93)),
("5748","Flannan Isles height",(-7.75, 58.21, -7.46, 58.35)),
("5749","St. Marys height",(-6.41, 49.86, -6.23, 49.99)),
("5750","Douglas height",(-4.87, 54.02, -4.27, 54.44)),
("5751","Fao height",(44.3, 29.06, 51.06, 33.5)),
("5752","Bandar Abbas height",(44.03, 25.02, 63.34, 39.78)),
("5753","NGNC69 height",(163.92, -22.45, 167.09, -20.03)),
("5754","Poolbeg height (ft(Br36))",(-10.56, 51.39, -5.34, 55.43)),
("5755","NGG1977 height",(-54.61, 2.11, -51.61, 5.81)),
("5756","Martinique 1987 height",(-61.29, 14.35, -60.76, 14.93)),
("5757","Guadeloupe 1988 height",(-61.85, 15.88, -61.15, 16.55)),
("5758","Reunion 1989 height",(55.16, -21.42, 55.91, -20.81)),
("5759","Auckland 1946 height",(174.0, -37.67, 176.17, -36.12)),
("5760","Bluff 1955 height",(168.01, -46.71, 168.86, -46.26)),
("5761","Dunedin 1958 height",(167.73, -46.4, 171.28, -43.82)),
("5762","Gisborne 1926 height",(176.41, -39.04, 178.63, -37.49)),
("5763","Lyttelton 1937 height",(168.95, -44.92, 173.77, -41.6)),
("5764","Moturiki 1953 height",(174.57, -40.59, 177.26, -37.52)),
("5765","Napier 1962 height",(175.8, -40.57, 178.07, -38.87)),
("5766","Nelson 1955 height",(171.82, -42.44, 174.46, -40.44)),
("5767","One Tree Point 1964 height",(172.61, -36.41, 174.83, -34.36)),
("5768","Tararu 1952 height",(175.44, -37.21, 175.99, -36.78)),
("5769","Taranaki 1970 height",(173.68, -39.92, 174.95, -38.41)),
("5770","Wellington 1953 height",(174.52, -41.67, 176.56, -40.12)),
("5771","Chatham Island 1959 height",(-176.92, -44.18, -176.2, -43.67)),
("5772","Stewart Island 1977 height",(167.29, -47.33, 168.34, -46.63)),
("5773","EGM96 height",(-180.0, -90.0, 180.0, 90.0)),
("5774","NG-L height",(5.73, 49.44, 6.53, 50.19)),
("5775","Antalya height",(25.62, 35.81, 44.83, 42.15)),
("5776","NN54 height",(4.68, 57.93, 31.22, 71.21)),
("5777","Durres height",(19.22, 39.64, 21.06, 42.67)),
("5778","GHA height",(9.53, 46.4, 17.17, 49.02)),
("5779","SVS2000 height",(13.38, 45.42, 16.61, 46.88)),
("5780","Cascais height",(-9.56, 36.95, -6.19, 42.16)),
("5781","Constanta height",(20.26, 43.62, 29.74, 48.27)),
("5782","Alicante height",(-9.37, 35.95, 3.39, 43.82)),
("5783","DHHN92 height",(5.86, 47.27, 15.04, 55.09)),
("5784","DHHN85 height",(5.87, 47.27, 13.84, 55.09)),
("5785","SNN76 height",(9.92, 50.2, 15.04, 54.74)),
("5786","Baltic 1982 height",(22.36, 41.24, 28.68, 44.23)),
("5787","EOMA 1980 height",(16.11, 45.74, 22.9, 48.58)),
("5788","Kuwait PWD height",(46.54, 28.53, 48.48, 30.09)),
("5789","KOC WD depth",(46.54, 28.53, 48.48, 30.09)),
("5790","KOC CD height",(46.54, 28.53, 48.48, 30.09)),
("5791","NGC 1948 height",(8.5, 41.31, 9.63, 43.07)),
("5792","Danger 1950 height",(-56.48, 46.69, -56.07, 47.19)),
("5793","Mayotte 1950 height",(44.98, -13.05, 45.35, -12.61)),
("5794","Martinique 1955 height",(-61.29, 14.35, -60.76, 14.93)),
("5795","Guadeloupe 1951 height",(-61.85, 15.88, -61.15, 16.55)),
("5796","Lagos 1955 height",(2.69, 4.22, 14.65, 13.9)),
("5797","AIOC95 height",(48.66, 37.89, 51.73, 42.59)),
("5798","EGM84 height",(-180.0, -90.0, 180.0, 90.0)),
("5799","DVR90 height",(8.0, 54.51, 15.24, 57.8)),
("5819","EPSG topocentric example A",(-180.0, -90.0, 180.0, 90.0)),
("5820","EPSG topocentric example B",(-180.0, -90.0, 180.0, 90.0)),
("5825","AGD66 / ACT Standard Grid",(148.76, -35.93, 149.4, -35.12)),
("5828","DB_REF",(5.86, 47.27, 15.04, 55.09)),
("5829","Instantaneous Water Level height",(-180.0, -90.0, 180.0, 90.0)),
("5830","DB_REF",(5.86, 47.27, 15.04, 55.09)),
("5831","Instantaneous Water Level depth",(-180.0, -90.0, 180.0, 90.0)),
("5832","DB_REF / 3-degree Gauss-Kruger zone 2 (E-N) + DHHN92 height",(5.86, 49.11, 7.5, 53.81)),
("5833","DB_REF / 3-degree Gauss-Kruger zone 3 (E-N) + DHHN92 height",(7.5, 47.27, 10.51, 55.09)),
("5834","DB_REF / 3-degree Gauss-Kruger zone 4 (E-N) + DHHN92 height",(10.5, 47.39, 13.51, 54.74)),
("5835","DB_REF / 3-degree Gauss-Kruger zone 5 (E-N) + DHHN92 height",(13.5, 48.51, 15.04, 54.72)),
("5836","Yemen NGN96 / UTM zone 37N",(41.08, 14.73, 42.0, 16.36)),
("5837","Yemen NGN96 / UTM zone 40N",(54.0, 8.95, 57.96, 14.95)),
("5839","Peru96 / UTM zone 17S",(-84.0, -17.33, -78.0, -3.11)),
("5842","WGS 84 / TM 12 SE",(10.41, -8.01, 12.84, -5.05)),
("5843","Ras Ghumays height",(51.56, 22.63, 56.03, 24.95)),
("5844","RGRDC 2005 / Congo TM zone 30",(29.0, -13.46, 29.81, -12.15)),
("5845","SWEREF99 TM + RH2000 height",(10.93, 55.28, 24.17, 69.07)),
("5846","SWEREF99 12 00 + RH2000 height",(10.93, 56.74, 13.11, 60.13)),
("5847","SWEREF99 13 30 + RH2000 height",(12.12, 55.28, 14.79, 62.28)),
("5848","SWEREF99 15 00 + RH2000 height",(13.54, 55.95, 16.15, 61.62)),
("5849","SWEREF99 16 30 + RH2000 height",(15.41, 56.15, 17.63, 62.26)),
("5850","SWEREF99 18 00 + RH2000 height",(17.08, 58.66, 19.61, 60.7)),
("5851","SWEREF99 14 15 + RH2000 height",(11.93, 61.55, 15.55, 64.39)),
("5852","SWEREF99 15 45 + RH2000 height",(13.66, 60.44, 17.01, 65.13)),
("5853","SWEREF99 17 15 + RH2000 height",(14.31, 62.12, 19.04, 67.19)),
("5854","SWEREF99 18 45 + RH2000 height",(17.18, 56.86, 20.22, 66.17)),
("5855","SWEREF99 20 15 + RH2000 height",(16.08, 63.45, 23.28, 69.07)),
("5856","SWEREF99 21 45 + RH2000 height",(19.63, 65.01, 22.91, 66.43)),
("5857","SWEREF99 23 15 + RH2000 height",(21.85, 65.49, 24.17, 68.14)),
("5858","SAD69(96) / UTM zone 22S",(-54.01, -35.71, -47.99, 7.04)),
("5861","LAT depth",(-180.0, -90.0, 180.0, 90.0)),
("5862","LLWLT depth",(-180.0, -90.0, 180.0, 90.0)),
("5863","ISLW depth",(-180.0, -90.0, 180.0, 90.0)),
("5864","MLLWS depth",(-180.0, -90.0, 180.0, 90.0)),
("5865","MLWS depth",(-180.0, -90.0, 180.0, 90.0)),
("5866","MLLW depth",(-180.0, -90.0, 180.0, 90.0)),
("5867","MLW depth",(-180.0, -90.0, 180.0, 90.0)),
("5868","MHW height",(-180.0, -90.0, 180.0, 90.0)),
("5869","MHHW height",(-180.0, -90.0, 180.0, 90.0)),
("5870","MHWS height",(-180.0, -90.0, 180.0, 90.0)),
("5871","HHWLT height",(-180.0, -90.0, 180.0, 90.0)),
("5872","HAT height",(-180.0, -90.0, 180.0, 90.0)),
("5873","Low Water depth",(-180.0, -90.0, 180.0, 90.0)),
("5874","High Water height",(-180.0, -90.0, 180.0, 90.0)),
("5875","SAD69(96) / UTM zone 18S",(-74.01, -10.01, -71.99, -4.59)),
("5876","SAD69(96) / UTM zone 19S",(-72.0, -11.14, -65.99, 2.15)),
("5877","SAD69(96) / UTM zone 20S",(-66.0, -16.28, -59.99, 5.28)),
("5879","Cadastre 1997 / UTM zone 38S",(44.98, -13.05, 45.35, -12.61)),
("5880","SIRGAS 2000 / Brazil Polyconic",(-74.01, -35.71, -25.28, 7.04)),
("5884","TGD2005",(-179.08, -25.68, -171.28, -14.14)),
("5885","TGD2005",(-179.08, -25.68, -171.28, -14.14)),
("5886","TGD2005",(-179.08, -25.68, -171.28, -14.14)),
("5887","TGD2005 / Tonga Map Grid",(-179.08, -25.68, -171.28, -14.14)),
("5890","JAXA Snow Depth Polar Stereographic North",(-180.0, 60.0, 180.0, 90.0)),
("5921","WGS 84 / EPSG Arctic Regional zone A1",(-156.0, 75.0, -66.0, 87.01)),
("5922","WGS 84 / EPSG Arctic Regional zone A2",(-84.0, 75.0, 6.01, 87.01)),
("5923","WGS 84 / EPSG Arctic Regional zone A3",(-12.0, 75.0, 78.01, 87.01)),
("5924","WGS 84 / EPSG Arctic Regional zone A4",(60.0, 75.0, 150.01, 87.01)),
("5925","WGS 84 / EPSG Arctic Regional zone A5",(132.0, 75.0, -138.0, 87.01)),
("5926","WGS 84 / EPSG Arctic Regional zone B1",(-156.0, 67.0, -66.0, 79.01)),
("5927","WGS 84 / EPSG Arctic Regional zone B2",(-84.0, 67.0, 6.01, 79.01)),
("5928","WGS 84 / EPSG Arctic Regional zone B3",(-12.0, 67.0, 78.01, 79.01)),
("5929","WGS 84 / EPSG Arctic Regional zone B4",(60.0, 67.0, 150.01, 79.01)),
("5930","WGS 84 / EPSG Arctic Regional zone B5",(132.0, 67.0, -138.0, 79.01)),
("5931","WGS 84 / EPSG Arctic Regional zone C1",(-156.0, 59.0, -66.0, 71.0)),
("5932","WGS 84 / EPSG Arctic Regional zone C2",(-84.0, 59.0, 6.0, 71.0)),
("5933","WGS 84 / EPSG Arctic Regional zone C3",(-12.0, 59.0, 78.01, 71.0)),
("5934","WGS 84 / EPSG Arctic Regional zone C4",(60.0, 59.0, 150.01, 71.0)),
("5935","WGS 84 / EPSG Arctic Regional zone C5",(132.0, 59.0, -138.0, 71.0)),
("5936","WGS 84 / EPSG Alaska Polar Stereographic",(-180.0, 60.0, 180.0, 90.0)),
("5937","WGS 84 / EPSG Canada Polar Stereographic",(-180.0, 60.0, 180.0, 90.0)),
("5938","WGS 84 / EPSG Greenland Polar Stereographic",(-180.0, 60.0, 180.0, 90.0)),
("5939","WGS 84 / EPSG Norway Polar Stereographic",(-180.0, 60.0, 180.0, 90.0)),
("5940","WGS 84 / EPSG Russia Polar Stereographic",(-180.0, 60.0, 180.0, 90.0)),
("5941","NN2000 height",(4.68, 57.93, 31.22, 71.21)),
("5942","ETRS89 + NN2000 height",(4.68, 57.93, 31.22, 71.21)),
("5945","ETRS89 / NTM zone 5 + NN2000 height",(4.68, 58.32, 6.0, 62.49)),
("5946","ETRS89 / NTM zone 6 + NN2000 height",(6.0, 57.93, 7.0, 63.02)),
("5947","ETRS89 / NTM zone 7 + NN2000 height",(7.0, 57.93, 8.0, 63.52)),
("5948","ETRS89 / NTM zone 8 + NN2000 height",(8.0, 58.03, 9.0, 63.87)),
("5949","ETRS89 / NTM zone 9 + NN2000 height",(9.0, 58.52, 10.0, 64.16)),
("5950","ETRS89 / NTM zone 10 + NN2000 height",(10.0, 58.9, 11.0, 65.04)),
("5951","ETRS89 / NTM zone 11 + NN2000 height",(11.0, 58.88, 12.0, 65.76)),
("5952","ETRS89 / NTM zone 12 + NN2000 height",(12.0, 59.88, 13.0, 68.15)),
("5953","ETRS89 / NTM zone 13 + NN2000 height",(13.0, 64.01, 14.0, 68.37)),
("5954","ETRS89 / NTM zone 14 + NN2000 height",(14.0, 64.03, 15.0, 69.05)),
("5955","ETRS89 / NTM zone 15 + NN2000 height",(15.0, 66.14, 16.0, 69.35)),
("5956","ETRS89 / NTM zone 16 + NN2000 height",(16.0, 66.88, 17.0, 69.45)),
("5957","ETRS89 / NTM zone 17 + NN2000 height",(17.0, 67.94, 18.0, 69.68)),
("5958","ETRS89 / NTM zone 18 + NN2000 height",(18.0, 68.04, 19.0, 70.27)),
("5959","ETRS89 / NTM zone 19 + NN2000 height",(19.0, 68.33, 20.0, 70.34)),
("5960","ETRS89 / NTM zone 20 + NN2000 height",(20.0, 68.37, 21.0, 70.29)),
("5961","ETRS89 / NTM zone 21 + NN2000 height",(21.0, 69.03, 22.0, 70.71)),
("5962","ETRS89 / NTM zone 22 + NN2000 height",(22.0, 68.69, 23.0, 70.81)),
("5963","ETRS89 / NTM zone 23 + NN2000 height",(23.0, 68.62, 24.0, 71.08)),
("5964","ETRS89 / NTM zone 24 + NN2000 height",(24.0, 68.58, 25.0, 71.16)),
("5965","ETRS89 / NTM zone 25 + NN2000 height",(25.0, 68.59, 26.0, 71.21)),
("5966","ETRS89 / NTM zone 26 + NN2000 height",(26.0, 69.71, 27.0, 71.17)),
("5967","ETRS89 / NTM zone 27 + NN2000 height",(27.0, 69.9, 28.0, 71.17)),
("5968","ETRS89 / NTM zone 28 + NN2000 height",(28.0, 69.03, 29.0, 71.13)),
("5969","ETRS89 / NTM zone 29 + NN2000 height",(29.0, 69.02, 30.0, 70.93)),
("5970","ETRS89 / NTM zone 30 + NN2000 height",(30.0, 69.46, 31.22, 70.77)),
("5971","ETRS89 / UTM zone 31N + NN2000 height",(4.68, 58.32, 6.0, 62.49)),
("5972","ETRS89 / UTM zone 32N + NN2000 height",(6.0, 57.93, 12.0, 65.76)),
("5973","ETRS89 / UTM zone 33N + NN2000 height",(12.0, 59.88, 18.01, 69.68)),
("5974","ETRS89 / UTM zone 34N + NN2000 height",(18.0, 68.04, 24.01, 71.08)),
("5975","ETRS89 / UTM zone 35N + NN2000 height",(24.0, 68.58, 30.0, 71.21)),
("5976","ETRS89 / UTM zone 36N + NN2000 height",(30.0, 69.46, 31.22, 70.77)),
("6050","GR96 / EPSG Arctic zone 1-25",(-60.0, 82.83, 0.0, 87.84)),
("6051","GR96 / EPSG Arctic zone 2-18",(-72.0, 79.5, -32.0, 84.51)),
("6052","GR96 / EPSG Arctic zone 2-20",(-32.0, 79.5, 8.01, 84.51)),
("6053","GR96 / EPSG Arctic zone 3-29",(-75.0, 76.16, -54.0, 81.17)),
("6054","GR96 / EPSG Arctic zone 3-31",(-54.0, 76.16, -24.0, 81.17)),
("6055","GR96 / EPSG Arctic zone 3-33",(-24.0, 76.16, 1.9, 81.17)),
("6056","GR96 / EPSG Arctic zone 4-20",(-76.0, 72.83, -51.0, 77.84)),
("6057","GR96 / EPSG Arctic zone 4-22",(-51.0, 72.83, -26.0, 77.84)),
("6058","GR96 / EPSG Arctic zone 4-24",(-26.0, 72.83, -2.0, 77.84)),
("6059","GR96 / EPSG Arctic zone 5-41",(-71.89, 69.48, -51.99, 74.51)),
("6060","GR96 / EPSG Arctic zone 5-43",(-52.0, 69.5, -32.0, 74.51)),
("6061","GR96 / EPSG Arctic zone 5-45",(-32.0, 69.5, -12.0, 74.51)),
("6062","GR96 / EPSG Arctic zone 6-26",(-65.0, 66.16, -47.0, 71.17)),
("6063","GR96 / EPSG Arctic zone 6-28",(-47.0, 66.16, -29.0, 71.17)),
("6064","GR96 / EPSG Arctic zone 6-30",(-29.0, 66.16, -11.0, 71.17)),
("6065","GR96 / EPSG Arctic zone 7-11",(-59.0, 62.83, -42.0, 67.84)),
("6066","GR96 / EPSG Arctic zone 7-13",(-42.0, 62.83, -25.0, 67.84)),
("6067","GR96 / EPSG Arctic zone 8-20",(-59.0, 59.5, -44.0, 64.51)),
("6068","GR96 / EPSG Arctic zone 8-22",(-44.0, 59.5, -29.0, 64.51)),
("6069","ETRS89 / EPSG Arctic zone 2-22",(-4.0, 79.5, 36.01, 84.51)),
("6070","ETRS89 / EPSG Arctic zone 3-11",(-3.7, 76.16, 38.45, 81.17)),
("6071","ETRS89 / EPSG Arctic zone 4-26",(-2.0, 72.83, 22.01, 77.84)),
("6072","ETRS89 / EPSG Arctic zone 4-28",(22.0, 72.83, 46.01, 77.84)),
("6073","ETRS89 / EPSG Arctic zone 5-11",(4.0, 69.5, 24.01, 74.51)),
("6074","ETRS89 / EPSG Arctic zone 5-13",(24.0, 69.5, 44.01, 74.51)),
("6075","WGS 84 / EPSG Arctic zone 2-24",(33.0, 79.5, 73.01, 84.51)),
("6076","WGS 84 / EPSG Arctic zone 2-26",(73.0, 79.5, 113.01, 84.51)),
("6077","WGS 84 / EPSG Arctic zone 3-13",(34.71, 76.16, 67.01, 81.17)),
("6078","WGS 84 / EPSG Arctic zone 3-15",(67.0, 76.16, 98.01, 81.17)),
("6079","WGS 84 / EPSG Arctic zone 3-17",(98.0, 76.16, 129.01, 81.17)),
("6080","WGS 84 / EPSG Arctic zone 3-19",(129.0, 76.16, 160.01, 81.17)),
("6081","WGS 84 / EPSG Arctic zone 4-30",(46.0, 72.83, 70.01, 77.84)),
("6082","WGS 84 / EPSG Arctic zone 4-32",(70.0, 72.83, 94.01, 77.84)),
("6083","WGS 84 / EPSG Arctic zone 4-34",(94.0, 72.83, 118.01, 77.84)),
("6084","WGS 84 / EPSG Arctic zone 4-36",(118.0, 72.83, 142.01, 77.84)),
("6085","WGS 84 / EPSG Arctic zone 4-38",(142.0, 72.83, 166.01, 77.84)),
("6086","WGS 84 / EPSG Arctic zone 4-40",(166.0, 72.83, -168.99, 77.84)),
("6087","WGS 84 / EPSG Arctic zone 5-15",(44.0, 69.5, 64.01, 74.51)),
("6088","WGS 84 / EPSG Arctic zone 5-17",(64.0, 69.5, 85.01, 74.51)),
("6089","WGS 84 / EPSG Arctic zone 5-19",(85.0, 69.5, 106.01, 74.51)),
("6090","WGS 84 / EPSG Arctic zone 5-21",(106.0, 69.5, 127.01, 74.51)),
("6091","WGS 84 / EPSG Arctic zone 5-23",(127.0, 69.5, 148.0, 74.51)),
("6092","WGS 84 / EPSG Arctic zone 5-25",(148.0, 69.5, 169.01, 74.51)),
("6093","WGS 84 / EPSG Arctic zone 5-27",(169.0, 69.5, -169.0, 74.51)),
("6094","NAD83(NSRS2007) / EPSG Arctic zone 5-29",(-173.0, 69.5, -153.0, 74.51)),
("6095","NAD83(NSRS2007) / EPSG Arctic zone 5-31",(-157.0, 69.5, -137.0, 74.51)),
("6096","NAD83(NSRS2007) / EPSG Arctic zone 6-14",(-174.0, 66.16, -156.0, 71.17)),
("6097","NAD83(NSRS2007) / EPSG Arctic zone 6-16",(-156.0, 66.16, -138.0, 71.17)),
("6098","NAD83(CSRS) / EPSG Arctic zone 1-23",(-120.0, 82.83, -60.0, 87.84)),
("6099","NAD83(CSRS) / EPSG Arctic zone 2-14",(-135.0, 79.5, -95.0, 84.51)),
("6100","NAD83(CSRS) / EPSG Arctic zone 2-16",(-95.0, 79.5, -55.0, 84.51)),
("6101","NAD83(CSRS) / EPSG Arctic zone 3-25",(-144.0, 76.16, -114.0, 81.17)),
("6102","NAD83(CSRS) / EPSG Arctic zone 3-27",(-114.0, 76.16, -84.0, 81.17)),
("6103","NAD83(CSRS) / EPSG Arctic zone 3-29",(-84.0, 76.16, -64.78, 81.17)),
("6104","NAD83(CSRS) / EPSG Arctic zone 4-14",(-141.0, 72.83, -116.0, 77.84)),
("6105","NAD83(CSRS) / EPSG Arctic zone 4-16",(-116.0, 72.83, -91.0, 77.84)),
("6106","NAD83(CSRS) / EPSG Arctic zone 4-18",(-91.0, 72.83, -67.0, 77.84)),
("6107","NAD83(CSRS) / EPSG Arctic zone 5-33",(-141.0, 69.5, -121.0, 74.51)),
("6108","NAD83(CSRS) / EPSG Arctic zone 5-35",(-121.0, 69.5, -101.0, 74.51)),
("6109","NAD83(CSRS) / EPSG Arctic zone 5-37",(-101.0, 69.5, -81.0, 74.51)),
("6110","NAD83(CSRS) / EPSG Arctic zone 5-39",(-81.0, 69.5, -61.0, 74.51)),
("6111","NAD83(CSRS) / EPSG Arctic zone 6-18",(-141.0, 66.16, -122.0, 71.17)),
("6112","NAD83(CSRS) / EPSG Arctic zone 6-20",(-122.0, 66.16, -103.0, 71.17)),
("6113","NAD83(CSRS) / EPSG Arctic zone 6-22",(-103.0, 66.16, -84.0, 71.17)),
("6114","NAD83(CSRS) / EPSG Arctic zone 6-24",(-84.0, 66.16, -65.0, 71.17)),
("6115","WGS 84 / EPSG Arctic zone 1-27",(0.0, 82.83, 60.01, 87.84)),
("6116","WGS 84 / EPSG Arctic zone 1-29",(60.0, 82.83, 120.01, 87.84)),
("6117","WGS 84 / EPSG Arctic zone 1-31",(120.0, 82.83, 180.0, 87.83)),
("6118","WGS 84 / EPSG Arctic zone 1-21",(-180.0, 82.83, -120.0, 87.84)),
("6119","WGS 84 / EPSG Arctic zone 2-28",(113.0, 79.5, 153.01, 84.51)),
("6120","WGS 84 / EPSG Arctic zone 2-10",(146.0, 79.5, -173.99, 84.51)),
("6121","WGS 84 / EPSG Arctic zone 2-12",(-174.0, 79.5, -134.99, 84.51)),
("6122","WGS 84 / EPSG Arctic zone 3-21",(160.0, 76.16, -168.99, 81.17)),
("6123","WGS 84 / EPSG Arctic zone 3-23",(-169.0, 76.16, -138.0, 81.17)),
("6124","WGS 84 / EPSG Arctic zone 4-12",(-169.0, 72.83, -141.0, 77.84)),
("6125","ETRS89 / EPSG Arctic zone 5-47",(-15.0, 69.5, 5.01, 74.51)),
("6128","Grand Cayman National Grid 1959",(-81.46, 19.21, -81.04, 19.41)),
("6129","Sister Islands National Grid 1961",(-80.14, 19.63, -79.69, 19.78)),
("6130","GCVD54 height (ft)",(-81.46, 19.21, -81.04, 19.41)),
("6131","LCVD61 height (ft)",(-80.14, 19.63, -79.93, 19.74)),
("6132","CBVD61 height (ft)",(-79.92, 19.66, -79.69, 19.78)),
("6133","CIGD11",(-83.6, 17.58, -78.72, 20.68)),
("6134","CIGD11",(-83.6, 17.58, -78.72, 20.68)),
("6135","CIGD11",(-83.6, 17.58, -78.72, 20.68)),
("6141","Cayman Islands National Grid 2011",(-83.6, 17.58, -78.72, 20.68)),
("6144","ETRS89 + NN54 height",(4.68, 57.93, 31.22, 71.21)),
("6145","ETRS89 / NTM zone 5 + NN54 height",(4.68, 58.32, 6.0, 62.49)),
("6146","ETRS89 / NTM zone 6 + NN54 height",(6.0, 57.93, 7.0, 63.02)),
("6147","ETRS89 / NTM zone 7 + NN54 height",(7.0, 57.93, 8.0, 63.52)),
("6148","ETRS89 / NTM zone 8 + NN54 height",(8.0, 58.03, 9.0, 63.87)),
("6149","ETRS89 / NTM zone 9 + NN54 height",(9.0, 58.52, 10.0, 64.16)),
("6150","ETRS89 / NTM zone 10 + NN54 height",(10.0, 58.9, 11.0, 65.04)),
("6151","ETRS89 / NTM zone 11 + NN54 height",(11.0, 58.88, 12.0, 65.76)),
("6152","ETRS89 / NTM zone 12 + NN54 height",(12.0, 59.88, 13.0, 68.15)),
("6153","ETRS89 / NTM zone 13 + NN54 height",(13.0, 64.01, 14.0, 68.37)),
("6154","ETRS89 / NTM zone 14 + NN54 height",(14.0, 64.03, 15.0, 69.05)),
("6155","ETRS89 / NTM zone 15 + NN54 height",(15.0, 66.14, 16.0, 69.35)),
("6156","ETRS89 / NTM zone 16 + NN54 height",(16.0, 66.88, 17.0, 69.45)),
("6157","ETRS89 / NTM zone 17 + NN54 height",(17.0, 67.94, 18.0, 69.68)),
("6158","ETRS89 / NTM zone 18 + NN54 height",(18.0, 68.04, 19.0, 70.27)),
("6159","ETRS89 / NTM zone 19 + NN54 height",(19.0, 68.33, 20.0, 70.34)),
("6160","ETRS89 / NTM zone 20 + NN54 height",(20.0, 68.37, 21.0, 70.29)),
("6161","ETRS89 / NTM zone 21 + NN54 height",(21.0, 69.03, 22.0, 70.71)),
("6162","ETRS89 / NTM zone 22 + NN54 height",(22.0, 68.69, 23.0, 70.81)),
("6163","ETRS89 / NTM zone 23 + NN54 height",(23.0, 68.62, 24.0, 71.08)),
("6164","ETRS89 / NTM zone 24 + NN54 height",(24.0, 68.58, 25.0, 71.16)),
("6165","ETRS89 / NTM zone 25 + NN54 height",(25.0, 68.59, 26.0, 71.21)),
("6166","ETRS89 / NTM zone 26 + NN54 height",(26.0, 69.71, 27.0, 71.17)),
("6167","ETRS89 / NTM zone 27 + NN54 height",(27.0, 69.9, 28.0, 71.17)),
("6168","ETRS89 / NTM zone 28 + NN54 height",(28.0, 69.03, 29.0, 71.13)),
("6169","ETRS89 / NTM zone 29 + NN54 height",(29.0, 69.02, 30.0, 70.93)),
("6170","ETRS89 / NTM zone 30 + NN54 height",(30.0, 69.46, 31.22, 70.77)),
("6171","ETRS89 / UTM zone 31N + NN54 height",(4.68, 58.32, 6.0, 62.49)),
("6172","ETRS89 / UTM zone 32N + NN54 height",(6.0, 57.93, 12.0, 65.76)),
("6173","ETRS89 / UTM zone 33N + NN54 height",(12.0, 59.88, 18.01, 69.68)),
("6174","ETRS89 / UTM zone 34N + NN54 height",(18.0, 68.04, 24.01, 71.08)),
("6175","ETRS89 / UTM zone 35N + NN54 height",(24.0, 68.58, 30.0, 71.21)),
("6176","ETRS89 / UTM zone 36N + NN54 height",(30.0, 69.46, 31.22, 70.77)),
("6178","Cais da Pontinha - Funchal height",(-17.31, 32.35, -16.4, 32.93)),
("6179","Cais da Vila - Porto Santo height",(-16.44, 32.96, -16.23, 33.15)),
("6180","Cais das Velas height",(-28.37, 38.48, -27.71, 38.8)),
("6181","Horta height",(-28.9, 38.46, -28.54, 38.7)),
("6182","Cais da Madalena height",(-28.61, 38.32, -27.98, 38.61)),
("6183","Santa Cruz da Graciosa height",(-28.13, 38.97, -27.88, 39.14)),
("6184","Cais da Figueirinha - Angra do Heroismo height",(-27.44, 38.57, -26.97, 38.86)),
("6185","Santa Cruz das Flores height",(-31.34, 39.3, -31.02, 39.77)),
("6186","Cais da Vila do Porto height",(-25.26, 36.87, -24.72, 37.34)),
("6187","Ponta Delgada height",(-25.92, 37.65, -25.08, 37.96)),
("6190","Belge 1972 / Belgian Lambert 72 + Ostend height",(2.5, 49.5, 6.4, 51.51)),
("6200","NAD27 / Michigan North",(-90.42, 45.08, -83.44, 48.32)),
("6201","NAD27 / Michigan Central",(-87.06, 43.8, -82.27, 45.92)),
("6202","NAD27 / Michigan South",(-87.2, 41.69, -82.13, 44.22)),
("6204","Macedonia State Coordinate System",(20.45, 40.85, 23.04, 42.36)),
("6207","Nepal 1981",(80.06, 26.34, 88.21, 30.43)),
("6210","SIRGAS 2000 / UTM zone 23N",(-48.0, 0.0, -41.99, 5.13)),
("6211","SIRGAS 2000 / UTM zone 24N",(-42.0, 0.0, -38.22, 0.74)),
("6244","MAGNA-SIRGAS / Arauca urban grid",(-70.78, 7.05, -70.71, 7.1)),
("6245","MAGNA-SIRGAS / Armenia urban grid",(-75.73, 4.5, -75.65, 4.55)),
("6246","MAGNA-SIRGAS / Barranquilla urban grid",(-74.87, 10.85, -74.75, 11.06)),
("6247","MAGNA-SIRGAS / Bogota urban grid",(-74.27, 4.45, -73.98, 4.85)),
("6248","MAGNA-SIRGAS / Bucaramanga urban grid",(-73.19, 7.03, -73.06, 7.17)),
("6249","MAGNA-SIRGAS / Cali urban grid",(-76.61, 3.32, -76.42, 3.56)),
("6250","MAGNA-SIRGAS / Cartagena urban grid",(-75.57, 10.27, -75.42, 10.47)),
("6251","MAGNA-SIRGAS / Cucuta urban grid",(-72.56, 7.81, -72.46, 7.97)),
("6252","MAGNA-SIRGAS / Florencia urban grid",(-75.63, 1.57, -75.59, 1.65)),
("6253","MAGNA-SIRGAS / Ibague urban grid",(-75.27, 4.39, -75.11, 4.47)),
("6254","MAGNA-SIRGAS / Inirida urban grid",(-67.94, 3.8, -67.88, 3.9)),
("6255","MAGNA-SIRGAS / Leticia urban grid",(-69.98, -4.23, -69.92, -4.17)),
("6256","MAGNA-SIRGAS / Manizales urban grid",(-75.54, 5.02, -75.44, 5.11)),
("6257","MAGNA-SIRGAS / Medellin urban grid",(-75.66, 6.12, -75.5, 6.37)),
("6258","MAGNA-SIRGAS / Mitu urban grid",(-70.25, 1.23, -70.21, 1.29)),
("6259","MAGNA-SIRGAS / Mocoa urban grid",(-76.66, 1.12, -76.63, 1.18)),
("6260","MAGNA-SIRGAS / Monteria urban grid",(-75.94, 8.7, -75.82, 8.81)),
("6261","MAGNA-SIRGAS / Neiva urban grid",(-75.32, 2.87, -75.23, 2.99)),
("6262","MAGNA-SIRGAS / Pasto urban grid",(-77.32, 1.16, -77.23, 1.26)),
("6263","MAGNA-SIRGAS / Pereira urban grid",(-75.77, 4.78, -75.64, 4.87)),
("6264","MAGNA-SIRGAS / Popayan urban grid",(-76.65, 2.41, -76.55, 2.49)),
("6265","MAGNA-SIRGAS / Puerto Carreno urban grid",(-67.7, 5.98, -67.41, 6.3)),
("6266","MAGNA-SIRGAS / Quibdo urban grid",(-76.67, 5.66, -76.63, 5.72)),
("6267","MAGNA-SIRGAS / Riohacha urban grid",(-72.96, 11.42, -72.84, 11.58)),
("6268","MAGNA-SIRGAS / San Andres urban grid",(-81.82, 12.43, -81.6, 12.65)),
("6269","MAGNA-SIRGAS / San Jose del Guaviare urban grid",(-72.66, 2.54, -72.6, 2.61)),
("6270","MAGNA-SIRGAS / Santa Marta urban grid",(-74.24, 11.16, -74.13, 11.3)),
("6271","MAGNA-SIRGAS / Sucre urban grid",(-74.74, 8.79, -74.69, 8.83)),
("6272","MAGNA-SIRGAS / Tunja urban grid",(-73.39, 5.5, -73.3, 5.61)),
("6273","MAGNA-SIRGAS / Valledupar urban grid",(-73.3, 10.39, -73.19, 10.51)),
("6274","MAGNA-SIRGAS / Villavicencio urban grid",(-73.69, 4.07, -73.56, 4.21)),
("6275","MAGNA-SIRGAS / Yopal urban grid",(-72.43, 5.3, -72.35, 5.37)),
("6307","NAD83(CORS96) / Puerto Rico and Virgin Is.",(-67.97, 17.62, -64.51, 18.57)),
("6309","CGRS93",(32.2, 34.59, 34.65, 35.74)),
("6310","CGRS93",(32.2, 34.59, 34.65, 35.74)),
("6311","CGRS93",(32.2, 34.59, 34.65, 35.74)),
("6312","CGRS93 / Cyprus Local Transverse Mercator",(32.2, 34.59, 34.65, 35.74)),
("6316","MGI 1901 / Balkans zone 7",(19.5, 40.85, 22.51, 46.19)),
("6317","NAD83(2011)",(167.65, 14.92, -63.88, 74.71)),
("6318","NAD83(2011)",(167.65, 14.92, -63.88, 74.71)),
("6319","NAD83(2011)",(167.65, 14.92, -63.88, 74.71)),
("6320","NAD83(PA11)",(157.47, -17.56, -151.27, 31.8)),
("6321","NAD83(PA11)",(157.47, -17.56, -151.27, 31.8)),
("6322","NAD83(PA11)",(157.47, -17.56, -151.27, 31.8)),
("6323","NAD83(MA11)",(129.48, 1.64, 149.55, 23.9)),
("6324","NAD83(MA11)",(129.48, 1.64, 149.55, 23.9)),
("6325","NAD83(MA11)",(129.48, 1.64, 149.55, 23.9)),
("6328","NAD83(2011) / UTM zone 59N",(167.65, 49.01, 174.01, 56.28)),
("6329","NAD83(2011) / UTM zone 60N",(174.0, 47.92, 180.0, 56.67)),
("6330","NAD83(2011) / UTM zone 1N",(-180.0, 47.88, -173.99, 63.21)),
("6331","NAD83(2011) / UTM zone 2N",(-174.0, 48.66, -167.99, 73.05)),
("6332","NAD83(2011) / UTM zone 3N",(-168.0, 49.52, -161.99, 74.29)),
("6333","NAD83(2011) / UTM zone 4N",(-162.0, 50.98, -155.99, 74.71)),
("6334","NAD83(2011) / UTM zone 5N",(-156.0, 52.15, -149.99, 74.71)),
("6335","NAD83(2011) / UTM zone 6N",(-150.0, 54.05, -143.99, 74.13)),
("6336","NAD83(2011) / UTM zone 7N",(-144.0, 53.47, -137.99, 73.59)),
("6337","NAD83(2011) / UTM zone 8N",(-138.0, 53.6, -131.99, 73.04)),
("6338","NAD83(2011) / UTM zone 9N",(-132.0, 35.38, -126.0, 56.84)),
("6339","NAD83(2011) / UTM zone 10N",(-126.0, 30.54, -119.99, 49.09)),
("6340","NAD83(2011) / UTM zone 11N",(-120.0, 30.88, -114.0, 49.01)),
("6341","NAD83(2011) / UTM zone 12N",(-114.0, 31.33, -108.0, 49.01)),
("6342","NAD83(2011) / UTM zone 13N",(-108.0, 28.98, -102.0, 49.01)),
("6343","NAD83(2011) / UTM zone 14N",(-102.0, 25.83, -96.0, 49.01)),
("6344","NAD83(2011) / UTM zone 15N",(-96.01, 25.61, -90.0, 49.38)),
("6345","NAD83(2011) / UTM zone 16N",(-90.0, 23.97, -84.0, 48.32)),
("6346","NAD83(2011) / UTM zone 17N",(-84.0, 23.81, -78.0, 46.13)),
("6347","NAD83(2011) / UTM zone 18N",(-78.0, 28.28, -72.0, 45.03)),
("6348","NAD83(2011) / UTM zone 19N",(-72.0, 33.61, -65.99, 47.47)),
("6349","NAD83(2011) + NAVD88 height",(-168.26, 24.41, -66.91, 71.4)),
("6350","NAD83(2011) / Conus Albers",(-124.79, 24.41, -66.91, 49.38)),
("6351","NAD83(2011) / EPSG Arctic zone 5-29",(-173.0, 69.5, -153.0, 74.51)),
("6352","NAD83(2011) / EPSG Arctic zone 5-31",(-157.0, 69.5, -137.0, 74.51)),
("6353","NAD83(2011) / EPSG Arctic zone 6-14",(-174.0, 66.16, -156.0, 71.17)),
("6354","NAD83(2011) / EPSG Arctic zone 6-16",(-156.0, 66.16, -138.0, 71.17)),
("6355","NAD83(2011) / Alabama East",(-86.79, 30.99, -84.89, 35.0)),
("6356","NAD83(2011) / Alabama West",(-88.48, 30.14, -86.3, 35.02)),
("6357","NAVD88 depth",(172.42, 14.51, -66.91, 71.4)),
("6358","NAVD88 depth (ftUS)",(-168.26, 24.41, -66.91, 71.4)),
("6359","NGVD29 depth (ftUS)",(-124.79, 24.41, -66.91, 49.38)),
("6360","NAVD88 height (ftUS)",(-168.26, 24.41, -66.91, 71.4)),
("6362","Mexico ITRF92 / LCC",(-122.19, 12.1, -84.64, 32.72)),
("6363","Mexico ITRF2008",(-122.19, 12.1, -84.64, 32.72)),
("6364","Mexico ITRF2008",(-122.19, 12.1, -84.64, 32.72)),
("6365","Mexico ITRF2008",(-122.19, 12.1, -84.64, 32.72)),
("6366","Mexico ITRF2008 / UTM zone 11N",(-122.19, 15.01, -114.0, 32.72)),
("6367","Mexico ITRF2008 / UTM zone 12N",(-114.0, 15.09, -108.0, 32.27)),
("6368","Mexico ITRF2008 / UTM zone 13N",(-108.0, 14.05, -102.0, 31.79)),
("6369","Mexico ITRF2008 / UTM zone 14N",(-102.0, 12.3, -96.0, 29.81)),
("6370","Mexico ITRF2008 / UTM zone 15N",(-96.0, 12.1, -90.0, 26.0)),
("6371","Mexico ITRF2008 / UTM zone 16N",(-90.0, 17.81, -84.64, 25.77)),
("6372","Mexico ITRF2008 / LCC",(-122.19, 12.1, -84.64, 32.72)),
("6381","UCS-2000 / Ukraine TM zone 7",(22.15, 48.24, 22.5, 48.98)),
("6382","UCS-2000 / Ukraine TM zone 8",(22.5, 47.71, 25.5, 51.96)),
("6383","UCS-2000 / Ukraine TM zone 9",(25.5, 45.26, 28.5, 51.94)),
("6384","UCS-2000 / Ukraine TM zone 10",(28.5, 43.42, 31.5, 52.12)),
("6385","UCS-2000 / Ukraine TM zone 11",(31.5, 43.18, 34.5, 52.38)),
("6386","UCS-2000 / Ukraine TM zone 12",(34.5, 43.24, 37.5, 51.25)),
("6387","UCS-2000 / Ukraine TM zone 13",(37.5, 46.77, 40.18, 50.39)),
("6391","Cayman Islands National Grid 2011",(-83.6, 17.58, -78.72, 20.68)),
("6393","NAD83(2011) / Alaska Albers",(172.42, 51.3, -129.99, 71.4)),
("6394","NAD83(2011) / Alaska zone 1",(-141.0, 54.61, -129.99, 60.35)),
("6395","NAD83(2011) / Alaska zone 2",(-144.01, 59.72, -140.98, 70.16)),
("6396","NAD83(2011) / Alaska zone 3",(-148.0, 59.72, -144.0, 70.38)),
("6397","NAD83(2011) / Alaska zone 4",(-152.01, 59.11, -147.99, 70.63)),
("6398","NAD83(2011) / Alaska zone 5",(-156.0, 55.72, -151.86, 71.28)),
("6399","NAD83(2011) / Alaska zone 6",(-160.0, 54.89, -155.99, 71.4)),
("6400","NAD83(2011) / Alaska zone 7",(-164.01, 54.32, -160.0, 70.74)),
("6401","NAD83(2011) / Alaska zone 8",(-168.26, 54.34, -164.0, 69.05)),
("6402","NAD83(2011) / Alaska zone 9",(-173.16, 56.49, -168.0, 65.82)),
("6403","NAD83(2011) / Alaska zone 10",(172.42, 51.3, -164.84, 54.34)),
("6404","NAD83(2011) / Arizona Central",(-113.35, 31.33, -110.44, 37.01)),
("6405","NAD83(2011) / Arizona Central (ft)",(-113.35, 31.33, -110.44, 37.01)),
("6406","NAD83(2011) / Arizona East",(-111.71, 31.33, -109.04, 37.01)),
("6407","NAD83(2011) / Arizona East (ft)",(-111.71, 31.33, -109.04, 37.01)),
("6408","NAD83(2011) / Arizona West",(-114.81, 32.05, -112.52, 37.0)),
("6409","NAD83(2011) / Arizona West (ft)",(-114.81, 32.05, -112.52, 37.0)),
("6410","NAD83(2011) / Arkansas North",(-94.62, 34.67, -89.64, 36.5)),
("6411","NAD83(2011) / Arkansas North (ftUS)",(-94.62, 34.67, -89.64, 36.5)),
("6412","NAD83(2011) / Arkansas South",(-94.48, 33.01, -90.4, 35.1)),
("6413","NAD83(2011) / Arkansas South (ftUS)",(-94.48, 33.01, -90.4, 35.1)),
("6414","NAD83(2011) / California Albers",(-124.45, 32.53, -114.12, 42.01)),
("6415","NAD83(2011) / California zone 1",(-124.45, 39.59, -119.99, 42.01)),
("6416","NAD83(2011) / California zone 1 (ftUS)",(-124.45, 39.59, -119.99, 42.01)),
("6417","NAD83(2011) / California zone 2",(-124.06, 38.02, -119.54, 40.16)),
("6418","NAD83(2011) / California zone 2 (ftUS)",(-124.06, 38.02, -119.54, 40.16)),
("6419","NAD83(2011) / California zone 3",(-123.02, 36.73, -117.83, 38.71)),
("6420","NAD83(2011) / California zone 3 (ftUS)",(-123.02, 36.73, -117.83, 38.71)),
("6421","NAD83(2011) / California zone 4",(-122.01, 35.78, -115.62, 37.58)),
("6422","NAD83(2011) / California zone 4 (ftUS)",(-122.01, 35.78, -115.62, 37.58)),
("6423","NAD83(2011) / California zone 5",(-121.42, 32.76, -114.12, 35.81)),
("6424","NAD83(2011) / California zone 5 (ftUS)",(-121.42, 32.76, -114.12, 35.81)),
("6425","NAD83(2011) / California zone 6",(-118.15, 32.53, -114.42, 34.08)),
("6426","NAD83(2011) / California zone 6 (ftUS)",(-118.15, 32.53, -114.42, 34.08)),
("6427","NAD83(2011) / Colorado Central",(-109.06, 38.14, -102.04, 40.09)),
("6428","NAD83(2011) / Colorado Central (ftUS)",(-109.06, 38.14, -102.04, 40.09)),
("6429","NAD83(2011) / Colorado North",(-109.06, 39.56, -102.04, 41.01)),
("6430","NAD83(2011) / Colorado North (ftUS)",(-109.06, 39.56, -102.04, 41.01)),
("6431","NAD83(2011) / Colorado South",(-109.06, 36.98, -102.04, 38.68)),
("6432","NAD83(2011) / Colorado South (ftUS)",(-109.06, 36.98, -102.04, 38.68)),
("6433","NAD83(2011) / Connecticut",(-73.73, 40.98, -71.78, 42.05)),
("6434","NAD83(2011) / Connecticut (ftUS)",(-73.73, 40.98, -71.78, 42.05)),
("6435","NAD83(2011) / Delaware",(-75.8, 38.44, -74.97, 39.85)),
("6436","NAD83(2011) / Delaware (ftUS)",(-75.8, 38.44, -74.97, 39.85)),
("6437","NAD83(2011) / Florida East",(-82.33, 24.41, -79.97, 30.83)),
("6438","NAD83(2011) / Florida East (ftUS)",(-82.33, 24.41, -79.97, 30.83)),
("6439","NAD83(2011) / Florida GDL Albers",(-87.63, 24.41, -79.97, 31.01)),
("6440","NAD83(2011) / Florida North",(-87.63, 29.21, -82.04, 31.01)),
("6441","NAD83(2011) / Florida North (ftUS)",(-87.63, 29.21, -82.04, 31.01)),
("6442","NAD83(2011) / Florida West",(-83.34, 26.27, -81.13, 29.6)),
("6443","NAD83(2011) / Florida West (ftUS)",(-83.34, 26.27, -81.13, 29.6)),
("6444","NAD83(2011) / Georgia East",(-83.47, 30.36, -80.77, 34.68)),
("6445","NAD83(2011) / Georgia East (ftUS)",(-83.47, 30.36, -80.77, 34.68)),
("6446","NAD83(2011) / Georgia West",(-85.61, 30.62, -82.99, 35.01)),
("6447","NAD83(2011) / Georgia West (ftUS)",(-85.61, 30.62, -82.99, 35.01)),
("6448","NAD83(2011) / Idaho Central",(-115.3, 41.99, -112.68, 45.7)),
("6449","NAD83(2011) / Idaho Central (ftUS)",(-115.3, 41.99, -112.68, 45.7)),
("6450","NAD83(2011) / Idaho East",(-113.24, 41.99, -111.04, 44.75)),
("6451","NAD83(2011) / Idaho East (ftUS)",(-113.24, 41.99, -111.04, 44.75)),
("6452","NAD83(2011) / Idaho West",(-117.24, 41.99, -114.32, 49.01)),
("6453","NAD83(2011) / Idaho West (ftUS)",(-117.24, 41.99, -114.32, 49.01)),
("6454","NAD83(2011) / Illinois East",(-89.28, 37.06, -87.02, 42.5)),
("6455","NAD83(2011) / Illinois East (ftUS)",(-89.28, 37.06, -87.02, 42.5)),
("6456","NAD83(2011) / Illinois West",(-91.52, 36.98, -88.93, 42.51)),
("6457","NAD83(2011) / Illinois West (ftUS)",(-91.52, 36.98, -88.93, 42.51)),
("6458","NAD83(2011) / Indiana East",(-86.59, 37.95, -84.78, 41.77)),
("6459","NAD83(2011) / Indiana East (ftUS)",(-86.59, 37.95, -84.78, 41.77)),
("6460","NAD83(2011) / Indiana West",(-88.06, 37.77, -86.24, 41.77)),
("6461","NAD83(2011) / Indiana West (ftUS)",(-88.06, 37.77, -86.24, 41.77)),
("6462","NAD83(2011) / Iowa North",(-96.65, 41.85, -90.15, 43.51)),
("6463","NAD83(2011) / Iowa North (ftUS)",(-96.65, 41.85, -90.15, 43.51)),
("6464","NAD83(2011) / Iowa South",(-96.14, 40.37, -90.14, 42.04)),
("6465","NAD83(2011) / Iowa South (ftUS)",(-96.14, 40.37, -90.14, 42.04)),
("6466","NAD83(2011) / Kansas North",(-102.06, 38.52, -94.58, 40.01)),
("6467","NAD83(2011) / Kansas North (ftUS)",(-102.06, 38.52, -94.58, 40.01)),
("6468","NAD83(2011) / Kansas South",(-102.05, 36.99, -94.6, 38.88)),
("6469","NAD83(2011) / Kansas South (ftUS)",(-102.05, 36.99, -94.6, 38.88)),
("6470","NAD83(2011) / Kentucky North",(-85.96, 37.71, -82.47, 39.15)),
("6471","NAD83(2011) / Kentucky North (ftUS)",(-85.96, 37.71, -82.47, 39.15)),
("6472","NAD83(2011) / Kentucky Single Zone",(-89.57, 36.49, -81.95, 39.15)),
("6473","NAD83(2011) / Kentucky Single Zone (ftUS)",(-89.57, 36.49, -81.95, 39.15)),
("6474","NAD83(2011) / Kentucky South",(-89.57, 36.49, -81.95, 38.17)),
("6475","NAD83(2011) / Kentucky South (ftUS)",(-89.57, 36.49, -81.95, 38.17)),
("6476","NAD83(2011) / Louisiana North",(-94.05, 30.85, -90.86, 33.03)),
("6477","NAD83(2011) / Louisiana North (ftUS)",(-94.05, 30.85, -90.86, 33.03)),
("6478","NAD83(2011) / Louisiana South",(-93.94, 28.85, -88.75, 31.07)),
("6479","NAD83(2011) / Louisiana South (ftUS)",(-93.94, 28.85, -88.75, 31.07)),
("6480","NAD83(2011) / Maine CS2000 Central",(-70.03, 43.75, -68.33, 47.47)),
("6481","NAD83(2011) / Maine CS2000 East",(-68.58, 44.18, -66.91, 47.37)),
("6482","NAD83(2011) / Maine CS2000 West",(-71.09, 43.07, -69.61, 46.58)),
("6483","NAD83(2011) / Maine East",(-70.03, 43.88, -66.91, 47.47)),
("6484","NAD83(2011) / Maine East (ftUS)",(-70.03, 43.88, -66.91, 47.47)),
("6485","NAD83(2011) / Maine West",(-71.09, 43.04, -69.26, 46.58)),
("6486","NAD83(2011) / Maine West (ftUS)",(-71.09, 43.04, -69.26, 46.58)),
("6487","NAD83(2011) / Maryland",(-79.49, 37.97, -74.97, 39.73)),
("6488","NAD83(2011) / Maryland (ftUS)",(-79.49, 37.97, -74.97, 39.73)),
("6489","NAD83(2011) / Massachusetts Island",(-70.91, 41.19, -69.89, 41.51)),
("6490","NAD83(2011) / Massachusetts Island (ftUS)",(-70.91, 41.19, -69.89, 41.51)),
("6491","NAD83(2011) / Massachusetts Mainland",(-73.5, 41.46, -69.86, 42.89)),
("6492","NAD83(2011) / Massachusetts Mainland (ftUS)",(-73.5, 41.46, -69.86, 42.89)),
("6493","NAD83(2011) / Michigan Central",(-87.06, 43.8, -82.27, 45.92)),
("6494","NAD83(2011) / Michigan Central (ft)",(-87.06, 43.8, -82.27, 45.92)),
("6495","NAD83(2011) / Michigan North",(-90.42, 45.08, -83.44, 48.32)),
("6496","NAD83(2011) / Michigan North (ft)",(-90.42, 45.08, -83.44, 48.32)),
("6497","NAD83(2011) / Michigan Oblique Mercator",(-90.42, 41.69, -82.13, 48.32)),
("6498","NAD83(2011) / Michigan South",(-87.2, 41.69, -82.13, 44.22)),
("6499","NAD83(2011) / Michigan South (ft)",(-87.2, 41.69, -82.13, 44.22)),
("6500","NAD83(2011) / Minnesota Central",(-96.86, 45.28, -92.29, 47.48)),
("6501","NAD83(2011) / Minnesota Central (ftUS)",(-96.86, 45.28, -92.29, 47.48)),
("6502","NAD83(2011) / Minnesota North",(-97.22, 46.64, -89.49, 49.38)),
("6503","NAD83(2011) / Minnesota North (ftUS)",(-97.22, 46.64, -89.49, 49.38)),
("6504","NAD83(2011) / Minnesota South",(-96.85, 43.49, -91.21, 45.59)),
("6505","NAD83(2011) / Minnesota South (ftUS)",(-96.85, 43.49, -91.21, 45.59)),
("6506","NAD83(2011) / Mississippi East",(-89.97, 30.01, -88.09, 35.01)),
("6507","NAD83(2011) / Mississippi East (ftUS)",(-89.97, 30.01, -88.09, 35.01)),
("6508","NAD83(2011) / Mississippi TM",(-91.65, 30.01, -88.09, 35.01)),
("6509","NAD83(2011) / Mississippi West",(-91.65, 31.0, -89.37, 35.01)),
("6510","NAD83(2011) / Mississippi West (ftUS)",(-91.65, 31.0, -89.37, 35.01)),
("6511","NAD83(2011) / Missouri Central",(-93.79, 36.48, -91.41, 40.61)),
("6512","NAD83(2011) / Missouri East",(-91.97, 35.98, -89.1, 40.61)),
("6513","NAD83(2011) / Missouri West",(-95.77, 36.48, -93.48, 40.59)),
("6514","NAD83(2011) / Montana",(-116.07, 44.35, -104.04, 49.01)),
("6515","NAD83(2011) / Montana (ft)",(-116.07, 44.35, -104.04, 49.01)),
("6516","NAD83(2011) / Nebraska",(-104.06, 39.99, -95.3, 43.01)),
("6517","NAD83(2011) / Nebraska (ftUS)",(-104.06, 39.99, -95.3, 43.01)),
("6518","NAD83(2011) / Nevada Central",(-118.19, 36.0, -114.99, 41.0)),
("6519","NAD83(2011) / Nevada Central (ftUS)",(-118.19, 36.0, -114.99, 41.0)),
("6520","NAD83(2011) / Nevada East",(-117.01, 34.99, -114.03, 42.0)),
("6521","NAD83(2011) / Nevada East (ftUS)",(-117.01, 34.99, -114.03, 42.0)),
("6522","NAD83(2011) / Nevada West",(-120.0, 36.95, -116.99, 42.0)),
("6523","NAD83(2011) / Nevada West (ftUS)",(-120.0, 36.95, -116.99, 42.0)),
("6524","NAD83(2011) / New Hampshire",(-72.56, 42.69, -70.63, 45.31)),
("6525","NAD83(2011) / New Hampshire (ftUS)",(-72.56, 42.69, -70.63, 45.31)),
("6526","NAD83(2011) / New Jersey",(-75.6, 38.87, -73.88, 41.36)),
("6527","NAD83(2011) / New Jersey (ftUS)",(-75.6, 38.87, -73.88, 41.36)),
("6528","NAD83(2011) / New Mexico Central",(-107.73, 31.78, -104.84, 37.0)),
("6529","NAD83(2011) / New Mexico Central (ftUS)",(-107.73, 31.78, -104.84, 37.0)),
("6530","NAD83(2011) / New Mexico East",(-105.72, 32.0, -102.99, 37.0)),
("6531","NAD83(2011) / New Mexico East (ftUS)",(-105.72, 32.0, -102.99, 37.0)),
("6532","NAD83(2011) / New Mexico West",(-109.06, 31.33, -106.32, 37.0)),
("6533","NAD83(2011) / New Mexico West (ftUS)",(-109.06, 31.33, -106.32, 37.0)),
("6534","NAD83(2011) / New York Central",(-77.75, 41.99, -75.04, 44.41)),
("6535","NAD83(2011) / New York Central (ftUS)",(-77.75, 41.99, -75.04, 44.41)),
("6536","NAD83(2011) / New York East",(-75.87, 40.88, -73.23, 45.02)),
("6537","NAD83(2011) / New York East (ftUS)",(-75.87, 40.88, -73.23, 45.02)),
("6538","NAD83(2011) / New York Long Island",(-74.26, 40.47, -71.8, 41.3)),
("6539","NAD83(2011) / New York Long Island (ftUS)",(-74.26, 40.47, -71.8, 41.3)),
("6540","NAD83(2011) / New York West",(-79.77, 41.99, -77.36, 43.64)),
("6541","NAD83(2011) / New York West (ftUS)",(-79.77, 41.99, -77.36, 43.64)),
("6542","NAD83(2011) / North Carolina",(-84.33, 33.83, -75.38, 36.59)),
("6543","NAD83(2011) / North Carolina (ftUS)",(-84.33, 33.83, -75.38, 36.59)),
("6544","NAD83(2011) / North Dakota North",(-104.07, 47.15, -96.83, 49.01)),
("6545","NAD83(2011) / North Dakota North (ft)",(-104.07, 47.15, -96.83, 49.01)),
("6546","NAD83(2011) / North Dakota South",(-104.05, 45.93, -96.55, 47.83)),
("6547","NAD83(2011) / North Dakota South (ft)",(-104.05, 45.93, -96.55, 47.83)),
("6548","NAD83(2011) / Ohio North",(-84.81, 40.1, -80.51, 42.33)),
("6549","NAD83(2011) / Ohio North (ftUS)",(-84.81, 40.1, -80.51, 42.33)),
("6550","NAD83(2011) / Ohio South",(-84.83, 38.4, -80.7, 40.36)),
("6551","NAD83(2011) / Ohio South (ftUS)",(-84.83, 38.4, -80.7, 40.36)),
("6552","NAD83(2011) / Oklahoma North",(-103.0, 35.27, -94.42, 37.01)),
("6553","NAD83(2011) / Oklahoma North (ftUS)",(-103.0, 35.27, -94.42, 37.01)),
("6554","NAD83(2011) / Oklahoma South",(-100.0, 33.62, -94.42, 35.57)),
("6555","NAD83(2011) / Oklahoma South (ftUS)",(-100.0, 33.62, -94.42, 35.57)),
("6556","NAD83(2011) / Oregon LCC (m)",(-124.6, 41.98, -116.47, 46.26)),
("6557","NAD83(2011) / Oregon GIC Lambert (ft)",(-124.6, 41.98, -116.47, 46.26)),
("6558","NAD83(2011) / Oregon North",(-124.17, 43.95, -116.47, 46.26)),
("6559","NAD83(2011) / Oregon North (ft)",(-124.17, 43.95, -116.47, 46.26)),
("6560","NAD83(2011) / Oregon South",(-124.6, 41.98, -116.9, 44.56)),
("6561","NAD83(2011) / Oregon South (ft)",(-124.6, 41.98, -116.9, 44.56)),
("6562","NAD83(2011) / Pennsylvania North",(-80.53, 40.6, -74.7, 42.53)),
("6563","NAD83(2011) / Pennsylvania North (ftUS)",(-80.53, 40.6, -74.7, 42.53)),
("6564","NAD83(2011) / Pennsylvania South",(-80.53, 39.71, -74.72, 41.18)),
("6565","NAD83(2011) / Pennsylvania South (ftUS)",(-80.53, 39.71, -74.72, 41.18)),
("6566","NAD83(2011) / Puerto Rico and Virgin Is.",(-67.97, 17.62, -64.51, 18.57)),
("6567","NAD83(2011) / Rhode Island",(-71.85, 41.13, -71.08, 42.02)),
("6568","NAD83(2011) / Rhode Island (ftUS)",(-71.85, 41.13, -71.08, 42.02)),
("6569","NAD83(2011) / South Carolina",(-83.36, 32.05, -78.52, 35.21)),
("6570","NAD83(2011) / South Carolina (ft)",(-83.36, 32.05, -78.52, 35.21)),
("6571","NAD83(2011) / South Dakota North",(-104.07, 44.14, -96.45, 45.95)),
("6572","NAD83(2011) / South Dakota North (ftUS)",(-104.07, 44.14, -96.45, 45.95)),
("6573","NAD83(2011) / South Dakota South",(-104.06, 42.48, -96.43, 44.79)),
("6574","NAD83(2011) / South Dakota South (ftUS)",(-104.06, 42.48, -96.43, 44.79)),
("6575","NAD83(2011) / Tennessee",(-90.31, 34.98, -81.65, 36.68)),
("6576","NAD83(2011) / Tennessee (ftUS)",(-90.31, 34.98, -81.65, 36.68)),
("6577","NAD83(2011) / Texas Central",(-106.66, 29.78, -93.5, 32.27)),
("6578","NAD83(2011) / Texas Central (ftUS)",(-106.66, 29.78, -93.5, 32.27)),
("6579","NAD83(2011) / Texas Centric Albers Equal Area",(-106.66, 25.83, -93.5, 36.5)),
("6580","NAD83(2011) / Texas Centric Lambert Conformal",(-106.66, 25.83, -93.5, 36.5)),
("6581","NAD83(2011) / Texas North",(-103.03, 34.3, -99.99, 36.5)),
("6582","NAD83(2011) / Texas North (ftUS)",(-103.03, 34.3, -99.99, 36.5)),
("6583","NAD83(2011) / Texas North Central",(-103.07, 31.72, -94.0, 34.58)),
("6584","NAD83(2011) / Texas North Central (ftUS)",(-103.07, 31.72, -94.0, 34.58)),
("6585","NAD83(2011) / Texas South",(-100.2, 25.83, -96.85, 28.21)),
("6586","NAD83(2011) / Texas South (ftUS)",(-100.2, 25.83, -96.85, 28.21)),
("6587","NAD83(2011) / Texas South Central",(-105.0, 27.78, -93.76, 30.67)),
("6588","NAD83(2011) / Texas South Central (ftUS)",(-105.0, 27.78, -93.76, 30.67)),
("6589","NAD83(2011) / Vermont",(-73.44, 42.72, -71.5, 45.03)),
("6590","NAD83(2011) / Vermont (ftUS)",(-73.44, 42.72, -71.5, 45.03)),
("6591","NAD83(2011) / Virginia Lambert",(-83.68, 36.54, -75.31, 39.46)),
("6592","NAD83(2011) / Virginia North",(-80.06, 37.77, -76.51, 39.46)),
("6593","NAD83(2011) / Virginia North (ftUS)",(-80.06, 37.77, -76.51, 39.46)),
("6594","NAD83(2011) / Virginia South",(-83.68, 36.54, -75.31, 38.28)),
("6595","NAD83(2011) / Virginia South (ftUS)",(-83.68, 36.54, -75.31, 38.28)),
("6596","NAD83(2011) / Washington North",(-124.79, 47.08, -117.02, 49.05)),
("6597","NAD83(2011) / Washington North (ftUS)",(-124.79, 47.08, -117.02, 49.05)),
("6598","NAD83(2011) / Washington South",(-124.4, 45.54, -116.91, 47.61)),
("6599","NAD83(2011) / Washington South (ftUS)",(-124.4, 45.54, -116.91, 47.61)),
("6600","NAD83(2011) / West Virginia North",(-81.76, 38.76, -77.72, 40.64)),
("6601","NAD83(2011) / West Virginia North (ftUS)",(-81.76, 38.76, -77.72, 40.64)),
("6602","NAD83(2011) / West Virginia South",(-82.65, 37.2, -79.05, 39.17)),
("6603","NAD83(2011) / West Virginia South (ftUS)",(-82.65, 37.2, -79.05, 39.17)),
("6604","NAD83(2011) / Wisconsin Central",(-92.89, 43.98, -86.25, 45.8)),
("6605","NAD83(2011) / Wisconsin Central (ftUS)",(-92.89, 43.98, -86.25, 45.8)),
("6606","NAD83(2011) / Wisconsin North",(-92.89, 45.37, -88.05, 47.31)),
("6607","NAD83(2011) / Wisconsin North (ftUS)",(-92.89, 45.37, -88.05, 47.31)),
("6608","NAD83(2011) / Wisconsin South",(-91.43, 42.48, -86.95, 44.33)),
("6609","NAD83(2011) / Wisconsin South (ftUS)",(-91.43, 42.48, -86.95, 44.33)),
("6610","NAD83(2011) / Wisconsin Transverse Mercator",(-92.89, 42.48, -86.25, 47.31)),
("6611","NAD83(2011) / Wyoming East",(-106.33, 40.99, -104.05, 45.01)),
("6612","NAD83(2011) / Wyoming East (ftUS)",(-106.33, 40.99, -104.05, 45.01)),
("6613","NAD83(2011) / Wyoming East Central",(-108.63, 40.99, -106.0, 45.01)),
("6614","NAD83(2011) / Wyoming East Central (ftUS)",(-108.63, 40.99, -106.0, 45.01)),
("6615","NAD83(2011) / Wyoming West",(-111.06, 40.99, -109.04, 44.67)),
("6616","NAD83(2011) / Wyoming West (ftUS)",(-111.06, 40.99, -109.04, 44.67)),
("6617","NAD83(2011) / Wyoming West Central",(-111.06, 40.99, -107.5, 45.01)),
("6618","NAD83(2011) / Wyoming West Central (ftUS)",(-111.06, 40.99, -107.5, 45.01)),
("6619","NAD83(2011) / Utah Central",(-114.05, 38.49, -109.04, 41.08)),
("6620","NAD83(2011) / Utah North",(-114.04, 40.55, -109.04, 42.01)),
("6621","NAD83(2011) / Utah South",(-114.05, 36.99, -109.04, 38.58)),
("6622","NAD83(CSRS) / Quebec Lambert",(-79.85, 44.99, -57.1, 62.62)),
("6623","NAD83 / Quebec Albers",(-79.85, 44.99, -57.1, 62.62)),
("6624","NAD83(CSRS) / Quebec Albers",(-79.85, 44.99, -57.1, 62.62)),
("6625","NAD83(2011) / Utah Central (ftUS)",(-114.05, 38.49, -109.04, 41.08)),
("6626","NAD83(2011) / Utah North (ftUS)",(-114.04, 40.55, -109.04, 42.01)),
("6627","NAD83(2011) / Utah South (ftUS)",(-114.05, 36.99, -109.04, 38.58)),
("6628","NAD83(PA11) / Hawaii zone 1",(-156.1, 18.87, -154.74, 20.33)),
("6629","NAD83(PA11) / Hawaii zone 2",(-157.36, 20.45, -155.93, 21.26)),
("6630","NAD83(PA11) / Hawaii zone 3",(-158.33, 21.2, -157.61, 21.75)),
("6631","NAD83(PA11) / Hawaii zone 4",(-159.85, 21.81, -159.23, 22.29)),
("6632","NAD83(PA11) / Hawaii zone 5",(-160.3, 21.73, -159.99, 22.07)),
("6633","NAD83(PA11) / Hawaii zone 3 (ftUS)",(-158.33, 21.2, -157.61, 21.75)),
("6634","NAD83(PA11) / UTM zone 4N",(-160.3, 19.51, -155.99, 22.29)),
("6635","NAD83(PA11) / UTM zone 5N",(-156.0, 18.87, -154.74, 20.86)),
("6636","NAD83(PA11) / UTM zone 2S",(-170.88, -14.59, -168.09, -14.11)),
("6637","NAD83(MA11) / Guam Map Grid",(144.58, 13.18, 145.01, 13.7)),
("6638","Tutuila 1962 height",(-170.88, -14.43, -170.51, -14.2)),
("6639","Guam 1963 height",(144.58, 13.18, 145.01, 13.7)),
("6640","NMVD03 height",(145.06, 14.06, 145.89, 15.35)),
("6641","PRVD02 height",(-67.97, 17.87, -65.19, 18.57)),
("6642","VIVD09 height",(-65.09, 17.62, -64.51, 18.44)),
("6643","ASVD02 height",(-170.88, -14.43, -170.51, -14.2)),
("6644","GUVD04 height",(144.58, 13.18, 145.01, 13.7)),
("6646","Karbala 1979 / Iraq National Grid",(38.79, 29.06, 48.61, 37.39)),
("6647","CGVD2013(CGG2013) height",(-141.01, 40.04, -47.74, 86.46)),
("6649","NAD83(CSRS) + CGVD2013 height",(-141.01, 40.04, -47.74, 86.46)),
("6650","NAD83(CSRS) / UTM zone 7N + CGVD2013 height",(-141.01, 52.05, -138.0, 72.53)),
("6651","NAD83(CSRS) / UTM zone 8N + CGVD2013 height",(-138.0, 48.06, -132.0, 79.42)),
("6652","NAD83(CSRS) / UTM zone 9N + CGVD2013 height",(-132.0, 46.52, -126.0, 80.93)),
("6653","NAD83(CSRS) / UTM zone 10N + CGVD2013 height",(-126.0, 48.13, -120.0, 81.8)),
("6654","NAD83(CSRS) / UTM zone 11N + CGVD2013 height",(-120.0, 48.99, -114.0, 83.5)),
("6655","NAD83(CSRS) / UTM zone 12N + CGVD2013 height",(-114.0, 48.99, -108.0, 84.0)),
("6656","NAD83(CSRS) / UTM zone 13N + CGVD2013 height",(-108.0, 48.99, -102.0, 84.0)),
("6657","NAD83(CSRS) / UTM zone 14N + CGVD2013 height",(-102.0, 48.99, -96.0, 84.0)),
("6658","NAD83(CSRS) / UTM zone 15N + CGVD2013 height",(-96.0, 48.03, -90.0, 84.0)),
("6659","NAD83(CSRS) / UTM zone 16N + CGVD2013 height",(-90.0, 46.11, -84.0, 84.0)),
("6660","NAD83(CSRS) / UTM zone 17N + CGVD2013 height",(-84.0, 41.67, -78.0, 84.0)),
("6661","NAD83(CSRS) / UTM zone 18N + CGVD2013 height",(-78.0, 43.63, -72.0, 84.0)),
("6662","NAD83(CSRS) / UTM zone 19N + CGVD2013 height",(-72.0, 40.8, -66.0, 84.0)),
("6663","NAD83(CSRS) / UTM zone 20N + CGVD2013 height",(-66.0, 40.04, -60.0, 84.0)),
("6664","NAD83(CSRS) / UTM zone 21N + CGVD2013 height",(-60.0, 40.57, -54.0, 84.0)),
("6665","NAD83(CSRS) / UTM zone 22N + CGVD2013 height",(-54.0, 43.27, -48.0, 57.65)),
("6666","JGD2011",(122.38, 17.09, 157.65, 46.05)),
("6667","JGD2011",(122.38, 17.09, 157.65, 46.05)),
("6668","JGD2011",(122.38, 17.09, 157.65, 46.05)),
("6669","JGD2011 / Japan Plane Rectangular CS I",(128.17, 26.96, 130.46, 34.74)),
("6670","JGD2011 / Japan Plane Rectangular CS II",(129.76, 30.18, 132.05, 33.99)),
("6671","JGD2011 / Japan Plane Rectangular CS III",(130.81, 33.72, 133.49, 36.38)),
("6672","JGD2011 / Japan Plane Rectangular CS IV",(131.95, 32.69, 134.81, 34.45)),
("6673","JGD2011 / Japan Plane Rectangular CS V",(133.13, 34.13, 135.47, 35.71)),
("6674","JGD2011 / Japan Plane Rectangular CS VI",(134.86, 33.4, 136.99, 36.33)),
("6675","JGD2011 / Japan Plane Rectangular CS VII",(136.22, 34.51, 137.84, 37.58)),
("6676","JGD2011 / Japan Plane Rectangular CS VIII",(137.32, 34.54, 139.91, 38.58)),
("6677","JGD2011 / Japan Plane Rectangular CS IX",(138.4, 29.31, 141.11, 37.98)),
("6678","JGD2011 / Japan Plane Rectangular CS X",(139.49, 37.73, 142.14, 41.58)),
("6679","JGD2011 / Japan Plane Rectangular CS XI",(139.34, 41.34, 141.46, 43.42)),
("6680","JGD2011 / Japan Plane Rectangular CS XII",(140.89, 42.15, 143.61, 45.54)),
("6681","JGD2011 / Japan Plane Rectangular CS XIII",(142.61, 41.87, 145.87, 44.4)),
("6682","JGD2011 / Japan Plane Rectangular CS XIV",(141.2, 24.67, 142.33, 27.8)),
("6683","JGD2011 / Japan Plane Rectangular CS XV",(126.63, 26.02, 128.4, 26.91)),
("6684","JGD2011 / Japan Plane Rectangular CS XVI",(122.83, 23.98, 125.51, 24.94)),
("6685","JGD2011 / Japan Plane Rectangular CS XVII",(131.12, 24.4, 131.38, 26.01)),
("6686","JGD2011 / Japan Plane Rectangular CS XVIII",(136.02, 20.37, 136.16, 20.48)),
("6687","JGD2011 / Japan Plane Rectangular CS XIX",(153.91, 24.22, 154.05, 24.35)),
("6688","JGD2011 / UTM zone 51N",(122.38, 21.1, 126.0, 29.71)),
("6689","JGD2011 / UTM zone 52N",(126.0, 21.12, 132.0, 38.63)),
("6690","JGD2011 / UTM zone 53N",(132.0, 17.09, 138.0, 43.55)),
("6691","JGD2011 / UTM zone 54N",(138.0, 17.63, 144.0, 46.05)),
("6692","JGD2011 / UTM zone 55N",(144.0, 23.03, 147.86, 45.65)),
("6693","JSLD72 height",(139.7, 41.34, 145.87, 45.54)),
("6694","JGD2000 (vertical) height",(129.3, 30.94, 145.87, 45.54)),
("6695","JGD2011 (vertical) height",(129.3, 30.94, 145.87, 45.54)),
("6696","JGD2000 + JGD2000 (vertical) height",(129.3, 30.94, 145.87, 45.54)),
("6697","JGD2011 + JGD2011 (vertical) height",(129.3, 30.94, 145.87, 45.54)),
("6700","Tokyo + JSLD72 height",(139.7, 41.34, 145.87, 45.54)),
("6703","WGS 84 / TM 60 SW",(-63.01, -56.25, -56.99, -47.68)),
("6704","RDN2008",(5.93, 34.76, 18.99, 47.1)),
("6705","RDN2008",(5.93, 34.76, 18.99, 47.1)),
("6706","RDN2008",(5.93, 34.76, 18.99, 47.1)),
("6707","RDN2008 / UTM zone 32N (N-E)",(5.94, 36.53, 12.0, 47.04)),
("6708","RDN2008 / UTM zone 33N (N-E)",(12.0, 34.79, 18.0, 47.1)),
("6709","RDN2008 / UTM zone 34N (N-E)",(17.99, 34.76, 18.99, 41.64)),
("6720","WGS 84 / CIG92",(105.48, -10.63, 105.77, -10.36)),
("6721","GDA94 / CIG94",(105.48, -10.63, 105.77, -10.36)),
("6722","WGS 84 / CKIG92",(96.76, -12.27, 96.99, -11.76)),
("6723","GDA94 / CKIG94",(96.76, -12.27, 96.99, -11.76)),
("6732","GDA94 / MGA zone 41",(62.92, -57.5, 66.0, -53.43)),
("6733","GDA94 / MGA zone 42",(66.0, -58.96, 72.01, -51.18)),
("6734","GDA94 / MGA zone 43",(72.0, -59.02, 78.01, -49.5)),
("6735","GDA94 / MGA zone 44",(78.0, -58.47, 83.57, -50.65)),
("6736","GDA94 / MGA zone 46",(93.41, -15.46, 96.01, -8.57)),
("6737","GDA94 / MGA zone 47",(96.0, -15.56, 100.34, -8.47)),
("6738","GDA94 / MGA zone 59",(168.0, -32.48, 173.35, -25.61)),
("6781","NAD83(CORS96)",(167.65, 14.92, -63.88, 74.71)),
("6782","NAD83(CORS96)",(167.65, 14.92, -63.88, 74.71)),
("6783","NAD83(CORS96)",(167.65, 14.92, -63.88, 74.71)),
("6784","NAD83(CORS96) / Oregon Baker zone (m)",(-118.15, 44.6, -117.37, 45.19)),
("6785","NAD83(CORS96) / Oregon Baker zone (ft)",(-118.15, 44.6, -117.37, 45.19)),
("6786","NAD83(2011) / Oregon Baker zone (m)",(-118.15, 44.6, -117.37, 45.19)),
("6787","NAD83(2011) / Oregon Baker zone (ft)",(-118.15, 44.6, -117.37, 45.19)),
("6788","NAD83(CORS96) / Oregon Bend-Klamath Falls zone (m)",(-122.45, 41.88, -120.77, 43.89)),
("6789","NAD83(CORS96) / Oregon Bend-Klamath Falls zone (ft)",(-122.45, 41.88, -120.77, 43.89)),
("6790","NAD83(2011) / Oregon Bend-Klamath Falls zone (m)",(-122.45, 41.88, -120.77, 43.89)),
("6791","NAD83(2011) / Oregon Bend-Klamath Falls zone (ft)",(-122.45, 41.88, -120.77, 43.89)),
("6792","NAD83(CORS96) / Oregon Bend-Redmond-Prineville zone (m)",(-121.88, 43.76, -119.79, 44.98)),
("6793","NAD83(CORS96) / Oregon Bend-Redmond-Prineville zone (ft)",(-121.88, 43.76, -119.79, 44.98)),
("6794","NAD83(2011) / Oregon Bend-Redmond-Prineville zone (m)",(-121.88, 43.76, -119.79, 44.98)),
("6795","NAD83(2011) / Oregon Bend-Redmond-Prineville zone (ft)",(-121.88, 43.76, -119.79, 44.98)),
("6796","NAD83(CORS96) / Oregon Bend-Burns zone (m)",(-120.95, 43.34, -118.8, 44.28)),
("6797","NAD83(CORS96) / Oregon Bend-Burns zone (ft)",(-120.95, 43.34, -118.8, 44.28)),
("6798","NAD83(2011) / Oregon Bend-Burns zone (m)",(-120.95, 43.34, -118.8, 44.28)),
("6799","NAD83(2011) / Oregon Bend-Burns zone (ft)",(-120.95, 43.34, -118.8, 44.28)),
("6800","NAD83(CORS96) / Oregon Canyonville-Grants Pass zone (m)",(-123.83, 42.49, -122.43, 43.24)),
("6801","NAD83(CORS96) / Oregon Canyonville-Grants Pass zone (ft)",(-123.83, 42.49, -122.43, 43.24)),
("6802","NAD83(2011) / Oregon Canyonville-Grants Pass zone (m)",(-123.83, 42.49, -122.43, 43.24)),
("6803","NAD83(2011) / Oregon Canyonville-Grants Pass zone (ft)",(-123.83, 42.49, -122.43, 43.24)),
("6804","NAD83(CORS96) / Oregon Columbia River East zone (m)",(-122.05, 45.49, -118.89, 46.08)),
("6805","NAD83(CORS96) / Oregon Columbia River East zone (ft)",(-122.05, 45.49, -118.89, 46.08)),
("6806","NAD83(2011) / Oregon Columbia River East zone (m)",(-122.05, 45.49, -118.89, 46.08)),
("6807","NAD83(2011) / Oregon Columbia River East zone (ft)",(-122.05, 45.49, -118.89, 46.08)),
("6808","NAD83(CORS96) / Oregon Columbia River West zone (m)",(-124.33, 45.17, -121.47, 46.56)),
("6809","NAD83(CORS96) / Oregon Columbia River West zone (ft)",(-124.33, 45.17, -121.47, 46.56)),
("6810","NAD83(2011) / Oregon Columbia River West zone (m)",(-124.33, 45.17, -121.47, 46.56)),
("6811","NAD83(2011) / Oregon Columbia River West zone (ft)",(-124.33, 45.17, -121.47, 46.56)),
("6812","NAD83(CORS96) / Oregon Cottage Grove-Canyonville zone (m)",(-123.96, 42.82, -122.4, 43.88)),
("6813","NAD83(CORS96) / Oregon Cottage Grove-Canyonville zone (ft)",(-123.96, 42.82, -122.4, 43.88)),
("6814","NAD83(2011) / Oregon Cottage Grove-Canyonville zone (m)",(-123.96, 42.82, -122.4, 43.88)),
("6815","NAD83(2011) / Oregon Cottage Grove-Canyonville zone (ft)",(-123.96, 42.82, -122.4, 43.88)),
("6816","NAD83(CORS96) / Oregon Dufur-Madras zone (m)",(-121.95, 44.63, -120.46, 45.55)),
("6817","NAD83(CORS96) / Oregon Dufur-Madras zone (ft)",(-121.95, 44.63, -120.46, 45.55)),
("6818","NAD83(2011) / Oregon Dufur-Madras zone (m)",(-121.95, 44.63, -120.46, 45.55)),
("6819","NAD83(2011) / Oregon Dufur-Madras zone (ft)",(-121.95, 44.63, -120.46, 45.55)),
("6820","NAD83(CORS96) / Oregon Eugene zone (m)",(-123.8, 43.74, -122.18, 44.71)),
("6821","NAD83(CORS96) / Oregon Eugene zone (ft)",(-123.8, 43.74, -122.18, 44.71)),
("6822","NAD83(2011) / Oregon Eugene zone (m)",(-123.8, 43.74, -122.18, 44.71)),
("6823","NAD83(2011) / Oregon Eugene zone (ft)",(-123.8, 43.74, -122.18, 44.71)),
("6824","NAD83(CORS96) / Oregon Grants Pass-Ashland zone (m)",(-123.95, 41.88, -122.37, 42.85)),
("6825","NAD83(CORS96) / Oregon Grants Pass-Ashland zone (ft)",(-123.95, 41.88, -122.37, 42.85)),
("6826","NAD83(2011) / Oregon Grants Pass-Ashland zone (m)",(-123.95, 41.88, -122.37, 42.85)),
("6827","NAD83(2011) / Oregon Grants Pass-Ashland zone (ft)",(-123.95, 41.88, -122.37, 42.85)),
("6828","NAD83(CORS96) / Oregon Gresham-Warm Springs zone (m)",(-122.43, 45.02, -121.68, 45.55)),
("6829","NAD83(CORS96) / Oregon Gresham-Warm Springs zone (ft)",(-122.43, 45.02, -121.68, 45.55)),
("6830","NAD83(2011) / Oregon Gresham-Warm Springs zone (m)",(-122.43, 45.02, -121.68, 45.55)),
("6831","NAD83(2011) / Oregon Gresham-Warm Springs zone (ft)",(-122.43, 45.02, -121.68, 45.55)),
("6832","NAD83(CORS96) / Oregon La Grande zone (m)",(-118.17, 45.13, -117.14, 45.8)),
("6833","NAD83(CORS96) / Oregon La Grande zone (ft)",(-118.17, 45.13, -117.14, 45.8)),
("6834","NAD83(2011) / Oregon La Grande zone (m)",(-118.17, 45.13, -117.14, 45.8)),
("6835","NAD83(2011) / Oregon La Grande zone (ft)",(-118.17, 45.13, -117.14, 45.8)),
("6836","NAD83(CORS96) / Oregon Ontario zone (m)",(-117.9, 43.41, -116.7, 44.65)),
("6837","NAD83(CORS96) / Oregon Ontario zone (ft)",(-117.9, 43.41, -116.7, 44.65)),
("6838","NAD83(2011) / Oregon Ontario zone (m)",(-117.9, 43.41, -116.7, 44.65)),
("6839","NAD83(2011) / Oregon Ontario zone (ft)",(-117.9, 43.41, -116.7, 44.65)),
("6840","NAD83(CORS96) / Oregon Coast zone (m)",(-124.84, 41.89, -123.35, 46.4)),
("6841","NAD83(CORS96) / Oregon Coast zone (ft)",(-124.84, 41.89, -123.35, 46.4)),
("6842","NAD83(2011) / Oregon Coast zone (m)",(-124.84, 41.89, -123.35, 46.4)),
("6843","NAD83(2011) / Oregon Coast zone (ft)",(-124.84, 41.89, -123.35, 46.4)),
("6844","NAD83(CORS96) / Oregon Pendleton zone (m)",(-119.36, 45.46, -118.17, 46.02)),
("6845","NAD83(CORS96) / Oregon Pendleton zone (ft)",(-119.36, 45.46, -118.17, 46.02)),
("6846","NAD83(2011) / Oregon Pendleton zone (m)",(-119.36, 45.46, -118.17, 46.02)),
("6847","NAD83(2011) / Oregon Pendleton zone (ft)",(-119.36, 45.46, -118.17, 46.02)),
("6848","NAD83(CORS96) / Oregon Pendleton-La Grande zone (m)",(-118.64, 45.13, -118.09, 45.64)),
("6849","NAD83(CORS96) / Oregon Pendleton-La Grande zone (ft)",(-118.64, 45.13, -118.09, 45.64)),
("6850","NAD83(2011) / Oregon Pendleton-La Grande zone (m)",(-118.64, 45.13, -118.09, 45.64)),
("6851","NAD83(2011) / Oregon Pendleton-La Grande zone (ft)",(-118.64, 45.13, -118.09, 45.64)),
("6852","NAD83(CORS96) / Oregon Portland zone (m)",(-123.53, 45.23, -122.11, 46.01)),
("6853","NAD83(CORS96) / Oregon Portland zone (ft)",(-123.53, 45.23, -122.11, 46.01)),
("6854","NAD83(2011) / Oregon Portland zone (m)",(-123.53, 45.23, -122.11, 46.01)),
("6855","NAD83(2011) / Oregon Portland zone (ft)",(-123.53, 45.23, -122.11, 46.01)),
("6856","NAD83(CORS96) / Oregon Salem zone (m)",(-123.73, 44.32, -121.89, 45.3)),
("6857","NAD83(CORS96) / Oregon Salem zone (ft)",(-123.73, 44.32, -121.89, 45.3)),
("6858","NAD83(2011) / Oregon Salem zone (m)",(-123.73, 44.32, -121.89, 45.3)),
("6859","NAD83(2011) / Oregon Salem zone (ft)",(-123.73, 44.32, -121.89, 45.3)),
("6860","NAD83(CORS96) / Oregon Santiam Pass zone (m)",(-122.51, 44.1, -121.69, 44.66)),
("6861","NAD83(CORS96) / Oregon Santiam Pass zone (ft)",(-122.51, 44.1, -121.69, 44.66)),
("6862","NAD83(2011) / Oregon Santiam Pass zone (m)",(-122.51, 44.1, -121.69, 44.66)),
("6863","NAD83(2011) / Oregon Santiam Pass zone (ft)",(-122.51, 44.1, -121.69, 44.66)),
("6867","NAD83(CORS96) / Oregon LCC (m)",(-124.6, 41.98, -116.47, 46.26)),
("6868","NAD83(CORS96) / Oregon GIC Lambert (ft)",(-124.6, 41.98, -116.47, 46.26)),
("6870","ETRS89 / Albania TM 2010",(19.22, 39.64, 21.06, 42.67)),
("6871","WGS 84 / Pseudo-Mercator +  EGM2008 geoid height",(-180.0, -90.0, 180.0, 90.0)),
("6875","RDN2008 / Italy zone (N-E)",(5.93, 34.76, 18.99, 47.1)),
("6876","RDN2008 / Zone 12 (N-E)",(5.93, 34.76, 18.99, 47.1)),
("6879","NAD83(2011) / Wisconsin Central",(-92.89, 43.98, -86.25, 45.8)),
("6880","NAD83(2011) / Nebraska (ftUS)",(-104.06, 39.99, -95.3, 43.01)),
("6881","Aden 1925",(43.37, 12.54, 53.14, 19.0)),
("6882","Bekaa Valley 1920",(35.04, 33.06, 36.63, 34.65)),
("6883","Bioko",(8.37, 3.14, 9.02, 3.82)),
("6884","NAD83(CORS96) / Oregon North",(-124.17, 43.95, -116.47, 46.26)),
("6885","NAD83(CORS96) / Oregon North (ft)",(-124.17, 43.95, -116.47, 46.26)),
("6886","NAD83(CORS96) / Oregon South",(-124.6, 41.98, -116.9, 44.56)),
("6887","NAD83(CORS96) / Oregon South (ft)",(-124.6, 41.98, -116.9, 44.56)),
("6892","South East Island 1943",(55.15, -4.86, 56.01, -3.66)),
("6893","WGS 84 / World Mercator +  EGM2008 height",(-180.0, -90.0, 180.0, 90.0)),
("6894","Gambia",(-16.88, 13.05, -13.79, 13.83)),
("6915","South East Island 1943 / UTM zone 40N",(55.15, -4.86, 56.01, -3.66)),
("6916","SHD height",(103.59, 1.13, 104.07, 1.47)),
("6917","SVY21 + SHD height",(103.59, 1.13, 104.07, 1.47)),
("6922","NAD83 / Kansas LCC",(-102.06, 36.99, -94.58, 40.01)),
("6923","NAD83 / Kansas LCC (ftUS)",(-102.06, 36.99, -94.58, 40.01)),
("6924","NAD83(2011) / Kansas LCC",(-102.06, 36.99, -94.58, 40.01)),
("6925","NAD83(2011) / Kansas LCC (ftUS)",(-102.06, 36.99, -94.58, 40.01)),
("6927","SVY21 / Singapore TM + SHD height",(103.59, 1.13, 104.07, 1.47)),
("6931","WGS 84 / NSIDC EASE-Grid 2.0 North",(-180.0, 0.0, 180.0, 90.0)),
("6932","WGS 84 / NSIDC EASE-Grid 2.0 South",(-180.0, -90.0, 180.0, 0.0)),
("6933","WGS 84 / NSIDC EASE-Grid 2.0 Global",(-180.0, -86.0, 180.0, 86.0)),
("6934","IGS08",(-180.0, -90.0, 180.0, 90.0)),
("6956","VN-2000 / TM-3 zone 481",(102.14, 9.2, 103.51, 22.82)),
("6957","VN-2000 / TM-3 zone 482",(103.5, 8.33, 106.51, 23.4)),
("6958","VN-2000 / TM-3 zone 491",(106.5, 8.57, 109.53, 22.95)),
("6959","VN-2000 / TM-3 Da Nang zone",(106.43, 8.57, 108.76, 21.67)),
("6962","ETRS89 / Albania LCC 2010",(19.22, 39.64, 21.06, 42.67)),
("6966","NAD27 / Michigan North",(-90.42, 45.08, -83.44, 48.32)),
("6978","IGD05",(32.99, 29.45, 35.69, 33.53)),
("6979","IGD05",(32.99, 29.45, 35.69, 33.53)),
("6980","IGD05",(32.99, 29.45, 35.69, 33.53)),
("6981","IG05 Intermediate CRS",(34.17, 29.45, 35.69, 33.28)),
("6982","IG05 Intermediate CRS",(34.17, 29.45, 35.69, 33.28)),
("6983","IG05 Intermediate CRS",(34.17, 29.45, 35.69, 33.28)),
("6984","Israeli Grid 05",(34.17, 29.45, 35.69, 33.28)),
("6985","IGD05/12",(32.99, 29.45, 35.69, 33.53)),
("6986","IGD05/12",(32.99, 29.45, 35.69, 33.53)),
("6987","IGD05/12",(32.99, 29.45, 35.69, 33.53)),
("6988","IG05/12 Intermediate CRS",(34.17, 29.45, 35.69, 33.28)),
("6989","IG05/12 Intermediate CRS",(34.17, 29.45, 35.69, 33.28)),
("6990","IG05/12 Intermediate CRS",(34.17, 29.45, 35.69, 33.28)),
("6991","Israeli Grid 05/12",(34.17, 29.45, 35.69, 33.28)),
("6996","NAD83(2011) / San Francisco CS13",(-123.56, 36.85, -121.2, 38.87)),
("6997","NAD83(2011) / San Francisco CS13 (ftUS)",(-123.56, 36.85, -121.2, 38.87)),
("7005","Nahrwan 1934 / UTM zone 37N",(38.79, 31.14, 42.0, 36.75)),
("7006","Nahrwan 1934 / UTM zone 38N",(42.0, 29.06, 48.0, 37.39)),
("7007","Nahrwan 1934 / UTM zone 39N",(48.0, 29.6, 48.75, 31.0)),
("7034","RGSPM06 (lon-lat)",(-57.1, 43.41, -55.9, 47.37)),
("7035","RGSPM06 (lon-lat)",(-57.1, 43.41, -55.9, 47.37)),
("7036","RGR92 (lon-lat)",(51.83, -24.72, 58.24, -18.28)),
("7037","RGR92 (lon-lat)",(51.83, -24.72, 58.24, -18.28)),
("7038","RGM04 (lon-lat)",(43.68, -14.49, 46.7, -11.33)),
("7039","RGM04 (lon-lat)",(43.68, -14.49, 46.7, -11.33)),
("7040","RGFG95 (lon-lat)",(-54.61, 2.11, -49.45, 8.88)),
("7041","RGFG95 (lon-lat)",(-54.61, 2.11, -49.45, 8.88)),
("7042","RGF93 (lon-lat)",(-9.86, 41.15, 10.38, 51.56)),
("7057","NAD83(2011) / IaRCS zone 1",(-96.6, 42.9, -93.97, 43.51)),
("7058","NAD83(2011) / IaRCS zone 2",(-93.98, 42.9, -91.6, 43.51)),
("7059","NAD83(2011) / IaRCS zone 3",(-91.62, 42.29, -90.89, 43.51)),
("7060","NAD83(2011) / IaRCS zone 4",(-96.65, 42.2, -93.0, 42.92)),
("7061","NAD83(2011) / IaRCS zone 5",(-93.03, 42.2, -91.59, 43.09)),
("7062","NAD83(2011) / IaRCS zone 6",(-96.37, 40.58, -95.04, 42.22)),
("7063","NAD83(2011) / IaRCS zone 7",(-95.16, 41.15, -94.16, 42.22)),
("7064","NAD83(2011) / IaRCS zone 8",(-94.29, 41.15, -93.23, 42.22)),
("7065","NAD83(2011) / IaRCS zone 9",(-93.35, 41.16, -92.29, 42.3)),
("7066","NAD83(2011) / IaRCS zone 10",(-92.31, 41.42, -90.89, 42.3)),
("7067","NAD83(2011) / IaRCS zone 11",(-91.14, 41.44, -90.14, 42.68)),
("7068","NAD83(2011) / IaRCS zone 12",(-95.39, 40.57, -92.17, 41.17)),
("7069","NAD83(2011) / IaRCS zone 13",(-92.42, 40.59, -91.48, 41.52)),
("7070","NAD83(2011) / IaRCS zone 14",(-91.72, 40.37, -90.78, 41.6)),
("7071","RGTAAF07",(37.98, -67.13, 142.0, -20.91)),
("7072","RGTAAF07",(37.98, -67.13, 142.0, -20.91)),
("7073","RGTAAF07",(37.98, -67.13, 142.0, -20.91)),
("7074","RGTAAF07 / UTM zone 37S",(37.98, -25.7, 41.82, -20.91)),
("7075","RGTAAF07 / UTM zone 38S",(45.37, -49.38, 48.01, -43.12)),
("7076","RGTAAF07 / UTM zone 39S",(48.0, -49.82, 54.01, -42.61)),
("7077","RGTAAF07 / UTM zone 40S",(54.0, -49.61, 57.16, -43.3)),
("7078","RGTAAF07 / UTM zone 41S",(62.96, -53.03, 66.0, -45.73)),
("7079","RGTAAF07 / UTM zone 42S",(66.0, -53.24, 72.01, -45.11)),
("7080","RGTAAF07 / UTM zone 43S",(72.0, -51.19, 78.01, -34.47)),
("7081","RGTAAF07 / UTM zone 44S",(78.0, -42.04, 81.83, -34.5)),
("7082","RGTAAF07 / Terre Adelie Polar Stereographic",(136.0, -67.13, 142.0, -65.61)),
("7084","RGF93 (lon-lat)",(-9.86, 41.15, 10.38, 51.56)),
("7085","RGAF09 (lon-lat)",(-63.66, 14.08, -57.52, 18.54)),
("7086","RGAF09 (lon-lat)",(-63.66, 14.08, -57.52, 18.54)),
("7087","RGTAAF07 (lon-lat)",(37.98, -67.13, 142.0, -20.91)),
("7088","RGTAAF07 (lon-lat)",(37.98, -67.13, 142.0, -20.91)),
("7109","NAD83(2011) / RMTCRS St Mary (m)",(-113.97, 48.55, -113.0, 49.01)),
("7110","NAD83(2011) / RMTCRS Blackfeet (m)",(-113.84, 48.0, -112.0, 49.01)),
("7111","NAD83(2011) / RMTCRS Milk River (m)",(-112.5, 47.78, -108.74, 49.01)),
("7112","NAD83(2011) / RMTCRS Fort Belknap (m)",(-110.84, 47.78, -106.99, 49.01)),
("7113","NAD83(2011) / RMTCRS Fort Peck Assiniboine (m)",(-107.57, 48.01, -104.78, 48.88)),
("7114","NAD83(2011) / RMTCRS Fort Peck Sioux (m)",(-107.76, 47.75, -104.04, 49.01)),
("7115","NAD83(2011) / RMTCRS Crow (m)",(-108.84, 44.99, -106.66, 46.09)),
("7116","NAD83(2011) / RMTCRS Bobcat (m)",(-112.34, 45.36, -110.75, 46.59)),
("7117","NAD83(2011) / RMTCRS Billings (m)",(-109.42, 44.99, -107.99, 47.41)),
("7118","NAD83(2011) / RMTCRS Wind River (m)",(-109.5, 42.69, -107.94, 43.86)),
("7119","NAD83(2011) / RMTCRS St Mary (ft)",(-113.97, 48.55, -113.0, 49.01)),
("7120","NAD83(2011) / RMTCRS Blackfeet (ft)",(-113.84, 48.0, -112.0, 49.01)),
("7121","NAD83(2011) / RMTCRS Milk River (ft)",(-112.5, 47.78, -108.74, 49.01)),
("7122","NAD83(2011) / RMTCRS Fort Belknap (ft)",(-110.84, 47.78, -106.99, 49.01)),
("7123","NAD83(2011) / RMTCRS Fort Peck Assiniboine (ft)",(-107.57, 48.01, -104.78, 48.88)),
("7124","NAD83(2011) / RMTCRS Fort Peck Sioux (ft)",(-107.76, 47.75, -104.04, 49.01)),
("7125","NAD83(2011) / RMTCRS Crow (ft)",(-108.84, 44.99, -106.66, 46.09)),
("7126","NAD83(2011) / RMTCRS Bobcat (ft)",(-112.34, 45.36, -110.75, 46.59)),
("7127","NAD83(2011) / RMTCRS Billings (ft)",(-109.42, 44.99, -107.99, 47.41)),
("7128","NAD83(2011) / RMTCRS Wind River (ftUS)",(-109.5, 42.69, -107.94, 43.86)),
("7131","NAD83(2011) / San Francisco CS13",(-123.56, 36.85, -121.2, 38.87)),
("7132","NAD83(2011) / San Francisco CS13 (ftUS)",(-123.56, 36.85, -121.2, 38.87)),
("7133","RGTAAF07 (lon-lat)",(37.98, -67.13, 142.0, -20.91)),
("7134","IGD05",(32.99, 29.45, 35.69, 33.53)),
("7135","IGD05",(32.99, 29.45, 35.69, 33.53)),
("7136","IGD05",(32.99, 29.45, 35.69, 33.53)),
("7137","IGD05/12",(32.99, 29.45, 35.69, 33.53)),
("7138","IGD05/12",(32.99, 29.45, 35.69, 33.53)),
("7139","IGD05/12",(32.99, 29.45, 35.69, 33.53)),
("7142","Palestine 1923 / Palestine Grid modified",(34.17, 29.18, 39.31, 33.38)),
("7257","NAD83(2011) / InGCS Adams (m)",(-85.08, 40.56, -84.8, 40.93)),
("7258","NAD83(2011) / InGCS Adams (ftUS)",(-85.08, 40.56, -84.8, 40.93)),
("7259","NAD83(2011) / InGCS Allen (m)",(-85.34, 40.91, -84.8, 41.28)),
("7260","NAD83(2011) / InGCS Allen (ftUS)",(-85.34, 40.91, -84.8, 41.28)),
("7261","NAD83(2011) / InGCS Bartholomew (m)",(-86.09, 39.03, -85.68, 39.36)),
("7262","NAD83(2011) / InGCS Bartholomew (ftUS)",(-86.09, 39.03, -85.68, 39.36)),
("7263","NAD83(2011) / InGCS Benton (m)",(-87.53, 40.47, -87.09, 40.74)),
("7264","NAD83(2011) / InGCS Benton (ftUS)",(-87.53, 40.47, -87.09, 40.74)),
("7265","NAD83(2011) / InGCS Blackford-Delaware (m)",(-85.58, 40.07, -85.2, 40.57)),
("7266","NAD83(2011) / InGCS Blackford-Delaware (ftUS)",(-85.58, 40.07, -85.2, 40.57)),
("7267","NAD83(2011) / InGCS Boone-Hendricks (m)",(-86.7, 39.6, -86.24, 40.19)),
("7268","NAD83(2011) / InGCS Boone-Hendricks (ftUS)",(-86.7, 39.6, -86.24, 40.19)),
("7269","NAD83(2011) / InGCS Brown (m)",(-86.39, 39.04, -86.07, 39.35)),
("7270","NAD83(2011) / InGCS Brown (ftUS)",(-86.39, 39.04, -86.07, 39.35)),
("7271","NAD83(2011) / InGCS Carroll (m)",(-86.78, 40.43, -86.37, 40.74)),
("7272","NAD83(2011) / InGCS Carroll (ftUS)",(-86.78, 40.43, -86.37, 40.74)),
("7273","NAD83(2011) / InGCS Cass (m)",(-86.59, 40.56, -86.16, 40.92)),
("7274","NAD83(2011) / InGCS Cass (ftUS)",(-86.59, 40.56, -86.16, 40.92)),
("7275","NAD83(2011) / InGCS Clark-Floyd-Scott (m)",(-86.04, 38.17, -85.41, 38.84)),
("7276","NAD83(2011) / InGCS Clark-Floyd-Scott (ftUS)",(-86.04, 38.17, -85.41, 38.84)),
("7277","NAD83(2011) / InGCS Clay (m)",(-87.25, 39.16, -86.93, 39.61)),
("7278","NAD83(2011) / InGCS Clay (ftUS)",(-87.25, 39.16, -86.93, 39.61)),
("7279","NAD83(2011) / InGCS Clinton (m)",(-86.7, 40.17, -86.24, 40.44)),
("7280","NAD83(2011) / InGCS Clinton (ftUS)",(-86.7, 40.17, -86.24, 40.44)),
("7281","NAD83(2011) / InGCS Crawford-Lawrence-Orange (m)",(-86.69, 38.1, -86.24, 39.0)),
("7282","NAD83(2011) / InGCS Crawford-Lawrence-Orange (ftUS)",(-86.69, 38.1, -86.24, 39.0)),
("7283","NAD83(2011) / InGCS Daviess-Greene (m)",(-87.28, 38.49, -86.68, 39.18)),
("7284","NAD83(2011) / InGCS Daviess-Greene (ftUS)",(-87.28, 38.49, -86.68, 39.18)),
("7285","NAD83(2011) / InGCS Dearborn-Ohio-Switzerland (m)",(-85.21, 38.68, -84.78, 39.31)),
("7286","NAD83(2011) / InGCS Dearborn-Ohio-Switzerland (ftUS)",(-85.21, 38.68, -84.78, 39.31)),
("7287","NAD83(2011) / InGCS Decatur-Rush (m)",(-85.69, 39.13, -85.29, 39.79)),
("7288","NAD83(2011) / InGCS Decatur-Rush (ftUS)",(-85.69, 39.13, -85.29, 39.79)),
("7289","NAD83(2011) / InGCS DeKalb (m)",(-85.2, 41.26, -84.8, 41.54)),
("7290","NAD83(2011) / InGCS DeKalb (ftUS)",(-85.2, 41.26, -84.8, 41.54)),
("7291","NAD83(2011) / InGCS Dubois-Martin (m)",(-87.08, 38.2, -86.67, 38.91)),
("7292","NAD83(2011) / InGCS Dubois-Martin (ftUS)",(-87.08, 38.2, -86.67, 38.91)),
("7293","NAD83(2011) / InGCS Elkhart-Kosciusko-Wabash (m)",(-86.08, 40.65, -85.63, 41.77)),
("7294","NAD83(2011) / InGCS Elkhart-Kosciusko-Wabash (ftUS)",(-86.08, 40.65, -85.63, 41.77)),
("7295","NAD83(2011) / InGCS Fayette-Franklin-Union (m)",(-85.31, 39.26, -84.81, 39.79)),
("7296","NAD83(2011) / InGCS Fayette-Franklin-Union (ftUS)",(-85.31, 39.26, -84.81, 39.79)),
("7297","NAD83(2011) / InGCS Fountain-Warren (m)",(-87.54, 39.95, -87.09, 40.48)),
("7298","NAD83(2011) / InGCS Fountain-Warren (ftUS)",(-87.54, 39.95, -87.09, 40.48)),
("7299","NAD83(2011) / InGCS Fulton-Marshall-St. Joseph (m)",(-86.53, 40.9, -85.94, 41.77)),
("7300","NAD83(2011) / InGCS Fulton-Marshall-St. Joseph (ftUS)",(-86.53, 40.9, -85.94, 41.77)),
("7301","NAD83(2011) / InGCS Gibson (m)",(-87.98, 38.16, -87.31, 38.54)),
("7302","NAD83(2011) / InGCS Gibson (ftUS)",(-87.98, 38.16, -87.31, 38.54)),
("7303","NAD83(2011) / InGCS Grant (m)",(-85.87, 40.37, -85.44, 40.66)),
("7304","NAD83(2011) / InGCS Grant (ftUS)",(-85.87, 40.37, -85.44, 40.66)),
("7305","NAD83(2011) / InGCS Hamilton-Tipton (m)",(-86.25, 39.92, -85.86, 40.41)),
("7306","NAD83(2011) / InGCS Hamilton-Tipton (ftUS)",(-86.25, 39.92, -85.86, 40.41)),
("7307","NAD83(2011) / InGCS Hancock-Madison (m)",(-85.96, 39.69, -85.57, 40.38)),
("7308","NAD83(2011) / InGCS Hancock-Madison (ftUS)",(-85.96, 39.69, -85.57, 40.38)),
("7309","NAD83(2011) / InGCS Harrison-Washington (m)",(-86.33, 37.95, -85.84, 38.79)),
("7310","NAD83(2011) / InGCS Harrison-Washington (ftUS)",(-86.33, 37.95, -85.84, 38.79)),
("7311","NAD83(2011) / InGCS Henry (m)",(-85.6, 39.78, -85.2, 40.08)),
("7312","NAD83(2011) / InGCS Henry (ftUS)",(-85.6, 39.78, -85.2, 40.08)),
("7313","NAD83(2011) / InGCS Howard-Miami (m)",(-86.38, 40.37, -85.86, 41.0)),
("7314","NAD83(2011) / InGCS Howard-Miami (ftUS)",(-86.38, 40.37, -85.86, 41.0)),
("7315","NAD83(2011) / InGCS Huntington-Whitley (m)",(-85.69, 40.65, -85.3, 41.3)),
("7316","NAD83(2011) / InGCS Huntington-Whitley (ftUS)",(-85.69, 40.65, -85.3, 41.3)),
("7317","NAD83(2011) / InGCS Jackson (m)",(-86.32, 38.72, -85.79, 39.08)),
("7318","NAD83(2011) / InGCS Jackson (ftUS)",(-86.32, 38.72, -85.79, 39.08)),
("7319","NAD83(2011) / InGCS Jasper-Porter (m)",(-87.28, 40.73, -86.92, 41.77)),
("7320","NAD83(2011) / InGCS Jasper-Porter (ftUS)",(-87.28, 40.73, -86.92, 41.77)),
("7321","NAD83(2011) / InGCS Jay (m)",(-85.22, 40.3, -84.8, 40.58)),
("7322","NAD83(2011) / InGCS Jay (ftUS)",(-85.22, 40.3, -84.8, 40.58)),
("7323","NAD83(2011) / InGCS Jefferson (m)",(-85.69, 38.58, -85.2, 38.92)),
("7324","NAD83(2011) / InGCS Jefferson (ftUS)",(-85.69, 38.58, -85.2, 38.92)),
("7325","NAD83(2011) / InGCS Jennings (m)",(-85.8, 38.8, -85.43, 39.2)),
("7326","NAD83(2011) / InGCS Jennings (ftUS)",(-85.8, 38.8, -85.43, 39.2)),
("7327","NAD83(2011) / InGCS Johnson-Marion (m)",(-86.33, 39.34, -85.93, 39.93)),
("7328","NAD83(2011) / InGCS Johnson-Marion (ftUS)",(-86.33, 39.34, -85.93, 39.93)),
("7329","NAD83(2011) / InGCS Knox (m)",(-87.75, 38.41, -87.09, 38.91)),
("7330","NAD83(2011) / InGCS Knox (ftUS)",(-87.75, 38.41, -87.09, 38.91)),
("7331","NAD83(2011) / InGCS LaGrange-Noble (m)",(-85.66, 41.26, -85.19, 41.77)),
("7332","NAD83(2011) / InGCS LaGrange-Noble (ftUS)",(-85.66, 41.26, -85.19, 41.77)),
("7333","NAD83(2011) / InGCS Lake-Newton (m)",(-87.53, 40.73, -87.21, 41.77)),
("7334","NAD83(2011) / InGCS Lake-Newton (ftUS)",(-87.53, 40.73, -87.21, 41.77)),
("7335","NAD83(2011) / InGCS LaPorte-Pulaski-Starke (m)",(-86.94, 40.9, -86.46, 41.77)),
("7336","NAD83(2011) / InGCS LaPorte-Pulaski-Starke (ftUS)",(-86.94, 40.9, -86.46, 41.77)),
("7337","NAD83(2011) / InGCS Monroe-Morgan (m)",(-86.69, 38.99, -86.24, 39.64)),
("7338","NAD83(2011) / InGCS Monroe-Morgan (ftUS)",(-86.69, 38.99, -86.24, 39.64)),
("7339","NAD83(2011) / InGCS Montgomery-Putnam (m)",(-87.1, 39.47, -86.64, 40.22)),
("7340","NAD83(2011) / InGCS Montgomery-Putnam (ftUS)",(-87.1, 39.47, -86.64, 40.22)),
("7341","NAD83(2011) / InGCS Owen (m)",(-87.06, 39.16, -86.63, 39.48)),
("7342","NAD83(2011) / InGCS Owen (ftUS)",(-87.06, 39.16, -86.63, 39.48)),
("7343","NAD83(2011) / InGCS Parke-Vermillion (m)",(-87.54, 39.6, -87.0, 40.15)),
("7344","NAD83(2011) / InGCS Parke-Vermillion (ftUS)",(-87.54, 39.6, -87.0, 40.15)),
("7345","NAD83(2011) / InGCS Perry (m)",(-86.82, 37.84, -86.43, 38.27)),
("7346","NAD83(2011) / InGCS Perry (ftUS)",(-86.82, 37.84, -86.43, 38.27)),
("7347","NAD83(2011) / InGCS Pike-Warrick (m)",(-87.48, 37.87, -87.01, 38.56)),
("7348","NAD83(2011) / InGCS Pike-Warrick (ftUS)",(-87.48, 37.87, -87.01, 38.56)),
("7349","NAD83(2011) / InGCS Posey (m)",(-88.06, 37.77, -87.68, 38.24)),
("7350","NAD83(2011) / InGCS Posey (ftUS)",(-88.06, 37.77, -87.68, 38.24)),
("7351","NAD83(2011) / InGCS Randolph-Wayne (m)",(-85.23, 39.71, -84.8, 40.32)),
("7352","NAD83(2011) / InGCS Randolph-Wayne (ftUS)",(-85.23, 39.71, -84.8, 40.32)),
("7353","NAD83(2011) / InGCS Ripley (m)",(-85.45, 38.91, -85.06, 39.32)),
("7354","NAD83(2011) / InGCS Ripley (ftUS)",(-85.45, 38.91, -85.06, 39.32)),
("7355","NAD83(2011) / InGCS Shelby (m)",(-85.96, 39.34, -85.62, 39.7)),
("7356","NAD83(2011) / InGCS Shelby (ftUS)",(-85.96, 39.34, -85.62, 39.7)),
("7357","NAD83(2011) / InGCS Spencer (m)",(-87.27, 37.78, -86.76, 38.21)),
("7358","NAD83(2011) / InGCS Spencer (ftUS)",(-87.27, 37.78, -86.76, 38.21)),
("7359","NAD83(2011) / InGCS Steuben (m)",(-85.2, 41.52, -84.8, 41.77)),
("7360","NAD83(2011) / InGCS Steuben (ftUS)",(-85.2, 41.52, -84.8, 41.77)),
("7361","NAD83(2011) / InGCS Sullivan (m)",(-87.65, 38.9, -87.24, 39.26)),
("7362","NAD83(2011) / InGCS Sullivan (ftUS)",(-87.65, 38.9, -87.24, 39.26)),
("7363","NAD83(2011) / InGCS Tippecanoe-White (m)",(-87.1, 40.21, -86.58, 40.92)),
("7364","NAD83(2011) / InGCS Tippecanoe-White (ftUS)",(-87.1, 40.21, -86.58, 40.92)),
("7365","NAD83(2011) / InGCS Vanderburgh (m)",(-87.71, 37.82, -87.44, 38.17)),
("7366","NAD83(2011) / InGCS Vanderburgh (ftUS)",(-87.71, 37.82, -87.44, 38.17)),
("7367","NAD83(2011) / InGCS Vigo (m)",(-87.62, 39.25, -87.19, 39.61)),
("7368","NAD83(2011) / InGCS Vigo (ftUS)",(-87.62, 39.25, -87.19, 39.61)),
("7369","NAD83(2011) / InGCS Wells (m)",(-85.45, 40.56, -85.06, 40.92)),
("7370","NAD83(2011) / InGCS Wells (ftUS)",(-85.45, 40.56, -85.06, 40.92)),
("7371","ONGD14",(51.99, 14.33, 63.38, 26.74)),
("7372","ONGD14",(51.99, 14.33, 63.38, 26.74)),
("7373","ONGD14",(51.99, 14.33, 63.38, 26.74)),
("7374","ONGD14 / UTM zone 39N",(51.99, 14.94, 54.01, 19.67)),
("7375","ONGD14 / UTM zone 40N",(54.0, 14.33, 60.01, 26.74)),
("7376","ONGD14 / UTM zone 41N",(60.0, 16.37, 63.38, 24.09)),
("7400","NTF (Paris) + NGF IGN69 height",(-4.87, 42.33, 8.23, 51.14)),
("7401","NTF (Paris) / France II + NGF Lallemand",(-4.87, 42.33, 8.23, 51.14)),
("7402","NTF (Paris) / France II + NGF IGN69",(-4.87, 42.33, 8.23, 51.14)),
("7403","NTF (Paris) / France III + NGF IGN69",(-1.79, 42.33, 7.71, 45.46)),
("7404","RT90 + RH70 height",(10.93, 55.28, 24.17, 69.07)),
("7405","OSGB 1936 / British National Grid + ODN height",(-7.06, 49.93, 1.8, 58.71)),
("7406","NAD27 + NGVD29 height (ftUS)",(-124.79, 24.41, -66.91, 49.38)),
("7407","NAD27 / Texas North + NGVD29 height (ftUS)",(-103.03, 34.3, -99.99, 36.5)),
("7408","RD/NAP",(3.2, 50.75, 7.22, 53.7)),
("7409","ETRS89 + EVRF2000 height",(-9.56, 35.95, 31.59, 71.21)),
("7410","PSHD93",(51.99, 16.59, 59.91, 26.58)),
("7411","NTF (Paris) / Lambert zone II + NGF Lallemand height",(-4.87, 42.33, 8.23, 51.14)),
("7412","NTF (Paris) / Lambert zone II + NGF IGN69",(-4.87, 42.33, 8.23, 51.14)),
("7413","NTF (Paris) / Lambert zone III + NGF IGN69",(-1.79, 42.33, 7.71, 45.46)),
("7414","Tokyo + JSLD69 height",(129.3, 30.94, 142.14, 41.58)),
("7415","Amersfoort / RD New + NAP height",(3.2, 50.75, 7.22, 53.7)),
("7416","ETRS89 / UTM zone 32N + DVR90 height",(8.0, 54.51, 12.0, 57.8)),
("7417","ETRS89 / UTM zone 33N + DVR90 height",(12.0, 54.51, 15.25, 56.18)),
("7418","ETRS89 / Kp2000 Jutland + DVR90 height",(8.0, 54.67, 11.29, 57.8)),
("7419","ETRS89 / Kp2000 Zealand + DVR90 height",(10.79, 54.51, 12.69, 56.79)),
("7420","ETRS89 / Kp2000 Bornholm + DVR90 height",(14.59, 54.94, 15.25, 55.38)),
("7421","NTF (Paris) / Lambert zone II + NGF-IGN69 height",(-4.87, 42.33, 8.23, 51.14)),
("7422","NTF (Paris) / Lambert zone III + NGF-IGN69 height",(-1.79, 42.33, 7.71, 45.46)),
("7423","ETRS89 + EVRF2007 height",(-9.56, 35.95, 31.59, 71.21)),
("7446","Famagusta 1960 height",(32.2, 34.59, 34.65, 35.74)),
("7447","PNG08 height",(140.0, -12.0, 158.01, 0.01)),
("7528","NAD83(2011) / WISCRS Adams and Juneau (m)",(-90.32, 43.64, -89.59, 44.25)),
("7529","NAD83(2011) / WISCRS Ashland (m)",(-90.93, 45.98, -90.3, 47.09)),
("7530","NAD83(2011) / WISCRS Barron (m)",(-92.16, 45.2, -91.53, 45.65)),
("7531","NAD83(2011) / WISCRS Bayfield (m)",(-91.56, 46.15, -90.75, 47.01)),
("7532","NAD83(2011) / WISCRS Brown (m)",(-88.26, 44.24, -87.76, 44.68)),
("7533","NAD83(2011) / WISCRS Buffalo (m)",(-92.09, 44.02, -91.52, 44.6)),
("7534","NAD83(2011) / WISCRS Burnett (m)",(-92.89, 45.63, -92.03, 46.16)),
("7535","NAD83(2011) / WISCRS Calumet, Fond du Lac, Outagamie and Winnebago (m)",(-88.89, 43.54, -88.04, 44.6)),
("7536","NAD83(2011) / WISCRS Chippewa (m)",(-91.67, 44.85, -90.92, 45.3)),
("7537","NAD83(2011) / WISCRS Clark (m)",(-90.93, 44.42, -90.31, 45.04)),
("7538","NAD83(2011) / WISCRS Columbia (m)",(-89.79, 43.28, -89.0, 43.65)),
("7539","NAD83(2011) / WISCRS Crawford (m)",(-91.22, 42.98, -90.66, 43.43)),
("7540","NAD83(2011) / WISCRS Dane (m)",(-89.84, 42.84, -89.0, 43.3)),
("7541","NAD83(2011) / WISCRS Dodge and Jefferson (m)",(-89.02, 42.84, -88.4, 43.64)),
("7542","NAD83(2011) / WISCRS Door (m)",(-87.74, 44.67, -86.8, 45.43)),
("7543","NAD83(2011) / WISCRS Douglas (m)",(-92.3, 46.15, -91.55, 46.76)),
("7544","NAD83(2011) / WISCRS Dunn (m)",(-92.16, 44.68, -91.64, 45.21)),
("7545","NAD83(2011) / WISCRS Eau Claire (m)",(-91.66, 44.59, -90.92, 44.86)),
("7546","NAD83(2011) / WISCRS Florence (m)",(-88.69, 45.71, -88.05, 46.03)),
("7547","NAD83(2011) / WISCRS Forest (m)",(-89.05, 45.37, -88.42, 46.08)),
("7548","NAD83(2011) / WISCRS Grant (m)",(-91.16, 42.5, -90.42, 43.22)),
("7549","NAD83(2011) / WISCRS Green and Lafayette (m)",(-90.43, 42.5, -89.36, 42.86)),
("7550","NAD83(2011) / WISCRS Green Lake and Marquette (m)",(-89.6, 43.63, -88.88, 43.99)),
("7551","NAD83(2011) / WISCRS Iowa (m)",(-90.43, 42.81, -89.83, 43.21)),
("7552","NAD83(2011) / WISCRS Iron (m)",(-90.56, 45.98, -89.92, 46.6)),
("7553","NAD83(2011) / WISCRS Jackson (m)",(-91.17, 44.07, -90.31, 44.6)),
("7554","NAD83(2011) / WISCRS Kenosha, Milwaukee, Ozaukee and Racine (m)",(-88.31, 42.49, -87.75, 43.55)),
("7555","NAD83(2011) / WISCRS Kewaunee, Manitowoc and Sheboygan (m)",(-88.17, 43.54, -87.37, 44.68)),
("7556","NAD83(2011) / WISCRS La Crosse (m)",(-91.43, 43.72, -90.91, 44.1)),
("7557","NAD83(2011) / WISCRS Langlade (m)",(-89.43, 45.02, -88.63, 45.48)),
("7558","NAD83(2011) / WISCRS Lincoln (m)",(-90.05, 45.11, -89.42, 45.56)),
("7559","NAD83(2011) / WISCRS Marathon (m)",(-90.32, 44.68, -89.22, 45.13)),
("7560","NAD83(2011) / WISCRS Marinette (m)",(-88.43, 44.96, -87.48, 45.8)),
("7561","NAD83(2011) / WISCRS Menominee (m)",(-88.99, 44.85, -88.48, 45.12)),
("7562","NAD83(2011) / WISCRS Monroe (m)",(-90.98, 43.72, -90.31, 44.17)),
("7563","NAD83(2011) / WISCRS Oconto (m)",(-88.69, 44.67, -87.76, 45.38)),
("7564","NAD83(2011) / WISCRS Oneida (m)",(-90.05, 45.46, -89.04, 45.91)),
("7565","NAD83(2011) / WISCRS Pepin and Pierce (m)",(-92.81, 44.4, -91.65, 44.87)),
("7566","NAD83(2011) / WISCRS Polk (m)",(-92.89, 45.2, -92.15, 45.73)),
("7567","NAD83(2011) / WISCRS Portage (m)",(-89.85, 44.24, -89.22, 44.69)),
("7568","NAD83(2011) / WISCRS Price (m)",(-90.68, 45.37, -90.04, 45.99)),
("7569","NAD83(2011) / WISCRS Richland (m)",(-90.68, 43.16, -90.19, 43.56)),
("7570","NAD83(2011) / WISCRS Rock (m)",(-89.37, 42.49, -88.77, 42.85)),
("7571","NAD83(2011) / WISCRS Rusk (m)",(-91.55, 45.29, -90.67, 45.64)),
("7572","NAD83(2011) / WISCRS Sauk (m)",(-90.32, 43.14, -89.59, 43.65)),
("7573","NAD83(2011) / WISCRS Sawyer (m)",(-91.56, 45.63, -90.67, 46.16)),
("7574","NAD83(2011) / WISCRS Shawano (m)",(-89.23, 44.58, -88.24, 45.03)),
("7575","NAD83(2011) / WISCRS St. Croix (m)",(-92.81, 44.85, -92.13, 45.22)),
("7576","NAD83(2011) / WISCRS Taylor (m)",(-90.93, 45.03, -90.04, 45.39)),
("7577","NAD83(2011) / WISCRS Trempealeau (m)",(-91.62, 43.98, -91.15, 44.6)),
("7578","NAD83(2011) / WISCRS Vernon (m)",(-91.28, 43.42, -90.31, 43.74)),
("7579","NAD83(2011) / WISCRS Vilas (m)",(-90.05, 45.85, -88.93, 46.3)),
("7580","NAD83(2011) / WISCRS Walworth (m)",(-88.78, 42.49, -88.3, 42.85)),
("7581","NAD83(2011) / WISCRS Washburn (m)",(-92.06, 45.63, -91.54, 46.16)),
("7582","NAD83(2011) / WISCRS Washington (m)",(-88.42, 43.19, -88.03, 43.55)),
("7583","NAD83(2011) / WISCRS Waukesha (m)",(-88.55, 42.84, -88.06, 43.2)),
("7584","NAD83(2011) / WISCRS Waupaca (m)",(-89.23, 44.24, -88.6, 44.69)),
("7585","NAD83(2011) / WISCRS Waushara (m)",(-89.6, 43.98, -88.88, 44.25)),
("7586","NAD83(2011) / WISCRS Wood (m)",(-90.32, 44.24, -89.72, 44.69)),
("7587","NAD83(2011) / WISCRS Adams and Juneau (ftUS)",(-90.32, 43.64, -89.59, 44.25)),
("7588","NAD83(2011) / WISCRS Ashland (ftUS)",(-90.93, 45.98, -90.3, 47.09)),
("7589","NAD83(2011) / WISCRS Barron (ftUS)",(-92.16, 45.2, -91.53, 45.65)),
("7590","NAD83(2011) / WISCRS Bayfield (ftUS)",(-91.56, 46.15, -90.75, 47.01)),
("7591","NAD83(2011) / WISCRS Brown (ftUS)",(-88.26, 44.24, -87.76, 44.68)),
("7592","NAD83(2011) / WISCRS Buffalo (ftUS)",(-92.09, 44.02, -91.52, 44.6)),
("7593","NAD83(2011) / WISCRS Burnett (ftUS)",(-92.89, 45.63, -92.03, 46.16)),
("7594","NAD83(2011) / WISCRS Calumet, Fond du Lac, Outagamie and Winnebago (ftUS)",(-88.89, 43.54, -88.04, 44.6)),
("7595","NAD83(2011) / WISCRS Chippewa (ftUS)",(-91.67, 44.85, -90.92, 45.3)),
("7596","NAD83(2011) / WISCRS Clark (ftUS)",(-90.93, 44.42, -90.31, 45.04)),
("7597","NAD83(2011) / WISCRS Columbia (ftUS)",(-89.79, 43.28, -89.0, 43.65)),
("7598","NAD83(2011) / WISCRS Crawford (ftUS)",(-91.22, 42.98, -90.66, 43.43)),
("7599","NAD83(2011) / WISCRS Dane (ftUS)",(-89.84, 42.84, -89.0, 43.3)),
("7600","NAD83(2011) / WISCRS Dodge and Jefferson (ftUS)",(-89.02, 42.84, -88.4, 43.64)),
("7601","NAD83(2011) / WISCRS Door (ftUS)",(-87.74, 44.67, -86.8, 45.43)),
("7602","NAD83(2011) / WISCRS Douglas (ftUS)",(-92.3, 46.15, -91.55, 46.76)),
("7603","NAD83(2011) / WISCRS Dunn (ftUS)",(-92.16, 44.68, -91.64, 45.21)),
("7604","NAD83(2011) / WISCRS Eau Claire (ftUS)",(-91.66, 44.59, -90.92, 44.86)),
("7605","NAD83(2011) / WISCRS Florence (ftUS)",(-88.69, 45.71, -88.05, 46.03)),
("7606","NAD83(2011) / WISCRS Forest (ftUS)",(-89.05, 45.37, -88.42, 46.08)),
("7607","NAD83(2011) / WISCRS Grant (ftUS)",(-91.16, 42.5, -90.42, 43.22)),
("7608","NAD83(2011) / WISCRS Green and Lafayette (ftUS)",(-90.43, 42.5, -89.36, 42.86)),
("7609","NAD83(2011) / WISCRS Green Lake and Marquette (ftUS)",(-89.6, 43.63, -88.88, 43.99)),
("7610","NAD83(2011) / WISCRS Iowa (ftUS)",(-90.43, 42.81, -89.83, 43.21)),
("7611","NAD83(2011) / WISCRS Iron (ftUS)",(-90.56, 45.98, -89.92, 46.6)),
("7612","NAD83(2011) / WISCRS Jackson (ftUS)",(-91.17, 44.07, -90.31, 44.6)),
("7613","NAD83(2011) / WISCRS Kenosha, Milwaukee, Ozaukee and Racine (ftUS)",(-88.31, 42.49, -87.75, 43.55)),
("7614","NAD83(2011) / WISCRS Kewaunee, Manitowoc and Sheboygan (ftUS)",(-88.17, 43.54, -87.37, 44.68)),
("7615","NAD83(2011) / WISCRS La Crosse (ftUS)",(-91.43, 43.72, -90.91, 44.1)),
("7616","NAD83(2011) / WISCRS Langlade (ftUS)",(-89.43, 45.02, -88.63, 45.48)),
("7617","NAD83(2011) / WISCRS Lincoln (ftUS)",(-90.05, 45.11, -89.42, 45.56)),
("7618","NAD83(2011) / WISCRS Marathon (ftUS)",(-90.32, 44.68, -89.22, 45.13)),
("7619","NAD83(2011) / WISCRS Marinette (ftUS)",(-88.43, 44.96, -87.48, 45.8)),
("7620","NAD83(2011) / WISCRS Menominee (ftUS)",(-88.99, 44.85, -88.48, 45.12)),
("7621","NAD83(2011) / WISCRS Monroe (ftUS)",(-90.98, 43.72, -90.31, 44.17)),
("7622","NAD83(2011) / WISCRS Oconto (ftUS)",(-88.69, 44.67, -87.76, 45.38)),
("7623","NAD83(2011) / WISCRS Oneida (ftUS)",(-90.05, 45.46, -89.04, 45.91)),
("7624","NAD83(2011) / WISCRS Pepin and Pierce (ftUS)",(-92.81, 44.4, -91.65, 44.87)),
("7625","NAD83(2011) / WISCRS Polk (ftUS)",(-92.89, 45.2, -92.15, 45.73)),
("7626","NAD83(2011) / WISCRS Portage (ftUS)",(-89.85, 44.24, -89.22, 44.69)),
("7627","NAD83(2011) / WISCRS Price (ftUS)",(-90.68, 45.37, -90.04, 45.99)),
("7628","NAD83(2011) / WISCRS Richland (ftUS)",(-90.68, 43.16, -90.19, 43.56)),
("7629","NAD83(2011) / WISCRS Rock (ftUS)",(-89.37, 42.49, -88.77, 42.85)),
("7630","NAD83(2011) / WISCRS Rusk (ftUS)",(-91.55, 45.29, -90.67, 45.64)),
("7631","NAD83(2011) / WISCRS Sauk (ftUS)",(-90.32, 43.14, -89.59, 43.65)),
("7632","NAD83(2011) / WISCRS Sawyer (ftUS)",(-91.56, 45.63, -90.67, 46.16)),
("7633","NAD83(2011) / WISCRS Shawano (ftUS)",(-89.23, 44.58, -88.24, 45.03)),
("7634","NAD83(2011) / WISCRS St. Croix (ftUS)",(-92.81, 44.85, -92.13, 45.22)),
("7635","NAD83(2011) / WISCRS Taylor (ftUS)",(-90.93, 45.03, -90.04, 45.39)),
("7636","NAD83(2011) / WISCRS Trempealeau (ftUS)",(-91.62, 43.98, -91.15, 44.6)),
("7637","NAD83(2011) / WISCRS Vernon (ftUS)",(-91.28, 43.42, -90.31, 43.74)),
("7638","NAD83(2011) / WISCRS Vilas (ftUS)",(-90.05, 45.85, -88.93, 46.3)),
("7639","NAD83(2011) / WISCRS Walworth (ftUS)",(-88.78, 42.49, -88.3, 42.85)),
("7640","NAD83(2011) / WISCRS Washburn (ftUS)",(-92.06, 45.63, -91.54, 46.16)),
("7641","NAD83(2011) / WISCRS Washington (ftUS)",(-88.42, 43.19, -88.03, 43.55)),
("7642","NAD83(2011) / WISCRS Waukesha (ftUS)",(-88.55, 42.84, -88.06, 43.2)),
("7643","NAD83(2011) / WISCRS Waupaca (ftUS)",(-89.23, 44.24, -88.6, 44.69)),
("7644","NAD83(2011) / WISCRS Waushara (ftUS)",(-89.6, 43.98, -88.88, 44.25)),
("7645","NAD83(2011) / WISCRS Wood (ftUS)",(-90.32, 44.24, -89.72, 44.69)),
("7651","Kumul 34 height",(142.24, -8.28, 144.75, -5.59)),
("7652","Kiunga height",(140.85, -9.35, 144.01, -5.0)),
("7656","WGS 84 (G730)",(-180.0, -90.0, 180.0, 90.0)),
("7657","WGS 84 (G730)",(-180.0, -90.0, 180.0, 90.0)),
("7658","WGS 84 (G873)",(-180.0, -90.0, 180.0, 90.0)),
("7659","WGS 84 (G873)",(-180.0, -90.0, 180.0, 90.0)),
("7660","WGS 84 (G1150)",(-180.0, -90.0, 180.0, 90.0)),
("7661","WGS 84 (G1150)",(-180.0, -90.0, 180.0, 90.0)),
("7662","WGS 84 (G1674)",(-180.0, -90.0, 180.0, 90.0)),
("7663","WGS 84 (G1674)",(-180.0, -90.0, 180.0, 90.0)),
("7664","WGS 84 (G1762)",(-180.0, -90.0, 180.0, 90.0)),
("7665","WGS 84 (G1762)",(-180.0, -90.0, 180.0, 90.0)),
("7677","PZ-90.02",(-180.0, -90.0, 180.0, 90.0)),
("7678","PZ-90.02",(-180.0, -90.0, 180.0, 90.0)),
("7679","PZ-90.11",(-180.0, -90.0, 180.0, 90.0)),
("7680","PZ-90.11",(-180.0, -90.0, 180.0, 90.0)),
("7681","GSK-2011",(18.92, 39.87, -168.97, 85.2)),
("7682","GSK-2011",(18.92, 39.87, -168.97, 85.2)),
("7683","GSK-2011",(18.92, 39.87, -168.97, 85.2)),
("7684","Kyrg-06",(69.24, 39.19, 80.29, 43.22)),
("7685","Kyrg-06",(69.24, 39.19, 80.29, 43.22)),
("7686","Kyrg-06",(69.24, 39.19, 80.29, 43.22)),
("7692","Kyrg-06 / zone 1",(69.24, 39.51, 70.02, 40.22)),
("7693","Kyrg-06 / zone 2",(70.01, 39.19, 73.02, 42.83)),
("7694","Kyrg-06 / zone 3",(73.01, 39.35, 76.02, 43.22)),
("7695","Kyrg-06 / zone 4",(76.01, 40.35, 79.02, 43.0)),
("7696","Kyrg-06 / zone 5",(79.01, 41.66, 80.29, 42.8)),
("7699","DHHN12 height",(5.86, 47.27, 15.04, 55.09)),
("7700","Latvia 2000 height",(20.87, 55.67, 28.24, 58.09)),
("7707","ODN (Offshore) height",(-9.0, 49.75, 2.01, 61.01)),
("7755","WGS 84 / India NSF LCC",(65.6, 3.87, 97.42, 35.51)),
("7756","WGS 84 / Andhra Pradesh",(76.75, 12.61, 84.81, 19.92)),
("7757","WGS 84 / Arunachal Pradesh",(91.55, 26.65, 97.42, 29.47)),
("7758","WGS 84 / Assam",(89.69, 24.13, 96.03, 27.98)),
("7759","WGS 84 / Bihar",(83.31, 24.28, 88.3, 27.86)),
("7760","WGS 84 / Delhi",(76.83, 28.4, 77.34, 28.89)),
("7761","WGS 84 / Gujarat",(68.13, 20.05, 74.48, 24.71)),
("7762","WGS 84 / Haryana",(74.46, 27.65, 77.6, 30.94)),
("7763","WGS 84 / Himachal Pradesh",(75.57, 30.38, 79.0, 33.26)),
("7764","WGS 84 / Jammu and Kashmir",(73.76, 32.27, 79.57, 35.51)),
("7765","WGS 84 / Jharkhand",(83.32, 21.96, 87.98, 25.35)),
("7766","WGS 84 / Madhya Pradesh",(74.03, 21.07, 82.81, 26.88)),
("7767","WGS 84 / Maharashtra",(72.6, 15.6, 80.9, 22.04)),
("7768","WGS 84 / Manipur",(92.97, 23.84, 94.76, 25.7)),
("7769","WGS 84 / Meghalaya",(89.82, 25.03, 92.81, 26.12)),
("7770","WGS 84 / Nagaland",(93.33, 25.2, 95.25, 27.05)),
("7771","WGS 84 / India Northeast",(89.69, 21.94, 97.42, 29.47)),
("7772","WGS 84 / Orissa",(81.38, 17.8, 87.5, 22.57)),
("7773","WGS 84 / Punjab",(73.87, 29.54, 76.94, 32.58)),
("7774","WGS 84 / Rajasthan",(69.48, 23.06, 78.27, 30.2)),
("7775","WGS 84 / Uttar Pradesh",(77.08, 23.87, 84.64, 30.42)),
("7776","WGS 84 / Uttaranchal",(77.56, 28.71, 81.02, 31.48)),
("7777","WGS 84 / Andaman and Nicobar",(92.15, 6.7, 94.33, 13.73)),
("7778","WGS 84 / Chhattisgarh",(80.23, 17.78, 84.39, 24.11)),
("7779","WGS 84 / Goa",(73.61, 14.86, 74.35, 15.8)),
("7780","WGS 84 / Karnataka",(74.0, 11.57, 78.58, 18.46)),
("7781","WGS 84 / Kerala",(74.81, 8.25, 77.4, 12.8)),
("7782","WGS 84 / Lakshadweep",(72.04, 8.21, 73.76, 11.76)),
("7783","WGS 84 / Mizoram",(92.25, 21.94, 93.45, 24.53)),
("7784","WGS 84 / Sikkim",(88.01, 27.08, 88.92, 28.14)),
("7785","WGS 84 / Tamil Nadu",(76.22, 8.02, 80.4, 13.59)),
("7786","WGS 84 / Tripura",(91.15, 22.94, 92.34, 24.54)),
("7787","WGS 84 / West Bengal",(85.82, 21.49, 89.88, 27.23)),
("7789","ITRF2014",(-180.0, -90.0, 180.0, 90.0)),
("7791","RDN2008 / UTM zone 32N",(5.94, 36.53, 12.0, 47.04)),
("7792","RDN2008 / UTM zone 33N",(12.0, 34.79, 18.0, 47.1)),
("7793","RDN2008 / UTM zone 34N",(17.99, 34.76, 18.99, 41.64)),
("7794","RDN2008 / Italy zone (E-N)",(5.93, 34.76, 18.99, 47.1)),
("7795","RDN2008 / Zone 12 (E-N)",(5.93, 34.76, 18.99, 47.1)),
("7796","BGS2005",(22.36, 41.24, 31.35, 44.23)),
("7797","BGS2005",(22.36, 41.24, 31.35, 44.23)),
("7798","BGS2005",(22.36, 41.24, 31.35, 44.23)),
("7799","BGS2005 / UTM zone 34N (N-E)",(22.36, 41.32, 24.0, 44.23)),
("7800","BGS2005 / UTM zone 35N (N-E)",(24.0, 41.24, 30.01, 44.15)),
("7801","BGS2005 / CCS2005",(22.36, 41.24, 28.68, 44.23)),
("7803","BGS2005 / UTM zone 34N",(22.36, 41.32, 24.0, 44.23)),
("7804","BGS2005 / UTM zone 35N",(24.0, 41.24, 30.01, 44.15)),
("7805","BGS2005 / UTM zone 36N",(30.0, 42.56, 31.35, 43.67)),
("7815","WGS 84 (Transit)",(-180.0, -90.0, 180.0, 90.0)),
("7816","WGS 84 (Transit)",(-180.0, -90.0, 180.0, 90.0)),
("7825","Pulkovo 1942 / CS63 zone X1",(22.15, 47.71, 25.01, 51.92)),
("7826","Pulkovo 1942 / CS63 zone X2",(25.0, 47.72, 28.01, 51.96)),
("7827","Pulkovo 1942 / CS63 zone X3",(28.0, 45.18, 31.01, 52.09)),
("7828","Pulkovo 1942 / CS63 zone X4",(31.0, 44.32, 34.01, 52.38)),
("7829","Pulkovo 1942 / CS63 zone X5",(34.0, 44.33, 37.01, 52.25)),
("7830","Pulkovo 1942 / CS63 zone X6",(37.0, 46.8, 40.01, 50.44)),
("7831","Pulkovo 1942 / CS63 zone X7",(40.0, 48.8, 40.18, 49.62)),
("7832","POM96 height",(144.4, -10.42, 149.67, -6.67)),
("7837","DHHN2016 height",(5.86, 47.27, 15.04, 55.09)),
("7839","NZVD2016 height",(160.6, -55.95, -171.2, -25.88)),
("7841","POM08 height",(144.4, -10.42, 149.67, -6.67)),
("7842","GDA2020",(93.41, -60.56, 173.35, -8.47)),
("7843","GDA2020",(93.41, -60.56, 173.35, -8.47)),
("7844","GDA2020",(93.41, -60.56, 173.35, -8.47)),
("7845","GDA2020 / GA LCC",(112.85, -43.7, 153.69, -9.86)),
("7846","GDA2020 / MGA zone 46",(93.41, -15.46, 96.01, -8.57)),
("7847","GDA2020 / MGA zone 47",(96.0, -15.56, 100.34, -8.47)),
("7848","GDA2020 / MGA zone 48",(102.14, -34.68, 108.01, -8.87)),
("7849","GDA2020 / MGA zone 49",(108.0, -37.84, 114.01, -10.72)),
("7850","GDA2020 / MGA zone 50",(114.0, -38.53, 120.01, -12.06)),
("7851","GDA2020 / MGA zone 51",(120.0, -38.07, 126.01, -10.46)),
("7852","GDA2020 / MGA zone 52",(125.99, -37.38, 132.0, -9.1)),
("7853","GDA2020 / MGA zone 53",(132.0, -40.71, 138.01, -8.88)),
("7854","GDA2020 / MGA zone 54",(138.0, -48.19, 144.01, -9.08)),
("7855","GDA2020 / MGA zone 55",(144.0, -50.89, 150.01, -9.23)),
("7856","GDA2020 / MGA zone 56",(150.0, -58.96, 156.0, -13.87)),
("7857","GDA2020 / MGA zone 57",(156.0, -60.56, 162.01, -14.08)),
("7858","GDA2020 / MGA zone 58",(162.0, -59.39, 168.0, -25.94)),
("7859","GDA2020 / MGA zone 59",(168.0, -32.48, 173.35, -25.61)),
("7877","Astro DOS 71 / SHLG71",(-5.85, -16.08, -5.58, -15.85)),
("7878","Astro DOS 71 / UTM zone 30S",(-5.85, -16.08, -5.58, -15.85)),
("7879","St. Helena Tritan",(-5.85, -16.08, -5.58, -15.85)),
("7880","St. Helena Tritan",(-5.85, -16.08, -5.58, -15.85)),
("7881","St. Helena Tritan",(-5.85, -16.08, -5.58, -15.85)),
("7882","St. Helena Tritan / SHLG(Tritan)",(-5.85, -16.08, -5.58, -15.85)),
("7883","St. Helena Tritan / UTM zone 30S",(-5.85, -16.08, -5.58, -15.85)),
("7884","SHGD2015",(-5.85, -16.08, -5.58, -15.85)),
("7885","SHGD2015",(-5.85, -16.08, -5.58, -15.85)),
("7886","SHGD2015",(-5.85, -16.08, -5.58, -15.85)),
("7887","SHMG2015",(-5.85, -16.08, -5.58, -15.85)),
("7888","Jamestown 1971 height",(-5.85, -16.08, -5.58, -15.85)),
("7889","St. Helena Tritan 2011 height",(-5.85, -16.08, -5.58, -15.85)),
("7890","SHVD2015 height",(-5.85, -16.08, -5.58, -15.85)),
("7899","GDA2020 / Vicgrid",(140.96, -39.2, 150.04, -33.98)),
("7900","ITRF88",(-180.0, -90.0, 180.0, 90.0)),
("7901","ITRF89",(-180.0, -90.0, 180.0, 90.0)),
("7902","ITRF90",(-180.0, -90.0, 180.0, 90.0)),
("7903","ITRF91",(-180.0, -90.0, 180.0, 90.0)),
("7904","ITRF92",(-180.0, -90.0, 180.0, 90.0)),
("7905","ITRF93",(-180.0, -90.0, 180.0, 90.0)),
("7906","ITRF94",(-180.0, -90.0, 180.0, 90.0)),
("7907","ITRF96",(-180.0, -90.0, 180.0, 90.0)),
("7908","ITRF97",(-180.0, -90.0, 180.0, 90.0)),
("7909","ITRF2000",(-180.0, -90.0, 180.0, 90.0)),
("7910","ITRF2005",(-180.0, -90.0, 180.0, 90.0)),
("7911","ITRF2008",(-180.0, -90.0, 180.0, 90.0)),
("7912","ITRF2014",(-180.0, -90.0, 180.0, 90.0)),
("7914","ETRF89",(-16.1, 32.88, 40.18, 84.17)),
("7915","ETRF89",(-16.1, 32.88, 40.18, 84.17)),
("7916","ETRF90",(-16.1, 32.88, 40.18, 84.17)),
("7917","ETRF90",(-16.1, 32.88, 40.18, 84.17)),
("7918","ETRF91",(-16.1, 32.88, 40.18, 84.17)),
("7919","ETRF91",(-16.1, 32.88, 40.18, 84.17)),
("7920","ETRF92",(-16.1, 32.88, 40.18, 84.17)),
("7921","ETRF92",(-16.1, 32.88, 40.18, 84.17)),
("7922","ETRF93",(-16.1, 32.88, 40.18, 84.17)),
("7923","ETRF93",(-16.1, 32.88, 40.18, 84.17)),
("7924","ETRF94",(-16.1, 32.88, 40.18, 84.17)),
("7925","ETRF94",(-16.1, 32.88, 40.18, 84.17)),
("7926","ETRF96",(-16.1, 32.88, 40.18, 84.17)),
("7927","ETRF96",(-16.1, 32.88, 40.18, 84.17)),
("7928","ETRF97",(-16.1, 32.88, 40.18, 84.17)),
("7929","ETRF97",(-16.1, 32.88, 40.18, 84.17)),
("7930","ETRF2000",(-16.1, 32.88, 40.18, 84.17)),
("7931","ETRF2000",(-16.1, 32.88, 40.18, 84.17)),
("7954","Astro DOS 71 / UTM zone 30S + Jamestown 1971 height",(-5.85, -16.08, -5.58, -15.85)),
("7955","St. Helena Tritan / UTM zone 30S +  Tritan 2011 height",(-5.85, -16.08, -5.58, -15.85)),
("7956","SHMG2015 +  SHVD2015 height",(-5.85, -16.08, -5.58, -15.85)),
("7962","Poolbeg height (m)",(-10.56, 51.39, -5.34, 55.43)),
("7968","NGVD29 height (m)",(-124.79, 24.41, -66.91, 49.38)),
("7976","HKPD depth",(113.82, 22.19, 114.39, 22.56)),
("7979","KOC WD height",(46.54, 28.53, 48.48, 30.09)),
("7991","NAD27 / MTM zone 10",(-81.0, 42.26, -77.99, 47.33)),
("7992","Malongo 1987 / UTM zone 33S",(11.79, -6.04, 12.37, -5.79)),
("8013","GDA2020 / ALB2020",(117.55, -35.21, 118.22, -34.75)),
("8014","GDA2020 / BIO2020",(114.9, -22.2, 115.59, -20.21)),
("8015","GDA2020 / BRO2020",(122.08, -18.09, 122.62, -16.75)),
("8016","GDA2020 / BCG2020",(115.18, -33.75, 115.87, -33.4)),
("8017","GDA2020 / CARN2020",(113.33, -25.5, 114.0, -23.0)),
("8018","GDA2020 / CIG2020",(105.48, -10.63, 105.77, -10.36)),
("8019","GDA2020 / CKIG2020",(96.76, -12.27, 96.99, -11.76)),
("8020","GDA2020 / COL2020",(115.73, -34.67, 116.4, -33.25)),
("8021","GDA2020 / ESP2020",(121.56, -34.5, 122.2, -33.33)),
("8022","GDA2020 / EXM2020",(113.75, -22.42, 114.25, -21.75)),
("8023","GDA2020 / GCG2020",(114.51, -29.1, 115.0, -28.48)),
("8024","GDA2020 / GOLD2020",(121.0, -32.25, 121.84, -28.75)),
("8025","GDA2020 / JCG2020",(114.83, -30.74, 115.34, -29.08)),
("8026","GDA2020 / KALB2020",(113.9, -28.5, 114.75, -27.16)),
("8027","GDA2020 / KAR2020",(116.58, -20.92, 117.25, -20.25)),
("8028","GDA2020 / KUN2020",(128.5, -16.75, 129.0, -14.75)),
("8029","GDA2020 / LCG2020",(115.15, -31.49, 115.62, -30.71)),
("8030","GDA2020 / MRCG2020",(114.96, -34.42, 115.24, -33.51)),
("8031","GDA2020 / PCG2020",(115.44, -33.42, 116.09, -31.33)),
("8032","GDA2020 / PHG2020",(118.25, -20.79, 118.97, -20.1)),
("8035","WGS 84 / TM Zone 20N (ftUS)",(-62.09, 9.83, -59.99, 12.34)),
("8036","WGS 84 / TM Zone 21N (ftUS)",(-60.0, 9.95, -57.28, 12.19)),
("8042","Gusterberg (Ferro)",(12.07, 46.93, 16.83, 51.06)),
("8043","St. Stephen (Ferro)",(14.41, 47.42, 18.86, 50.45)),
("8044","Gusterberg Grid (Ferro)",(12.07, 46.93, 16.83, 51.06)),
("8045","St. Stephen Grid (Ferro)",(14.41, 47.42, 18.86, 50.45)),
("8050","MSL height (ft)",(-180.0, -90.0, 180.0, 90.0)),
("8051","MSL depth (ft)",(-180.0, -90.0, 180.0, 90.0)),
("8052","MSL height (ftUS)",(167.65, 15.56, -65.69, 74.71)),
("8053","MSL depth (ftUS)",(167.65, 15.56, -65.69, 74.71)),
("8058","GDA2020 / NSW Lambert",(140.99, -37.53, 153.69, -28.15)),
("8059","GDA2020 / SA Lambert",(128.99, -38.13, 141.01, -25.99)),
("8065","NAD83(2011) / PCCS zone 1 (ft)",(-111.57, 31.43, -110.44, 32.52)),
("8066","NAD83(2011) / PCCS zone 2 (ft)",(-112.52, 31.5, -111.56, 32.51)),
("8067","NAD83(2011) / PCCS zone 3 (ft)",(-113.33, 31.8, -112.51, 32.51)),
("8068","NAD83(2011) / PCCS zone 4 (ft)",(-110.87, 32.33, -110.61, 32.49)),
("8082","NAD83(CSRS)v6 / MTM Nova Scotia zone 4",(-63.0, 44.64, -59.73, 47.08)),
("8083","NAD83(CSRS)v6 / MTM Nova Scotia zone 5",(-66.28, 43.41, -63.0, 46.02)),
("8084","ISN2016",(-30.87, 59.96, -5.55, 69.59)),
("8085","ISN2016",(-30.87, 59.96, -5.55, 69.59)),
("8086","ISN2016",(-30.87, 59.96, -5.55, 69.59)),
("8088","ISN2016 / Lambert 2016",(-30.87, 59.96, -5.55, 69.59)),
("8089","ISH2004 height",(-24.66, 63.34, -13.38, 66.59)),
("8090","NAD83(HARN) / WISCRS Florence (m)",(-88.69, 45.71, -88.05, 46.03)),
("8091","NAD83(HARN) / WISCRS Florence (ftUS)",(-88.69, 45.71, -88.05, 46.03)),
("8092","NAD83(HARN) / WISCRS Eau Claire (m)",(-91.66, 44.59, -90.92, 44.86)),
("8093","NAD83(HARN) / WISCRS Eau Claire (ftUS)",(-91.66, 44.59, -90.92, 44.86)),
("8095","NAD83(HARN) / WISCRS Wood (m)",(-90.32, 44.24, -89.72, 44.69)),
("8096","NAD83(HARN) / WISCRS Wood (ftUS)",(-90.32, 44.24, -89.72, 44.69)),
("8097","NAD83(HARN) / WISCRS Waushara (m)",(-89.6, 43.98, -88.88, 44.25)),
("8098","NAD83(HARN) / WISCRS Waushara (ftUS)",(-89.6, 43.98, -88.88, 44.25)),
("8099","NAD83(HARN) / WISCRS Waupaca (m)",(-89.23, 44.24, -88.6, 44.69)),
("8100","NAD83(HARN) / WISCRS Waupaca (ftUS)",(-89.23, 44.24, -88.6, 44.69)),
("8101","NAD83(HARN) / WISCRS Waukesha (m)",(-88.55, 42.84, -88.06, 43.2)),
("8102","NAD83(HARN) / WISCRS Waukesha (ftUS)",(-88.55, 42.84, -88.06, 43.2)),
("8103","NAD83(HARN) / WISCRS Washington (m)",(-88.42, 43.19, -88.03, 43.55)),
("8104","NAD83(HARN) / WISCRS Washington (ftUS)",(-88.42, 43.19, -88.03, 43.55)),
("8105","NAD83(HARN) / WISCRS Washburn (m)",(-92.06, 45.63, -91.54, 46.16)),
("8106","NAD83(HARN) / WISCRS Washburn (ftUS)",(-92.06, 45.63, -91.54, 46.16)),
("8107","NAD83(HARN) / WISCRS Walworth (m)",(-88.78, 42.49, -88.3, 42.85)),
("8108","NAD83(HARN) / WISCRS Walworth (ftUS)",(-88.78, 42.49, -88.3, 42.85)),
("8109","NAD83(HARN) / WISCRS Vilas (m)",(-90.05, 45.85, -88.93, 46.3)),
("8110","NAD83(HARN) / WISCRS Vilas (ftUS)",(-90.05, 45.85, -88.93, 46.3)),
("8111","NAD83(HARN) / WISCRS Vernon (m)",(-91.28, 43.42, -90.31, 43.74)),
("8112","NAD83(HARN) / WISCRS Vernon (ftUS)",(-91.28, 43.42, -90.31, 43.74)),
("8113","NAD83(HARN) / WISCRS Trempealeau (m)",(-91.62, 43.98, -91.15, 44.6)),
("8114","NAD83(HARN) / WISCRS Trempealeau (ftUS)",(-91.62, 43.98, -91.15, 44.6)),
("8115","NAD83(HARN) / WISCRS Taylor (m)",(-90.93, 45.03, -90.04, 45.39)),
("8116","NAD83(HARN) / WISCRS Taylor (ftUS)",(-90.93, 45.03, -90.04, 45.39)),
("8117","NAD83(HARN) / WISCRS St. Croix (m)",(-92.81, 44.85, -92.13, 45.22)),
("8118","NAD83(HARN) / WISCRS St. Croix (ftUS)",(-92.81, 44.85, -92.13, 45.22)),
("8119","NAD83(HARN) / WISCRS Shawano (m)",(-89.23, 44.58, -88.24, 45.03)),
("8120","NAD83(HARN) / WISCRS Shawano (ftUS)",(-89.23, 44.58, -88.24, 45.03)),
("8121","NAD83(HARN) / WISCRS Sawyer (m)",(-91.56, 45.63, -90.67, 46.16)),
("8122","NAD83(HARN) / WISCRS Sawyer (ftUS)",(-91.56, 45.63, -90.67, 46.16)),
("8123","NAD83(HARN) / WISCRS Sauk (m)",(-90.32, 43.14, -89.59, 43.65)),
("8124","NAD83(HARN) / WISCRS Sauk (ftUS)",(-90.32, 43.14, -89.59, 43.65)),
("8125","NAD83(HARN) / WISCRS Rusk (m)",(-91.55, 45.29, -90.67, 45.64)),
("8126","NAD83(HARN) / WISCRS Rusk (ftUS)",(-91.55, 45.29, -90.67, 45.64)),
("8127","NAD83(HARN) / WISCRS Rock (m)",(-89.37, 42.49, -88.77, 42.85)),
("8128","NAD83(HARN) / WISCRS Rock (ftUS)",(-89.37, 42.49, -88.77, 42.85)),
("8129","NAD83(HARN) / WISCRS Richland (m)",(-90.68, 43.16, -90.19, 43.56)),
("8130","NAD83(HARN) / WISCRS Richland (ftUS)",(-90.68, 43.16, -90.19, 43.56)),
("8131","NAD83(HARN) / WISCRS Price (m)",(-90.68, 45.37, -90.04, 45.99)),
("8132","NAD83(HARN) / WISCRS Price (ftUS)",(-90.68, 45.37, -90.04, 45.99)),
("8133","NAD83(HARN) / WISCRS Portage (m)",(-89.85, 44.24, -89.22, 44.69)),
("8134","NAD83(HARN) / WISCRS Portage (ftUS)",(-89.85, 44.24, -89.22, 44.69)),
("8135","NAD83(HARN) / WISCRS Polk (m)",(-92.89, 45.2, -92.15, 45.73)),
("8136","NAD83(HARN) / WISCRS Polk (ftUS)",(-92.89, 45.2, -92.15, 45.73)),
("8137","NAD83(HARN) / WISCRS Pepin and Pierce (m)",(-92.81, 44.4, -91.65, 44.87)),
("8138","NAD83(HARN) / WISCRS Pepin and Pierce (ftUS)",(-92.81, 44.4, -91.65, 44.87)),
("8139","NAD83(HARN) / WISCRS Oneida (m)",(-90.05, 45.46, -89.04, 45.91)),
("8140","NAD83(HARN) / WISCRS Oneida (ftUS)",(-90.05, 45.46, -89.04, 45.91)),
("8141","NAD83(HARN) / WISCRS Oconto (m)",(-88.69, 44.67, -87.76, 45.38)),
("8142","NAD83(HARN) / WISCRS Oconto (ftUS)",(-88.69, 44.67, -87.76, 45.38)),
("8143","NAD83(HARN) / WISCRS Monroe (m)",(-90.98, 43.72, -90.31, 44.17)),
("8144","NAD83(HARN) / WISCRS Monroe (ftUS)",(-90.98, 43.72, -90.31, 44.17)),
("8145","NAD83(HARN) / WISCRS Menominee (m)",(-88.99, 44.85, -88.48, 45.12)),
("8146","NAD83(HARN) / WISCRS Menominee (ftUS)",(-88.99, 44.85, -88.48, 45.12)),
("8147","NAD83(HARN) / WISCRS Marinette (m)",(-88.43, 44.96, -87.48, 45.8)),
("8148","NAD83(HARN) / WISCRS Marinette (ftUS)",(-88.43, 44.96, -87.48, 45.8)),
("8149","NAD83(HARN) / WISCRS Marathon (m)",(-90.32, 44.68, -89.22, 45.13)),
("8150","NAD83(HARN) / WISCRS Marathon (ftUS)",(-90.32, 44.68, -89.22, 45.13)),
("8151","NAD83(HARN) / WISCRS Lincoln (m)",(-90.05, 45.11, -89.42, 45.56)),
("8152","NAD83(HARN) / WISCRS Lincoln (ftUS)",(-90.05, 45.11, -89.42, 45.56)),
("8153","NAD83(HARN) / WISCRS Langlade (m)",(-89.43, 45.02, -88.63, 45.48)),
("8154","NAD83(HARN) / WISCRS Langlade (ftUS)",(-89.43, 45.02, -88.63, 45.48)),
("8155","NAD83(HARN) / WISCRS La Crosse (m)",(-91.43, 43.72, -90.91, 44.1)),
("8156","NAD83(HARN) / WISCRS La Crosse (ftUS)",(-91.43, 43.72, -90.91, 44.1)),
("8157","NAD83(HARN) / WISCRS Kewaunee, Manitowoc and Sheboygan (m)",(-88.17, 43.54, -87.37, 44.68)),
("8158","NAD83(HARN) / WISCRS Kewaunee, Manitowoc and Sheboygan (ftUS)",(-88.17, 43.54, -87.37, 44.68)),
("8159","NAD83(HARN) / WISCRS Kenosha, Milwaukee, Ozaukee and Racine (m)",(-88.31, 42.49, -87.75, 43.55)),
("8160","NAD83(HARN) / WISCRS Kenosha, Milwaukee, Ozaukee and Racine (ftUS)",(-88.31, 42.49, -87.75, 43.55)),
("8161","NAD83(HARN) / WISCRS Jackson (m)",(-91.17, 44.07, -90.31, 44.6)),
("8162","NAD83(HARN) / WISCRS Jackson (ftUS)",(-91.17, 44.07, -90.31, 44.6)),
("8163","NAD83(HARN) / WISCRS Iron (m)",(-90.56, 45.98, -89.92, 46.6)),
("8164","NAD83(HARN) / WISCRS Iron (ftUS)",(-90.56, 45.98, -89.92, 46.6)),
("8165","NAD83(HARN) / WISCRS Iowa (m)",(-90.43, 42.81, -89.83, 43.21)),
("8166","NAD83(HARN) / WISCRS Iowa (ftUS)",(-90.43, 42.81, -89.83, 43.21)),
("8167","NAD83(HARN) / WISCRS Green Lake and Marquette (m)",(-89.6, 43.63, -88.88, 43.99)),
("8168","NAD83(HARN) / WISCRS Green Lake and Marquette (ftUS)",(-89.6, 43.63, -88.88, 43.99)),
("8169","NAD83(HARN) / WISCRS Green and Lafayette (m)",(-90.43, 42.5, -89.36, 42.86)),
("8170","NAD83(HARN) / WISCRS Green and Lafayette (ftUS)",(-90.43, 42.5, -89.36, 42.86)),
("8171","NAD83(HARN) / WISCRS Grant (m)",(-91.16, 42.5, -90.42, 43.22)),
("8172","NAD83(HARN) / WISCRS Grant (ftUS)",(-91.16, 42.5, -90.42, 43.22)),
("8173","NAD83(HARN) / WISCRS Forest (m)",(-89.05, 45.37, -88.42, 46.08)),
("8177","NAD83(HARN) / WISCRS Forest (ftUS)",(-89.05, 45.37, -88.42, 46.08)),
("8179","NAD83(HARN) / WISCRS Dunn (m)",(-92.16, 44.68, -91.64, 45.21)),
("8180","NAD83(HARN) / WISCRS Dunn (ftUS)",(-92.16, 44.68, -91.64, 45.21)),
("8181","NAD83(HARN) / WISCRS Douglas (m)",(-92.3, 46.15, -91.55, 46.76)),
("8182","NAD83(HARN) / WISCRS Douglas (ftUS)",(-92.3, 46.15, -91.55, 46.76)),
("8184","NAD83(HARN) / WISCRS Door (m)",(-87.74, 44.67, -86.8, 45.43)),
("8185","NAD83(HARN) / WISCRS Door (ftUS)",(-87.74, 44.67, -86.8, 45.43)),
("8187","NAD83(HARN) / WISCRS Dodge and Jefferson (m)",(-89.02, 42.84, -88.4, 43.64)),
("8189","NAD83(HARN) / WISCRS Dodge and Jefferson (ftUS)",(-89.02, 42.84, -88.4, 43.64)),
("8191","NAD83(HARN) / WISCRS Dane (m)",(-89.84, 42.84, -89.0, 43.3)),
("8193","NAD83(HARN) / WISCRS Dane (ftUS)",(-89.84, 42.84, -89.0, 43.3)),
("8196","NAD83(HARN) / WISCRS Crawford (m)",(-91.22, 42.98, -90.66, 43.43)),
("8197","NAD83(HARN) / WISCRS Crawford (ftUS)",(-91.22, 42.98, -90.66, 43.43)),
("8198","NAD83(HARN) / WISCRS Columbia (m)",(-89.79, 43.28, -89.0, 43.65)),
("8200","NAD83(HARN) / WISCRS Columbia (ftUS)",(-89.79, 43.28, -89.0, 43.65)),
("8201","NAD83(HARN) / WISCRS Clark (m)",(-90.93, 44.42, -90.31, 45.04)),
("8202","NAD83(HARN) / WISCRS Clark (ftUS)",(-90.93, 44.42, -90.31, 45.04)),
("8203","NAD83(HARN) / WISCRS Chippewa (m)",(-91.67, 44.85, -90.92, 45.3)),
("8204","NAD83(HARN) / WISCRS Chippewa (ftUS)",(-91.67, 44.85, -90.92, 45.3)),
("8205","NAD83(HARN) / WISCRS Calumet, Fond du Lac, Outagamie and Winnebago (m)",(-88.89, 43.54, -88.04, 44.6)),
("8206","NAD83(HARN) / WISCRS Calumet, Fond du Lac, Outagamie and Winnebago (ftUS)",(-88.89, 43.54, -88.04, 44.6)),
("8207","NAD83(HARN) / WISCRS Burnett (m)",(-92.89, 45.63, -92.03, 46.16)),
("8208","NAD83(HARN) / WISCRS Burnett (ftUS)",(-92.89, 45.63, -92.03, 46.16)),
("8209","NAD83(HARN) / WISCRS Buffalo (m)",(-92.09, 44.02, -91.52, 44.6)),
("8210","NAD83(HARN) / WISCRS Buffalo (ftUS)",(-92.09, 44.02, -91.52, 44.6)),
("8212","NAD83(HARN) / WISCRS Brown (m)",(-88.26, 44.24, -87.76, 44.68)),
("8213","NAD83(HARN) / WISCRS Brown (ftUS)",(-88.26, 44.24, -87.76, 44.68)),
("8214","NAD83(HARN) / WISCRS Bayfield (m)",(-91.56, 46.15, -90.75, 47.01)),
("8216","NAD83(HARN) / WISCRS Bayfield (ftUS)",(-91.56, 46.15, -90.75, 47.01)),
("8218","NAD83(HARN) / WISCRS Barron (m)",(-92.16, 45.2, -91.53, 45.65)),
("8220","NAD83(HARN) / WISCRS Barron (ftUS)",(-92.16, 45.2, -91.53, 45.65)),
("8222","NAD83(HARN) / WISCRS Ashland (m)",(-90.93, 45.98, -90.3, 47.09)),
("8224","NAD83(HARN) / WISCRS Ashland (ftUS)",(-90.93, 45.98, -90.3, 47.09)),
("8225","NAD83(HARN) / WISCRS Adams and Juneau (m)",(-90.32, 43.64, -89.59, 44.25)),
("8226","NAD83(HARN) / WISCRS Adams and Juneau (ftUS)",(-90.32, 43.64, -89.59, 44.25)),
("8227","IGS14",(-180.0, -90.0, 180.0, 90.0)),
("8228","NAVD88 height (ft)",(-124.6, 31.33, -78.52, 49.01)),
("8230","NAD83(CSRS96)",(-141.01, 40.04, -47.74, 86.46)),
("8231","NAD83(CSRS96)",(-141.01, 40.04, -47.74, 86.46)),
("8232","NAD83(CSRS96)",(-141.01, 40.04, -47.74, 86.46)),
("8233","NAD83(CSRS)v2",(-141.01, 40.04, -47.74, 86.46)),
("8235","NAD83(CSRS)v2",(-141.01, 40.04, -47.74, 86.46)),
("8237","NAD83(CSRS)v2",(-141.01, 40.04, -47.74, 86.46)),
("8238","NAD83(CSRS)v3",(-141.01, 40.04, -47.74, 86.46)),
("8239","NAD83(CSRS)v3",(-141.01, 40.04, -47.74, 86.46)),
("8240","NAD83(CSRS)v3",(-141.01, 40.04, -47.74, 86.46)),
("8242","NAD83(CSRS)v4",(-141.01, 40.04, -47.74, 86.46)),
("8244","NAD83(CSRS)v4",(-141.01, 40.04, -47.74, 86.46)),
("8246","NAD83(CSRS)v4",(-141.01, 40.04, -47.74, 86.46)),
("8247","NAD83(CSRS)v5",(-141.01, 40.04, -47.74, 86.46)),
("8248","NAD83(CSRS)v5",(-141.01, 40.04, -47.74, 86.46)),
("8249","NAD83(CSRS)v5",(-141.01, 40.04, -47.74, 86.46)),
("8250","NAD83(CSRS)v6",(-141.01, 40.04, -47.74, 86.46)),
("8251","NAD83(CSRS)v6",(-141.01, 40.04, -47.74, 86.46)),
("8252","NAD83(CSRS)v6",(-141.01, 40.04, -47.74, 86.46)),
("8253","NAD83(CSRS)v7",(-141.01, 40.04, -47.74, 86.46)),
("8254","NAD83(CSRS)v7",(-141.01, 40.04, -47.74, 86.46)),
("8255","NAD83(CSRS)v7",(-141.01, 40.04, -47.74, 86.46)),
("8266","GVR2000 height",(-75.0, 59.0, -10.0, 84.01)),
("8267","GVR2016 height",(-75.0, 58.0, -6.99, 85.01)),
("8311","NAD83(2011) / Oregon Burns-Harper zone (m)",(-118.61, 43.49, -117.49, 44.19)),
("8312","NAD83(2011) / Oregon Burns-Harper zone (ft)",(-118.61, 43.49, -117.49, 44.19)),
("8313","NAD83(2011) / Oregon Canyon City-Burns zone (m)",(-119.22, 43.52, -118.52, 44.36)),
("8314","NAD83(2011) / Oregon Canyon City-Burns zone (ft)",(-119.22, 43.52, -118.52, 44.36)),
("8315","NAD83(2011) / Oregon Coast Range North zone (m)",(-123.81, 45.4, -123.01, 45.98)),
("8316","NAD83(2011) / Oregon Coast Range North zone (ft)",(-123.81, 45.4, -123.01, 45.98)),
("8317","NAD83(2011) / Oregon Dayville-Prairie City zone (m)",(-119.89, 44.24, -118.61, 44.94)),
("8318","NAD83(2011) / Oregon Dayville-Prairie City zone (ft)",(-119.89, 44.24, -118.61, 44.94)),
("8319","NAD83(2011) / Oregon Denio-Burns zone (m)",(-119.41, 41.88, -117.67, 43.54)),
("8320","NAD83(2011) / Oregon Denio-Burns zone (ft)",(-119.41, 41.88, -117.67, 43.54)),
("8321","NAD83(2011) / Oregon Halfway zone (m)",(-117.61, 44.61, -116.63, 45.28)),
("8322","NAD83(2011) / Oregon Halfway zone (ft)",(-117.61, 44.61, -116.63, 45.28)),
("8323","NAD83(2011) / Oregon Medford-Diamond Lake zone (m)",(-122.73, 42.53, -121.71, 43.34)),
("8324","NAD83(2011) / Oregon Medford-Diamond Lake zone (ft)",(-122.73, 42.53, -121.71, 43.34)),
("8325","NAD83(2011) / Oregon Mitchell zone (m)",(-120.56, 44.38, -119.82, 44.78)),
("8326","NAD83(2011) / Oregon Mitchell zone (ft)",(-120.56, 44.38, -119.82, 44.78)),
("8327","NAD83(2011) / Oregon North Central zone (m)",(-121.79, 44.89, -119.03, 45.95)),
("8328","NAD83(2011) / Oregon North Central zone (ft)",(-121.79, 44.89, -119.03, 45.95)),
("8329","NAD83(2011) / Oregon Ochoco Summit zone (m)",(-121.01, 44.21, -120.31, 44.61)),
("8330","NAD83(2011) / Oregon Ochoco Summit zone (ft)",(-121.01, 44.21, -120.31, 44.61)),
("8331","NAD83(2011) / Oregon Owyhee zone (m)",(-118.14, 41.88, -116.85, 43.54)),
("8332","NAD83(2011) / Oregon Owyhee zone (ft)",(-118.14, 41.88, -116.85, 43.54)),
("8333","NAD83(2011) / Oregon Pilot Rock-Ukiah zone (m)",(-119.65, 44.99, -118.11, 46.04)),
("8334","NAD83(2011) / Oregon Pilot Rock-Ukiah zone (ft)",(-119.65, 44.99, -118.11, 46.04)),
("8335","NAD83(2011) / Oregon Prairie City-Brogan zone (m)",(-118.77, 44.16, -117.48, 45.02)),
("8336","NAD83(2011) / Oregon Prairie City-Brogan zone (ft)",(-118.77, 44.16, -117.48, 45.02)),
("8337","NAD83(2011) / Oregon Riley-Lakeview zone (m)",(-120.97, 41.88, -119.15, 43.45)),
("8338","NAD83(2011) / Oregon Riley-Lakeview zone (ft)",(-120.97, 41.88, -119.15, 43.45)),
("8339","NAD83(2011) / Oregon Siskiyou Pass zone (m)",(-122.71, 41.95, -121.96, 42.46)),
("8340","NAD83(2011) / Oregon Siskiyou Pass zone (ft)",(-122.71, 41.95, -121.96, 42.46)),
("8341","NAD83(2011) / Oregon Ukiah-Fox zone (m)",(-119.35, 44.52, -118.64, 45.21)),
("8342","NAD83(2011) / Oregon Ukiah-Fox zone (ft)",(-119.35, 44.52, -118.64, 45.21)),
("8343","NAD83(2011) / Oregon Wallowa zone (m)",(-118.16, 45.27, -116.42, 46.05)),
("8344","NAD83(2011) / Oregon Wallowa zone (ft)",(-118.16, 45.27, -116.42, 46.05)),
("8345","NAD83(2011) / Oregon Warner Highway zone (m)",(-120.42, 41.95, -119.3, 42.43)),
("8346","NAD83(2011) / Oregon Warner Highway zone (ft)",(-120.42, 41.95, -119.3, 42.43)),
("8347","NAD83(2011) / Oregon Willamette Pass zone (m)",(-122.26, 42.99, -121.48, 44.18)),
("8348","NAD83(2011) / Oregon Willamette Pass zone (ft)",(-122.26, 42.99, -121.48, 44.18)),
("8349","GR96 + GVR2000 height",(-75.0, 59.0, -10.0, 84.01)),
("8350","GR96 + GVR2016 height",(-75.0, 58.0, -6.99, 85.01)),
("20004","Pulkovo 1995 / Gauss-Kruger zone 4",(19.57, 54.32, 22.87, 55.32)),
("20005","Pulkovo 1995 / Gauss-Kruger zone 5",(26.61, 55.69, 30.0, 69.47)),
("20006","Pulkovo 1995 / Gauss-Kruger zone 6",(30.0, 50.34, 36.0, 70.02)),
("20007","Pulkovo 1995 / Gauss-Kruger zone 7",(36.0, 43.18, 42.01, 69.23)),
("20008","Pulkovo 1995 / Gauss-Kruger zone 8",(42.0, 41.19, 48.0, 80.91)),
("20009","Pulkovo 1995 / Gauss-Kruger zone 9",(48.0, 41.39, 54.0, 81.4)),
("20010","Pulkovo 1995 / Gauss-Kruger zone 10",(54.0, 50.47, 60.0, 81.91)),
("20011","Pulkovo 1995 / Gauss-Kruger zone 11",(60.0, 50.66, 66.0, 81.77)),
("20012","Pulkovo 1995 / Gauss-Kruger zone 12",(66.0, 54.1, 72.0, 77.07)),
("20013","Pulkovo 1995 / Gauss-Kruger zone 13",(72.0, 53.17, 78.0, 79.71)),
("20014","Pulkovo 1995 / Gauss-Kruger zone 14",(78.0, 50.69, 84.0, 81.03)),
("20015","Pulkovo 1995 / Gauss-Kruger zone 15",(84.0, 49.07, 90.0, 81.27)),
("20016","Pulkovo 1995 / Gauss-Kruger zone 16",(90.0, 49.89, 96.0, 81.35)),
("20017","Pulkovo 1995 / Gauss-Kruger zone 17",(96.0, 49.73, 102.0, 81.32)),
("20018","Pulkovo 1995 / Gauss-Kruger zone 18",(102.0, 49.64, 108.0, 79.48)),
("20019","Pulkovo 1995 / Gauss-Kruger zone 19",(108.0, 49.14, 114.0, 76.81)),
("20020","Pulkovo 1995 / Gauss-Kruger zone 20",(114.0, 49.51, 120.0, 75.96)),
("20021","Pulkovo 1995 / Gauss-Kruger zone 21",(120.0, 51.51, 126.0, 74.0)),
("20022","Pulkovo 1995 / Gauss-Kruger zone 22",(126.0, 42.25, 132.0, 73.61)),
("20023","Pulkovo 1995 / Gauss-Kruger zone 23",(132.0, 42.63, 138.0, 76.15)),
("20024","Pulkovo 1995 / Gauss-Kruger zone 24",(138.0, 45.84, 144.0, 76.27)),
("20025","Pulkovo 1995 / Gauss-Kruger zone 25",(144.0, 43.6, 150.0, 76.82)),
("20026","Pulkovo 1995 / Gauss-Kruger zone 26",(150.0, 45.77, 156.0, 76.26)),
("20027","Pulkovo 1995 / Gauss-Kruger zone 27",(156.0, 50.27, 162.0, 77.2)),
("20028","Pulkovo 1995 / Gauss-Kruger zone 28",(162.0, 54.47, 168.0, 70.03)),
("20029","Pulkovo 1995 / Gauss-Kruger zone 29",(168.0, 54.45, 174.0, 70.19)),
("20030","Pulkovo 1995 / Gauss-Kruger zone 30",(174.0, 61.65, 180.0, 71.59)),
("20031","Pulkovo 1995 / Gauss-Kruger zone 31",(-180.0, 64.35, -174.0, 71.65)),
("20032","Pulkovo 1995 / Gauss-Kruger zone 32",(-174.0, 64.2, -168.97, 67.18)),
("20064","Pulkovo 1995 / Gauss-Kruger 4N",(19.57, 54.32, 22.87, 55.32)),
("20065","Pulkovo 1995 / Gauss-Kruger 5N",(26.61, 55.69, 30.0, 69.47)),
("20066","Pulkovo 1995 / Gauss-Kruger 6N",(30.0, 50.34, 36.0, 70.02)),
("20067","Pulkovo 1995 / Gauss-Kruger 7N",(36.0, 43.18, 42.01, 69.23)),
("20068","Pulkovo 1995 / Gauss-Kruger 8N",(42.0, 41.19, 48.0, 80.91)),
("20069","Pulkovo 1995 / Gauss-Kruger 9N",(48.0, 41.39, 54.0, 81.4)),
("20070","Pulkovo 1995 / Gauss-Kruger 10N",(54.0, 50.47, 60.0, 81.91)),
("20071","Pulkovo 1995 / Gauss-Kruger 11N",(60.0, 50.66, 66.0, 81.77)),
("20072","Pulkovo 1995 / Gauss-Kruger 12N",(66.0, 54.1, 72.0, 77.07)),
("20073","Pulkovo 1995 / Gauss-Kruger 13N",(72.0, 53.17, 78.0, 79.71)),
("20074","Pulkovo 1995 / Gauss-Kruger 14N",(78.0, 50.69, 84.0, 81.03)),
("20075","Pulkovo 1995 / Gauss-Kruger 15N",(84.0, 49.07, 90.0, 81.27)),
("20076","Pulkovo 1995 / Gauss-Kruger 16N",(90.0, 49.89, 96.0, 81.35)),
("20077","Pulkovo 1995 / Gauss-Kruger 17N",(96.0, 49.73, 102.0, 81.32)),
("20078","Pulkovo 1995 / Gauss-Kruger 18N",(102.0, 49.64, 108.0, 79.48)),
("20079","Pulkovo 1995 / Gauss-Kruger 19N",(108.0, 49.14, 114.0, 76.81)),
("20080","Pulkovo 1995 / Gauss-Kruger 20N",(114.0, 49.51, 120.0, 75.96)),
("20081","Pulkovo 1995 / Gauss-Kruger 21N",(120.0, 51.51, 126.0, 74.0)),
("20082","Pulkovo 1995 / Gauss-Kruger 22N",(126.0, 42.25, 132.0, 73.61)),
("20083","Pulkovo 1995 / Gauss-Kruger 23N",(132.0, 42.63, 138.0, 76.15)),
("20084","Pulkovo 1995 / Gauss-Kruger 24N",(138.0, 45.84, 144.0, 76.27)),
("20085","Pulkovo 1995 / Gauss-Kruger 25N",(144.0, 43.6, 150.0, 76.82)),
("20086","Pulkovo 1995 / Gauss-Kruger 26N",(150.0, 45.77, 156.0, 76.26)),
("20087","Pulkovo 1995 / Gauss-Kruger 27N",(156.0, 50.27, 162.0, 77.2)),
("20088","Pulkovo 1995 / Gauss-Kruger 28N",(162.0, 54.47, 168.0, 70.03)),
("20089","Pulkovo 1995 / Gauss-Kruger 29N",(168.0, 54.45, 174.0, 70.19)),
("20090","Pulkovo 1995 / Gauss-Kruger 30N",(174.0, 61.65, 180.0, 71.59)),
("20091","Pulkovo 1995 / Gauss-Kruger 31N",(-180.0, 64.35, -174.0, 71.65)),
("20092","Pulkovo 1995 / Gauss-Kruger 32N",(-174.0, 64.2, -168.97, 67.18)),
("20135","Adindan / UTM zone 35N",(23.99, 4.21, 30.01, 22.01)),
("20136","Adindan / UTM zone 36N",(29.99, 3.49, 36.0, 22.24)),
("20137","Adindan / UTM zone 37N",(36.0, 3.4, 42.0, 22.01)),
("20138","Adindan / UTM zone 38N",(42.0, 4.11, 47.99, 12.85)),
("20248","AGD66 / AMG zone 48",(102.0, -56.0, 108.0, -10.0)),
("20249","AGD66 / AMG zone 49",(109.23, -37.84, 114.0, -17.19)),
("20250","AGD66 / AMG zone 50",(114.0, -38.53, 120.0, -12.61)),
("20251","AGD66 / AMG zone 51",(120.0, -38.07, 126.01, -10.46)),
("20252","AGD66 / AMG zone 52",(125.99, -37.38, 132.0, -9.1)),
("20253","AGD66 / AMG zone 53",(132.0, -40.71, 138.01, -8.88)),
("20254","AGD66 / AMG zone 54",(138.0, -46.63, 144.01, -2.53)),
("20255","AGD66 / AMG zone 55",(144.0, -47.2, 150.01, -1.3)),
("20256","AGD66 / AMG zone 56",(150.0, -46.44, 156.0, -2.32)),
("20257","AGD66 / AMG zone 57",(156.0, -35.13, 162.01, -14.08)),
("20258","AGD66 / AMG zone 58",(162.0, -34.22, 163.2, -27.25)),
("20348","AGD84 / AMG zone 48",(102.0, -56.0, 108.0, -10.0)),
("20349","AGD84 / AMG zone 49",(109.23, -37.84, 114.0, -17.19)),
("20350","AGD84 / AMG zone 50",(114.0, -38.53, 120.0, -12.61)),
("20351","AGD84 / AMG zone 51",(120.0, -38.07, 126.01, -10.46)),
("20352","AGD84 / AMG zone 52",(125.99, -37.05, 132.01, -9.37)),
("20353","AGD84 / AMG zone 53",(132.0, -36.14, 138.0, -25.99)),
("20354","AGD84 / AMG zone 54",(138.0, -38.13, 144.01, -9.86)),
("20355","AGD84 / AMG zone 55",(144.0, -29.01, 150.0, -14.01)),
("20356","AGD84 / AMG zone 56",(150.0, -29.19, 153.61, -22.0)),
("20357","AGD84 / AMG zone 57",(156.0, -35.13, 162.01, -14.08)),
("20358","AGD84 / AMG zone 58",(162.0, -34.22, 163.2, -27.25)),
("20436","Ain el Abd / UTM zone 36N",(34.51, 26.82, 36.0, 29.38)),
("20437","Ain el Abd / UTM zone 37N",(36.0, 16.59, 42.0, 32.16)),
("20438","Ain el Abd / UTM zone 38N",(42.0, 16.37, 48.01, 31.15)),
("20439","Ain el Abd / UTM zone 39N",(47.99, 17.94, 54.01, 30.04)),
("20440","Ain el Abd / UTM zone 40N",(54.0, 19.66, 55.67, 22.77)),
("20499","Ain el Abd / Bahrain Grid",(50.39, 25.53, 50.85, 26.34)),
("20538","Afgooye / UTM zone 38N",(42.0, 0.0, 48.0, 11.52)),
("20539","Afgooye / UTM zone 39N",(48.0, 4.44, 51.47, 12.03)),
("20790","Lisbon (Lisbon) / Portuguese National Grid",(-9.56, 36.95, -6.19, 42.16)),
("20791","Lisbon (Lisbon) / Portuguese Grid",(-9.56, 36.95, -6.19, 42.16)),
("20822","Aratu / UTM zone 22S",(-53.38, -35.71, -47.99, -25.01)),
("20823","Aratu / UTM zone 23S",(-48.01, -33.5, -41.99, 0.0)),
("20824","Aratu / UTM zone 24S",(-42.01, -26.35, -36.0, 0.01)),
("20934","Arc 1950 / UTM zone 34S",(19.99, -26.88, 24.0, -10.86)),
("20935","Arc 1950 / UTM zone 35S",(24.0, -25.84, 30.0, -8.31)),
("20936","Arc 1950 / UTM zone 36S",(30.0, -22.42, 35.93, -8.19)),
("21035","Arc 1960 / UTM zone 35S",(29.34, -6.81, 30.0, 0.0)),
("21036","Arc 1960 / UTM zone 36S",(29.99, -11.61, 36.0, 0.01)),
("21037","Arc 1960 / UTM zone 37S",(36.0, -11.75, 41.6, 0.0)),
("21095","Arc 1960 / UTM zone 35N",(29.71, 0.0, 30.0, 0.86)),
("21096","Arc 1960 / UTM zone 36N",(29.99, 0.0, 36.0, 4.63)),
("21097","Arc 1960 / UTM zone 37N",(36.0, 0.0, 41.91, 4.49)),
("21100","Batavia (Jakarta) / NEIEZ",(95.16, -8.91, 115.77, 5.97)),
("21148","Batavia / UTM zone 48S",(105.06, -7.79, 108.0, -4.07)),
("21149","Batavia / UTM zone 49S",(108.0, -8.67, 114.0, -4.27)),
("21150","Batavia / UTM zone 50S",(114.0, -8.91, 117.01, -5.33)),
("21291","Barbados 1938 / British West Indies Grid",(-59.71, 13.0, -59.37, 13.39)),
("21292","Barbados 1938 / Barbados National Grid",(-59.71, 13.0, -59.37, 13.39)),
("21413","Beijing 1954 / Gauss-Kruger zone 13",(73.62, 35.42, 78.01, 41.07)),
("21414","Beijing 1954 / Gauss-Kruger zone 14",(77.98, 29.16, 84.0, 47.23)),
("21415","Beijing 1954 / Gauss-Kruger zone 15",(84.0, 27.32, 90.0, 49.18)),
("21416","Beijing 1954 / Gauss-Kruger zone 16",(90.0, 27.71, 96.01, 47.9)),
("21417","Beijing 1954 / Gauss-Kruger zone 17",(96.0, 21.13, 102.01, 43.18)),
("21418","Beijing 1954 / Gauss-Kruger zone 18",(102.0, 21.53, 108.0, 42.47)),
("21419","Beijing 1954 / Gauss-Kruger zone 19",(108.0, 18.11, 114.0, 45.11)),
("21420","Beijing 1954 / Gauss-Kruger zone 20",(114.0, 22.14, 120.0, 51.52)),
("21421","Beijing 1954 / Gauss-Kruger zone 21",(120.0, 26.34, 126.0, 53.56)),
("21422","Beijing 1954 / Gauss-Kruger zone 22",(126.0, 40.89, 132.0, 52.79)),
("21423","Beijing 1954 / Gauss-Kruger zone 23",(132.0, 45.02, 134.77, 48.4)),
("21453","Beijing 1954 / Gauss-Kruger CM 75E",(73.62, 35.42, 78.01, 41.07)),
("21454","Beijing 1954 / Gauss-Kruger CM 81E",(77.98, 29.16, 84.0, 47.23)),
("21455","Beijing 1954 / Gauss-Kruger CM 87E",(84.0, 27.32, 90.0, 49.18)),
("21456","Beijing 1954 / Gauss-Kruger CM 93E",(90.0, 27.71, 96.01, 47.9)),
("21457","Beijing 1954 / Gauss-Kruger CM 99E",(96.0, 21.13, 102.01, 43.18)),
("21458","Beijing 1954 / Gauss-Kruger CM 105E",(102.0, 21.53, 108.0, 42.47)),
("21459","Beijing 1954 / Gauss-Kruger CM 111E",(108.0, 18.11, 114.0, 45.11)),
("21460","Beijing 1954 / Gauss-Kruger CM 117E",(114.0, 22.14, 120.0, 51.52)),
("21461","Beijing 1954 / Gauss-Kruger CM 123E",(120.0, 26.34, 126.0, 53.56)),
("21462","Beijing 1954 / Gauss-Kruger CM 129E",(126.0, 40.89, 132.0, 52.79)),
("21463","Beijing 1954 / Gauss-Kruger CM 135E",(132.0, 45.02, 134.77, 48.4)),
("21473","Beijing 1954 / Gauss-Kruger 13N",(73.62, 35.42, 78.01, 41.07)),
("21474","Beijing 1954 / Gauss-Kruger 14N",(77.98, 29.16, 84.0, 47.23)),
("21475","Beijing 1954 / Gauss-Kruger 15N",(84.0, 27.32, 90.0, 49.18)),
("21476","Beijing 1954 / Gauss-Kruger 16N",(90.0, 27.71, 96.01, 47.9)),
("21477","Beijing 1954 / Gauss-Kruger 17N",(96.0, 21.13, 102.01, 43.18)),
("21478","Beijing 1954 / Gauss-Kruger 18N",(102.0, 21.53, 108.0, 42.47)),
("21479","Beijing 1954 / Gauss-Kruger 19N",(108.0, 18.11, 114.0, 45.11)),
("21480","Beijing 1954 / Gauss-Kruger 20N",(114.0, 22.14, 120.0, 51.52)),
("21481","Beijing 1954 / Gauss-Kruger 21N",(120.0, 26.34, 126.0, 53.56)),
("21482","Beijing 1954 / Gauss-Kruger 22N",(126.0, 40.89, 132.0, 52.79)),
("21483","Beijing 1954 / Gauss-Kruger 23N",(132.0, 45.02, 134.77, 48.4)),
("21500","Belge 1950 (Brussels) / Belge Lambert 50",(2.5, 49.5, 6.4, 51.51)),
("21780","Bern 1898 (Bern) / LV03C",(5.96, 45.82, 10.49, 47.81)),
("21781","CH1903 / LV03",(5.96, 45.82, 10.49, 47.81)),
("21782","CH1903 / LV03C-G",(9.47, 47.05, 9.64, 47.28)),
("21817","Bogota 1975 / UTM zone 17N",(-1000.0, -1000.0, -1000.0, -1000.0)),
("21818","Bogota 1975 / UTM zone 18N",(-77.37, 7.9, -72.0, 13.68)),
("21891","Bogota 1975 / Colombia West zone",(-79.1, 0.03, -75.58, 10.21)),
("21892","Bogota 1975 / Colombia Bogota zone",(-75.59, -2.51, -72.58, 11.82)),
("21893","Bogota 1975 / Colombia East Central zone",(-72.59, -4.23, -69.58, 12.52)),
("21894","Bogota 1975 / Colombia East",(-69.59, -2.25, -66.87, 6.31)),
("21896","Bogota 1975 / Colombia West zone",(-79.1, 0.03, -75.58, 10.21)),
("21897","Bogota 1975 / Colombia Bogota zone",(-75.59, -2.51, -72.58, 11.82)),
("21898","Bogota 1975 / Colombia East Central zone",(-72.59, -4.23, -69.58, 12.52)),
("21899","Bogota 1975 / Colombia East zone",(-69.59, -2.25, -66.87, 6.31)),
("22032","Camacupa 1948 / UTM zone 32S",(8.2, -17.26, 12.0, -6.03)),
("22033","Camacupa 1948 / UTM zone 33S",(12.0, -17.44, 18.0, -5.82)),
("22091","Camacupa 1948 / TM 11.30 SE",(10.83, -6.59, 11.67, -6.03)),
("22092","Camacupa 1948 / TM 12 SE",(8.2, -17.26, 13.86, -6.01)),
("22171","POSGAR 98 / Argentina 1",(-73.59, -52.0, -70.5, -36.16)),
("22172","POSGAR 98 / Argentina 2",(-70.5, -54.9, -67.49, -24.08)),
("22173","POSGAR 98 / Argentina 3",(-67.5, -55.11, -64.49, -21.78)),
("22174","POSGAR 98 / Argentina 4",(-64.5, -54.91, -61.5, -21.99)),
("22175","POSGAR 98 / Argentina 5",(-61.51, -39.06, -58.5, -23.37)),
("22176","POSGAR 98 / Argentina 6",(-58.5, -38.59, -55.49, -24.84)),
("22177","POSGAR 98 / Argentina 7",(-55.5, -28.11, -53.65, -25.49)),
("22181","POSGAR 94 / Argentina 1",(-73.59, -52.0, -70.5, -36.16)),
("22182","POSGAR 94 / Argentina 2",(-70.5, -54.9, -67.49, -24.08)),
("22183","POSGAR 94 / Argentina 3",(-67.5, -55.11, -64.49, -21.78)),
("22184","POSGAR 94 / Argentina 4",(-64.5, -54.91, -61.5, -21.99)),
("22185","POSGAR 94 / Argentina 5",(-61.51, -39.06, -58.5, -23.37)),
("22186","POSGAR 94 / Argentina 6",(-58.5, -38.59, -55.49, -24.84)),
("22187","POSGAR 94 / Argentina 7",(-55.5, -28.11, -53.65, -25.49)),
("22191","Campo Inchauspe / Argentina 1",(-73.59, -52.0, -70.5, -36.16)),
("22192","Campo Inchauspe / Argentina 2",(-70.5, -52.43, -67.49, -24.08)),
("22193","Campo Inchauspe / Argentina 3",(-67.5, -49.05, -64.49, -21.78)),
("22194","Campo Inchauspe / Argentina 4",(-64.5, -43.14, -61.49, -21.99)),
("22195","Campo Inchauspe / Argentina 5",(-61.51, -39.06, -58.5, -23.37)),
("22196","Campo Inchauspe / Argentina 6",(-58.5, -38.59, -55.49, -24.84)),
("22197","Campo Inchauspe / Argentina 7",(-55.5, -28.11, -53.65, -25.49)),
("22234","Cape / UTM zone 34S",(19.99, -26.88, 24.0, -17.99)),
("22235","Cape / UTM zone 35S",(24.0, -25.84, 29.38, -17.78)),
("22236","Cape / UTM zone 36S",(21.0, -26.88, 27.0, -17.78)),
("22275","Cape / Lo15",(14.35, -23.15, 14.6, -22.68)),
("22277","Cape / Lo17",(16.45, -33.1, 18.0, -28.03)),
("22279","Cape / Lo19",(17.99, -34.88, 20.0, -28.38)),
("22281","Cape / Lo21",(19.99, -34.88, 22.01, -24.76)),
("22283","Cape / Lo23",(22.0, -34.26, 24.01, -25.26)),
("22285","Cape / Lo25",(24.0, -34.26, 26.01, -24.71)),
("22287","Cape / Lo27",(26.0, -33.83, 28.0, -22.92)),
("22289","Cape / Lo29",(27.99, -33.03, 30.0, -22.13)),
("22291","Cape / Lo31",(29.99, -31.38, 32.02, -22.22)),
("22293","Cape / Lo33",(31.95, -28.94, 32.95, -26.8)),
("22300","Carthage (Paris) / Tunisia Mining Grid",(7.49, 30.23, 11.59, 37.4)),
("22332","Carthage / UTM zone 32N",(7.81, 33.22, 13.67, 38.41)),
("22391","Carthage / Nord Tunisie",(8.18, 34.65, 11.37, 37.4)),
("22392","Carthage / Sud Tunisie",(7.49, 30.23, 11.59, 34.66)),
("22521","Corrego Alegre 1970-72 / UTM zone 21S",(-58.16, -31.91, -54.0, -17.99)),
("22522","Corrego Alegre 1970-72 / UTM zone 22S",(-54.0, -33.78, -48.0, -15.0)),
("22523","Corrego Alegre 1970-72 / UTM zone 23S",(-48.0, -25.29, -42.0, -15.0)),
("22524","Corrego Alegre 1970-72 / UTM zone 24S",(-42.0, -22.96, -36.0, -2.68)),
("22525","Corrego Alegre 1970-72 / UTM zone 25S",(-36.0, -10.1, -34.74, -4.99)),
("22700","Deir ez Zor / Levant Zone",(35.04, 32.31, 42.38, 37.3)),
("22770","Deir ez Zor / Syria Lambert",(35.04, 32.31, 42.38, 37.3)),
("22780","Deir ez Zor / Levant Stereographic",(35.04, 32.31, 42.38, 37.3)),
("22832","Douala / UTM zone 32N",(8.32, 1.65, 16.21, 13.09)),
("22991","Egypt 1907 / Blue Belt",(33.0, 21.97, 36.95, 31.36)),
("22992","Egypt 1907 / Red Belt",(29.0, 21.99, 34.27, 33.82)),
("22993","Egypt 1907 / Purple Belt",(24.7, 28.18, 29.0, 31.68)),
("22994","Egypt 1907 / Extended Purple Belt",(24.99, 21.99, 29.01, 28.19)),
("23028","ED50 / UTM zone 28N",(-16.1, 48.43, -12.0, 56.57)),
("23029","ED50 / UTM zone 29N",(-12.0, 36.13, -6.0, 62.41)),
("23030","ED50 / UTM zone 30N",(-6.0, 35.26, 0.0, 80.53)),
("23031","ED50 / UTM zone 31N",(0.0, 38.56, 6.01, 82.41)),
("23032","ED50 / UTM zone 32N",(5.99, 36.53, 12.01, 83.92)),
("23033","ED50 / UTM zone 33N",(12.0, 34.49, 18.0, 84.0)),
("23034","ED50 / UTM zone 34N",(18.0, 33.59, 24.0, 84.0)),
("23035","ED50 / UTM zone 35N",(24.0, 25.71, 30.0, 84.01)),
("23036","ED50 / UTM zone 36N",(29.99, 29.19, 36.0, 83.89)),
("23037","ED50 / UTM zone 37N",(36.0, 29.18, 42.0, 79.09)),
("23038","ED50 / UTM zone 38N",(42.0, 36.97, 44.83, 41.6)),
("23090","ED50 / TM 0 N",(-5.05, 51.03, 3.4, 62.03)),
("23095","ED50 / TM 5 NE",(2.53, 51.45, 6.41, 55.77)),
("23239","Fahud / UTM zone 39N",(51.99, 16.59, 54.0, 19.67)),
("23240","Fahud / UTM zone 40N",(54.0, 16.89, 59.91, 26.42)),
("23433","Garoua / UTM zone 33N",(8.32, 1.65, 16.21, 13.09)),
("23700","HD72 / EOV",(16.11, 45.74, 22.9, 48.58)),
("23830","DGN95 / Indonesia TM-3 zone 46.2",(95.16, 2.55, 96.0, 5.97)),
("23831","DGN95 / Indonesia TM-3 zone 47.1",(96.0, -1.81, 99.0, 5.42)),
("23832","DGN95 / Indonesia TM-3 zone 47.2",(99.0, -3.57, 102.0, 3.71)),
("23833","DGN95 / Indonesia TM-3 zone 48.1",(102.0, -5.99, 105.0, 1.68)),
("23834","DGN95 / Indonesia TM-3 zone 48.2",(105.0, -7.79, 108.0, 4.11)),
("23835","DGN95 / Indonesia TM-3 zone 49.1",(108.0, -8.31, 111.0, 4.25)),
("23836","DGN95 / Indonesia TM-3 zone 49.2",(111.0, -8.67, 114.0, 1.59)),
("23837","DGN95 / Indonesia TM-3 zone 50.1",(114.0, -9.15, 117.01, 4.37)),
("23838","DGN95 / Indonesia TM-3 zone 50.2",(117.0, -10.15, 120.0, 4.36)),
("23839","DGN95 / Indonesia TM-3 zone 51.1",(120.0, -10.98, 123.0, 1.4)),
("23840","DGN95 / Indonesia TM-3 zone 51.2",(123.0, -10.92, 126.0, 3.84)),
("23841","DGN95 / Indonesia TM-3 zone 52.1",(126.0, -8.32, 129.0, 4.59)),
("23842","DGN95 / Indonesia TM-3 zone 52.2",(129.0, -8.41, 132.0, 0.1)),
("23843","DGN95 / Indonesia TM-3 zone 53.1",(132.0, -7.3, 135.0, -0.29)),
("23844","DGN95 / Indonesia TM-3 zone 53.2",(135.0, -8.49, 138.0, -0.58)),
("23845","DGN95 / Indonesia TM-3 zone 54.1",(138.0, -9.19, 141.01, -1.49)),
("23846","ID74 / UTM zone 46N",(95.16, 2.55, 96.0, 5.97)),
("23847","ID74 / UTM zone 47N",(96.0, 0.0, 102.0, 5.42)),
("23848","ID74 / UTM zone 48N",(102.0, 0.0, 108.0, 4.11)),
("23849","ID74 / UTM zone 49N",(108.0, 0.0, 114.0, 4.25)),
("23850","ID74 / UTM zone 50N",(114.0, 0.0, 120.0, 4.37)),
("23851","ID74 / UTM zone 51N",(120.0, 0.0, 125.71, 3.84)),
("23852","ID74 / UTM zone 52N",(126.55, 0.0, 131.0, 4.59)),
("23853","ID74 / UTM zone 53N",(-1000.0, -1000.0, -1000.0, -1000.0)),
("23866","DGN95 / UTM zone 46N",(92.01, 0.0, 96.0, 7.79)),
("23867","DGN95 / UTM zone 47N",(96.0, 0.0, 102.0, 7.49)),
("23868","DGN95 / UTM zone 48N",(102.0, 0.0, 108.0, 6.94)),
("23869","DGN95 / UTM zone 49N",(108.0, 0.0, 114.0, 7.37)),
("23870","DGN95 / UTM zone 50N",(114.0, 0.0, 120.0, 4.37)),
("23871","DGN95 / UTM zone 51N",(120.0, 0.0, 126.0, 5.48)),
("23872","DGN95 / UTM zone 52N",(126.0, 0.0, 132.0, 6.68)),
("23877","DGN95 / UTM zone 47S",(96.0, -8.86, 102.0, 0.0)),
("23878","DGN95 / UTM zone 48S",(102.0, -10.73, 108.01, 0.0)),
("23879","DGN95 / UTM zone 49S",(108.0, -12.07, 114.0, 0.0)),
("23880","DGN95 / UTM zone 50S",(114.0, -13.06, 120.01, 0.0)),
("23881","DGN95 / UTM zone 51S",(120.0, -13.95, 126.01, 0.01)),
("23882","DGN95 / UTM zone 52S",(126.0, -9.45, 132.0, 0.0)),
("23883","DGN95 / UTM zone 53S",(132.0, -10.06, 138.01, 0.0)),
("23884","DGN95 / UTM zone 54S",(138.0, -10.84, 141.46, 0.0)),
("23886","ID74 / UTM zone 46S",(-1000.0, -1000.0, -1000.0, -1000.0)),
("23887","ID74 / UTM zone 47S",(98.24, -3.57, 102.0, 0.0)),
("23888","ID74 / UTM zone 48S",(102.0, -7.79, 108.0, 0.0)),
("23889","ID74 / UTM zone 49S",(108.0, -8.67, 114.0, 0.0)),
("23890","ID74 / UTM zone 50S",(114.0, -10.15, 120.0, 0.0)),
("23891","ID74 / UTM zone 51S",(120.0, -10.98, 126.0, 0.0)),
("23892","ID74 / UTM zone 52S",(126.0, -8.41, 132.0, 0.0)),
("23893","ID74 / UTM zone 53S",(132.0, -8.49, 138.0, -0.29)),
("23894","ID74 / UTM zone 54S",(138.0, -9.19, 141.01, -1.49)),
("23946","Indian 1954 / UTM zone 46N",(92.2, 15.66, 96.01, 27.14)),
("23947","Indian 1954 / UTM zone 47N",(95.99, 5.63, 102.01, 28.55)),
("23948","Indian 1954 / UTM zone 48N",(102.0, 6.02, 105.64, 18.44)),
("24047","Indian 1975 / UTM zone 47N",(97.34, 5.63, 102.01, 20.46)),
("24048","Indian 1975 / UTM zone 48N",(102.0, 6.02, 105.64, 18.44)),
("24100","Jamaica 1875 / Jamaica (Old Grid)",(-78.43, 17.64, -76.17, 18.58)),
("24200","JAD69 / Jamaica National Grid",(-78.43, 17.64, -76.17, 18.58)),
("24305","Kalianpur 1937 / UTM zone 45N",(88.01, 21.59, 90.0, 26.64)),
("24306","Kalianpur 1937 / UTM zone 46N",(90.0, 20.52, 92.67, 25.29)),
("24311","Kalianpur 1962 / UTM zone 41N",(60.86, 24.98, 66.01, 29.87)),
("24312","Kalianpur 1962 / UTM zone 42N",(66.0, 23.64, 72.01, 36.56)),
("24313","Kalianpur 1962 / UTM zone 43N",(72.0, 28.21, 77.83, 37.07)),
("24342","Kalianpur 1975 / UTM zone 42N",(68.13, 20.64, 72.01, 28.22)),
("24343","Kalianpur 1975 / UTM zone 43N",(72.0, 8.02, 78.01, 35.51)),
("24344","Kalianpur 1975 / UTM zone 44N",(78.0, 8.29, 84.01, 35.5)),
("24345","Kalianpur 1975 / UTM zone 45N",(84.0, 18.18, 90.01, 28.14)),
("24346","Kalianpur 1975 / UTM zone 46N",(90.0, 21.94, 96.01, 29.42)),
("24347","Kalianpur 1975 / UTM zone 47N",(96.0, 27.1, 97.42, 29.47)),
("24370","Kalianpur 1880 / India zone 0",(71.18, 35.58, 77.01, 37.07)),
("24371","Kalianpur 1880 / India zone I",(60.86, 28.0, 81.64, 35.59)),
("24372","Kalianpur 1880 / India zone IIa",(61.59, 21.0, 82.01, 28.01)),
("24373","Kalianpur 1880 / India zone IIIa",(70.14, 15.0, 87.15, 21.01)),
("24374","Kalianpur 1880 / India zone IVa",(73.94, 8.02, 80.4, 15.01)),
("24375","Kalianpur 1937 / India zone IIb",(88.01, 20.52, 92.67, 26.64)),
("24376","Kalianpur 1962 / India zone I",(60.86, 28.0, 77.83, 35.59)),
("24377","Kalianpur 1962 / India zone IIa",(61.59, 23.64, 71.91, 28.01)),
("24378","Kalianpur 1975 / India zone I",(70.35, 28.0, 81.64, 35.51)),
("24379","Kalianpur 1975 / India zone IIa",(68.13, 21.0, 82.01, 28.01)),
("24380","Kalianpur 1975 / India zone IIb",(82.0, 21.0, 97.42, 29.47)),
("24381","Kalianpur 1975 / India zone IIIa",(70.14, 15.0, 87.15, 21.01)),
("24382","Kalianpur 1880 / India zone IIb",(82.0, 21.0, 101.17, 29.47)),
("24383","Kalianpur 1975 / India zone IVa",(73.94, 8.02, 80.4, 15.01)),
("24500","Kertau 1968 / Singapore Grid",(103.59, 1.13, 104.07, 1.47)),
("24547","Kertau 1968 / UTM zone 47N",(99.59, 2.29, 102.01, 6.72)),
("24548","Kertau 1968 / UTM zone 48N",(102.0, 1.21, 105.82, 7.81)),
("24571","Kertau / R.S.O. Malaya (ch)",(99.59, 1.21, 104.6, 6.72)),
("24600","KOC Lambert",(46.54, 28.53, 48.48, 30.09)),
("24718","La Canoa / UTM zone 18N",(-73.38, 7.02, -71.99, 11.62)),
("24719","La Canoa / UTM zone 19N",(-72.0, 0.73, -66.0, 12.25)),
("24720","La Canoa / UTM zone 20N",(-66.0, 0.64, -59.8, 11.23)),
("24817","PSAD56 / UTM zone 17N",(-80.18, 0.0, -78.0, 1.45)),
("24818","PSAD56 / UTM zone 18N",(-78.0, 0.0, -71.99, 11.62)),
("24819","PSAD56 / UTM zone 19N",(-72.0, 0.73, -66.0, 12.68)),
("24820","PSAD56 / UTM zone 20N",(-66.0, 0.64, -59.99, 11.23)),
("24821","PSAD56 / UTM zone 21N",(-60.0, 1.18, -56.47, 8.58)),
("24877","PSAD56 / UTM zone 17S",(-81.41, -10.53, -78.0, 0.0)),
("24878","PSAD56 / UTM zone 18S",(-78.0, -43.5, -71.99, 0.0)),
("24879","PSAD56 / UTM zone 19S",(-72.0, -43.5, -66.0, -2.14)),
("24880","PSAD56 / UTM zone 20S",(-66.0, -22.87, -60.0, -9.67)),
("24881","PSAD56 / UTM zone 21S",(-60.0, -20.17, -57.52, -16.27)),
("24882","PSAD56 / UTM zone 22S",(-51.64, -1.05, -48.0, 5.6)),
("24891","PSAD56 / Peru west zone",(-81.41, -8.32, -79.0, -3.38)),
("24892","PSAD56 / Peru central zone",(-79.0, -16.57, -73.0, -0.03)),
("24893","PSAD56 / Peru east zone",(-73.0, -18.39, -68.67, -2.14)),
("25000","Leigon / Ghana Metre Grid",(-3.79, 1.4, 2.1, 11.16)),
("25231","Lome / UTM zone 31N",(-0.15, 2.91, 2.42, 11.14)),
("25391","Luzon 1911 / Philippines zone I",(116.89, 7.75, 118.0, 9.32)),
("25392","Luzon 1911 / Philippines zone II",(118.0, 8.82, 120.07, 11.58)),
("25393","Luzon 1911 / Philippines zone III",(119.7, 4.99, 122.21, 19.45)),
("25394","Luzon 1911 / Philippines zone IV",(121.74, 6.35, 124.29, 18.58)),
("25395","Luzon 1911 / Philippines zone V",(123.73, 5.5, 126.65, 14.15)),
("25700","Makassar (Jakarta) / NEIEZ",(118.71, -6.54, 120.78, -1.88)),
("25828","ETRS89 / UTM zone 28N",(-16.1, 34.93, -11.99, 72.44)),
("25829","ETRS89 / UTM zone 29N",(-12.0, 34.91, -6.0, 74.13)),
("25830","ETRS89 / UTM zone 30N",(-6.0, 35.26, 0.0, 80.53)),
("25831","ETRS89 / UTM zone 31N",(0.0, 37.0, 6.01, 82.41)),
("25832","ETRS89 / UTM zone 32N",(6.0, 38.76, 12.0, 83.92)),
("25833","ETRS89 / UTM zone 33N",(12.0, 46.4, 18.01, 84.01)),
("25834","ETRS89 / UTM zone 34N",(18.0, 58.84, 24.0, 84.0)),
("25835","ETRS89 / UTM zone 35N",(24.0, 59.64, 30.0, 84.01)),
("25836","ETRS89 / UTM zone 36N",(30.0, 61.73, 36.01, 83.89)),
("25837","ETRS89 / UTM zone 37N",(36.0, 71.27, 39.65, 79.09)),
("25838","ETRS89 / UTM zone 38N",(42.0, 37.0, 48.0, 41.65)),
("25884","ETRS89 / TM Baltic93",(19.02, 53.89, 28.24, 60.0)),
("25932","Malongo 1987 / UTM zone 32S",(10.53, -6.04, 12.37, -5.05)),
("26191","Merchich / Nord Maroc",(-9.85, 31.49, -1.01, 35.97)),
("26192","Merchich / Sud Maroc",(-13.24, 27.66, -3.59, 31.51)),
("26193","Merchich / Sahara",(-17.0, 21.06, -8.67, 27.9)),
("26194","Merchich / Sahara Nord",(-15.42, 24.29, -8.66, 27.67)),
("26195","Merchich / Sahara Sud",(-17.16, 20.71, -12.0, 24.31)),
("26237","Massawa / UTM zone 37N",(36.44, 12.36, 43.31, 18.1)),
("26331","Minna / UTM zone 31N",(2.66, 1.92, 6.0, 6.14)),
("26332","Minna / UTM zone 32N",(6.0, 2.61, 7.82, 3.68)),
("26391","Minna / Nigeria West Belt",(2.69, 3.57, 6.5, 13.9)),
("26392","Minna / Nigeria Mid Belt",(6.5, 3.57, 10.51, 13.53)),
("26393","Minna / Nigeria East Belt",(10.49, 6.43, 14.65, 13.72)),
("26432","Mhast / UTM zone 32S",(10.53, -6.04, 13.1, -4.38)),
("26591","Monte Mario (Rome) / Italy zone 1",(5.94, 36.53, 12.0, 47.04)),
("26592","Monte Mario (Rome) / Italy zone 2",(12.0, 34.76, 18.99, 47.1)),
("26632","M'poraloko / UTM zone 32N",(9.25, 0.0, 12.0, 2.32)),
("26692","M'poraloko / UTM zone 32S",(7.03, -6.37, 12.01, 2.32)),
("26701","NAD27 / UTM zone 1N",(-180.0, 47.88, -173.99, 63.21)),
("26702","NAD27 / UTM zone 2N",(-174.0, 48.66, -167.99, 73.05)),
("26703","NAD27 / UTM zone 3N",(-168.0, 49.52, -161.99, 74.29)),
("26704","NAD27 / UTM zone 4N",(-162.0, 50.98, -155.99, 74.71)),
("26705","NAD27 / UTM zone 5N",(-156.0, 52.15, -149.99, 74.71)),
("26706","NAD27 / UTM zone 6N",(-150.0, 54.05, -143.99, 74.13)),
("26707","NAD27 / UTM zone 7N",(-144.0, 53.47, -138.0, 73.59)),
("26708","NAD27 / UTM zone 8N",(-138.0, 52.58, -132.0, 73.04)),
("26709","NAD27 / UTM zone 9N",(-132.0, 49.18, -126.0, 72.03)),
("26710","NAD27 / UTM zone 10N",(-126.0, 34.4, -120.0, 77.13)),
("26711","NAD27 / UTM zone 11N",(-120.0, 26.93, -114.0, 78.13)),
("26712","NAD27 / UTM zone 12N",(-114.0, 18.66, -108.0, 78.81)),
("26713","NAD27 / UTM zone 13N",(-108.0, 17.86, -102.0, 79.42)),
("26714","NAD27 / UTM zone 14N",(-102.0, 15.59, -96.0, 80.74)),
("26715","NAD27 / UTM zone 15N",(-96.0, 13.63, -90.0, 81.96)),
("26716","NAD27 / UTM zone 16N",(-90.01, 9.27, -84.0, 82.54)),
("26717","NAD27 / UTM zone 17N",(-84.0, 7.98, -78.0, 83.03)),
("26718","NAD27 / UTM zone 18N",(-78.0, 18.83, -72.0, 83.16)),
("26719","NAD27 / UTM zone 19N",(-72.0, 33.61, -66.0, 83.17)),
("26720","NAD27 / UTM zone 20N",(-66.0, 39.85, -60.0, 82.97)),
("26721","NAD27 / UTM zone 21N",(-60.0, 40.57, -54.0, 68.93)),
("26722","NAD27 / UTM zone 22N",(-54.0, 43.27, -48.0, 57.65)),
("26729","NAD27 / Alabama East",(-86.79, 30.99, -84.89, 35.0)),
("26730","NAD27 / Alabama West",(-88.48, 30.14, -86.3, 35.02)),
("26731","NAD27 / Alaska zone 1",(-141.0, 54.61, -129.99, 60.35)),
("26732","NAD27 / Alaska zone 2",(-144.01, 59.72, -140.98, 70.16)),
("26733","NAD27 / Alaska zone 3",(-148.0, 59.72, -144.0, 70.38)),
("26734","NAD27 / Alaska zone 4",(-152.01, 59.11, -147.99, 70.63)),
("26735","NAD27 / Alaska zone 5",(-156.0, 55.72, -151.86, 71.28)),
("26736","NAD27 / Alaska zone 6",(-160.0, 54.89, -155.99, 71.4)),
("26737","NAD27 / Alaska zone 7",(-164.01, 54.32, -160.0, 70.74)),
("26738","NAD27 / Alaska zone 8",(-168.26, 54.34, -164.0, 69.05)),
("26739","NAD27 / Alaska zone 9",(-173.16, 56.49, -168.0, 65.82)),
("26740","NAD27 / Alaska zone 10",(172.42, 51.3, -164.84, 54.34)),
("26741","NAD27 / California zone I",(-124.45, 39.59, -119.99, 42.01)),
("26742","NAD27 / California zone II",(-124.06, 38.02, -119.54, 40.16)),
("26743","NAD27 / California zone III",(-123.02, 36.73, -117.83, 38.71)),
("26744","NAD27 / California zone IV",(-122.01, 35.78, -115.62, 37.58)),
("26745","NAD27 / California zone V",(-121.43, 32.76, -114.12, 35.81)),
("26746","NAD27 / California zone VI",(-118.15, 32.53, -114.42, 34.08)),
("26747","NAD27 / California zone VII",(-118.96, 33.66, -117.63, 34.83)),
("26748","NAD27 / Arizona East",(-111.71, 31.33, -109.04, 37.01)),
("26749","NAD27 / Arizona Central",(-113.35, 31.33, -110.44, 37.01)),
("26750","NAD27 / Arizona West",(-114.81, 32.05, -112.52, 37.0)),
("26751","NAD27 / Arkansas North",(-94.62, 34.67, -89.64, 36.5)),
("26752","NAD27 / Arkansas South",(-94.48, 33.01, -90.4, 35.1)),
("26753","NAD27 / Colorado North",(-109.06, 39.56, -102.04, 41.01)),
("26754","NAD27 / Colorado Central",(-109.06, 38.14, -102.04, 40.09)),
("26755","NAD27 / Colorado South",(-109.06, 36.98, -102.04, 38.68)),
("26756","NAD27 / Connecticut",(-73.73, 40.98, -71.78, 42.05)),
("26757","NAD27 / Delaware",(-75.8, 38.44, -74.97, 39.85)),
("26758","NAD27 / Florida East",(-82.33, 24.41, -79.97, 30.83)),
("26759","NAD27 / Florida West",(-83.34, 26.27, -81.13, 29.6)),
("26760","NAD27 / Florida North",(-87.63, 29.21, -82.04, 31.01)),
("26766","NAD27 / Georgia East",(-83.47, 30.36, -80.77, 34.68)),
("26767","NAD27 / Georgia West",(-85.61, 30.62, -82.99, 35.01)),
("26768","NAD27 / Idaho East",(-113.24, 41.99, -111.04, 44.75)),
("26769","NAD27 / Idaho Central",(-115.3, 41.99, -112.68, 45.7)),
("26770","NAD27 / Idaho West",(-117.24, 41.99, -114.32, 49.01)),
("26771","NAD27 / Illinois East",(-89.28, 37.06, -87.02, 42.5)),
("26772","NAD27 / Illinois West",(-91.52, 36.98, -88.93, 42.51)),
("26773","NAD27 / Indiana East",(-86.59, 37.95, -84.78, 41.77)),
("26774","NAD27 / Indiana West",(-88.06, 37.77, -86.24, 41.77)),
("26775","NAD27 / Iowa North",(-96.65, 41.85, -90.15, 43.51)),
("26776","NAD27 / Iowa South",(-96.14, 40.37, -90.14, 42.04)),
("26777","NAD27 / Kansas North",(-102.06, 38.52, -94.58, 40.01)),
("26778","NAD27 / Kansas South",(-102.05, 36.99, -94.6, 38.88)),
("26779","NAD27 / Kentucky North",(-85.96, 37.71, -82.47, 39.15)),
("26780","NAD27 / Kentucky South",(-89.57, 36.49, -81.95, 38.17)),
("26781","NAD27 / Louisiana North",(-94.05, 30.85, -90.86, 33.03)),
("26782","NAD27 / Louisiana South",(-93.94, 27.82, -87.76, 31.07)),
("26783","NAD27 / Maine East",(-70.03, 43.88, -66.91, 47.47)),
("26784","NAD27 / Maine West",(-71.09, 43.04, -69.26, 46.58)),
("26785","NAD27 / Maryland",(-79.49, 37.97, -74.97, 39.73)),
("26786","NAD27 / Massachusetts Mainland",(-73.5, 41.46, -69.86, 42.89)),
("26787","NAD27 / Massachusetts Island",(-70.91, 41.19, -69.89, 41.51)),
("26791","NAD27 / Minnesota North",(-97.22, 46.64, -89.49, 49.38)),
("26792","NAD27 / Minnesota Central",(-96.86, 45.28, -92.29, 47.48)),
("26793","NAD27 / Minnesota South",(-96.85, 43.49, -91.21, 45.59)),
("26794","NAD27 / Mississippi East",(-89.97, 30.01, -88.09, 35.01)),
("26795","NAD27 / Mississippi West",(-91.65, 31.0, -89.37, 35.01)),
("26796","NAD27 / Missouri East",(-91.97, 35.98, -89.1, 40.61)),
("26797","NAD27 / Missouri Central",(-93.79, 36.48, -91.41, 40.61)),
("26798","NAD27 / Missouri West",(-95.77, 36.48, -93.48, 40.59)),
("26799","NAD27 / California zone VII",(-118.96, 33.66, -117.63, 34.83)),
("26801","NAD Michigan / Michigan East",(-84.87, 41.69, -82.13, 46.04)),
("26802","NAD Michigan / Michigan Old Central",(-87.61, 41.75, -84.6, 46.11)),
("26803","NAD Michigan / Michigan West",(-90.42, 45.09, -83.44, 48.32)),
("26811","NAD Michigan / Michigan North",(-90.42, 45.08, -83.44, 48.32)),
("26812","NAD Michigan / Michigan Central",(-87.06, 43.8, -82.27, 45.92)),
("26813","NAD Michigan / Michigan South",(-87.2, 41.69, -82.13, 44.22)),
("26814","NAD83 / Maine East (ftUS)",(-70.03, 43.88, -66.91, 47.47)),
("26815","NAD83 / Maine West (ftUS)",(-71.09, 43.04, -69.26, 46.58)),
("26819","NAD83 / Minnesota North (ftUS)",(-97.22, 46.64, -89.49, 49.38)),
("26820","NAD83 / Minnesota Central (ftUS)",(-96.86, 45.28, -92.29, 47.48)),
("26821","NAD83 / Minnesota South (ftUS)",(-96.85, 43.49, -91.21, 45.59)),
("26822","NAD83 / Nebraska (ftUS)",(-104.06, 39.99, -95.3, 43.01)),
("26823","NAD83 / West Virginia North (ftUS)",(-81.76, 38.76, -77.72, 40.64)),
("26824","NAD83 / West Virginia South (ftUS)",(-82.65, 37.2, -79.05, 39.17)),
("26825","NAD83(HARN) / Maine East (ftUS)",(-70.03, 43.88, -66.91, 47.47)),
("26826","NAD83(HARN) / Maine West (ftUS)",(-71.09, 43.04, -69.26, 46.58)),
("26830","NAD83(HARN) / Minnesota North (ftUS)",(-97.22, 46.64, -89.49, 49.38)),
("26831","NAD83(HARN) / Minnesota Central (ftUS)",(-96.86, 45.28, -92.29, 47.48)),
("26832","NAD83(HARN) / Minnesota South (ftUS)",(-96.85, 43.49, -91.21, 45.59)),
("26833","NAD83(HARN) / Nebraska (ftUS)",(-104.06, 39.99, -95.3, 43.01)),
("26834","NAD83(HARN) / West Virginia North (ftUS)",(-81.76, 38.76, -77.72, 40.64)),
("26835","NAD83(HARN) / West Virginia South (ftUS)",(-82.65, 37.2, -79.05, 39.17)),
("26836","NAD83(NSRS2007) / Maine East (ftUS)",(-70.03, 43.88, -66.91, 47.47)),
("26837","NAD83(NSRS2007) / Maine West (ftUS)",(-71.09, 43.04, -69.26, 46.58)),
("26841","NAD83(NSRS2007) / Minnesota North (ftUS)",(-97.22, 46.64, -89.49, 49.38)),
("26842","NAD83(NSRS2007) / Minnesota Central (ftUS)",(-96.86, 45.28, -92.29, 47.48)),
("26843","NAD83(NSRS2007) / Minnesota South (ftUS)",(-96.85, 43.49, -91.21, 45.59)),
("26844","NAD83(NSRS2007) / Nebraska (ftUS)",(-104.06, 39.99, -95.3, 43.01)),
("26845","NAD83(NSRS2007) / West Virginia North (ftUS)",(-81.76, 38.76, -77.72, 40.64)),
("26846","NAD83(NSRS2007) / West Virginia South (ftUS)",(-82.65, 37.2, -79.05, 39.17)),
("26847","NAD83 / Maine East (ftUS)",(-70.03, 43.88, -66.91, 47.47)),
("26848","NAD83 / Maine West (ftUS)",(-71.09, 43.04, -69.26, 46.58)),
("26849","NAD83 / Minnesota North (ftUS)",(-97.22, 46.64, -89.49, 49.38)),
("26850","NAD83 / Minnesota Central (ftUS)",(-96.86, 45.28, -92.29, 47.48)),
("26851","NAD83 / Minnesota South (ftUS)",(-96.85, 43.49, -91.21, 45.59)),
("26852","NAD83 / Nebraska (ftUS)",(-104.06, 39.99, -95.3, 43.01)),
("26853","NAD83 / West Virginia North (ftUS)",(-81.76, 38.76, -77.72, 40.64)),
("26854","NAD83 / West Virginia South (ftUS)",(-82.65, 37.2, -79.05, 39.17)),
("26855","NAD83(HARN) / Maine East (ftUS)",(-70.03, 43.88, -66.91, 47.47)),
("26856","NAD83(HARN) / Maine West (ftUS)",(-71.09, 43.04, -69.26, 46.58)),
("26857","NAD83(HARN) / Minnesota North (ftUS)",(-97.22, 46.64, -89.49, 49.38)),
("26858","NAD83(HARN) / Minnesota Central (ftUS)",(-96.86, 45.28, -92.29, 47.48)),
("26859","NAD83(HARN) / Minnesota South (ftUS)",(-96.85, 43.49, -91.21, 45.59)),
("26860","NAD83(HARN) / Nebraska (ftUS)",(-104.06, 39.99, -95.3, 43.01)),
("26861","NAD83(HARN) / West Virginia North (ftUS)",(-81.76, 38.76, -77.72, 40.64)),
("26862","NAD83(HARN) / West Virginia South (ftUS)",(-82.65, 37.2, -79.05, 39.17)),
("26863","NAD83(NSRS2007) / Maine East (ftUS)",(-70.03, 43.88, -66.91, 47.47)),
("26864","NAD83(NSRS2007) / Maine West (ftUS)",(-71.09, 43.04, -69.26, 46.58)),
("26865","NAD83(NSRS2007) / Minnesota North (ftUS)",(-97.22, 46.64, -89.49, 49.38)),
("26866","NAD83(NSRS2007) / Minnesota Central (ftUS)",(-96.86, 45.28, -92.29, 47.48)),
("26867","NAD83(NSRS2007) / Minnesota South (ftUS)",(-96.85, 43.49, -91.21, 45.59)),
("26868","NAD83(NSRS2007) / Nebraska (ftUS)",(-104.06, 39.99, -95.3, 43.01)),
("26869","NAD83(NSRS2007) / West Virginia North (ftUS)",(-81.76, 38.76, -77.72, 40.64)),
("26870","NAD83(NSRS2007) / West Virginia South (ftUS)",(-82.65, 37.2, -79.05, 39.17)),
("26891","NAD83(CSRS) / MTM zone 11",(-83.6, 41.67, -81.0, 46.0)),
("26892","NAD83(CSRS) / MTM zone 12",(-82.5, 46.0, -79.5, 55.21)),
("26893","NAD83(CSRS) / MTM zone 13",(-85.5, 46.0, -82.5, 55.59)),
("26894","NAD83(CSRS) / MTM zone 14",(-88.5, 47.17, -85.5, 56.7)),
("26895","NAD83(CSRS) / MTM zone 15",(-91.5, 47.97, -88.5, 56.9)),
("26896","NAD83(CSRS) / MTM zone 16",(-94.5, 48.06, -91.5, 55.2)),
("26897","NAD83(CSRS) / MTM zone 17",(-95.16, 48.69, -94.5, 53.24)),
("26898","NAD83(CSRS) / MTM zone 1",(-54.5, 46.56, -52.54, 49.71)),
("26899","NAD83(CSRS) / MTM zone 2",(-57.5, 46.81, -54.49, 54.71)),
("26901","NAD83 / UTM zone 1N",(-180.0, 47.88, -173.99, 63.21)),
("26902","NAD83 / UTM zone 2N",(-174.0, 48.66, -167.99, 73.05)),
("26903","NAD83 / UTM zone 3N",(-168.0, 49.52, -161.99, 74.29)),
("26904","NAD83 / UTM zone 4N",(-162.0, 15.57, -155.99, 74.71)),
("26905","NAD83 / UTM zone 5N",(-156.0, 15.56, -149.99, 74.71)),
("26906","NAD83 / UTM zone 6N",(-150.0, 54.05, -143.99, 74.13)),
("26907","NAD83 / UTM zone 7N",(-144.0, 52.05, -137.99, 73.59)),
("26908","NAD83 / UTM zone 8N",(-138.0, 48.06, -132.0, 79.42)),
("26909","NAD83 / UTM zone 9N",(-132.0, 35.38, -126.0, 80.93)),
("26910","NAD83 / UTM zone 10N",(-126.0, 30.54, -119.99, 81.8)),
("26911","NAD83 / UTM zone 11N",(-120.0, 30.88, -114.0, 83.5)),
("26912","NAD83 / UTM zone 12N",(-114.0, 31.33, -108.0, 84.0)),
("26913","NAD83 / UTM zone 13N",(-108.0, 28.98, -102.0, 84.0)),
("26914","NAD83 / UTM zone 14N",(-102.0, 25.83, -96.0, 84.0)),
("26915","NAD83 / UTM zone 15N",(-96.0, 25.61, -90.0, 84.0)),
("26916","NAD83 / UTM zone 16N",(-90.0, 23.97, -84.0, 84.0)),
("26917","NAD83 / UTM zone 17N",(-84.0, 23.81, -78.0, 84.0)),
("26918","NAD83 / UTM zone 18N",(-78.0, 28.28, -72.0, 84.0)),
("26919","NAD83 / UTM zone 19N",(-72.0, 14.92, -66.0, 84.0)),
("26920","NAD83 / UTM zone 20N",(-66.0, 15.63, -60.0, 84.0)),
("26921","NAD83 / UTM zone 21N",(-60.0, 40.57, -54.0, 84.0)),
("26922","NAD83 / UTM zone 22N",(-54.0, 43.27, -48.0, 57.65)),
("26923","NAD83 / UTM zone 23N",(-48.0, 46.46, -47.74, 49.18)),
("26929","NAD83 / Alabama East",(-86.79, 30.99, -84.89, 35.0)),
("26930","NAD83 / Alabama West",(-88.48, 30.14, -86.3, 35.02)),
("26931","NAD83 / Alaska zone 1",(-141.0, 54.61, -129.99, 60.35)),
("26932","NAD83 / Alaska zone 2",(-144.01, 59.72, -140.98, 70.16)),
("26933","NAD83 / Alaska zone 3",(-148.0, 59.72, -144.0, 70.38)),
("26934","NAD83 / Alaska zone 4",(-152.01, 59.11, -147.99, 70.63)),
("26935","NAD83 / Alaska zone 5",(-156.0, 55.72, -151.86, 71.28)),
("26936","NAD83 / Alaska zone 6",(-160.0, 54.89, -155.99, 71.4)),
("26937","NAD83 / Alaska zone 7",(-164.01, 54.32, -160.0, 70.74)),
("26938","NAD83 / Alaska zone 8",(-168.26, 54.34, -164.0, 69.05)),
("26939","NAD83 / Alaska zone 9",(-173.16, 56.49, -168.0, 65.82)),
("26940","NAD83 / Alaska zone 10",(172.42, 51.3, -164.84, 54.34)),
("26941","NAD83 / California zone 1",(-124.45, 39.59, -119.99, 42.01)),
("26942","NAD83 / California zone 2",(-124.06, 38.02, -119.54, 40.16)),
("26943","NAD83 / California zone 3",(-123.02, 36.73, -117.83, 38.71)),
("26944","NAD83 / California zone 4",(-122.01, 35.78, -115.62, 37.58)),
("26945","NAD83 / California zone 5",(-121.42, 32.76, -114.12, 35.81)),
("26946","NAD83 / California zone 6",(-118.15, 32.53, -114.42, 34.08)),
("26948","NAD83 / Arizona East",(-111.71, 31.33, -109.04, 37.01)),
("26949","NAD83 / Arizona Central",(-113.35, 31.33, -110.44, 37.01)),
("26950","NAD83 / Arizona West",(-114.81, 32.05, -112.52, 37.0)),
("26951","NAD83 / Arkansas North",(-94.62, 34.67, -89.64, 36.5)),
("26952","NAD83 / Arkansas South",(-94.48, 33.01, -90.4, 35.1)),
("26953","NAD83 / Colorado North",(-109.06, 39.56, -102.04, 41.01)),
("26954","NAD83 / Colorado Central",(-109.06, 38.14, -102.04, 40.09)),
("26955","NAD83 / Colorado South",(-109.06, 36.98, -102.04, 38.68)),
("26956","NAD83 / Connecticut",(-73.73, 40.98, -71.78, 42.05)),
("26957","NAD83 / Delaware",(-75.8, 38.44, -74.97, 39.85)),
("26958","NAD83 / Florida East",(-82.33, 24.41, -79.97, 30.83)),
("26959","NAD83 / Florida West",(-83.34, 26.27, -81.13, 29.6)),
("26960","NAD83 / Florida North",(-87.63, 29.21, -82.04, 31.01)),
("26961","NAD83 / Hawaii zone 1",(-156.1, 18.87, -154.74, 20.33)),
("26962","NAD83 / Hawaii zone 2",(-157.36, 20.45, -155.93, 21.26)),
("26963","NAD83 / Hawaii zone 3",(-158.33, 21.2, -157.61, 21.75)),
("26964","NAD83 / Hawaii zone 4",(-159.85, 21.81, -159.23, 22.29)),
("26965","NAD83 / Hawaii zone 5",(-160.3, 21.73, -159.99, 22.07)),
("26966","NAD83 / Georgia East",(-83.47, 30.36, -80.77, 34.68)),
("26967","NAD83 / Georgia West",(-85.61, 30.62, -82.99, 35.01)),
("26968","NAD83 / Idaho East",(-113.24, 41.99, -111.04, 44.75)),
("26969","NAD83 / Idaho Central",(-115.3, 41.99, -112.68, 45.7)),
("26970","NAD83 / Idaho West",(-117.24, 41.99, -114.32, 49.01)),
("26971","NAD83 / Illinois East",(-89.28, 37.06, -87.02, 42.5)),
("26972","NAD83 / Illinois West",(-91.52, 36.98, -88.93, 42.51)),
("26973","NAD83 / Indiana East",(-86.59, 37.95, -84.78, 41.77)),
("26974","NAD83 / Indiana West",(-88.06, 37.77, -86.24, 41.77)),
("26975","NAD83 / Iowa North",(-96.65, 41.85, -90.15, 43.51)),
("26976","NAD83 / Iowa South",(-96.14, 40.37, -90.14, 42.04)),
("26977","NAD83 / Kansas North",(-102.06, 38.52, -94.58, 40.01)),
("26978","NAD83 / Kansas South",(-102.05, 36.99, -94.6, 38.88)),
("26979","NAD83 / Kentucky North",(-85.96, 37.71, -82.47, 39.15)),
("26980","NAD83 / Kentucky South",(-89.57, 36.49, -81.95, 38.17)),
("26981","NAD83 / Louisiana North",(-94.05, 30.85, -90.86, 33.03)),
("26982","NAD83 / Louisiana South",(-93.94, 28.85, -88.75, 31.07)),
("26983","NAD83 / Maine East",(-70.03, 43.88, -66.91, 47.47)),
("26984","NAD83 / Maine West",(-71.09, 43.04, -69.26, 46.58)),
("26985","NAD83 / Maryland",(-79.49, 37.97, -74.97, 39.73)),
("26986","NAD83 / Massachusetts Mainland",(-73.5, 41.46, -69.86, 42.89)),
("26987","NAD83 / Massachusetts Island",(-70.91, 41.19, -69.89, 41.51)),
("26988","NAD83 / Michigan North",(-90.42, 45.08, -83.44, 48.32)),
("26989","NAD83 / Michigan Central",(-87.06, 43.8, -82.27, 45.92)),
("26990","NAD83 / Michigan South",(-87.2, 41.69, -82.13, 44.22)),
("26991","NAD83 / Minnesota North",(-97.22, 46.64, -89.49, 49.38)),
("26992","NAD83 / Minnesota Central",(-96.86, 45.28, -92.29, 47.48)),
("26993","NAD83 / Minnesota South",(-96.85, 43.49, -91.21, 45.59)),
("26994","NAD83 / Mississippi East",(-89.97, 30.01, -88.09, 35.01)),
("26995","NAD83 / Mississippi West",(-91.65, 31.0, -89.37, 35.01)),
("26996","NAD83 / Missouri East",(-91.97, 35.98, -89.1, 40.61)),
("26997","NAD83 / Missouri Central",(-93.79, 36.48, -91.41, 40.61)),
("26998","NAD83 / Missouri West",(-95.77, 36.48, -93.48, 40.59)),
("27037","Nahrwan 1967 / UTM zone 37N",(38.79, 31.14, 42.0, 36.75)),
("27038","Nahrwan 1967 / UTM zone 38N",(42.0, 28.53, 48.0, 37.39)),
("27039","Nahrwan 1967 / UTM zone 39N",(50.55, 22.76, 54.01, 27.05)),
("27040","Nahrwan 1967 / UTM zone 40N",(54.0, 22.63, 57.13, 26.27)),
("27120","Naparima 1972 / UTM zone 20N",(-60.9, 11.08, -60.44, 11.41)),
("27200","NZGD49 / New Zealand Map Grid",(166.37, -47.33, 178.63, -34.1)),
("27205","NZGD49 / Mount Eden Circuit",(171.99, -39.01, 176.12, -34.1)),
("27206","NZGD49 / Bay of Plenty Circuit",(175.75, -39.13, 177.23, -37.22)),
("27207","NZGD49 / Poverty Bay Circuit",(176.73, -39.04, 178.63, -37.49)),
("27208","NZGD49 / Hawkes Bay Circuit",(175.8, -40.57, 178.07, -38.87)),
("27209","NZGD49 / Taranaki Circuit",(173.68, -39.78, 175.44, -38.4)),
("27210","NZGD49 / Tuhirangi Circuit",(174.88, -39.55, 176.33, -38.87)),
("27211","NZGD49 / Wanganui Circuit",(174.4, -40.97, 176.27, -39.46)),
("27212","NZGD49 / Wairarapa Circuit",(175.01, -41.67, 176.55, -40.29)),
("27213","NZGD49 / Wellington Circuit",(174.52, -41.5, 175.36, -40.91)),
("27214","NZGD49 / Collingwood Circuit",(172.16, -41.22, 173.13, -40.44)),
("27215","NZGD49 / Nelson Circuit",(172.4, -42.18, 174.08, -40.66)),
("27216","NZGD49 / Karamea Circuit",(171.96, -41.49, 172.7, -40.75)),
("27217","NZGD49 / Buller Circuit",(171.27, -42.19, 172.41, -41.42)),
("27218","NZGD49 / Grey Circuit",(171.15, -42.74, 172.75, -41.5)),
("27219","NZGD49 / Amuri Circuit",(171.88, -42.95, 173.55, -42.09)),
("27220","NZGD49 / Marlborough Circuit",(172.95, -42.65, 174.46, -40.85)),
("27221","NZGD49 / Hokitika Circuit",(170.39, -43.23, 171.89, -42.41)),
("27222","NZGD49 / Okarito Circuit",(169.21, -43.85, 170.89, -43.0)),
("27223","NZGD49 / Jacksons Bay Circuit",(168.02, -44.4, 170.01, -43.67)),
("27224","NZGD49 / Mount Pleasant Circuit",(171.11, -43.96, 173.38, -42.69)),
("27225","NZGD49 / Gawler Circuit",(170.68, -44.25, 172.26, -43.13)),
("27226","NZGD49 / Timaru Circuit",(169.82, -44.98, 171.55, -43.35)),
("27227","NZGD49 / Lindis Peak Circuit",(168.62, -45.4, 170.24, -43.71)),
("27228","NZGD49 / Mount Nicholas Circuit",(167.72, -45.58, 169.11, -44.29)),
("27229","NZGD49 / Mount York Circuit",(166.37, -46.33, 168.21, -44.53)),
("27230","NZGD49 / Observation Point Circuit",(169.77, -45.82, 171.24, -44.61)),
("27231","NZGD49 / North Taieri Circuit",(168.64, -46.73, 170.87, -45.23)),
("27232","NZGD49 / Bluff Circuit",(167.29, -47.33, 168.97, -45.33)),
("27258","NZGD49 / UTM zone 58S",(165.87, -47.65, 168.0, -42.59)),
("27259","NZGD49 / UTM zone 59S",(168.0, -47.64, 174.0, -33.89)),
("27260","NZGD49 / UTM zone 60S",(174.0, -44.13, 179.27, -34.24)),
("27291","NZGD49 / North Island Grid",(171.99, -41.67, 178.63, -34.1)),
("27292","NZGD49 / South Island Grid",(166.37, -47.33, 174.46, -40.44)),
("27391","NGO 1948 (Oslo) / NGO zone I",(4.68, 57.93, 7.23, 63.06)),
("27392","NGO 1948 (Oslo) / NGO zone II",(7.22, 57.95, 9.56, 63.87)),
("27393","NGO 1948 (Oslo) / NGO zone III",(9.55, 58.84, 11.98, 65.76)),
("27394","NGO 1948 (Oslo) / NGO zone IV",(11.97, 59.88, 15.06, 69.06)),
("27395","NGO 1948 (Oslo) / NGO zone V",(15.05, 66.15, 18.89, 70.19)),
("27396","NGO 1948 (Oslo) / NGO zone VI",(18.88, 68.33, 22.89, 70.81)),
("27397","NGO 1948 (Oslo) / NGO zone VII",(22.88, 68.58, 26.98, 71.21)),
("27398","NGO 1948 (Oslo) / NGO zone VIII",(26.97, 69.02, 31.22, 71.17)),
("27429","Datum 73 / UTM zone 29N",(-9.56, 36.95, -6.19, 42.16)),
("27492","Datum 73 / Modified Portuguese Grid",(-9.56, 36.95, -6.19, 42.16)),
("27493","Datum 73 / Modified Portuguese Grid",(-9.56, 36.95, -6.19, 42.16)),
("27500","ATF (Paris) / Nord de Guerre",(6.84, 47.42, 8.23, 49.07)),
("27561","NTF (Paris) / Lambert Nord France",(-4.87, 48.14, 8.23, 51.14)),
("27562","NTF (Paris) / Lambert Centre France",(-4.8, 45.44, 7.63, 48.15)),
("27563","NTF (Paris) / Lambert Sud France",(-1.79, 42.33, 7.71, 45.46)),
("27564","NTF (Paris) / Lambert Corse",(8.5, 41.31, 9.63, 43.07)),
("27571","NTF (Paris) / Lambert zone I",(-4.87, 48.14, 8.23, 51.14)),
("27572","NTF (Paris) / Lambert zone II",(-4.87, 42.33, 8.23, 51.14)),
("27573","NTF (Paris) / Lambert zone III",(-1.79, 42.33, 7.71, 45.46)),
("27574","NTF (Paris) / Lambert zone IV",(8.5, 41.31, 9.63, 43.07)),
("27581","NTF (Paris) / France I",(-4.87, 48.14, 8.23, 51.14)),
("27582","NTF (Paris) / France II",(-4.87, 42.33, 8.23, 51.14)),
("27583","NTF (Paris) / France III",(-1.79, 42.33, 7.71, 45.46)),
("27584","NTF (Paris) / France IV",(8.5, 41.31, 9.63, 43.07)),
("27591","NTF (Paris) / Nord France",(-4.87, 48.14, 8.23, 51.14)),
("27592","NTF (Paris) / Centre France",(-4.8, 45.44, 7.63, 48.15)),
("27593","NTF (Paris) / Sud France",(-1.79, 42.33, 7.71, 45.46)),
("27594","NTF (Paris) / Corse",(8.5, 41.31, 9.63, 43.07)),
("27700","OSGB 1936 / British National Grid",(-9.0, 49.75, 2.01, 61.01)),
("28191","Palestine 1923 / Palestine Grid",(34.17, 29.18, 39.31, 33.38)),
("28192","Palestine 1923 / Palestine Belt",(34.17, 29.18, 39.31, 33.38)),
("28193","Palestine 1923 / Israeli CS Grid",(34.17, 29.45, 35.69, 33.28)),
("28232","Pointe Noire / UTM zone 32S",(8.84, -6.91, 18.65, 3.72)),
("28348","GDA94 / MGA zone 48",(102.14, -34.68, 108.01, -8.87)),
("28349","GDA94 / MGA zone 49",(108.0, -37.84, 114.01, -10.72)),
("28350","GDA94 / MGA zone 50",(114.0, -38.53, 120.01, -12.06)),
("28351","GDA94 / MGA zone 51",(120.0, -38.07, 126.01, -10.46)),
("28352","GDA94 / MGA zone 52",(125.99, -37.38, 132.0, -9.1)),
("28353","GDA94 / MGA zone 53",(132.0, -40.71, 138.01, -8.88)),
("28354","GDA94 / MGA zone 54",(138.0, -48.19, 144.01, -9.08)),
("28355","GDA94 / MGA zone 55",(144.0, -50.89, 150.01, -9.23)),
("28356","GDA94 / MGA zone 56",(150.0, -58.96, 156.0, -13.87)),
("28357","GDA94 / MGA zone 57",(156.0, -60.56, 162.01, -14.08)),
("28358","GDA94 / MGA zone 58",(162.0, -59.39, 168.0, -25.94)),
("28402","Pulkovo 1942 / Gauss-Kruger zone 2",(9.93, 50.21, 12.0, 54.18)),
("28403","Pulkovo 1942 / Gauss-Kruger zone 3",(12.0, 45.78, 18.0, 54.89)),
("28404","Pulkovo 1942 / Gauss-Kruger zone 4",(19.57, 47.95, 24.0, 59.44)),
("28405","Pulkovo 1942 / Gauss-Kruger zone 5",(24.0, 45.18, 30.01, 69.47)),
("28406","Pulkovo 1942 / Gauss-Kruger zone 6",(30.0, 44.32, 36.0, 70.02)),
("28407","Pulkovo 1942 / Gauss-Kruger zone 7",(36.0, 41.43, 42.0, 69.23)),
("28408","Pulkovo 1942 / Gauss-Kruger zone 8",(42.0, 38.84, 48.01, 80.91)),
("28409","Pulkovo 1942 / Gauss-Kruger zone 9",(48.0, 37.34, 54.0, 81.4)),
("28410","Pulkovo 1942 / Gauss-Kruger zone 10",(54.0, 37.05, 60.0, 81.91)),
("28411","Pulkovo 1942 / Gauss-Kruger zone 11",(60.0, 35.14, 66.0, 81.77)),
("28412","Pulkovo 1942 / Gauss-Kruger zone 12",(66.0, 36.67, 72.0, 77.07)),
("28413","Pulkovo 1942 / Gauss-Kruger zone 13",(72.0, 36.79, 78.0, 79.71)),
("28414","Pulkovo 1942 / Gauss-Kruger zone 14",(78.0, 41.04, 84.01, 81.03)),
("28415","Pulkovo 1942 / Gauss-Kruger zone 15",(84.0, 46.82, 90.0, 81.27)),
("28416","Pulkovo 1942 / Gauss-Kruger zone 16",(90.0, 49.89, 96.0, 81.35)),
("28417","Pulkovo 1942 / Gauss-Kruger zone 17",(96.0, 49.73, 102.0, 81.32)),
("28418","Pulkovo 1942 / Gauss-Kruger zone 18",(102.0, 49.64, 108.0, 79.48)),
("28419","Pulkovo 1942 / Gauss-Kruger zone 19",(108.0, 49.14, 114.0, 76.81)),
("28420","Pulkovo 1942 / Gauss-Kruger zone 20",(114.0, 49.51, 120.0, 75.96)),
("28421","Pulkovo 1942 / Gauss-Kruger zone 21",(120.0, 51.51, 126.0, 74.0)),
("28422","Pulkovo 1942 / Gauss-Kruger zone 22",(126.0, 42.25, 132.0, 73.61)),
("28423","Pulkovo 1942 / Gauss-Kruger zone 23",(132.0, 42.63, 138.0, 76.15)),
("28424","Pulkovo 1942 / Gauss-Kruger zone 24",(138.0, 45.84, 144.0, 76.27)),
("28425","Pulkovo 1942 / Gauss-Kruger zone 25",(144.0, 43.6, 150.0, 76.82)),
("28426","Pulkovo 1942 / Gauss-Kruger zone 26",(150.0, 45.77, 156.0, 76.26)),
("28427","Pulkovo 1942 / Gauss-Kruger zone 27",(156.0, 50.27, 162.0, 77.2)),
("28428","Pulkovo 1942 / Gauss-Kruger zone 28",(162.0, 54.47, 168.0, 70.03)),
("28429","Pulkovo 1942 / Gauss-Kruger zone 29",(168.0, 54.45, 174.0, 70.19)),
("28430","Pulkovo 1942 / Gauss-Kruger zone 30",(174.0, 61.65, 180.0, 71.59)),
("28431","Pulkovo 1942 / Gauss-Kruger zone 31",(-180.0, 64.35, -174.0, 71.65)),
("28432","Pulkovo 1942 / Gauss-Kruger zone 32",(-174.0, 64.2, -168.97, 67.18)),
("28462","Pulkovo 1942 / Gauss-Kruger 2N",(9.93, 50.21, 12.0, 54.18)),
("28463","Pulkovo 1942 / Gauss-Kruger 3N",(12.0, 45.78, 18.0, 54.89)),
("28464","Pulkovo 1942 / Gauss-Kruger 4N",(19.57, 47.95, 24.0, 59.44)),
("28465","Pulkovo 1942 / Gauss-Kruger 5N",(24.0, 45.18, 30.01, 69.47)),
("28466","Pulkovo 1942 / Gauss-Kruger 6N",(30.0, 44.32, 36.0, 70.02)),
("28467","Pulkovo 1942 / Gauss-Kruger 7N",(36.0, 41.43, 42.0, 69.23)),
("28468","Pulkovo 1942 / Gauss-Kruger 8N",(42.0, 38.84, 48.01, 80.91)),
("28469","Pulkovo 1942 / Gauss-Kruger 9N",(48.0, 37.34, 54.0, 81.4)),
("28470","Pulkovo 1942 / Gauss-Kruger 10N",(54.0, 37.05, 60.0, 81.91)),
("28471","Pulkovo 1942 / Gauss-Kruger 11N",(60.0, 35.14, 66.0, 81.77)),
("28472","Pulkovo 1942 / Gauss-Kruger 12N",(66.0, 36.67, 72.0, 77.07)),
("28473","Pulkovo 1942 / Gauss-Kruger 13N",(72.0, 36.79, 78.0, 79.71)),
("28474","Pulkovo 1942 / Gauss-Kruger 14N",(78.0, 41.04, 84.01, 81.03)),
("28475","Pulkovo 1942 / Gauss-Kruger 15N",(84.0, 46.82, 90.0, 81.27)),
("28476","Pulkovo 1942 / Gauss-Kruger 16N",(90.0, 49.89, 96.0, 81.35)),
("28477","Pulkovo 1942 / Gauss-Kruger 17N",(96.0, 49.73, 102.0, 81.32)),
("28478","Pulkovo 1942 / Gauss-Kruger 18N",(102.0, 49.64, 108.0, 79.48)),
("28479","Pulkovo 1942 / Gauss-Kruger 19N",(108.0, 49.14, 114.0, 76.81)),
("28480","Pulkovo 1942 / Gauss-Kruger 20N",(114.0, 49.51, 120.0, 75.96)),
("28481","Pulkovo 1942 / Gauss-Kruger 21N",(120.0, 51.51, 126.0, 74.0)),
("28482","Pulkovo 1942 / Gauss-Kruger 22N",(126.0, 42.25, 132.0, 73.61)),
("28483","Pulkovo 1942 / Gauss-Kruger 23N",(132.0, 42.63, 138.0, 76.15)),
("28484","Pulkovo 1942 / Gauss-Kruger 24N",(138.0, 45.84, 144.0, 76.27)),
("28485","Pulkovo 1942 / Gauss-Kruger 25N",(144.0, 43.6, 150.0, 76.82)),
("28486","Pulkovo 1942 / Gauss-Kruger 26N",(150.0, 45.77, 156.0, 76.26)),
("28487","Pulkovo 1942 / Gauss-Kruger 27N",(156.0, 50.27, 162.0, 77.2)),
("28488","Pulkovo 1942 / Gauss-Kruger 28N",(162.0, 54.47, 168.0, 70.03)),
("28489","Pulkovo 1942 / Gauss-Kruger 29N",(168.0, 54.45, 174.0, 70.19)),
("28490","Pulkovo 1942 / Gauss-Kruger 30N",(174.0, 61.65, 180.0, 71.59)),
("28491","Pulkovo 1942 / Gauss-Kruger 31N",(-180.0, 64.35, -174.0, 71.65)),
("28492","Pulkovo 1942 / Gauss-Kruger 32N",(-174.0, 64.2, -168.97, 67.18)),
("28600","Qatar 1974 / Qatar National Grid",(50.69, 24.55, 51.68, 26.2)),
("28991","Amersfoort / RD Old",(3.2, 50.75, 7.22, 53.7)),
("28992","Amersfoort / RD New",(3.2, 50.75, 7.22, 53.7)),
("29100","SAD69 / Brazil Polyconic",(-74.01, -35.71, -25.28, 7.04)),
("29101","SAD69 / Brazil Polyconic",(-74.01, -35.71, -25.28, 7.04)),
("29118","SAD69 / UTM zone 18N",(-1000.0, -1000.0, -1000.0, -1000.0)),
("29119","SAD69 / UTM zone 19N",(-1000.0, -1000.0, -1000.0, -1000.0)),
("29120","SAD69 / UTM zone 20N",(-1000.0, -1000.0, -1000.0, -1000.0)),
("29121","SAD69 / UTM zone 21N",(-1000.0, -1000.0, -1000.0, -1000.0)),
("29122","SAD69 / UTM zone 22N",(-54.0, 1.68, -46.65, 5.81)),
("29168","SAD69 / UTM zone 18N",(-78.0, 0.0, -72.0, 12.31)),
("29169","SAD69 / UTM zone 19N",(-72.0, 0.0, -66.0, 12.52)),
("29170","SAD69 / UTM zone 20N",(-66.0, 0.64, -59.99, 11.23)),
("29171","SAD69 / UTM zone 21N",(-60.0, 1.18, -54.0, 8.6)),
("29172","SAD69 / UTM zone 22N",(-54.0, 1.68, -46.65, 5.81)),
("29177","SAD69 / UTM zone 17S",(-1000.0, -1000.0, -1000.0, -1000.0)),
("29178","SAD69 / UTM zone 18S",(-1000.0, -1000.0, -1000.0, -1000.0)),
("29179","SAD69 / UTM zone 19S",(-1000.0, -1000.0, -1000.0, -1000.0)),
("29180","SAD69 / UTM zone 20S",(-1000.0, -1000.0, -1000.0, -1000.0)),
("29181","SAD69 / UTM zone 21S",(-60.0, -38.91, -53.99, 4.51)),
("29182","SAD69 / UTM zone 22S",(-54.0, -35.71, -47.99, 7.04)),
("29183","SAD69 / UTM zone 23S",(-48.0, -26.3, -42.0, 0.0)),
("29184","SAD69 / UTM zone 24S",(-42.0, -22.96, -36.0, -2.68)),
("29185","SAD69 / UTM zone 25S",(-36.0, -10.05, -30.0, -5.15)),
("29187","SAD69 / UTM zone 17S",(-81.41, -10.53, -78.0, 0.0)),
("29188","SAD69 / UTM zone 18S",(-78.0, -45.0, -71.99, 0.0)),
("29189","SAD69 / UTM zone 19S",(-72.0, -45.0, -65.99, 2.15)),
("29190","SAD69 / UTM zone 20S",(-66.0, -45.0, -59.99, 5.28)),
("29191","SAD69 / UTM zone 21S",(-60.0, -38.91, -53.99, 4.51)),
("29192","SAD69 / UTM zone 22S",(-54.0, -35.71, -47.99, 7.04)),
("29193","SAD69 / UTM zone 23S",(-48.0, -33.5, -42.0, 5.13)),
("29194","SAD69 / UTM zone 24S",(-42.0, -26.35, -36.0, 0.74)),
("29195","SAD69 / UTM zone 25S",(-36.0, -23.8, -29.99, 4.19)),
("29220","Sapper Hill 1943 / UTM zone 20S",(-61.55, -52.33, -59.99, -50.96)),
("29221","Sapper Hill 1943 / UTM zone 21S",(-60.0, -52.51, -57.6, -51.13)),
("29333","Schwarzeck / UTM zone 33S",(8.24, -30.64, 16.46, -17.24)),
("29371","Schwarzeck / Lo22/11",(11.66, -18.53, 12.0, -17.15)),
("29373","Schwarzeck / Lo22/13",(12.0, -21.9, 14.01, -16.95)),
("29375","Schwarzeck / Lo22/15",(14.0, -28.3, 16.0, -17.38)),
("29377","Schwarzeck / Lo22/17",(15.99, -28.83, 18.01, -17.38)),
("29379","Schwarzeck / Lo22/19",(18.0, -28.97, 20.0, -17.38)),
("29381","Schwarzeck / Lo22/21",(19.99, -22.01, 22.0, -17.85)),
("29383","Schwarzeck / Lo22/23",(21.99, -18.49, 24.0, -17.52)),
("29385","Schwarzeck / Lo22/25",(24.0, -18.18, 25.27, -17.47)),
("29635","Sudan / UTM zone 35N",(-1000.0, -1000.0, -1000.0, -1000.0)),
("29636","Sudan / UTM zone 36N",(-1000.0, -1000.0, -1000.0, -1000.0)),
("29700","Tananarive (Paris) / Laborde Grid",(43.18, -25.64, 50.56, -11.89)),
("29701","Tananarive (Paris) / Laborde Grid",(43.18, -25.64, 50.56, -11.89)),
("29702","Tananarive (Paris) / Laborde Grid approximation",(43.18, -25.64, 50.56, -11.89)),
("29738","Tananarive / UTM zone 38S",(42.53, -26.59, 48.0, -13.0)),
("29739","Tananarive / UTM zone 39S",(48.0, -24.21, 51.03, -11.69)),
("29849","Timbalai 1948 / UTM zone 49N",(109.31, 0.85, 114.0, 7.37)),
("29850","Timbalai 1948 / UTM zone 50N",(114.0, 1.43, 119.61, 7.67)),
("29871","Timbalai 1948 / RSO Borneo (ch)",(109.31, 0.85, 119.61, 7.67)),
("29872","Timbalai 1948 / RSO Borneo (ftSe)",(109.31, 0.85, 119.61, 7.67)),
("29873","Timbalai 1948 / RSO Borneo (m)",(109.31, 0.85, 119.61, 7.67)),
("29900","TM65 / Irish National Grid",(-10.56, 51.39, -5.34, 55.43)),
("29901","OSNI 1952 / Irish National Grid",(-8.18, 53.96, -5.34, 55.36)),
("29902","TM65 / Irish Grid",(-10.56, 51.39, -5.93, 55.43)),
("29903","TM75 / Irish Grid",(-10.56, 51.39, -5.34, 55.43)),
("30161","Tokyo / Japan Plane Rectangular CS I",(128.17, 26.96, 130.46, 34.74)),
("30162","Tokyo / Japan Plane Rectangular CS II",(129.76, 30.18, 132.05, 33.99)),
("30163","Tokyo / Japan Plane Rectangular CS III",(130.81, 33.72, 133.49, 36.38)),
("30164","Tokyo / Japan Plane Rectangular CS IV",(131.95, 32.69, 134.81, 34.45)),
("30165","Tokyo / Japan Plane Rectangular CS V",(133.13, 34.13, 135.47, 35.71)),
("30166","Tokyo / Japan Plane Rectangular CS VI",(134.86, 33.4, 136.99, 36.33)),
("30167","Tokyo / Japan Plane Rectangular CS VII",(136.22, 34.51, 137.84, 37.58)),
("30168","Tokyo / Japan Plane Rectangular CS VIII",(137.32, 34.54, 139.91, 38.58)),
("30169","Tokyo / Japan Plane Rectangular CS IX",(138.4, 29.31, 141.11, 37.98)),
("30170","Tokyo / Japan Plane Rectangular CS X",(139.49, 37.73, 142.14, 41.58)),
("30171","Tokyo / Japan Plane Rectangular CS XI",(139.34, 41.34, 141.46, 43.42)),
("30172","Tokyo / Japan Plane Rectangular CS XII",(140.89, 42.15, 143.61, 45.54)),
("30173","Tokyo / Japan Plane Rectangular CS XIII",(142.61, 41.87, 145.87, 44.4)),
("30174","Tokyo / Japan Plane Rectangular CS XIV",(141.2, 24.67, 142.33, 27.8)),
("30175","Tokyo / Japan Plane Rectangular CS XV",(126.63, 26.02, 128.4, 26.91)),
("30176","Tokyo / Japan Plane Rectangular CS XVI",(122.83, 23.98, 125.51, 24.94)),
("30177","Tokyo / Japan Plane Rectangular CS XVII",(131.12, 24.4, 131.38, 26.01)),
("30178","Tokyo / Japan Plane Rectangular CS XVIII",(136.02, 20.37, 136.16, 20.48)),
("30179","Tokyo / Japan Plane Rectangular CS XIX",(153.91, 24.22, 154.05, 24.35)),
("30200","Trinidad 1903 / Trinidad Grid",(-62.09, 9.83, -60.0, 11.51)),
("30339","TC(1948) / UTM zone 39N",(51.56, 22.76, 54.01, 24.32)),
("30340","TC(1948) / UTM zone 40N",(53.99, 22.63, 56.03, 25.34)),
("30491","Voirol 1875 / Nord Algerie (ancienne)",(-2.22, 34.64, 8.64, 37.14)),
("30492","Voirol 1875 / Sud Algerie (ancienne)",(-2.95, 31.99, 9.09, 34.66)),
("30493","Voirol 1879 / Nord Algerie (ancienne)",(-2.22, 34.64, 8.64, 37.14)),
("30494","Voirol 1879 / Sud Algerie (ancienne)",(-2.95, 31.99, 9.09, 34.66)),
("30729","Nord Sahara 1959 / UTM zone 29N",(-8.67, 25.73, -6.0, 29.85)),
("30730","Nord Sahara 1959 / UTM zone 30N",(-6.0, 21.82, 0.0, 37.01)),
("30731","Nord Sahara 1959 / UTM zone 31N",(0.0, 18.97, 6.01, 38.77)),
("30732","Nord Sahara 1959 / UTM zone 32N",(6.0, 19.6, 11.99, 38.8)),
("30791","Nord Sahara 1959 / Nord Algerie",(-2.22, 34.64, 8.64, 37.14)),
("30792","Nord Sahara 1959 / Sud Algerie",(-3.85, 31.49, 9.22, 34.66)),
("30800","RT38 2.5 gon W",(10.03, 54.96, 24.17, 69.07)),
("31028","Yoff / UTM zone 28N",(-20.22, 10.64, -11.36, 16.7)),
("31121","Zanderij / UTM zone 21N",(-58.08, 1.83, -52.66, 9.35)),
("31154","Zanderij / TM 54 NW",(-57.25, 5.34, -52.66, 9.35)),
("31170","Zanderij / Suriname Old TM",(-58.08, 1.83, -53.95, 6.06)),
("31171","Zanderij / Suriname TM",(-58.08, 1.83, -53.95, 6.06)),
("31251","MGI (Ferro) / Austria GK West Zone",(9.53, 46.77, 11.84, 47.61)),
("31252","MGI (Ferro) / Austria GK Central Zone",(11.83, 46.4, 14.84, 48.79)),
("31253","MGI (Ferro) / Austria GK East Zone",(14.83, 46.56, 17.17, 49.02)),
("31254","MGI / Austria GK West",(9.53, 46.77, 11.84, 47.61)),
("31255","MGI / Austria GK Central",(11.83, 46.4, 14.84, 48.79)),
("31256","MGI / Austria GK East",(14.83, 46.56, 17.17, 49.02)),
("31257","MGI / Austria GK M28",(9.53, 46.77, 11.84, 47.61)),
("31258","MGI / Austria GK M31",(11.83, 46.4, 14.84, 48.79)),
("31259","MGI / Austria GK M34",(14.83, 46.56, 17.17, 49.02)),
("31265","MGI / 3-degree Gauss zone 5",(13.38, 42.95, 16.5, 46.88)),
("31266","MGI / 3-degree Gauss zone 6",(16.5, 41.79, 19.51, 46.55)),
("31267","MGI / 3-degree Gauss zone 7",(19.5, 40.85, 22.51, 46.19)),
("31268","MGI / 3-degree Gauss zone 8",(22.5, 41.11, 23.04, 44.7)),
("31275","MGI / Balkans zone 5",(13.38, 42.95, 16.5, 46.88)),
("31276","MGI / Balkans zone 6",(16.5, 41.79, 19.51, 46.55)),
("31277","MGI / Balkans zone 7",(19.5, 40.85, 22.51, 46.19)),
("31278","MGI / Balkans zone 8",(22.5, 41.11, 23.04, 44.7)),
("31279","MGI / Balkans zone 8",(22.5, 41.11, 23.04, 44.7)),
("31281","MGI (Ferro) / Austria West Zone",(9.53, 46.77, 11.84, 47.61)),
("31282","MGI (Ferro) / Austria Central Zone",(11.83, 46.4, 14.84, 48.79)),
("31283","MGI (Ferro) / Austria East Zone",(14.83, 46.56, 17.17, 49.02)),
("31284","MGI / Austria M28",(9.53, 46.77, 11.84, 47.61)),
("31285","MGI / Austria M31",(11.83, 46.4, 14.84, 48.79)),
("31286","MGI / Austria M34",(14.83, 46.56, 17.17, 49.02)),
("31287","MGI / Austria Lambert",(9.53, 46.4, 17.17, 49.02)),
("31288","MGI (Ferro) / Austria zone M28",(9.53, 46.77, 11.84, 47.61)),
("31289","MGI (Ferro) / Austria zone M31",(11.83, 46.4, 14.84, 48.79)),
("31290","MGI (Ferro) / Austria zone M34",(14.83, 46.56, 17.17, 49.02)),
("31291","MGI (Ferro) / Austria West Zone",(9.53, 46.77, 11.84, 47.61)),
("31292","MGI (Ferro) / Austria Central Zone",(14.83, 46.56, 17.17, 49.02)),
("31293","MGI (Ferro) / Austria East Zone",(11.83, 46.4, 14.84, 48.79)),
("31294","MGI / M28",(9.53, 46.77, 11.84, 47.61)),
("31295","MGI / M31",(11.83, 46.4, 14.84, 48.79)),
("31296","MGI / M34",(14.83, 46.56, 17.17, 49.02)),
("31297","MGI / Austria Lambert",(9.53, 46.4, 17.17, 49.02)),
("31300","Belge 1972 / Belge Lambert 72",(2.5, 49.5, 6.4, 51.51)),
("31370","Belge 1972 / Belgian Lambert 72",(2.5, 49.5, 6.4, 51.51)),
("31461","DHDN / 3-degree Gauss zone 1",(-1000.0, -1000.0, -1000.0, -1000.0)),
("31462","DHDN / 3-degree Gauss zone 2",(5.86, 49.11, 7.5, 53.81)),
("31463","DHDN / 3-degree Gauss zone 3",(7.5, 47.27, 10.51, 55.09)),
("31464","DHDN / 3-degree Gauss zone 4",(10.5, 47.39, 13.51, 54.59)),
("31465","DHDN / 3-degree Gauss zone 5",(13.5, 48.51, 13.84, 48.98)),
("31466","DHDN / 3-degree Gauss-Kruger zone 2",(5.86, 49.11, 7.5, 53.81)),
("31467","DHDN / 3-degree Gauss-Kruger zone 3",(7.5, 47.27, 10.51, 55.09)),
("31468","DHDN / 3-degree Gauss-Kruger zone 4",(10.5, 47.39, 13.51, 54.59)),
("31469","DHDN / 3-degree Gauss-Kruger zone 5",(13.5, 48.51, 13.84, 48.98)),
("31528","Conakry 1905 / UTM zone 28N",(-15.13, 9.01, -12.0, 12.68)),
("31529","Conakry 1905 / UTM zone 29N",(-12.0, 7.19, -7.65, 12.51)),
("31600","Dealul Piscului 1930 / Stereo 33",(20.26, 43.62, 29.74, 48.27)),
("31700","Dealul Piscului 1970/ Stereo 70",(20.26, 43.44, 31.41, 48.27)),
("31838","NGN / UTM zone 38N",(46.54, 28.53, 48.0, 30.09)),
("31839","NGN / UTM zone 39N",(48.0, 28.54, 48.48, 30.04)),
("31900","KUDAMS / KTM",(47.78, 29.17, 48.16, 29.45)),
("31901","KUDAMS / KTM",(47.78, 29.17, 48.16, 29.45)),
("31965","SIRGAS 2000 / UTM zone 11N",(-120.0, 15.01, -114.0, 32.72)),
("31966","SIRGAS 2000 / UTM zone 12N",(-114.0, 15.09, -108.0, 32.27)),
("31967","SIRGAS 2000 / UTM zone 13N",(-108.0, 14.05, -102.0, 31.79)),
("31968","SIRGAS 2000 / UTM zone 14N",(-102.01, 12.3, -96.0, 29.81)),
("31969","SIRGAS 2000 / UTM zone 15N",(-96.0, 0.0, -90.0, 26.0)),
("31970","SIRGAS 2000 / UTM zone 16N",(-90.0, 0.0, -83.99, 25.77)),
("31971","SIRGAS 2000 / UTM zone 17N",(-84.0, 0.0, -78.0, 19.54)),
("31972","SIRGAS 2000 / UTM zone 18N",(-78.0, 0.0, -72.0, 15.04)),
("31973","SIRGAS 2000 / UTM zone 19N",(-72.0, 0.0, -66.0, 15.64)),
("31974","SIRGAS 2000 / UTM zone 20N",(-66.0, 0.64, -59.99, 16.75)),
("31975","SIRGAS 2000 / UTM zone 21N",(-60.0, 1.18, -54.0, 12.19)),
("31976","SIRGAS 2000 / UTM zone 22N",(-54.0, 0.0, -47.99, 9.24)),
("31977","SIRGAS 2000 / UTM zone 17S",(-84.0, -56.45, -78.0, 0.0)),
("31978","SIRGAS 2000 / UTM zone 18S",(-78.0, -59.36, -71.99, 0.0)),
("31979","SIRGAS 2000 / UTM zone 19S",(-72.0, -59.87, -66.0, 2.15)),
("31980","SIRGAS 2000 / UTM zone 20S",(-66.0, -58.39, -60.0, 5.28)),
("31981","SIRGAS 2000 / UTM zone 21S",(-60.0, -44.82, -54.0, 4.51)),
("31982","SIRGAS 2000 / UTM zone 22S",(-54.0, -54.18, -47.99, 7.04)),
("31983","SIRGAS 2000 / UTM zone 23S",(-48.0, -33.5, -42.0, 5.13)),
("31984","SIRGAS 2000 / UTM zone 24S",(-42.0, -26.35, -36.0, 0.74)),
("31985","SIRGAS 2000 / UTM zone 25S",(-36.0, -23.8, -29.99, 4.19)),
("31986","SIRGAS 1995 / UTM zone 17N",(-84.0, 0.9, -78.0, 15.51)),
("31987","SIRGAS 1995 / UTM zone 18N",(-78.0, 0.0, -72.0, 15.04)),
("31988","SIRGAS 1995 / UTM zone 19N",(-72.0, 0.0, -66.0, 15.64)),
("31989","SIRGAS 1995 / UTM zone 20N",(-66.0, 0.0, -60.0, 16.75)),
("31990","SIRGAS 1995 / UTM zone 21N",(-60.0, 0.0, -54.0, 10.7)),
("31991","SIRGAS 1995 / UTM zone 22N",(-54.0, 0.0, -48.0, 9.24)),
("31992","SIRGAS 1995 / UTM zone 17S",(-84.0, -56.45, -75.21, 1.45)),
("31993","SIRGAS 1995 / UTM zone 18S",(-78.0, -59.36, -71.99, 0.0)),
("31994","SIRGAS 1995 / UTM zone 19S",(-72.0, -59.87, -66.0, 0.0)),
("31995","SIRGAS 1995 / UTM zone 20S",(-66.0, -58.39, -60.0, 0.0)),
("31996","SIRGAS 1995 / UTM zone 21S",(-60.0, -44.82, -54.0, 0.0)),
("31997","SIRGAS 1995 / UTM zone 22S",(-54.0, -39.95, -48.0, 0.0)),
("31998","SIRGAS 1995 / UTM zone 23S",(-48.0, -33.5, -42.0, 0.0)),
("31999","SIRGAS 1995 / UTM zone 24S",(-42.0, -26.35, -36.0, 0.0)),
("32000","SIRGAS 1995 / UTM zone 25S",(-36.0, -20.11, -30.0, 0.0)),
("32001","NAD27 / Montana North",(-116.07, 47.41, -104.04, 49.01)),
("32002","NAD27 / Montana Central",(-116.06, 46.17, -104.04, 48.26)),
("32003","NAD27 / Montana South",(-114.57, 44.35, -104.04, 46.87)),
("32005","NAD27 / Nebraska North",(-104.06, 41.68, -96.07, 43.01)),
("32006","NAD27 / Nebraska South",(-104.06, 39.99, -95.3, 42.01)),
("32007","NAD27 / Nevada East",(-117.01, 34.99, -114.03, 42.0)),
("32008","NAD27 / Nevada Central",(-118.19, 36.0, -114.99, 41.0)),
("32009","NAD27 / Nevada West",(-120.0, 36.95, -116.99, 42.0)),
("32010","NAD27 / New Hampshire",(-72.56, 42.69, -70.63, 45.31)),
("32011","NAD27 / New Jersey",(-75.6, 38.87, -73.88, 41.36)),
("32012","NAD27 / New Mexico East",(-105.72, 32.0, -102.99, 37.0)),
("32013","NAD27 / New Mexico Central",(-107.73, 31.78, -104.83, 37.0)),
("32014","NAD27 / New Mexico West",(-109.06, 31.33, -106.32, 37.0)),
("32015","NAD27 / New York East",(-75.87, 40.88, -73.23, 45.02)),
("32016","NAD27 / New York Central",(-77.75, 41.99, -75.04, 44.41)),
("32017","NAD27 / New York West",(-79.77, 41.99, -77.36, 43.64)),
("32018","NAD27 / New York Long Island",(-74.26, 40.47, -71.8, 41.3)),
("32019","NAD27 / North Carolina",(-84.33, 33.83, -75.38, 36.59)),
("32020","NAD27 / North Dakota North",(-104.07, 47.15, -96.83, 49.01)),
("32021","NAD27 / North Dakota South",(-104.05, 45.93, -96.55, 47.83)),
("32022","NAD27 / Ohio North",(-84.81, 40.1, -80.51, 42.33)),
("32023","NAD27 / Ohio South",(-84.83, 38.4, -80.7, 40.36)),
("32024","NAD27 / Oklahoma North",(-103.0, 35.27, -94.42, 37.01)),
("32025","NAD27 / Oklahoma South",(-100.0, 33.62, -94.42, 35.57)),
("32026","NAD27 / Oregon North",(-124.17, 43.95, -116.47, 46.26)),
("32027","NAD27 / Oregon South",(-124.6, 41.98, -116.9, 44.56)),
("32028","NAD27 / Pennsylvania North",(-80.53, 40.6, -74.7, 42.53)),
("32029","NAD27 / Pennsylvania South",(-80.53, 39.71, -74.72, 41.18)),
("32030","NAD27 / Rhode Island",(-71.85, 41.13, -71.08, 42.02)),
("32031","NAD27 / South Carolina North",(-83.36, 33.46, -78.52, 35.21)),
("32033","NAD27 / South Carolina South",(-82.03, 32.05, -78.95, 33.95)),
("32034","NAD27 / South Dakota North",(-104.07, 44.14, -96.45, 45.95)),
("32035","NAD27 / South Dakota South",(-104.06, 42.48, -96.43, 44.79)),
("32036","NAD27 / Tennessee",(-90.31, 34.98, -81.65, 36.68)),
("32037","NAD27 / Texas North",(-103.03, 34.3, -99.99, 36.5)),
("32038","NAD27 / Texas North Central",(-103.07, 31.72, -94.0, 34.58)),
("32039","NAD27 / Texas Central",(-106.66, 29.78, -93.5, 32.27)),
("32040","NAD27 / Texas South Central",(-105.0, 27.78, -93.41, 30.67)),
("32041","NAD27 / Texas South",(-100.2, 25.83, -95.37, 28.21)),
("32042","NAD27 / Utah North",(-114.04, 40.55, -109.04, 42.01)),
("32043","NAD27 / Utah Central",(-114.05, 38.49, -109.04, 41.08)),
("32044","NAD27 / Utah South",(-114.05, 36.99, -109.04, 38.58)),
("32045","NAD27 / Vermont",(-73.44, 42.72, -71.5, 45.03)),
("32046","NAD27 / Virginia North",(-80.06, 37.77, -76.51, 39.46)),
("32047","NAD27 / Virginia South",(-83.68, 36.54, -75.31, 38.28)),
("32048","NAD27 / Washington North",(-124.79, 47.08, -117.02, 49.05)),
("32049","NAD27 / Washington South",(-124.4, 45.54, -116.91, 47.96)),
("32050","NAD27 / West Virginia North",(-81.76, 38.76, -77.72, 40.64)),
("32051","NAD27 / West Virginia South",(-82.65, 37.2, -79.05, 39.17)),
("32052","NAD27 / Wisconsin North",(-92.89, 45.37, -88.05, 47.31)),
("32053","NAD27 / Wisconsin Central",(-92.89, 43.98, -86.25, 45.8)),
("32054","NAD27 / Wisconsin South",(-91.43, 42.48, -86.95, 44.33)),
("32055","NAD27 / Wyoming East",(-106.33, 40.99, -104.05, 45.01)),
("32056","NAD27 / Wyoming East Central",(-108.63, 40.99, -106.0, 45.01)),
("32057","NAD27 / Wyoming West Central",(-111.06, 40.99, -107.5, 45.01)),
("32058","NAD27 / Wyoming West",(-111.06, 40.99, -109.04, 44.67)),
("32061","NAD27 / Guatemala Norte",(-91.86, 15.85, -88.34, 17.83)),
("32062","NAD27 / Guatemala Sur",(-92.29, 13.69, -88.19, 15.86)),
("32064","NAD27 / BLM 14N (ftUS)",(-102.0, 25.83, -95.87, 49.01)),
("32065","NAD27 / BLM 15N (ftUS)",(-96.01, 25.61, -89.86, 49.38)),
("32066","NAD27 / BLM 16N (ftUS)",(-90.01, 23.95, -83.91, 48.32)),
("32067","NAD27 / BLM 17N (ftUS)",(-84.09, 23.81, -77.99, 46.13)),
("32074","NAD27 / BLM 14N (feet)",(-97.22, 25.97, -95.87, 28.43)),
("32075","NAD27 / BLM 15N (feet)",(-96.0, 25.61, -89.86, 29.73)),
("32076","NAD27 / BLM 16N (feet)",(-90.01, 23.95, -83.91, 30.25)),
("32077","NAD27 / BLM 17N (feet)",(-84.09, 23.82, -81.17, 29.94)),
("32081","NAD27 / MTM zone 1",(-54.5, 46.56, -52.54, 49.71)),
("32082","NAD27 / MTM zone 2",(-57.5, 46.81, -54.49, 54.71)),
("32083","NAD27 / MTM zone 3",(-59.48, 47.5, -57.5, 50.54)),
("32084","NAD27 / MTM zone 4",(-63.0, 52.0, -60.0, 58.92)),
("32085","NAD27 / MTM zone 5",(-66.0, 51.58, -63.0, 60.52)),
("32086","NAD27 / MTM zone 6",(-67.81, 52.05, -66.0, 55.34)),
("32098","NAD27 / Quebec Lambert",(-79.85, 44.99, -57.1, 62.62)),
("32099","NAD27 / Louisiana Offshore",(-94.05, 28.85, -88.75, 33.03)),
("32100","NAD83 / Montana",(-116.07, 44.35, -104.04, 49.01)),
("32104","NAD83 / Nebraska",(-104.06, 39.99, -95.3, 43.01)),
("32107","NAD83 / Nevada East",(-117.01, 34.99, -114.03, 42.0)),
("32108","NAD83 / Nevada Central",(-118.19, 36.0, -114.99, 41.0)),
("32109","NAD83 / Nevada West",(-120.0, 36.95, -116.99, 42.0)),
("32110","NAD83 / New Hampshire",(-72.56, 42.69, -70.63, 45.31)),
("32111","NAD83 / New Jersey",(-75.6, 38.87, -73.88, 41.36)),
("32112","NAD83 / New Mexico East",(-105.72, 32.0, -102.99, 37.0)),
("32113","NAD83 / New Mexico Central",(-107.73, 31.78, -104.84, 37.0)),
("32114","NAD83 / New Mexico West",(-109.06, 31.33, -106.32, 37.0)),
("32115","NAD83 / New York East",(-75.87, 40.88, -73.23, 45.02)),
("32116","NAD83 / New York Central",(-77.75, 41.99, -75.04, 44.41)),
("32117","NAD83 / New York West",(-79.77, 41.99, -77.36, 43.64)),
("32118","NAD83 / New York Long Island",(-74.26, 40.47, -71.8, 41.3)),
("32119","NAD83 / North Carolina",(-84.33, 33.83, -75.38, 36.59)),
("32120","NAD83 / North Dakota North",(-104.07, 47.15, -96.83, 49.01)),
("32121","NAD83 / North Dakota South",(-104.05, 45.93, -96.55, 47.83)),
("32122","NAD83 / Ohio North",(-84.81, 40.1, -80.51, 42.33)),
("32123","NAD83 / Ohio South",(-84.83, 38.4, -80.7, 40.36)),
("32124","NAD83 / Oklahoma North",(-103.0, 35.27, -94.42, 37.01)),
("32125","NAD83 / Oklahoma South",(-100.0, 33.62, -94.42, 35.57)),
("32126","NAD83 / Oregon North",(-124.17, 43.95, -116.47, 46.26)),
("32127","NAD83 / Oregon South",(-124.6, 41.98, -116.9, 44.56)),
("32128","NAD83 / Pennsylvania North",(-80.53, 40.6, -74.7, 42.53)),
("32129","NAD83 / Pennsylvania South",(-80.53, 39.71, -74.72, 41.18)),
("32130","NAD83 / Rhode Island",(-71.85, 41.13, -71.08, 42.02)),
("32133","NAD83 / South Carolina",(-83.36, 32.05, -78.52, 35.21)),
("32134","NAD83 / South Dakota North",(-104.07, 44.14, -96.45, 45.95)),
("32135","NAD83 / South Dakota South",(-104.06, 42.48, -96.43, 44.79)),
("32136","NAD83 / Tennessee",(-90.31, 34.98, -81.65, 36.68)),
("32137","NAD83 / Texas North",(-103.03, 34.3, -99.99, 36.5)),
("32138","NAD83 / Texas North Central",(-103.07, 31.72, -94.0, 34.58)),
("32139","NAD83 / Texas Central",(-106.66, 29.78, -93.5, 32.27)),
("32140","NAD83 / Texas South Central",(-105.0, 27.78, -93.76, 30.67)),
("32141","NAD83 / Texas South",(-100.2, 25.83, -96.85, 28.21)),
("32142","NAD83 / Utah North",(-114.04, 40.55, -109.04, 42.01)),
("32143","NAD83 / Utah Central",(-114.05, 38.49, -109.04, 41.08)),
("32144","NAD83 / Utah South",(-114.05, 36.99, -109.04, 38.58)),
("32145","NAD83 / Vermont",(-73.44, 42.72, -71.5, 45.03)),
("32146","NAD83 / Virginia North",(-80.06, 37.77, -76.51, 39.46)),
("32147","NAD83 / Virginia South",(-83.68, 36.54, -75.31, 38.28)),
("32148","NAD83 / Washington North",(-124.79, 47.08, -117.02, 49.05)),
("32149","NAD83 / Washington South",(-124.4, 45.54, -116.91, 47.61)),
("32150","NAD83 / West Virginia North",(-81.76, 38.76, -77.72, 40.64)),
("32151","NAD83 / West Virginia South",(-82.65, 37.2, -79.05, 39.17)),
("32152","NAD83 / Wisconsin North",(-92.89, 45.37, -88.05, 47.31)),
("32153","NAD83 / Wisconsin Central",(-92.89, 43.98, -86.25, 45.8)),
("32154","NAD83 / Wisconsin South",(-91.43, 42.48, -86.95, 44.33)),
("32155","NAD83 / Wyoming East",(-106.33, 40.99, -104.05, 45.01)),
("32156","NAD83 / Wyoming East Central",(-108.63, 40.99, -106.0, 45.01)),
("32157","NAD83 / Wyoming West Central",(-111.06, 40.99, -107.5, 45.01)),
("32158","NAD83 / Wyoming West",(-111.06, 40.99, -109.04, 44.67)),
("32161","NAD83 / Puerto Rico & Virgin Is.",(-68.49, 14.92, -63.88, 21.86)),
("32164","NAD83 / BLM 14N (ftUS)",(-102.0, 25.83, -95.87, 49.01)),
("32165","NAD83 / BLM 15N (ftUS)",(-96.01, 25.61, -89.86, 49.38)),
("32166","NAD83 / BLM 16N (ftUS)",(-90.01, 23.95, -83.91, 48.32)),
("32167","NAD83 / BLM 17N (ftUS)",(-84.09, 23.81, -77.99, 46.13)),
("32180","NAD83 / SCoPQ zone 2",(-57.0, 46.6, -54.0, 53.76)),
("32181","NAD83 / MTM zone 1",(-54.5, 46.56, -52.54, 49.71)),
("32182","NAD83 / MTM zone 2",(-57.5, 46.81, -54.49, 54.71)),
("32183","NAD83 / MTM zone 3",(-60.0, 47.5, -57.1, 55.38)),
("32184","NAD83 / MTM zone 4",(-63.0, 47.16, -60.0, 58.92)),
("32185","NAD83 / MTM zone 5",(-66.0, 47.95, -63.0, 60.52)),
("32186","NAD83 / MTM zone 6",(-69.0, 47.31, -66.0, 59.0)),
("32187","NAD83 / MTM zone 7",(-72.0, 45.01, -69.0, 61.8)),
("32188","NAD83 / MTM zone 8",(-75.0, 44.98, -72.0, 62.53)),
("32189","NAD83 / MTM zone 9",(-78.0, 43.63, -75.0, 62.65)),
("32190","NAD83 / MTM zone 10",(-81.0, 42.26, -78.0, 62.45)),
("32191","NAD83 / MTM zone 11",(-83.6, 41.67, -81.0, 46.0)),
("32192","NAD83 / MTM zone 12",(-82.5, 46.0, -79.5, 55.21)),
("32193","NAD83 / MTM zone 13",(-85.5, 46.0, -82.5, 55.59)),
("32194","NAD83 / MTM zone 14",(-88.5, 47.17, -85.5, 56.7)),
("32195","NAD83 / MTM zone 15",(-91.5, 47.97, -88.5, 56.9)),
("32196","NAD83 / MTM zone 16",(-94.5, 48.06, -91.5, 55.2)),
("32197","NAD83 / MTM zone 17",(-95.16, 48.69, -94.5, 53.24)),
("32198","NAD83 / Quebec Lambert",(-79.85, 44.99, -57.1, 62.62)),
("32199","NAD83 / Louisiana Offshore",(-94.05, 28.85, -88.75, 33.03)),
("32201","WGS 72 / UTM zone 1N",(-180.0, 0.0, -174.0, 84.0)),
("32202","WGS 72 / UTM zone 2N",(-174.0, 0.0, -168.0, 84.0)),
("32203","WGS 72 / UTM zone 3N",(-168.0, 0.0, -162.0, 84.0)),
("32204","WGS 72 / UTM zone 4N",(-162.0, 0.0, -156.0, 84.0)),
("32205","WGS 72 / UTM zone 5N",(-156.0, 0.0, -150.0, 84.0)),
("32206","WGS 72 / UTM zone 6N",(-150.0, 0.0, -144.0, 84.0)),
("32207","WGS 72 / UTM zone 7N",(-144.0, 0.0, -138.0, 84.0)),
("32208","WGS 72 / UTM zone 8N",(-138.0, 0.0, -132.0, 84.0)),
("32209","WGS 72 / UTM zone 9N",(-132.0, 0.0, -126.0, 84.0)),
("32210","WGS 72 / UTM zone 10N",(-126.0, 0.0, -120.0, 84.0)),
("32211","WGS 72 / UTM zone 11N",(-120.0, 0.0, -114.0, 84.0)),
("32212","WGS 72 / UTM zone 12N",(-114.0, 0.0, -108.0, 84.0)),
("32213","WGS 72 / UTM zone 13N",(-108.0, 0.0, -102.0, 84.0)),
("32214","WGS 72 / UTM zone 14N",(-102.0, 0.0, -96.0, 84.0)),
("32215","WGS 72 / UTM zone 15N",(-96.0, 0.0, -90.0, 84.0)),
("32216","WGS 72 / UTM zone 16N",(-90.0, 0.0, -84.0, 84.0)),
("32217","WGS 72 / UTM zone 17N",(-84.0, 0.0, -78.0, 84.0)),
("32218","WGS 72 / UTM zone 18N",(-78.0, 0.0, -72.0, 84.0)),
("32219","WGS 72 / UTM zone 19N",(-72.0, 0.0, -66.0, 84.0)),
("32220","WGS 72 / UTM zone 20N",(-66.0, 0.0, -60.0, 84.0)),
("32221","WGS 72 / UTM zone 21N",(-60.0, 0.0, -54.0, 84.0)),
("32222","WGS 72 / UTM zone 22N",(-54.0, 0.0, -48.0, 84.0)),
("32223","WGS 72 / UTM zone 23N",(-48.0, 0.0, -42.0, 84.0)),
("32224","WGS 72 / UTM zone 24N",(-42.0, 0.0, -36.0, 84.0)),
("32225","WGS 72 / UTM zone 25N",(-36.0, 0.0, -30.0, 84.0)),
("32226","WGS 72 / UTM zone 26N",(-30.0, 0.0, -24.0, 84.0)),
("32227","WGS 72 / UTM zone 27N",(-24.0, 0.0, -18.0, 84.0)),
("32228","WGS 72 / UTM zone 28N",(-18.0, 0.0, -12.0, 84.0)),
("32229","WGS 72 / UTM zone 29N",(-12.0, 0.0, -6.0, 84.0)),
("32230","WGS 72 / UTM zone 30N",(-6.0, 0.0, 0.0, 84.0)),
("32231","WGS 72 / UTM zone 31N",(0.0, 0.0, 6.0, 84.0)),
("32232","WGS 72 / UTM zone 32N",(6.0, 0.0, 12.0, 84.0)),
("32233","WGS 72 / UTM zone 33N",(12.0, 0.0, 18.0, 84.0)),
("32234","WGS 72 / UTM zone 34N",(18.0, 0.0, 24.0, 84.0)),
("32235","WGS 72 / UTM zone 35N",(24.0, 0.0, 30.0, 84.0)),
("32236","WGS 72 / UTM zone 36N",(30.0, 0.0, 36.0, 84.0)),
("32237","WGS 72 / UTM zone 37N",(36.0, 0.0, 42.0, 84.0)),
("32238","WGS 72 / UTM zone 38N",(42.0, 0.0, 48.0, 84.0)),
("32239","WGS 72 / UTM zone 39N",(48.0, 0.0, 54.0, 84.0)),
("32240","WGS 72 / UTM zone 40N",(54.0, 0.0, 60.0, 84.0)),
("32241","WGS 72 / UTM zone 41N",(60.0, 0.0, 66.0, 84.0)),
("32242","WGS 72 / UTM zone 42N",(66.0, 0.0, 72.0, 84.0)),
("32243","WGS 72 / UTM zone 43N",(72.0, 0.0, 78.0, 84.0)),
("32244","WGS 72 / UTM zone 44N",(78.0, 0.0, 84.0, 84.0)),
("32245","WGS 72 / UTM zone 45N",(84.0, 0.0, 90.0, 84.0)),
("32246","WGS 72 / UTM zone 46N",(90.0, 0.0, 96.0, 84.0)),
("32247","WGS 72 / UTM zone 47N",(96.0, 0.0, 102.0, 84.0)),
("32248","WGS 72 / UTM zone 48N",(102.0, 0.0, 108.0, 84.0)),
("32249","WGS 72 / UTM zone 49N",(108.0, 0.0, 114.0, 84.0)),
("32250","WGS 72 / UTM zone 50N",(114.0, 0.0, 120.0, 84.0)),
("32251","WGS 72 / UTM zone 51N",(120.0, 0.0, 126.0, 84.0)),
("32252","WGS 72 / UTM zone 52N",(126.0, 0.0, 132.0, 84.0)),
("32253","WGS 72 / UTM zone 53N",(132.0, 0.0, 138.0, 84.0)),
("32254","WGS 72 / UTM zone 54N",(138.0, 0.0, 144.0, 84.0)),
("32255","WGS 72 / UTM zone 55N",(144.0, 0.0, 150.0, 84.0)),
("32256","WGS 72 / UTM zone 56N",(150.0, 0.0, 156.0, 84.0)),
("32257","WGS 72 / UTM zone 57N",(156.0, 0.0, 162.0, 84.0)),
("32258","WGS 72 / UTM zone 58N",(162.0, 0.0, 168.0, 84.0)),
("32259","WGS 72 / UTM zone 59N",(168.0, 0.0, 174.0, 84.0)),
("32260","WGS 72 / UTM zone 60N",(174.0, 0.0, 180.0, 84.0)),
("32301","WGS 72 / UTM zone 1S",(-180.0, -80.0, -174.0, 0.0)),
("32302","WGS 72 / UTM zone 2S",(-174.0, -80.0, -168.0, 0.0)),
("32303","WGS 72 / UTM zone 3S",(-168.0, -80.0, -162.0, 0.0)),
("32304","WGS 72 / UTM zone 4S",(-162.0, -80.0, -156.0, 0.0)),
("32305","WGS 72 / UTM zone 5S",(-156.0, -80.0, -150.0, 0.0)),
("32306","WGS 72 / UTM zone 6S",(-150.0, -80.0, -144.0, 0.0)),
("32307","WGS 72 / UTM zone 7S",(-144.0, -80.0, -138.0, 0.0)),
("32308","WGS 72 / UTM zone 8S",(-138.0, -80.0, -132.0, 0.0)),
("32309","WGS 72 / UTM zone 9S",(-132.0, -80.0, -126.0, 0.0)),
("32310","WGS 72 / UTM zone 10S",(-126.0, -80.0, -120.0, 0.0)),
("32311","WGS 72 / UTM zone 11S",(-120.0, -80.0, -114.0, 0.0)),
("32312","WGS 72 / UTM zone 12S",(-114.0, -80.0, -108.0, 0.0)),
("32313","WGS 72 / UTM zone 13S",(-108.0, -80.0, -102.0, 0.0)),
("32314","WGS 72 / UTM zone 14S",(-102.0, -80.0, -96.0, 0.0)),
("32315","WGS 72 / UTM zone 15S",(-96.0, -80.0, -90.0, 0.0)),
("32316","WGS 72 / UTM zone 16S",(-90.0, -80.0, -84.0, 0.0)),
("32317","WGS 72 / UTM zone 17S",(-84.0, -80.0, -78.0, 0.0)),
("32318","WGS 72 / UTM zone 18S",(-78.0, -80.0, -72.0, 0.0)),
("32319","WGS 72 / UTM zone 19S",(-72.0, -80.0, -66.0, 0.0)),
("32320","WGS 72 / UTM zone 20S",(-66.0, -80.0, -60.0, 0.0)),
("32321","WGS 72 / UTM zone 21S",(-60.0, -80.0, -54.0, 0.0)),
("32322","WGS 72 / UTM zone 22S",(-54.0, -80.0, -48.0, 0.0)),
("32323","WGS 72 / UTM zone 23S",(-48.0, -80.0, -42.0, 0.0)),
("32324","WGS 72 / UTM zone 24S",(-42.0, -80.0, -36.0, 0.0)),
("32325","WGS 72 / UTM zone 25S",(-36.0, -80.0, -30.0, 0.0)),
("32326","WGS 72 / UTM zone 26S",(-30.0, -80.0, -24.0, 0.0)),
("32327","WGS 72 / UTM zone 27S",(-24.0, -80.0, -18.0, 0.0)),
("32328","WGS 72 / UTM zone 28S",(-18.0, -80.0, -12.0, 0.0)),
("32329","WGS 72 / UTM zone 29S",(-12.0, -80.0, -6.0, 0.0)),
("32330","WGS 72 / UTM zone 30S",(-6.0, -80.0, 0.0, 0.0)),
("32331","WGS 72 / UTM zone 31S",(0.0, -80.0, 6.0, 0.0)),
("32332","WGS 72 / UTM zone 32S",(6.0, -80.0, 12.0, 0.0)),
("32333","WGS 72 / UTM zone 33S",(12.0, -80.0, 18.0, 0.0)),
("32334","WGS 72 / UTM zone 34S",(18.0, -80.0, 24.0, 0.0)),
("32335","WGS 72 / UTM zone 35S",(24.0, -80.0, 30.0, 0.0)),
("32336","WGS 72 / UTM zone 36S",(30.0, -80.0, 36.0, 0.0)),
("32337","WGS 72 / UTM zone 37S",(36.0, -80.0, 42.0, 0.0)),
("32338","WGS 72 / UTM zone 38S",(42.0, -80.0, 48.0, 0.0)),
("32339","WGS 72 / UTM zone 39S",(48.0, -80.0, 54.0, 0.0)),
("32340","WGS 72 / UTM zone 40S",(54.0, -80.0, 60.0, 0.0)),
("32341","WGS 72 / UTM zone 41S",(60.0, -80.0, 66.0, 0.0)),
("32342","WGS 72 / UTM zone 42S",(66.0, -80.0, 72.0, 0.0)),
("32343","WGS 72 / UTM zone 43S",(72.0, -80.0, 78.0, 0.0)),
("32344","WGS 72 / UTM zone 44S",(78.0, -80.0, 84.0, 0.0)),
("32345","WGS 72 / UTM zone 45S",(84.0, -80.0, 90.0, 0.0)),
("32346","WGS 72 / UTM zone 46S",(90.0, -80.0, 96.0, 0.0)),
("32347","WGS 72 / UTM zone 47S",(96.0, -80.0, 102.0, 0.0)),
("32348","WGS 72 / UTM zone 48S",(102.0, -80.0, 108.0, 0.0)),
("32349","WGS 72 / UTM zone 49S",(108.0, -80.0, 114.0, 0.0)),
("32350","WGS 72 / UTM zone 50S",(114.0, -80.0, 120.0, 0.0)),
("32351","WGS 72 / UTM zone 51S",(120.0, -80.0, 126.0, 0.0)),
("32352","WGS 72 / UTM zone 52S",(126.0, -80.0, 132.0, 0.0)),
("32353","WGS 72 / UTM zone 53S",(132.0, -80.0, 138.0, 0.0)),
("32354","WGS 72 / UTM zone 54S",(138.0, -80.0, 144.0, 0.0)),
("32355","WGS 72 / UTM zone 55S",(144.0, -80.0, 150.0, 0.0)),
("32356","WGS 72 / UTM zone 56S",(150.0, -80.0, 156.0, 0.0)),
("32357","WGS 72 / UTM zone 57S",(156.0, -80.0, 162.0, 0.0)),
("32358","WGS 72 / UTM zone 58S",(162.0, -80.0, 168.0, 0.0)),
("32359","WGS 72 / UTM zone 59S",(168.0, -80.0, 174.0, 0.0)),
("32360","WGS 72 / UTM zone 60S",(174.0, -80.0, 180.0, 0.0)),
("32401","WGS 72BE / UTM zone 1N",(-180.0, 0.0, -174.0, 84.0)),
("32402","WGS 72BE / UTM zone 2N",(-174.0, -80.0, -168.0, 0.0)),
("32403","WGS 72BE / UTM zone 3N",(-168.0, 0.0, -162.0, 84.0)),
("32404","WGS 72BE / UTM zone 4N",(-162.0, 0.0, -156.0, 84.0)),
("32405","WGS 72BE / UTM zone 5N",(-156.0, 0.0, -150.0, 84.0)),
("32406","WGS 72BE / UTM zone 6N",(-150.0, 0.0, -144.0, 84.0)),
("32407","WGS 72BE / UTM zone 7N",(-144.0, 0.0, -138.0, 84.0)),
("32408","WGS 72BE / UTM zone 8N",(-138.0, 0.0, -132.0, 84.0)),
("32409","WGS 72BE / UTM zone 9N",(-132.0, 0.0, -126.0, 84.0)),
("32410","WGS 72BE / UTM zone 10N",(-126.0, 0.0, -120.0, 84.0)),
("32411","WGS 72BE / UTM zone 11N",(-120.0, 0.0, -114.0, 84.0)),
("32412","WGS 72BE / UTM zone 12N",(-114.0, 0.0, -108.0, 84.0)),
("32413","WGS 72BE / UTM zone 13N",(-108.0, 0.0, -102.0, 84.0)),
("32414","WGS 72BE / UTM zone 14N",(-102.0, 0.0, -96.0, 84.0)),
("32415","WGS 72BE / UTM zone 15N",(-96.0, 0.0, -90.0, 84.0)),
("32416","WGS 72BE / UTM zone 16N",(-90.0, 0.0, -84.0, 84.0)),
("32417","WGS 72BE / UTM zone 17N",(-84.0, 0.0, -78.0, 84.0)),
("32418","WGS 72BE / UTM zone 18N",(-78.0, 0.0, -72.0, 84.0)),
("32419","WGS 72BE / UTM zone 19N",(-72.0, 0.0, -66.0, 84.0)),
("32420","WGS 72BE / UTM zone 20N",(-66.0, 0.0, -60.0, 84.0)),
("32421","WGS 72BE / UTM zone 21N",(-60.0, 0.0, -54.0, 84.0)),
("32422","WGS 72BE / UTM zone 22N",(-54.0, 0.0, -48.0, 84.0)),
("32423","WGS 72BE / UTM zone 23N",(-48.0, 0.0, -42.0, 84.0)),
("32424","WGS 72BE / UTM zone 24N",(-42.0, 0.0, -36.0, 84.0)),
("32425","WGS 72BE / UTM zone 25N",(-36.0, 0.0, -30.0, 84.0)),
("32426","WGS 72BE / UTM zone 26N",(-30.0, 0.0, -24.0, 84.0)),
("32427","WGS 72BE / UTM zone 27N",(-24.0, 0.0, -18.0, 84.0)),
("32428","WGS 72BE / UTM zone 28N",(-18.0, 0.0, -12.0, 84.0)),
("32429","WGS 72BE / UTM zone 29N",(-12.0, 0.0, -6.0, 84.0)),
("32430","WGS 72BE / UTM zone 30N",(-6.0, 0.0, 0.0, 84.0)),
("32431","WGS 72BE / UTM zone 31N",(0.0, 0.0, 6.0, 84.0)),
("32432","WGS 72BE / UTM zone 32N",(6.0, 0.0, 12.0, 84.0)),
("32433","WGS 72BE / UTM zone 33N",(12.0, 0.0, 18.0, 84.0)),
("32434","WGS 72BE / UTM zone 34N",(18.0, 0.0, 24.0, 84.0)),
("32435","WGS 72BE / UTM zone 35N",(24.0, 0.0, 30.0, 84.0)),
("32436","WGS 72BE / UTM zone 36N",(30.0, 0.0, 36.0, 84.0)),
("32437","WGS 72BE / UTM zone 37N",(36.0, 0.0, 42.0, 84.0)),
("32438","WGS 72BE / UTM zone 38N",(42.0, 0.0, 48.0, 84.0)),
("32439","WGS 72BE / UTM zone 39N",(48.0, 0.0, 54.0, 84.0)),
("32440","WGS 72BE / UTM zone 40N",(54.0, 0.0, 60.0, 84.0)),
("32441","WGS 72BE / UTM zone 41N",(60.0, 0.0, 66.0, 84.0)),
("32442","WGS 72BE / UTM zone 42N",(66.0, 0.0, 72.0, 84.0)),
("32443","WGS 72BE / UTM zone 43N",(72.0, 0.0, 78.0, 84.0)),
("32444","WGS 72BE / UTM zone 44N",(78.0, 0.0, 84.0, 84.0)),
("32445","WGS 72BE / UTM zone 45N",(84.0, 0.0, 90.0, 84.0)),
("32446","WGS 72BE / UTM zone 46N",(90.0, 0.0, 96.0, 84.0)),
("32447","WGS 72BE / UTM zone 47N",(96.0, 0.0, 102.0, 84.0)),
("32448","WGS 72BE / UTM zone 48N",(102.0, 0.0, 108.0, 84.0)),
("32449","WGS 72BE / UTM zone 49N",(108.0, 0.0, 114.0, 84.0)),
("32450","WGS 72BE / UTM zone 50N",(114.0, 0.0, 120.0, 84.0)),
("32451","WGS 72BE / UTM zone 51N",(120.0, 0.0, 126.0, 84.0)),
("32452","WGS 72BE / UTM zone 52N",(126.0, 0.0, 132.0, 84.0)),
("32453","WGS 72BE / UTM zone 53N",(132.0, 0.0, 138.0, 84.0)),
("32454","WGS 72BE / UTM zone 54N",(138.0, 0.0, 144.0, 84.0)),
("32455","WGS 72BE / UTM zone 55N",(144.0, 0.0, 150.0, 84.0)),
("32456","WGS 72BE / UTM zone 56N",(150.0, 0.0, 156.0, 84.0)),
("32457","WGS 72BE / UTM zone 57N",(156.0, 0.0, 162.0, 84.0)),
("32458","WGS 72BE / UTM zone 58N",(162.0, 0.0, 168.0, 84.0)),
("32459","WGS 72BE / UTM zone 59N",(168.0, 0.0, 174.0, 84.0)),
("32460","WGS 72BE / UTM zone 60N",(174.0, 0.0, 180.0, 84.0)),
("32501","WGS 72BE / UTM zone 1S",(-180.0, -80.0, -174.0, 0.0)),
("32502","WGS 72BE / UTM zone 2S",(-174.0, -80.0, -168.0, 0.0)),
("32503","WGS 72BE / UTM zone 3S",(-168.0, -80.0, -162.0, 0.0)),
("32504","WGS 72BE / UTM zone 4S",(-162.0, -80.0, -156.0, 0.0)),
("32505","WGS 72BE / UTM zone 5S",(-156.0, -80.0, -150.0, 0.0)),
("32506","WGS 72BE / UTM zone 6S",(-150.0, -80.0, -144.0, 0.0)),
("32507","WGS 72BE / UTM zone 7S",(-144.0, -80.0, -138.0, 0.0)),
("32508","WGS 72BE / UTM zone 8S",(-138.0, -80.0, -132.0, 0.0)),
("32509","WGS 72BE / UTM zone 9S",(-132.0, -80.0, -126.0, 0.0)),
("32510","WGS 72BE / UTM zone 10S",(-126.0, -80.0, -120.0, 0.0)),
("32511","WGS 72BE / UTM zone 11S",(-120.0, -80.0, -114.0, 0.0)),
("32512","WGS 72BE / UTM zone 12S",(-114.0, -80.0, -108.0, 0.0)),
("32513","WGS 72BE / UTM zone 13S",(-108.0, -80.0, -102.0, 0.0)),
("32514","WGS 72BE / UTM zone 14S",(-102.0, -80.0, -96.0, 0.0)),
("32515","WGS 72BE / UTM zone 15S",(-96.0, -80.0, -90.0, 0.0)),
("32516","WGS 72BE / UTM zone 16S",(-90.0, -80.0, -84.0, 0.0)),
("32517","WGS 72BE / UTM zone 17S",(-84.0, -80.0, -78.0, 0.0)),
("32518","WGS 72BE / UTM zone 18S",(-78.0, -80.0, -72.0, 0.0)),
("32519","WGS 72BE / UTM zone 19S",(-72.0, -80.0, -66.0, 0.0)),
("32520","WGS 72BE / UTM zone 20S",(-66.0, -80.0, -60.0, 0.0)),
("32521","WGS 72BE / UTM zone 21S",(-60.0, -80.0, -54.0, 0.0)),
("32522","WGS 72BE / UTM zone 22S",(-54.0, -80.0, -48.0, 0.0)),
("32523","WGS 72BE / UTM zone 23S",(-48.0, -80.0, -42.0, 0.0)),
("32524","WGS 72BE / UTM zone 24S",(-42.0, -80.0, -36.0, 0.0)),
("32525","WGS 72BE / UTM zone 25S",(-36.0, -80.0, -30.0, 0.0)),
("32526","WGS 72BE / UTM zone 26S",(-30.0, -80.0, -24.0, 0.0)),
("32527","WGS 72BE / UTM zone 27S",(-24.0, -80.0, -18.0, 0.0)),
("32528","WGS 72BE / UTM zone 28S",(-18.0, -80.0, -12.0, 0.0)),
("32529","WGS 72BE / UTM zone 29S",(-12.0, -80.0, -6.0, 0.0)),
("32530","WGS 72BE / UTM zone 30S",(-6.0, -80.0, 0.0, 0.0)),
("32531","WGS 72BE / UTM zone 31S",(0.0, -80.0, 6.0, 0.0)),
("32532","WGS 72BE / UTM zone 32S",(6.0, -80.0, 12.0, 0.0)),
("32533","WGS 72BE / UTM zone 33S",(12.0, -80.0, 18.0, 0.0)),
("32534","WGS 72BE / UTM zone 34S",(18.0, -80.0, 24.0, 0.0)),
("32535","WGS 72BE / UTM zone 35S",(24.0, -80.0, 30.0, 0.0)),
("32536","WGS 72BE / UTM zone 36S",(30.0, -80.0, 36.0, 0.0)),
("32537","WGS 72BE / UTM zone 37S",(36.0, -80.0, 42.0, 0.0)),
("32538","WGS 72BE / UTM zone 38S",(42.0, -80.0, 48.0, 0.0)),
("32539","WGS 72BE / UTM zone 39S",(48.0, -80.0, 54.0, 0.0)),
("32540","WGS 72BE / UTM zone 40S",(54.0, -80.0, 60.0, 0.0)),
("32541","WGS 72BE / UTM zone 41S",(60.0, -80.0, 66.0, 0.0)),
("32542","WGS 72BE / UTM zone 42S",(66.0, -80.0, 72.0, 0.0)),
("32543","WGS 72BE / UTM zone 43S",(72.0, -80.0, 78.0, 0.0)),
("32544","WGS 72BE / UTM zone 44S",(78.0, -80.0, 84.0, 0.0)),
("32545","WGS 72BE / UTM zone 45S",(84.0, -80.0, 90.0, 0.0)),
("32546","WGS 72BE / UTM zone 46S",(90.0, -80.0, 96.0, 0.0)),
("32547","WGS 72BE / UTM zone 47S",(96.0, -80.0, 102.0, 0.0)),
("32548","WGS 72BE / UTM zone 48S",(102.0, -80.0, 108.0, 0.0)),
("32549","WGS 72BE / UTM zone 49S",(108.0, -80.0, 114.0, 0.0)),
("32550","WGS 72BE / UTM zone 50S",(114.0, -80.0, 120.0, 0.0)),
("32551","WGS 72BE / UTM zone 51S",(120.0, -80.0, 126.0, 0.0)),
("32552","WGS 72BE / UTM zone 52S",(126.0, -80.0, 132.0, 0.0)),
("32553","WGS 72BE / UTM zone 53S",(132.0, -80.0, 138.0, 0.0)),
("32554","WGS 72BE / UTM zone 54S",(138.0, -80.0, 144.0, 0.0)),
("32555","WGS 72BE / UTM zone 55S",(144.0, -80.0, 150.0, 0.0)),
("32556","WGS 72BE / UTM zone 56S",(150.0, -80.0, 156.0, 0.0)),
("32557","WGS 72BE / UTM zone 57S",(156.0, -80.0, 162.0, 0.0)),
("32558","WGS 72BE / UTM zone 58S",(162.0, -80.0, 168.0, 0.0)),
("32559","WGS 72BE / UTM zone 59S",(168.0, -80.0, 174.0, 0.0)),
("32560","WGS 72BE / UTM zone 60S",(174.0, -80.0, 180.0, 0.0)),
("32600","WGS 84 / UTM grid system (northern hemisphere)",(-180.0, 0.0, 180.0, 84.0)),
("32601","WGS 84 / UTM zone 1N",(-180.0, 0.0, -174.0, 84.0)),
("32602","WGS 84 / UTM zone 2N",(-174.0, 0.0, -168.0, 84.0)),
("32603","WGS 84 / UTM zone 3N",(-168.0, 0.0, -162.0, 84.0)),
("32604","WGS 84 / UTM zone 4N",(-162.0, 0.0, -156.0, 84.0)),
("32605","WGS 84 / UTM zone 5N",(-156.0, 0.0, -150.0, 84.0)),
("32606","WGS 84 / UTM zone 6N",(-150.0, 0.0, -144.0, 84.0)),
("32607","WGS 84 / UTM zone 7N",(-144.0, 0.0, -138.0, 84.0)),
("32608","WGS 84 / UTM zone 8N",(-138.0, 0.0, -132.0, 84.0)),
("32609","WGS 84 / UTM zone 9N",(-132.0, 0.0, -126.0, 84.0)),
("32610","WGS 84 / UTM zone 10N",(-126.0, 0.0, -120.0, 84.0)),
("32611","WGS 84 / UTM zone 11N",(-120.0, 0.0, -114.0, 84.0)),
("32612","WGS 84 / UTM zone 12N",(-114.0, 0.0, -108.0, 84.0)),
("32613","WGS 84 / UTM zone 13N",(-108.0, 0.0, -102.0, 84.0)),
("32614","WGS 84 / UTM zone 14N",(-102.0, 0.0, -96.0, 84.0)),
("32615","WGS 84 / UTM zone 15N",(-96.0, 0.0, -90.0, 84.0)),
("32616","WGS 84 / UTM zone 16N",(-90.0, 0.0, -84.0, 84.0)),
("32617","WGS 84 / UTM zone 17N",(-84.0, 0.0, -78.0, 84.0)),
("32618","WGS 84 / UTM zone 18N",(-78.0, 0.0, -72.0, 84.0)),
("32619","WGS 84 / UTM zone 19N",(-72.0, 0.0, -66.0, 84.0)),
("32620","WGS 84 / UTM zone 20N",(-66.0, 0.0, -60.0, 84.0)),
("32621","WGS 84 / UTM zone 21N",(-60.0, 0.0, -54.0, 84.0)),
("32622","WGS 84 / UTM zone 22N",(-54.0, 0.0, -48.0, 84.0)),
("32623","WGS 84 / UTM zone 23N",(-48.0, 0.0, -42.0, 84.0)),
("32624","WGS 84 / UTM zone 24N",(-42.0, 0.0, -36.0, 84.0)),
("32625","WGS 84 / UTM zone 25N",(-36.0, 0.0, -30.0, 84.0)),
("32626","WGS 84 / UTM zone 26N",(-30.0, 0.0, -24.0, 84.0)),
("32627","WGS 84 / UTM zone 27N",(-24.0, 0.0, -18.0, 84.0)),
("32628","WGS 84 / UTM zone 28N",(-18.0, 0.0, -12.0, 84.0)),
("32629","WGS 84 / UTM zone 29N",(-12.0, 0.0, -6.0, 84.0)),
("32630","WGS 84 / UTM zone 30N",(-6.0, 0.0, 0.0, 84.0)),
("32631","WGS 84 / UTM zone 31N",(0.0, 0.0, 6.0, 84.0)),
("32632","WGS 84 / UTM zone 32N",(6.0, 0.0, 12.0, 84.0)),
("32633","WGS 84 / UTM zone 33N",(12.0, 0.0, 18.0, 84.0)),
("32634","WGS 84 / UTM zone 34N",(18.0, 0.0, 24.0, 84.0)),
("32635","WGS 84 / UTM zone 35N",(24.0, 0.0, 30.0, 84.0)),
("32636","WGS 84 / UTM zone 36N",(30.0, 0.0, 36.0, 84.0)),
("32637","WGS 84 / UTM zone 37N",(36.0, 0.0, 42.0, 84.0)),
("32638","WGS 84 / UTM zone 38N",(42.0, 0.0, 48.0, 84.0)),
("32639","WGS 84 / UTM zone 39N",(48.0, 0.0, 54.0, 84.0)),
("32640","WGS 84 / UTM zone 40N",(54.0, 0.0, 60.0, 84.0)),
("32641","WGS 84 / UTM zone 41N",(60.0, 0.0, 66.0, 84.0)),
("32642","WGS 84 / UTM zone 42N",(66.0, 0.0, 72.0, 84.0)),
("32643","WGS 84 / UTM zone 43N",(72.0, 0.0, 78.0, 84.0)),
("32644","WGS 84 / UTM zone 44N",(78.0, 0.0, 84.0, 84.0)),
("32645","WGS 84 / UTM zone 45N",(84.0, 0.0, 90.0, 84.0)),
("32646","WGS 84 / UTM zone 46N",(90.0, 0.0, 96.0, 84.0)),
("32647","WGS 84 / UTM zone 47N",(96.0, 0.0, 102.0, 84.0)),
("32648","WGS 84 / UTM zone 48N",(102.0, 0.0, 108.0, 84.0)),
("32649","WGS 84 / UTM zone 49N",(108.0, 0.0, 114.0, 84.0)),
("32650","WGS 84 / UTM zone 50N",(114.0, 0.0, 120.0, 84.0)),
("32651","WGS 84 / UTM zone 51N",(120.0, 0.0, 126.0, 84.0)),
("32652","WGS 84 / UTM zone 52N",(126.0, 0.0, 132.0, 84.0)),
("32653","WGS 84 / UTM zone 53N",(132.0, 0.0, 138.0, 84.0)),
("32654","WGS 84 / UTM zone 54N",(138.0, 0.0, 144.0, 84.0)),
("32655","WGS 84 / UTM zone 55N",(144.0, 0.0, 150.0, 84.0)),
("32656","WGS 84 / UTM zone 56N",(150.0, 0.0, 156.0, 84.0)),
("32657","WGS 84 / UTM zone 57N",(156.0, 0.0, 162.0, 84.0)),
("32658","WGS 84 / UTM zone 58N",(162.0, 0.0, 168.0, 84.0)),
("32659","WGS 84 / UTM zone 59N",(168.0, 0.0, 174.0, 84.0)),
("32660","WGS 84 / UTM zone 60N",(174.0, 0.0, 180.0, 84.0)),
("32661","WGS 84 / UPS North (N,E)",(-180.0, 60.0, 180.0, 90.0)),
("32662","WGS 84 / Plate Carree",(-180.0, -90.0, 180.0, 90.0)),
("32663","WGS 84 / World Equidistant Cylindrical",(-180.0, -90.0, 180.0, 90.0)),
("32664","WGS 84 / BLM 14N (ftUS)",(-97.22, 25.97, -95.87, 28.43)),
("32665","WGS 84 / BLM 15N (ftUS)",(-96.0, 25.61, -89.86, 29.73)),
("32666","WGS 84 / BLM 16N (ftUS)",(-90.01, 23.95, -83.91, 30.25)),
("32667","WGS 84 / BLM 17N (ftUS)",(-84.09, 23.82, -81.17, 29.94)),
("32700","WGS 84 / UTM grid system (southern hemisphere)",(-180.0, -80.0, 180.0, 0.0)),
("32701","WGS 84 / UTM zone 1S",(-180.0, -80.0, -174.0, 0.0)),
("32702","WGS 84 / UTM zone 2S",(-174.0, -80.0, -168.0, 0.0)),
("32703","WGS 84 / UTM zone 3S",(-168.0, -80.0, -162.0, 0.0)),
("32704","WGS 84 / UTM zone 4S",(-162.0, -80.0, -156.0, 0.0)),
("32705","WGS 84 / UTM zone 5S",(-156.0, -80.0, -150.0, 0.0)),
("32706","WGS 84 / UTM zone 6S",(-150.0, -80.0, -144.0, 0.0)),
("32707","WGS 84 / UTM zone 7S",(-144.0, -80.0, -138.0, 0.0)),
("32708","WGS 84 / UTM zone 8S",(-138.0, -80.0, -132.0, 0.0)),
("32709","WGS 84 / UTM zone 9S",(-132.0, -80.0, -126.0, 0.0)),
("32710","WGS 84 / UTM zone 10S",(-126.0, -80.0, -120.0, 0.0)),
("32711","WGS 84 / UTM zone 11S",(-120.0, -80.0, -114.0, 0.0)),
("32712","WGS 84 / UTM zone 12S",(-114.0, -80.0, -108.0, 0.0)),
("32713","WGS 84 / UTM zone 13S",(-108.0, -80.0, -102.0, 0.0)),
("32714","WGS 84 / UTM zone 14S",(-102.0, -80.0, -96.0, 0.0)),
("32715","WGS 84 / UTM zone 15S",(-96.0, -80.0, -90.0, 0.0)),
("32716","WGS 84 / UTM zone 16S",(-90.0, -80.0, -84.0, 0.0)),
("32717","WGS 84 / UTM zone 17S",(-84.0, -80.0, -78.0, 0.0)),
("32718","WGS 84 / UTM zone 18S",(-78.0, -80.0, -72.0, 0.0)),
("32719","WGS 84 / UTM zone 19S",(-72.0, -80.0, -66.0, 0.0)),
("32720","WGS 84 / UTM zone 20S",(-66.0, -80.0, -60.0, 0.0)),
("32721","WGS 84 / UTM zone 21S",(-60.0, -80.0, -54.0, 0.0)),
("32722","WGS 84 / UTM zone 22S",(-54.0, -80.0, -48.0, 0.0)),
("32723","WGS 84 / UTM zone 23S",(-48.0, -80.0, -42.0, 0.0)),
("32724","WGS 84 / UTM zone 24S",(-42.0, -80.0, -36.0, 0.0)),
("32725","WGS 84 / UTM zone 25S",(-36.0, -80.0, -30.0, 0.0)),
("32726","WGS 84 / UTM zone 26S",(-30.0, -80.0, -24.0, 0.0)),
("32727","WGS 84 / UTM zone 27S",(-24.0, -80.0, -18.0, 0.0)),
("32728","WGS 84 / UTM zone 28S",(-18.0, -80.0, -12.0, 0.0)),
("32729","WGS 84 / UTM zone 29S",(-12.0, -80.0, -6.0, 0.0)),
("32730","WGS 84 / UTM zone 30S",(-6.0, -80.0, 0.0, 0.0)),
("32731","WGS 84 / UTM zone 31S",(0.0, -80.0, 6.0, 0.0)),
("32732","WGS 84 / UTM zone 32S",(6.0, -80.0, 12.0, 0.0)),
("32733","WGS 84 / UTM zone 33S",(12.0, -80.0, 18.0, 0.0)),
("32734","WGS 84 / UTM zone 34S",(18.0, -80.0, 24.0, 0.0)),
("32735","WGS 84 / UTM zone 35S",(24.0, -80.0, 30.0, 0.0)),
("32736","WGS 84 / UTM zone 36S",(30.0, -80.0, 36.0, 0.0)),
("32737","WGS 84 / UTM zone 37S",(36.0, -80.0, 42.0, 0.0)),
("32738","WGS 84 / UTM zone 38S",(42.0, -80.0, 48.0, 0.0)),
("32739","WGS 84 / UTM zone 39S",(48.0, -80.0, 54.0, 0.0)),
("32740","WGS 84 / UTM zone 40S",(54.0, -80.0, 60.0, 0.0)),
("32741","WGS 84 / UTM zone 41S",(60.0, -80.0, 66.0, 0.0)),
("32742","WGS 84 / UTM zone 42S",(66.0, -80.0, 72.0, 0.0)),
("32743","WGS 84 / UTM zone 43S",(72.0, -80.0, 78.0, 0.0)),
("32744","WGS 84 / UTM zone 44S",(78.0, -80.0, 84.0, 0.0)),
("32745","WGS 84 / UTM zone 45S",(84.0, -80.0, 90.0, 0.0)),
("32746","WGS 84 / UTM zone 46S",(90.0, -80.0, 96.0, 0.0)),
("32747","WGS 84 / UTM zone 47S",(96.0, -80.0, 102.0, 0.0)),
("32748","WGS 84 / UTM zone 48S",(102.0, -80.0, 108.0, 0.0)),
("32749","WGS 84 / UTM zone 49S",(108.0, -80.0, 114.0, 0.0)),
("32750","WGS 84 / UTM zone 50S",(114.0, -80.0, 120.0, 0.0)),
("32751","WGS 84 / UTM zone 51S",(120.0, -80.0, 126.0, 0.0)),
("32752","WGS 84 / UTM zone 52S",(126.0, -80.0, 132.0, 0.0)),
("32753","WGS 84 / UTM zone 53S",(132.0, -80.0, 138.0, 0.0)),
("32754","WGS 84 / UTM zone 54S",(138.0, -80.0, 144.0, 0.0)),
("32755","WGS 84 / UTM zone 55S",(144.0, -80.0, 150.0, 0.0)),
("32756","WGS 84 / UTM zone 56S",(150.0, -80.0, 156.0, 0.0)),
("32757","WGS 84 / UTM zone 57S",(156.0, -80.0, 162.0, 0.0)),
("32758","WGS 84 / UTM zone 58S",(162.0, -80.0, 168.0, 0.0)),
("32759","WGS 84 / UTM zone 59S",(168.0, -80.0, 174.0, 0.0)),
("32760","WGS 84 / UTM zone 60S",(174.0, -80.0, 180.0, 0.0)),
("32761","WGS 84 / UPS South (N,E)",(-180.0, -90.0, 180.0, -60.0)),
("32766","WGS 84 / TM 36 SE",(32.64, -27.71, 43.03, -10.09))
)

def method(lists, value):
    return next(i for i, v in enumerate(lists) if value in v)

def checkbounds(bounds,lat,lon):
    if bounds[0] <= lon <= bounds[2]:
        if bounds[1] <=lat <= bounds[3]:
            checkvalue = 1
        else: checkvalue = 0
    else: checkvalue = 0
    return checkvalue

def availableCRS(lat,lon):
	crslist = []
	for i in CRS:
		if checkbounds(i[2],lat,lon) == 1:
			crslist.append(i)
		else: pass
	return crslist